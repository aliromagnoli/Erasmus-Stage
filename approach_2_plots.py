# -*- coding: utf-8 -*-
"""Neural_Network_plots.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h6XPGaWM3rASrYc2iI6g5OwsDgPbLS5Q
"""

import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from itertools import cycle

#import of nn results
path = os.getcwd() + "\\results"
results = pd.read_csv(path + "\\approach_2_all_epochs_results.csv", index_col=0)

print(results.shape)
print(results.head())

folds = len(results["fold"].unique()) * len(results["iteration"].unique())
n_epochs = len(results["epoch"].unique())

for m in ["recall", "precision", "loss"]: #for every metric

  y = results[["set", "epoch" , m]].copy()

  #test epochs are numbered from 1 to number of epochs
  #then test scores are averaged
  i = iter(range(1, n_epochs+1))
  y.loc[y["set"]=="test", "epoch"] = y.loc[y["set"]=="test"].index.map(dict(zip(y.loc[y["set"]=="test"].index, cycle(i))))
  y.loc[y["set"]=="test", m] = round(y.loc[y["set"] == "test", m].mean(), 3)

  #plot
      
  sns.set(rc = {'figure.figsize':(15,5)})
  plt.figure()
  y = y.sort_values(by=['epoch'])
  g = sns.lineplot(data=y, x="epoch", y=m, hue="set", linewidth=2.5).set(title=m)
  plt.xticks(range(0, n_epochs+1), range(0, n_epochs+1))
  plt.show()



"""
new_results = round(results.groupby(["set", "epoch"]).mean(), 3).copy()
new_results.reset_index(level=0, inplace=True)
new_results.reset_index(level=0, inplace=True)

#adjusting test rows
x = round(new_results.loc[new_results["set"] == "test", new_results.columns != "set"].mean(), 3)
x = pd.DataFrame(x).T
x["set"] = "test"

#replacing test rows
new_results.drop(new_results[new_results["set"]=="test"].index, inplace=True)
x = pd.concat([x, pd.DataFrame(([x]*(n_epochs-1))[0])], ignore_index=True, axis=0)

new_results = pd.concat([new_results, x], axis=0)
new_results.head()
new_results.reset_index(level=0, inplace=True)

for m in ["recall", "precision", "loss"]: #for every metric

  data = pd.DataFrame()

  for j in new_results["set"].unique(): #for every set

    #better display of results

    y = new_results.loc[(new_results["set"]==j),  ["set", "epoch"]]
    y["value"] = new_results.loc[(new_results["set"]==j), m]
    y["set"] = j
    
    if j == "test": 
        y["iteration"] = list(range(1,n_epochs+1))
    else: 
        y["iteration"] = y["epoch"].astype(int)

    data = pd.concat([data, y], axis=0)

  data.drop("epoch", axis=1, inplace=True)

  data= data.reset_index(drop=True)

  #plot
      
  sns.set(rc = {'figure.figsize':(15,5)})
  plt.figure()
  data = data.sort_values(by=['iteration'])
  g = sns.lineplot(data=data, x="iteration", y="value", hue="set", linewidth=2.5).set(title=m)
  plt.xticks(range(0, n_epochs+1), range(0, n_epochs+1))
  plt.show()

"""
