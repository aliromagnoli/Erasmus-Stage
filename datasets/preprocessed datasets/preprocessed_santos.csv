,label,text,text_clean,Li H,Sjöstrom J,Palomba F,Scaffidi C,Inoue K,Ariyakul Y,Nakamoto T,Gao X,Deng RH,Tarwani S,Luo D,Zhou J,Gupta A,De Lucia A,Black AP,Li S,Nardes M,Mangiacavalli M,Mezini M,Tishelman C,Freiherr J,Kitamura Y,Kraus AA,Guignard C,Martin N,Ma W,Trinh YM,Marr S,Monares A,Zanutto A,Altbäcker V,Amasaki S,Kianzad MR,Hati KM,Bertino E,Li J,Valle P,Randall D,Görg C,Fernando ON,Nii H,Fields J,Toome M,Baragli P,Xu S,Xie L,Elbaum S,Van Boxstael S,Hynes S,Shengdong Zhao,van Emden E,Pinto JM,Nagy C,Gordillo JL,Benjathanachat K,Kamarudin K,Campagna S,Guéguen N,Niimi A,Jamroz P,Garrido A,Berreby S,Inai Y,Iwanaga M,Craig PO,Herold S,James NC,Soltanifar B,Wilson KM,Cheaha D,Miyasato T,Bodnar A,Chen HH,Case TI,Zhang R,Le V,Blignaut P,Kapella M,Cantamesse M,Landgraf R,Okunlola MA,Yan-Ying L,Amorim L,Ribeiro M,Coulon F,Chua D,Le WL,Nguyen TT,Rybárová R,Ajoux P,Sun H,Guéhéneuc YG,Stoller M,Hense H,Porter K,Mattozo CA,Zampetti F,Hettish M,Viitamaa T,Haapalinna A,Rompaey BV,Lanata A,Salay E,Babi ć D,Mongiovi M,Chávez A,DeVoe SE,Claeson AS,Adinkrah M,Ørbæk P,Cavanagh B,Kara İ,Hagar J,Elvevoll EO,Annur S,Vogt R,Nelson EC,Tarczynski A,Grach C,Techapalokul P,Rosen DE,Nazaradeh D,Chen TH,Olague G,Utsumiya K,Junker M,Kührová P,Ristenpart T,Fett D,Ahmad M,Gholizadeh H,Yahyavi ES,Dias B,Nourbakhsh I,Trabanino RJ,Charumporn B,Codabux Z,Gueheneuc YG,Gopinath R,Staa A,Rahman F,publication_date_2005,publication_date_2017
0,0,"Exposure to foods' non-taste sensory properties. A nursery intervention to increase children's willingness to try fruit and vegetables Activities that engage young children with the sensory properties of foods are popular with nursery schools, despite the lack of evidence for their efficacy in increasing children's consumption of healthy foods. This study provides the first empirical exploration of the effectiveness of a non-taste sensory activity program in a nursery school setting. Ninety-two children aged between 12 and 36 months were allocated either to an intervention group, who took part in looking, listening, feeling and smelling activities with unusual fruits and vegetables every day for 4 weeks, or to a non-intervention control group. In a subsequent mealtime taste test, children touched and tasted more of the vegetables to which they had been familiarized in their playtime activities than of a matched set of non-exposed foods. The results demonstrate that hands-on activities with unfamiliar fruits and vegetables can enhance children's willingness to taste these foods, and confirm the potential for such activities to support healthy eating initiatives. Repeated exposure, Sensory interaction, Fruit and vegetables, Nursery intervention, Food familiarity",exposure to foods non taste sensory properties a nursery intervention to increase children s willingness to try fruit and vegetables activities that engage young children with the sensory properties of foods are popular with nursery schools despite the lack of evidence for their efficacy in increasing children s consumption of healthy foods this study provides the first empirical exploration of the effectiveness of a non taste sensory activity program in a nursery school setting ninety two children aged between 12 and 36 months were allocated either to an intervention group who took part in looking listening feeling and smelling activities with unusual fruits and vegetables every day for 4 weeks or to a non intervention control group in a subsequent mealtime taste test children touched and tasted more of the vegetables to which they had been familiarized in their playtime activities than of a matched set of non exposed foods the results demonstrate that hands on activities with unfamiliar fruits and vegetables can enhance children s willingness to taste these foods and confirm the potential for such activities to support healthy eating initiatives repeated exposure sensory interaction fruit and vegetables nursery intervention food familiarity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
1,0,"Simultaneous extraction of nicotine and solanesol from waste tobacco materials by the column chromatographic extraction method and their separation and purification The tobacco (Nicotiana tabacum L.) cultivation and cigarettes manufacture industries discard huge amount of waste tobacco materials that have strong nicotine smell and contaminate the environment. A high-efficient procedure was developed for simultaneously extracting nicotine and solanesol from the waste tobacco leaf vein through the column-chromatographic extraction (CCE), followed by automatically separating and simply purifying them. Dried material powder was loaded into columns and eluted with the optimal extraction solvent of petroleum ether (PE):95% alkali ethanol (4:6). Greater than 96% extraction efficiency for both nicotine and solanesol was obtained with a 2-fold excess solvent of the material (v/w) through a cyclic CCE procedure in small-scale and scaled-up experiments. The extraction solution was separated into an ethanol-aqueous phase containing 98% nicotine and an ether phase containing 96% solanesol at pH 2.0. The ethanol-aqueous phase was vacuum-concentrated to aqueous, and 99% purity nicotine was obtained by ether fractionation of the aqueous at pH 10.0. Solanesol in the ether phase was purified to 93.1% by one time silica gel column chromatography. All processes were completed at room temperature and all solvents used were completely recovered for reuse. This work provides an extensively simplified procedure to economically utilize the tobacco wastes. Waste tobacco material, Column chromatographic extraction, Purification, Nicotine, Solanesol",simultaneous extraction of nicotine and solanesol from waste tobacco materials by the column chromatographic extraction method and their separation and purification the tobacco nicotiana tabacum l cultivation and cigarettes manufacture industries discard huge amount of waste tobacco materials that have strong nicotine smell and contaminate the environment a high efficient procedure was developed for simultaneously extracting nicotine and solanesol from the waste tobacco leaf vein through the column chromatographic extraction cce followed by automatically separating and simply purifying them dried material powder was loaded into columns and eluted with the optimal extraction solvent of petroleum ether pe 95 alkali ethanol 4 6 greater than 96 extraction efficiency for both nicotine and solanesol was obtained with a 2 fold excess solvent of the material v w through a cyclic cce procedure in small scale and scaled up experiments the extraction solution was separated into an ethanol aqueous phase containing 98 nicotine and an ether phase containing 96 solanesol at ph 2 0 the ethanol aqueous phase was vacuum concentrated to aqueous and 99 purity nicotine was obtained by ether fractionation of the aqueous at ph 10 0 solanesol in the ether phase was purified to 93 1 by one time silica gel column chromatography all processes were completed at room temperature and all solvents used were completely recovered for reuse this work provides an extensively simplified procedure to economically utilize the tobacco wastes waste tobacco material column chromatographic extraction purification nicotine solanesol,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
2,0,"Eye white may indicate emotional state on a frustration--contentedness axis in dairy cows Research on welfare indicators has focused primarily on indicators of poor welfare, but there is also a need for indicators that can cover the range from good to poor welfare. The aim of this experiment was to compare behaviour elements in dairy cows shown in response to a frustrative situation as well as elements shown as a response to pleasant, desirable stimuli, and in particular measure the visible percentage of white in the eyes. The subjects of the study were 24 randomly selected dairy cows, 12 in each group, all Norwegian Red Cattle. In a 6min test of hungry cows, access to food and food deprivation were used as positive and frustrating situations, respectively. The cows of the positive stimulus group were fed normally from a rectangular wooden box. When the deprived animals were introduced to the stimulus, the box had a top of Plexiglas with holes so that the cows could both see and smell the food, but were unable to reach it. All cows were habituated to the box before the experiment started. All food-deprived cows showed at least one of these behaviours: aggressiveness (the most frequent), stereotypies, vocalization, and head shaking, while these behaviour patterns were never observed among cows given food. The percentage of white of the total visible eye area was larger than normal in the food-deprived cows, gradually increasing until 4min after test starts, while it was consistently lower than normal in the cows that were fed. The percentage of white correlated positively with the number of aggressive buts in deprived cows. The results suggest that the eye white may be a dynamic indicator of emotions in dairy cattle on a frustration--contentedness axis. Animal welfare, Behavioural indicators, Emotional expression, Food deprivation, Eye",eye white may indicate emotional state on a frustration contentedness axis in dairy cows research on welfare indicators has focused primarily on indicators of poor welfare but there is also a need for indicators that can cover the range from good to poor welfare the aim of this experiment was to compare behaviour elements in dairy cows shown in response to a frustrative situation as well as elements shown as a response to pleasant desirable stimuli and in particular measure the visible percentage of white in the eyes the subjects of the study were 24 randomly selected dairy cows 12 in each group all norwegian red cattle in a 6min test of hungry cows access to food and food deprivation were used as positive and frustrating situations respectively the cows of the positive stimulus group were fed normally from a rectangular wooden box when the deprived animals were introduced to the stimulus the box had a top of plexiglas with holes so that the cows could both see and smell the food but were unable to reach it all cows were habituated to the box before the experiment started all food deprived cows showed at least one of these behaviours aggressiveness the most frequent stereotypies vocalization and head shaking while these behaviour patterns were never observed among cows given food the percentage of white of the total visible eye area was larger than normal in the food deprived cows gradually increasing until 4min after test starts while it was consistently lower than normal in the cows that were fed the percentage of white correlated positively with the number of aggressive buts in deprived cows the results suggest that the eye white may be a dynamic indicator of emotions in dairy cattle on a frustration contentedness axis animal welfare behavioural indicators emotional expression food deprivation eye,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
3,0,"Mating behaviour and chemical communication in the invasive Chinese mitten crab Eriocheir sinensis Mating in the Chinese mitten crab (Eriocheir sinensis) was examined; in particular the nature of mating and the role of sex pheromones. A semi-lunar periodicity (16.8 days and 14.5 days, respectively) was observed in the mating frequencies in two consecutive breeding seasons (2001--2002 and 2002--2003). This semi-lunar rhythm coincided with spring tides (full and new moon), and activity peaked in November. Observation of the progression of specific behaviour types in mating and non-mating pairs revealed that pairs which would go on to complete mating progressed from fighting to mating behaviour significantly faster than non-mating pairs. These findings indicate that mate recognition occurs only after physical contact. Reproductively active pairs (ascertained from mating experiments) were then used for several bioassays aiming to assess under which conditions pheromones may be released by females. Firstly, male E. sinensis were exposed to female smell in an actograph experiment and secondly, male antennule flick rate was recorded before and after exposure to the urine of a sexually active female. In both cases no change in male E. sinensis behaviour was observed. Both experiments used females which had not had immediately prior exposure to males. However, in further experiments using water where mating had occurred, a significant response in antennule flick rate was triggered. Finally, a sponge assay was used in order to test the male attraction to a sponge injected with a water sample of varying concentrations (0.5×, 1×, 3×, 4.5×, 9×) of female smell. These samples were conditioned using a female immediately following a mating attempt. Males tried to grasp the sponge at 3× increased concentrations or higher. In conclusion, this study found no indication that E. sinensis females release a distance pheromone, but instead that mate recognition occurs after physical contact between male and female, most likely via a contact pheromone. Chinese mitten crab, , Mating, Non-indigenous species, Pheromone, Semi-lunar rhythm",mating behaviour and chemical communication in the invasive chinese mitten crab eriocheir sinensis mating in the chinese mitten crab eriocheir sinensis was examined in particular the nature of mating and the role of sex pheromones a semi lunar periodicity 16 8 days and 14 5 days respectively was observed in the mating frequencies in two consecutive breeding seasons 2001 2002 and 2002 2003 this semi lunar rhythm coincided with spring tides full and new moon and activity peaked in november observation of the progression of specific behaviour types in mating and non mating pairs revealed that pairs which would go on to complete mating progressed from fighting to mating behaviour significantly faster than non mating pairs these findings indicate that mate recognition occurs only after physical contact reproductively active pairs ascertained from mating experiments were then used for several bioassays aiming to assess under which conditions pheromones may be released by females firstly male e sinensis were exposed to female smell in an actograph experiment and secondly male antennule flick rate was recorded before and after exposure to the urine of a sexually active female in both cases no change in male e sinensis behaviour was observed both experiments used females which had not had immediately prior exposure to males however in further experiments using water where mating had occurred a significant response in antennule flick rate was triggered finally a sponge assay was used in order to test the male attraction to a sponge injected with a water sample of varying concentrations 0 5 1 3 4 5 9 of female smell these samples were conditioned using a female immediately following a mating attempt males tried to grasp the sponge at 3 increased concentrations or higher in conclusion this study found no indication that e sinensis females release a distance pheromone but instead that mate recognition occurs after physical contact between male and female most likely via a contact pheromone chinese mitten crab mating non indigenous species pheromone semi lunar rhythm,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
4,0,"Optimizing the experimental design of soil columns in saturated and unsaturated transport experiments Soil column experiments in both the saturated and unsaturated regimes are widely used for applied and theoretical studies in such diverse fields as transport model evaluation, fate and transport of pesticides, explosives, microbes, heavy metals and non aqueous phase liquids, and for evapotranspiration studies. The apparent simplicity of constructing soil columns conceals a number of technical issues which can seriously affect the outcome of an experiment, such as the presence or absence of macropores, artificial preferential flow paths, non-ideal infiltrate injection and unrealistic moisture regimes. This review examines the literature to provide an analysis of the state of the art for constructing both saturated and unsaturated soil columns. Common design challenges are discussed and best practices for potential solutions are presented. This article discusses both basic principles and the practical advantages and disadvantages of various experimental approaches. Both repacked and monolith-type columns are discussed. The information in this review will assist soil scientists, hydrogeologists and environmental professionals in optimizing the construction and operation of soil column experiments in order to achieve their objectives, while avoiding serious design flaws which can compromise the integrity of their results. Soil column, Design, Review",optimizing the experimental design of soil columns in saturated and unsaturated transport experiments soil column experiments in both the saturated and unsaturated regimes are widely used for applied and theoretical studies in such diverse fields as transport model evaluation fate and transport of pesticides explosives microbes heavy metals and non aqueous phase liquids and for evapotranspiration studies the apparent simplicity of constructing soil columns conceals a number of technical issues which can seriously affect the outcome of an experiment such as the presence or absence of macropores artificial preferential flow paths non ideal infiltrate injection and unrealistic moisture regimes this review examines the literature to provide an analysis of the state of the art for constructing both saturated and unsaturated soil columns common design challenges are discussed and best practices for potential solutions are presented this article discusses both basic principles and the practical advantages and disadvantages of various experimental approaches both repacked and monolith type columns are discussed the information in this review will assist soil scientists hydrogeologists and environmental professionals in optimizing the construction and operation of soil column experiments in order to achieve their objectives while avoiding serious design flaws which can compromise the integrity of their results soil column design review,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
5,0,"An experimental investigation on the innate relationship between quality and refactoring Previous studies have investigated the reasons behind refactoring operations performed by developers, and proposed methods and tools to recommend refactorings based on quality metric profiles, or on the presence of poor design and implementation choices, i.e., code smells. Nevertheless, the existing literature lacks observations about the relations between metrics/code smells and refactoring activities performed by developers. In other words, the characteristics of code components increasing/decreasing their chances of being object of refactoring operations are still unknown. This paper aims at bridging this gap. Specifically, we mined the evolution history of three Java open source projects to investigate whether refactoring activities occur on code components for which certain indicators---such as quality metrics or the presence of smells as detected by tools---suggest there might be need for refactoring operations. Results indicate that, more often than not, quality metrics do not show a clear relationship with refactoring. In other words, refactoring operations are generally focused on code components for which quality metrics do not suggest there might be need for refactoring operations. Finally, 42% of refactoring operations are performed on code entities affected by code smells. However, only 7% of the performed operations actually remove the code smells from the affected class. Refactoring, Code smells, Empirical study",an experimental investigation on the innate relationship between quality and refactoring previous studies have investigated the reasons behind refactoring operations performed by developers and proposed methods and tools to recommend refactorings based on quality metric profiles or on the presence of poor design and implementation choices i e code smells nevertheless the existing literature lacks observations about the relations between metrics code smells and refactoring activities performed by developers in other words the characteristics of code components increasing decreasing their chances of being object of refactoring operations are still unknown this paper aims at bridging this gap specifically we mined the evolution history of three java open source projects to investigate whether refactoring activities occur on code components for which certain indicators such as quality metrics or the presence of smells as detected by tools suggest there might be need for refactoring operations results indicate that more often than not quality metrics do not show a clear relationship with refactoring in other words refactoring operations are generally focused on code components for which quality metrics do not suggest there might be need for refactoring operations finally 42 of refactoring operations are performed on code entities affected by code smells however only 7 of the performed operations actually remove the code smells from the affected class refactoring code smells empirical study,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
6,0,"Utility and accuracy of smell-driven performance analysis for end-user programmers This paper proposes a technique, called smell-driven performance analysis (SDPA), which automatically provides situated explanations within a visual dataflow language IDE to help end-user programmers to overcome performance problems without leaving the visual dataflow paradigm. An experiment showed SDPA increased end-user programmers' success rates at finding performance problems and decreased the time required for finding solutions. Another study, based on using SDPA to analyze a corpus of example end-user programs, revealed that it is usually accurate at identifying performance problems. Based on these results, we conclude that SDPA provides a reliable basis for helping end-user programmers to troubleshoot performance problems, as well as a potential foundation for future work aimed at training users and at aiding code reuse. End-user programming, Performance, Visual language",utility and accuracy of smell driven performance analysis for end user programmers this paper proposes a technique called smell driven performance analysis sdpa which automatically provides situated explanations within a visual dataflow language ide to help end user programmers to overcome performance problems without leaving the visual dataflow paradigm an experiment showed sdpa increased end user programmers success rates at finding performance problems and decreased the time required for finding solutions another study based on using sdpa to analyze a corpus of example end user programs revealed that it is usually accurate at identifying performance problems based on these results we conclude that sdpa provides a reliable basis for helping end user programmers to troubleshoot performance problems as well as a potential foundation for future work aimed at training users and at aiding code reuse end user programming performance visual language,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
7,0,"Not all `predator odours' are equal: cat odour but not 2,4,5 trimethylthiazoline (TMT; fox odour) elicits specific defensive behaviours in rats The behavioural responses to two commonly used `predator odours' were assessed in male Wistar rats. Cat odour was presented to rats in the form of a piece of collar that had been worn by a domestic cat. Fox odour was presented in an equivalent piece of (unworn) collar that had been impregnated with 2,4,5 Trimethylthiazoline (TMT)---an extract of fox faeces. Other rats were exposed to collars containing Triethylamine (TEA), a putrid fishy smell, or formaldehyde, which has an acrid irritating smell. Experiment 1 showed that rats approached cat odour, TMT and TEA significantly less than they did an unworn collar. However, only cat odour increased retreat to the hide box, reduced locomotor activity and elicited `head out' behaviour. When tested immediately after odour exposure, only cat odour exposed rats showed increased anxiety in the elevated plus maze and suppressed activity in a 90-min general activity test. When returned to the odour-paired environment 24 h later in the absence of test odours, only rats that had previously received cat odour showed evidence of conditioned fear. Experiment 2 showed that rats given the benzodiazepine drug midazolam (0.5 mg/kg) display increased approach and decreased defensiveness towards a cat odour impregnated collar. In contrast, midazolam accentuated the avoidance of TMT and formaldehyde containing collars. Experiment 3 showed that when cat odour was presented in a small, enclosed environment, rats display increased body immobility, decreased grooming and increased orientation towards the odour-exuding stimulus. These responses were not seen with TMT or TEA containing collars. Taken together, these results suggest that while cat odour strongly elicits specific defensive behaviours in rats, TMT has effects that are more characteristic of an aversive odour. We suggest that the results of some previous studies using TMT may need to be reassessed. Anxiety, Predator, Cat odour, Fox odour, TMT, Aversion, Risk assessment",not all predator odours are equal cat odour but not 2 4 5 trimethylthiazoline tmt fox odour elicits specific defensive behaviours in rats the behavioural responses to two commonly used predator odours were assessed in male wistar rats cat odour was presented to rats in the form of a piece of collar that had been worn by a domestic cat fox odour was presented in an equivalent piece of unworn collar that had been impregnated with 2 4 5 trimethylthiazoline tmt an extract of fox faeces other rats were exposed to collars containing triethylamine tea a putrid fishy smell or formaldehyde which has an acrid irritating smell experiment 1 showed that rats approached cat odour tmt and tea significantly less than they did an unworn collar however only cat odour increased retreat to the hide box reduced locomotor activity and elicited head out behaviour when tested immediately after odour exposure only cat odour exposed rats showed increased anxiety in the elevated plus maze and suppressed activity in a 90 min general activity test when returned to the odour paired environment 24 h later in the absence of test odours only rats that had previously received cat odour showed evidence of conditioned fear experiment 2 showed that rats given the benzodiazepine drug midazolam 0 5 mg kg display increased approach and decreased defensiveness towards a cat odour impregnated collar in contrast midazolam accentuated the avoidance of tmt and formaldehyde containing collars experiment 3 showed that when cat odour was presented in a small enclosed environment rats display increased body immobility decreased grooming and increased orientation towards the odour exuding stimulus these responses were not seen with tmt or tea containing collars taken together these results suggest that while cat odour strongly elicits specific defensive behaviours in rats tmt has effects that are more characteristic of an aversive odour we suggest that the results of some previous studies using tmt may need to be reassessed anxiety predator cat odour fox odour tmt aversion risk assessment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
8,0,"Over-exposed classes in Java: An empirical study Java access modifiers regulate interactions among software components. In particular, class modifiers specify which classes from a component are publicly exposed and therefore belong to the component public interface. Restricting the accessibility as specified by a programmer is key to ensure a proper software modularity. It has been said that failing to do so is likely to produce maintenance problems, poor system quality, and architecture decay. However, how developers uses class access modifiers or how inadequate access modifiers affect software systems has not been investigated yet in the literature. In this work, we empirically analyze the use of class access modifiers across a collection of 15 Java libraries and 15 applications, totaling over 3.6M lines of code. We have found that an average of 25% of classes are over-exposed, i.e., classes defined with an accessibility that is broader than necessary. A number of code patterns involving over-exposed classes have been formalized, characterizing programmers׳ habits. Furthermore, we propose an Eclipse plugin to make component public interfaces match with the programmer׳s intent. Class accessibility, Modularity, Over-exposed classes, Java systems",over exposed classes in java an empirical study java access modifiers regulate interactions among software components in particular class modifiers specify which classes from a component are publicly exposed and therefore belong to the component public interface restricting the accessibility as specified by a programmer is key to ensure a proper software modularity it has been said that failing to do so is likely to produce maintenance problems poor system quality and architecture decay however how developers uses class access modifiers or how inadequate access modifiers affect software systems has not been investigated yet in the literature in this work we empirically analyze the use of class access modifiers across a collection of 15 java libraries and 15 applications totaling over 3 6m lines of code we have found that an average of 25 of classes are over exposed i e classes defined with an accessibility that is broader than necessary a number of code patterns involving over exposed classes have been formalized characterizing programmers habits furthermore we propose an eclipse plugin to make component public interfaces match with the programmer s intent class accessibility modularity over exposed classes java systems,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
9,0,"Dependency Oriented Complexity Metrics to Detect Rippling Related Design Defects Even though object oriented software development has gained popularity due to its inherent features, it also throws challenges in early detection of defects during design phase. Detection of design defects helps in performing appropriate refactorings in improving the quality of design. Literature indicates that active research is going on in detecting design defects using metrics. The present paper introduces a set of metrics for detecting defects in object oriented designs caused by the presence of shotgun surgery and divergent change bad smells. These metrics are, dependency oriented complexity metric for structure (DOCMS(R)), dependen-cy oriented complexity metric for an artifact causing ripples (DOCMA(CR)), and dependency oriented complexity metric for an artifact affected by ripples (DOCMA(AR)). The proposed me-trics have been computed for four cases. These metrics are used successfully in detecting design defects and complexity. In the present study DOCMA(CR) metric value indicated the presence of shotgun surgery bad smell, whereas DOCMA(AR) metric value indicated the presence of divergent change bad smell. DOCMS(R) metric value indicated the increase in complexity of structure (ar-chitecture) when the design defects are present. Detecting bad smells helps in performing appropriate refactorings to make the software maintainable and to improve the quality of software. dcoupling, dependency oriented complexity metric for an artifact affected by ripples (DOCMA(AR)), dependency oriented complexity metric for an artifact causing ripples (DOCMA(CR)), dependency oriented complexity metric for structure (DOCMS(R))",dependency oriented complexity metrics to detect rippling related design defects even though object oriented software development has gained popularity due to its inherent features it also throws challenges in early detection of defects during design phase detection of design defects helps in performing appropriate refactorings in improving the quality of design literature indicates that active research is going on in detecting design defects using metrics the present paper introduces a set of metrics for detecting defects in object oriented designs caused by the presence of shotgun surgery and divergent change bad smells these metrics are dependency oriented complexity metric for structure docms r dependen cy oriented complexity metric for an artifact causing ripples docma cr and dependency oriented complexity metric for an artifact affected by ripples docma ar the proposed me trics have been computed for four cases these metrics are used successfully in detecting design defects and complexity in the present study docma cr metric value indicated the presence of shotgun surgery bad smell whereas docma ar metric value indicated the presence of divergent change bad smell docms r metric value indicated the increase in complexity of structure ar chitecture when the design defects are present detecting bad smells helps in performing appropriate refactorings to make the software maintainable and to improve the quality of software dcoupling dependency oriented complexity metric for an artifact affected by ripples docma ar dependency oriented complexity metric for an artifact causing ripples docma cr dependency oriented complexity metric for structure docms r,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
10,0,"What Kind of and How Clones Are Refactored?: A Case Study of Three OSS Projects Although code clone (i.e. a code fragment that has similar or identical fragments) is regarded as one of the most typical bad smells, tools for identification of clone refactoring (i.e. merge code clones into a single method) are not commonly used. To promote the development of more widely-used tools for clone refactoring, we present an investigation of actual clone refactorings performed in the developments of three Open Source Software (OSS) projects. From the results, we confirmed that clone refactorings are mostly archived by two refactoring patterns, and token sequences of refactored code clones are suggested to have a difference of 50%. Levenshtein distance, code clone, refactoring",what kind of and how clones are refactored a case study of three oss projects although code clone i e a code fragment that has similar or identical fragments is regarded as one of the most typical bad smells tools for identification of clone refactoring i e merge code clones into a single method are not commonly used to promote the development of more widely used tools for clone refactoring we present an investigation of actual clone refactorings performed in the developments of three open source software oss projects from the results we confirmed that clone refactorings are mostly archived by two refactoring patterns and token sequences of refactored code clones are suggested to have a difference of 50 levenshtein distance code clone refactoring,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
11,0,"Cleaning Up Erlang Code is a Dirty Job but Somebody's Gotta Do It This paper describes opportunities for automatically modernizing Erlang applications, cleaning them up, eliminating certain bad smells from their code and occasionally also improving their performance. In addition, we present concrete examples of code improvements and our experiences from using a software tool with these capabilities, tidier, on Erlang code bases of significant size. code cleanup, code simplification, erlang, program transformation, refactoring",cleaning up erlang code is a dirty job but somebody s gotta do it this paper describes opportunities for automatically modernizing erlang applications cleaning them up eliminating certain bad smells from their code and occasionally also improving their performance in addition we present concrete examples of code improvements and our experiences from using a software tool with these capabilities tidier on erlang code bases of significant size code cleanup code simplification erlang program transformation refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
12,0,"Effectiveness of Encapsulation and Object-oriented Metrics to Refactor Code and Identify Error Prone Classes Using Bad Smells To assist maintenance and evolution teams, work needs to be done at the onset of software development. One such facilitation is refactoring the code, making it easier to read, understand and maintain. Refactoring is done by identifying bad smell areas in the code. In this paper, based on empirical analysis, we develop a metrics model to identify smelly classes. The role of two new metrics (encapsulation and information hiding) is also investigated for identifying smelly and faulty classes in software code. This paper first presents a binary statistical analysis of thev relationship between metrics and bad smells, the results of which show a significant relationship. Then, the metrics model (with significant metrics shortlisted from the binary analysis) for bad smell categorization (divided into five categories) is developed. To verify our model, we examine the open source Firefox system, which has a strong industrial usage. The results show that proposed metrics model for bad smell can predict faulty classes with high accuracy, but in the case of the categorized model not all categories of bad smells can adequately identified the faulty and smelly classes. Due to certain limitations of our study more experiments are required to generalize the results of bad smell and faulty class identification in software code. bad smells, empirical analysis, encapsulation, evolution, information hiding, refactoring",effectiveness of encapsulation and object oriented metrics to refactor code and identify error prone classes using bad smells to assist maintenance and evolution teams work needs to be done at the onset of software development one such facilitation is refactoring the code making it easier to read understand and maintain refactoring is done by identifying bad smell areas in the code in this paper based on empirical analysis we develop a metrics model to identify smelly classes the role of two new metrics encapsulation and information hiding is also investigated for identifying smelly and faulty classes in software code this paper first presents a binary statistical analysis of thev relationship between metrics and bad smells the results of which show a significant relationship then the metrics model with significant metrics shortlisted from the binary analysis for bad smell categorization divided into five categories is developed to verify our model we examine the open source firefox system which has a strong industrial usage the results show that proposed metrics model for bad smell can predict faulty classes with high accuracy but in the case of the categorized model not all categories of bad smells can adequately identified the faulty and smelly classes due to certain limitations of our study more experiments are required to generalize the results of bad smell and faulty class identification in software code bad smells empirical analysis encapsulation evolution information hiding refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
13,0,"Management Anti-patterns in IT Innovation Projects The main aim of this pilot study is to investigate management anti-patterns encountered in IT innovation projects, in the long run. A quantitative research methodology was chosen. A group of software project managers in industrial innovation projects were requested to fill in a questionnaire. The collected data revealed anti-patterns, which were compared and contrasted to the anti-patterns mostly found in traditional software projects. Some anti-patterns encountered in conventional software projects were also identified in innovation projects. Additionally, a new possible anti-pattern was identified and further investigated. The new anti-pattern regards the management of team creativity and is considered as an anti-pattern, because it can be an obstacle in teamwork progress, having negative consequences. A remedy solution is recommended as a re-factoring and recovering management strategy. Overall, this pilot study offers a set of practical guidelines for project managers, and innovation project managers in particular; this is a current IT management need that must be addressed in the near future. Further, there is a gap of relevant knowledge in the field and there are no similar studies regarding software project management anti-patterns in innovation projects in the literature. Therefore, this work could be considered as the first ever pilot research study, which investigates and reports on anti-patterns in innovation projects. Finally, we mention our future plans and outline how this initial data gathering can be useful for constructing a research project to find out more on the above research needs and IT development metarequirements. IT innovation projects, anti-patterns, pilot study, project management, team creativity",management anti patterns in it innovation projects the main aim of this pilot study is to investigate management anti patterns encountered in it innovation projects in the long run a quantitative research methodology was chosen a group of software project managers in industrial innovation projects were requested to fill in a questionnaire the collected data revealed anti patterns which were compared and contrasted to the anti patterns mostly found in traditional software projects some anti patterns encountered in conventional software projects were also identified in innovation projects additionally a new possible anti pattern was identified and further investigated the new anti pattern regards the management of team creativity and is considered as an anti pattern because it can be an obstacle in teamwork progress having negative consequences a remedy solution is recommended as a re factoring and recovering management strategy overall this pilot study offers a set of practical guidelines for project managers and innovation project managers in particular this is a current it management need that must be addressed in the near future further there is a gap of relevant knowledge in the field and there are no similar studies regarding software project management anti patterns in innovation projects in the literature therefore this work could be considered as the first ever pilot research study which investigates and reports on anti patterns in innovation projects finally we mention our future plans and outline how this initial data gathering can be useful for constructing a research project to find out more on the above research needs and it development metarequirements it innovation projects anti patterns pilot study project management team creativity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
14,0,"Effectiveness of Refactoring Metrics Model to Identify Smelly and Error Prone Classes in Open Source Software In order to improve software maintainability, possible improvement efforts must be made measurable. One such effort is refactoring the code which makes the code easier to read, understand and maintain. It is done by identifying the bad smell area in the code. This paper presents the results of an empirical study to develop a metrics model to identify the smelly classes. In addition, this metrics model is validated by identifying the smelly and error prone classes. The role of two new metrics (encapsulation and information hiding) is also investigated for identifying smelly and faulty classes in software code. This paper first presents a binary statistical analysis of the relationship between metrics and bad smells, the results of which show a significant relationship. Then, the metrics model (with significant metrics shortlisted from the binary analysis) for bad smell categorization (divided into five categories) is developed. To develop the model, three releases of the open source Mozila Firefox system are examined and the model is validated on one version of Mozila Sea Monkey, which has a strong industrial usage. The results show that metrics can predict smelly and faulty classes with high accuracy, but in the case of the categorized model, not all categories of bad smells can adequately be identified. Further, few categorised models can predict the faulty classes. Based on these results, we recommend more training for our model. bad smells, empirical analysis, encapsulation, evolution, information hiding, refactoring",effectiveness of refactoring metrics model to identify smelly and error prone classes in open source software in order to improve software maintainability possible improvement efforts must be made measurable one such effort is refactoring the code which makes the code easier to read understand and maintain it is done by identifying the bad smell area in the code this paper presents the results of an empirical study to develop a metrics model to identify the smelly classes in addition this metrics model is validated by identifying the smelly and error prone classes the role of two new metrics encapsulation and information hiding is also investigated for identifying smelly and faulty classes in software code this paper first presents a binary statistical analysis of the relationship between metrics and bad smells the results of which show a significant relationship then the metrics model with significant metrics shortlisted from the binary analysis for bad smell categorization divided into five categories is developed to develop the model three releases of the open source mozila firefox system are examined and the model is validated on one version of mozila sea monkey which has a strong industrial usage the results show that metrics can predict smelly and faulty classes with high accuracy but in the case of the categorized model not all categories of bad smells can adequately be identified further few categorised models can predict the faulty classes based on these results we recommend more training for our model bad smells empirical analysis encapsulation evolution information hiding refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
15,0,"A survey on odour detection sensors Human beings possess six highly efficient sensory system such as vision, hearing, touch, taste and smell. Many of these sensory systems are artificially replicated to provide intelligence to the machines. This paper reviews the various techniques and instruments that can be used to design a human olfactory system, which can be used in different applications. The odour detection systems can be broadly classified into four categories such as gas sensors, bio-sensors, gas chromatography systems and hybrid systems. Other common odour detection instruments like electronic noses (E-noses), mass spectrometers (MS), differential optical absorption spectrometers (DOAS) are also reviewed in this paper. The selection of any odour detection technique is influenced by several factors like on-field deployability, odour detection and classification capabilities, sensitivity of the instruments and sensitivity of the instruments to the air matrices. Among all the possible detection methods, Electronic nose is having advanced capabilities as compared to other instruments. The presence of interference noise act as a major hindrance for the efficiency of the odour detection devices. Integration of gas chromatography along with interference filters can provide an increased accuracy in the odour detection. electronic noses, odour detection sensors, sensory system, human olfactory system, gas sensors, biosensors, gas chromatography systems, odour detection instruments, electronic noses, e-noses, mass spectrometers, differential optical absorption spectrometers, DOAS, interference noise, interference filters, Control systems, Conferences, 5G mobile communication, Odour sensors, Artificial intelligence, Machine learning, Classification",a survey on odour detection sensors human beings possess six highly efficient sensory system such as vision hearing touch taste and smell many of these sensory systems are artificially replicated to provide intelligence to the machines this paper reviews the various techniques and instruments that can be used to design a human olfactory system which can be used in different applications the odour detection systems can be broadly classified into four categories such as gas sensors bio sensors gas chromatography systems and hybrid systems other common odour detection instruments like electronic noses e noses mass spectrometers ms differential optical absorption spectrometers doas are also reviewed in this paper the selection of any odour detection technique is influenced by several factors like on field deployability odour detection and classification capabilities sensitivity of the instruments and sensitivity of the instruments to the air matrices among all the possible detection methods electronic nose is having advanced capabilities as compared to other instruments the presence of interference noise act as a major hindrance for the efficiency of the odour detection devices integration of gas chromatography along with interference filters can provide an increased accuracy in the odour detection electronic noses odour detection sensors sensory system human olfactory system gas sensors biosensors gas chromatography systems odour detection instruments electronic noses e noses mass spectrometers differential optical absorption spectrometers doas interference noise interference filters control systems conferences 5g mobile communication odour sensors artificial intelligence machine learning classification,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
16,0,"Durian cultivar recognition using discriminant function The distinction of the Durian Cultivar is its physical characteristics such as smell, thorn's color, the resonant sound when knocking the husk. This research study which characteristics can classify the two popular Durian Cultivar; ``Chanee'' and ``Monthong''. The array of thorns in vertical, horizontal and diagonal and the geometric lines at the thorn's bases; rectangular, pentagon, hexagon and heptagon were the features used in this study. The process starts with Durian image edge detection to obtain the outline for identifying the position of thorn's peaks and the geometric outlines. The attributes are analyzed by the Linear Discriminant Analysis Method. The experimental results show that Durian Cultivar can be classified according to the thorn's array in vertical and horizontal. The results provide the efficient performance of classifier. The accuracy of the discriminative model is 94.44%. biology computing, botany, edge detection, image classification, discriminant function, physical characteristics, resonant sound, geometric lines, Durian image edge detection, geometric outlines, Linear Discriminant Analysis Method, discriminative model, Durian cultivar recognition, thorn color, Chanee, Monthong, classifier, Mathematical model, Linear discriminant analysis, Pattern recognition, Image edge detection, Training, Information technology, Feature extraction, durian cultivar, pattern recognition, durian's thorn recognition, discriminant function, linear discriminant analysis",durian cultivar recognition using discriminant function the distinction of the durian cultivar is its physical characteristics such as smell thorn s color the resonant sound when knocking the husk this research study which characteristics can classify the two popular durian cultivar chanee and monthong the array of thorns in vertical horizontal and diagonal and the geometric lines at the thorn s bases rectangular pentagon hexagon and heptagon were the features used in this study the process starts with durian image edge detection to obtain the outline for identifying the position of thorn s peaks and the geometric outlines the attributes are analyzed by the linear discriminant analysis method the experimental results show that durian cultivar can be classified according to the thorn s array in vertical and horizontal the results provide the efficient performance of classifier the accuracy of the discriminative model is 94 44 biology computing botany edge detection image classification discriminant function physical characteristics resonant sound geometric lines durian image edge detection geometric outlines linear discriminant analysis method discriminative model durian cultivar recognition thorn color chanee monthong classifier mathematical model linear discriminant analysis pattern recognition image edge detection training information technology feature extraction durian cultivar pattern recognition durian s thorn recognition discriminant function linear discriminant analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
17,0,"Four dimensional entertainment machine In this paper, an immersive virtual roller coaster is introduced. A three Degree-Of-Freedom (3DOF) computer controlled simulator with special effects is designed, implemented, and tested. The simulator platform moves in response to control signals generated by a three-dimensional (3D) virtual gaming environment. In order to add more reality to the gaming environment, external effects, that represent a fourth dimension to virtual environment, are added to the simulator environment such as smell, sound, light, and sense of temperature (heat or cold) that are synchronized with the events happening in the 3D virtual gaming environment. The controlled simulator is developed for entertainment purposes and to suit all ages. The proposed system was tested and verified in the sense that the platform interacts with all events occur in the 3D virtual environment and external effects. The proposed 4D entertainment machine can be used in amusement parks and family entertainment centers and malls. computer games, entertainment, synchronisation, virtual reality, four dimensional entertainment machine, immersive virtual roller coaster, three degree-of-freedom computer controlled simulator, signal generation control, three-dimensional virtual gaming environment, fourth dimension representation, simulator environment, 3D virtual gaming environment, 4D entertainment machine, family entertainment centers, amusement parks",four dimensional entertainment machine in this paper an immersive virtual roller coaster is introduced a three degree of freedom 3dof computer controlled simulator with special effects is designed implemented and tested the simulator platform moves in response to control signals generated by a three dimensional 3d virtual gaming environment in order to add more reality to the gaming environment external effects that represent a fourth dimension to virtual environment are added to the simulator environment such as smell sound light and sense of temperature heat or cold that are synchronized with the events happening in the 3d virtual gaming environment the controlled simulator is developed for entertainment purposes and to suit all ages the proposed system was tested and verified in the sense that the platform interacts with all events occur in the 3d virtual environment and external effects the proposed 4d entertainment machine can be used in amusement parks and family entertainment centers and malls computer games entertainment synchronisation virtual reality four dimensional entertainment machine immersive virtual roller coaster three degree of freedom computer controlled simulator signal generation control three dimensional virtual gaming environment fourth dimension representation simulator environment 3d virtual gaming environment 4d entertainment machine family entertainment centers amusement parks,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
18,0,"Improvement of miniaturized olfactory display using electroosmotic pumps and SAW device Recently, the study of using olfactory displays to release scents in virtual environment have been expanded. Our group have developed an olfactory display using electroosmotic (EO) pumps and a surface acoustic device (SAW) device. In this study, the improved olfactory display is described. The number of odor components was increased from 6 in the previous work to 8 whereas the size was further miniaturized so that it can be equipped on a headset. A visual-olfactory display system was also developed using the proposed olfactory display. The system can release scents in accordance with contents in the movie on Windows Media Player platform run on a PC. An experiment based on sensory test was performed to evaluate the capability to release scents of low volatile odorants within a short time and without odor remaining after the presentation. chemioception, display instrumentation, electrophoresis, osmosis, pumps, sprays, surface acoustic wave devices, miniaturized olfactory display, SAW device, scent releasing display, virtual environment, electroosmotic pumps, surface acoustic wave device device, odor component, visual olfactory display system, Windows media player platform, sensory test, Decision support systems, olfactory display, SAW streaming, electroosmotic pump, low-volatile odorant, movie with smell",improvement of miniaturized olfactory display using electroosmotic pumps and saw device recently the study of using olfactory displays to release scents in virtual environment have been expanded our group have developed an olfactory display using electroosmotic eo pumps and a surface acoustic device saw device in this study the improved olfactory display is described the number of odor components was increased from 6 in the previous work to 8 whereas the size was further miniaturized so that it can be equipped on a headset a visual olfactory display system was also developed using the proposed olfactory display the system can release scents in accordance with contents in the movie on windows media player platform run on a pc an experiment based on sensory test was performed to evaluate the capability to release scents of low volatile odorants within a short time and without odor remaining after the presentation chemioception display instrumentation electrophoresis osmosis pumps sprays surface acoustic wave devices miniaturized olfactory display saw device scent releasing display virtual environment electroosmotic pumps surface acoustic wave device device odor component visual olfactory display system windows media player platform sensory test decision support systems olfactory display saw streaming electroosmotic pump low volatile odorant movie with smell,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
19,0,"Olfactory-enhanced multimedia video clips datasets Recently, the concept of adding multisensory media components to complement and extend user Quality of Experience (QoE) of traditional media has gained attention from both academia and industry. Research works stimulating additional senses like olfaction (sense of smell), haptic (sense of touch) and gustation (sense of taste) have emerged. In particular in theme parks, multisensory experiences that also offer ambient lighting effects, vibrating seats, wind generators, mist effects, heaters/coolers, etc. are appearing. Considering this growing awareness and popularity, a key research challenge is to experimentally evaluate if and how these different effects affect user QoE. In this context, there is a lack of common test content and raw data results to support reproducible research and cross research team verification. This paper fills this gap. We share: the data from the empirical study; the video content; the olfactory components employed to enrich the video; the methodologies employed and various other aspects found through experience to be important. Uniquely, this work is complemented by two datasets, obtained in two separate but related empirical studies, one conducted in the UK, and the other in Ireland. multimedia systems, quality of experience, video signal processing, olfactory-enhanced multimedia video clip datasets, user quality-of-experience, user QoE, olfactory components, video content, UK, Ireland, Olfactory, Multimedia communication, Streaming media, Media, Synchronization, Transform coding, Olfaction, multimedia, mulsemedia, sensory experience, MPEG-V, QoE, dataset",olfactory enhanced multimedia video clips datasets recently the concept of adding multisensory media components to complement and extend user quality of experience qoe of traditional media has gained attention from both academia and industry research works stimulating additional senses like olfaction sense of smell haptic sense of touch and gustation sense of taste have emerged in particular in theme parks multisensory experiences that also offer ambient lighting effects vibrating seats wind generators mist effects heaters coolers etc are appearing considering this growing awareness and popularity a key research challenge is to experimentally evaluate if and how these different effects affect user qoe in this context there is a lack of common test content and raw data results to support reproducible research and cross research team verification this paper fills this gap we share the data from the empirical study the video content the olfactory components employed to enrich the video the methodologies employed and various other aspects found through experience to be important uniquely this work is complemented by two datasets obtained in two separate but related empirical studies one conducted in the uk and the other in ireland multimedia systems quality of experience video signal processing olfactory enhanced multimedia video clip datasets user quality of experience user qoe olfactory components video content uk ireland olfactory multimedia communication streaming media media synchronization transform coding olfaction multimedia mulsemedia sensory experience mpeg v qoe dataset,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
20,0,"Research on Internet Technological Standard Provision Basing on Evolutionary Games Theory As a kind of public goods, there is always disharmony between official standard and factual industrial standard about technological standard. In this paper, we choose evolutionary games theory as a visual angle, construct a equilibrium model of evolutionary game to study games between Internet industries and governments by describing the choices of using or creating network technology standards which have different strategies of groups dynamic trends and evolutionary stability. Finally this paper also demonstrates the rationality and the possibility for Internet industries to create technical standards, relying on their own strength. DP industry, evolutionary computation, game theory, government policies, Internet, standards, Internet technological standard provision, evolutionary games theory, public goods, industrial standard, equilibrium model, Internet industries, governments, Internet, Game theory, IP networks, Government, Toy industry, Force measurement, Stability, Helium, Genetic mutations, Control system synthesis",research on internet technological standard provision basing on evolutionary games theory as a kind of public goods there is always disharmony between official standard and factual industrial standard about technological standard in this paper we choose evolutionary games theory as a visual angle construct a equilibrium model of evolutionary game to study games between internet industries and governments by describing the choices of using or creating network technology standards which have different strategies of groups dynamic trends and evolutionary stability finally this paper also demonstrates the rationality and the possibility for internet industries to create technical standards relying on their own strength dp industry evolutionary computation game theory government policies internet standards internet technological standard provision evolutionary games theory public goods industrial standard equilibrium model internet industries governments internet game theory ip networks government toy industry force measurement stability helium genetic mutations control system synthesis,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
21,0,"Research on the Evolution Law and Response Capability of Unconventional Emergency Social unconventional emergencies not only bring disaster to human life and living environment, but also cause losses to the country and the people. What's more, their occurrence tends to cause series of chain reactions and inspire lots of social problems, thus likely to break the social balance, and lead to national instability and social disharmony. In this paper, ""concern degree model"" is introduced in the research of the evolution law of social unconventional emergencies to find the intrinsic relationship between events and phenomena, which portrays the evolution mechanism of emergencies in a more scientific way. In the assessment study of the response capability of security precaution system, based on the latest approaches of system performance assessment, combined with the concept of concern degree, the response capability of security precaution system in social unconventional emergencies is scientifically assessed. The research provides a new idea in finding the evolution law of unconventional emergencies, and makes the assessment of response capability of security system more objective and scientific. Powerful support is provided in making emergency decisions in unconventional emergencies. emergency services, national security, public administration, socio-economic effects, evolution law, response capability, social unconventional emergency, human life, living environment, social problems, social balance, national instability, social disharmony, concern degree model, emergency evolution mechanism, security precaution system, system performance assessment, security system, emergency decisions, Disaster management, Sociology, Humans, Power system security, Domestic safety, Road safety, Road transportation, Rail transportation, Analytical models, Programmable logic arrays",research on the evolution law and response capability of unconventional emergency social unconventional emergencies not only bring disaster to human life and living environment but also cause losses to the country and the people what s more their occurrence tends to cause series of chain reactions and inspire lots of social problems thus likely to break the social balance and lead to national instability and social disharmony in this paper concern degree model is introduced in the research of the evolution law of social unconventional emergencies to find the intrinsic relationship between events and phenomena which portrays the evolution mechanism of emergencies in a more scientific way in the assessment study of the response capability of security precaution system based on the latest approaches of system performance assessment combined with the concept of concern degree the response capability of security precaution system in social unconventional emergencies is scientifically assessed the research provides a new idea in finding the evolution law of unconventional emergencies and makes the assessment of response capability of security system more objective and scientific powerful support is provided in making emergency decisions in unconventional emergencies emergency services national security public administration socio economic effects evolution law response capability social unconventional emergency human life living environment social problems social balance national instability social disharmony concern degree model emergency evolution mechanism security precaution system system performance assessment security system emergency decisions disaster management sociology humans power system security domestic safety road safety road transportation rail transportation analytical models programmable logic arrays,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
22,0,"Study on the Decoloration Technology of Waste Edible Oil with Activated Clay Given more efficient utilization of waste, the social impact of waste recycling is far-reaching in saving resources and reducing environmental pollution, therefore promoting society development. The sources of waste edible oil are very complicated. The color of waste oil after simple recycling and refining is still dark and with strong smell. The amount of a variety of impurities is relatively huge. The pigment in waste oil affects its stability, industrial use and further processing. In order to meet the requirements of comprehensive utilization of waste oil, pre-decoloration is absolutely necessary. Activate clay has been reported to have decoloration effect on waste edible oil and this paper discussed the factors which influenced the decoloration rate. The optimum conditions of decoloration were established in this research: concentration of activated clay was 5%; initial temperature of decoloration was 60degC; final temperature of decoloration was 120degC and time of decoloration was 25 min. This result of research could provide appropriate material for the utilization of waste edible oil in production of detergent by saponification, save the natural resources and economy cost. At the same time, the ""waste"" became ""available resources"". clay, detergents, industrial economics, oils, pollution, recycling, waste handling, waste recovery, decoloration technology, waste edible oil source, activated clay concentration, waste utilization, social impact, waste recycling, saving resources, environmental pollution reduction, society development, industrial use, saponification, detergent production, natural resources, economy cost, temperature 60 C, temperature 120 C, time 25 min, Petroleum, Recycling, Temperature, Environmentally friendly manufacturing techniques, Industrial pollution, Refining, Impurities, Pigmentation, Stability, Fuel processing industries",study on the decoloration technology of waste edible oil with activated clay given more efficient utilization of waste the social impact of waste recycling is far reaching in saving resources and reducing environmental pollution therefore promoting society development the sources of waste edible oil are very complicated the color of waste oil after simple recycling and refining is still dark and with strong smell the amount of a variety of impurities is relatively huge the pigment in waste oil affects its stability industrial use and further processing in order to meet the requirements of comprehensive utilization of waste oil pre decoloration is absolutely necessary activate clay has been reported to have decoloration effect on waste edible oil and this paper discussed the factors which influenced the decoloration rate the optimum conditions of decoloration were established in this research concentration of activated clay was 5 initial temperature of decoloration was 60degc final temperature of decoloration was 120degc and time of decoloration was 25 min this result of research could provide appropriate material for the utilization of waste edible oil in production of detergent by saponification save the natural resources and economy cost at the same time the waste became available resources clay detergents industrial economics oils pollution recycling waste handling waste recovery decoloration technology waste edible oil source activated clay concentration waste utilization social impact waste recycling saving resources environmental pollution reduction society development industrial use saponification detergent production natural resources economy cost temperature 60 c temperature 120 c time 25 min petroleum recycling temperature environmentally friendly manufacturing techniques industrial pollution refining impurities pigmentation stability fuel processing industries,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
23,0,"Systematic exhortation of code smell detection using JSmell for java source code ``Code Smell'' or ``Bad Smell'', at the very least, is an indicator of badly for source code and is often analytical of deeper problems in software design. In layman terms, it signals flaws in the core foundation or architecture of the software that can cause any number of more serious problems - from usability and runtime performance to supportability and enhancement. These problems can mostly be prevented by the systematic refactoring of the code. Code smells are symptoms of deep-rooted problems in design, which, in most common cases, reduce the understandability of the system for present and future programmers, therefore depiction the program un-maintainable. Identification of these code smells has been thought of as an spontaneous art rather than an exact science, as there are very few empirical measures or methodologies for doing so. This paper implements JSmell, which will follow a scientific approach to detect five of these 22 code smells. JSmell will give suggestions to refactor the code for all five of these smells. Further, the tool will provide an interactive process to refactor two of these cases; while for the rest, it will suggest an ideal refactoring technique that would need to be applied manually. Java, program diagnostics, software maintenance, source code (software), code smell detection, JSmell, Java source code, code refactoring, bad smell, Tools, Java, Software, Control systems, Detectors, Computer architecture, C# languages, Code smell, tools support, JSmell detector, detection techniques, refactor",systematic exhortation of code smell detection using jsmell for java source code code smell or bad smell at the very least is an indicator of badly for source code and is often analytical of deeper problems in software design in layman terms it signals flaws in the core foundation or architecture of the software that can cause any number of more serious problems from usability and runtime performance to supportability and enhancement these problems can mostly be prevented by the systematic refactoring of the code code smells are symptoms of deep rooted problems in design which in most common cases reduce the understandability of the system for present and future programmers therefore depiction the program un maintainable identification of these code smells has been thought of as an spontaneous art rather than an exact science as there are very few empirical measures or methodologies for doing so this paper implements jsmell which will follow a scientific approach to detect five of these 22 code smells jsmell will give suggestions to refactor the code for all five of these smells further the tool will provide an interactive process to refactor two of these cases while for the rest it will suggest an ideal refactoring technique that would need to be applied manually java program diagnostics software maintenance source code software code smell detection jsmell java source code code refactoring bad smell tools java software control systems detectors computer architecture c languages code smell tools support jsmell detector detection techniques refactor,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
24,0,"The Analysis of Coordinating Degree of Regional Economic Development and Environment The relationship between environment and economic development has become the major concern of the whole world, especially the developing countries. In this article, a model of coordinating degree of environment-economy compound system is set up; based on an empirical study of the Xi'an region, the supporting mechanism of the coordinated development of environment and economy is constructed with multi-disciplinary theory. It is found that regional economy in west China is expanding quickly, but the emphasis on environmental protection is far from enough, resulting in the weakening of the coordinating relationship. There is a keen need to make modifications to macro policy-making so as to put an end to the disharmony between environment and economic development. In view of the fact that the environmental interests are in a disadvantageous position as compared with immediate economic benefits, the author suggests that environmental protection should be given the priority in policy-making; only a reasonable policy, sound operating mechanism and economical environmental culture can ensure the coordinated development of environment and economy. environmental economics, macroeconomics, regional economic development, environment-economy compound system, Xi'an region, multidisciplinary theory, west China, environmental protection, macro policy-making, economical environmental culture, Environmental economics, Protection, Costs, Art, Environmental management, Financial management, Technology management, Engineering management, Finance, Standards development",the analysis of coordinating degree of regional economic development and environment the relationship between environment and economic development has become the major concern of the whole world especially the developing countries in this article a model of coordinating degree of environment economy compound system is set up based on an empirical study of the xi an region the supporting mechanism of the coordinated development of environment and economy is constructed with multi disciplinary theory it is found that regional economy in west china is expanding quickly but the emphasis on environmental protection is far from enough resulting in the weakening of the coordinating relationship there is a keen need to make modifications to macro policy making so as to put an end to the disharmony between environment and economic development in view of the fact that the environmental interests are in a disadvantageous position as compared with immediate economic benefits the author suggests that environmental protection should be given the priority in policy making only a reasonable policy sound operating mechanism and economical environmental culture can ensure the coordinated development of environment and economy environmental economics macroeconomics regional economic development environment economy compound system xi an region multidisciplinary theory west china environmental protection macro policy making economical environmental culture environmental economics protection costs art environmental management financial management technology management engineering management finance standards development,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
25,0,"An empirical analysis of software systems for measurement of design quality level based on design patterns In this paper, we propose a new, simple and quantitative approach to specify design level of object oriented software systems. The exploratory analysis method proposed here uses GoF (gang of four) design patterns as our assessment criteria. We formulate an empirical study and develop a method to measure software quality. We tested our proposed method on several open source projects and also validate it by making a comparison with current approach. Our approach that addresses design patterns can be an excellent alternative to current systems such as OO metric, software fault proneness, visualization and anti-pattern based approaches. Our approach also can be helpful to practitioners for software quality assurance. object-oriented programming, software engineering, software metrics, software quality, systems analysis, software systems empirical analysis, design quality level measurement, object oriented software systems, exploratory analysis method, assessment criteria, software fault proneness, software quality assurance, Design Pattern, Object Oriented System, Design Quality, OO Metric, Quality Assessment",an empirical analysis of software systems for measurement of design quality level based on design patterns in this paper we propose a new simple and quantitative approach to specify design level of object oriented software systems the exploratory analysis method proposed here uses gof gang of four design patterns as our assessment criteria we formulate an empirical study and develop a method to measure software quality we tested our proposed method on several open source projects and also validate it by making a comparison with current approach our approach that addresses design patterns can be an excellent alternative to current systems such as oo metric software fault proneness visualization and anti pattern based approaches our approach also can be helpful to practitioners for software quality assurance object oriented programming software engineering software metrics software quality systems analysis software systems empirical analysis design quality level measurement object oriented software systems exploratory analysis method assessment criteria software fault proneness software quality assurance design pattern object oriented system design quality oo metric quality assessment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
26,0,"Automatic code locations identification for replacing temporary variable with query method Automatic application of refactoring techniques can help developer save effort for removing bad smells from their code which improves software maintainability. To remove automatically long method bad smell, which is one of the most serious bad smells, we need an automatic application of six refactoring techniques. However, only one refactoring technique ``Extract Method'' can be automated. In this research, we propose an algorithm to identify code locations which will be extracted for creating a query method. We performed an experiment to conclude the workability and correctness of our algorithm. This is the most important step towards an automatic application of refactoring technique ``replace temp with query''. software maintenance, automatic code location identification, temporary variable, query method, refactoring techniques, bad smell removal, software maintainability, extract method, replace temp with query, Workability, Java, Software maintenance, Flow graphs, Software algorithms, Europe, Refactoring Application, Program Dependency Graph, Program Slicing, Bad Smell, Software Maintenance",automatic code locations identification for replacing temporary variable with query method automatic application of refactoring techniques can help developer save effort for removing bad smells from their code which improves software maintainability to remove automatically long method bad smell which is one of the most serious bad smells we need an automatic application of six refactoring techniques however only one refactoring technique extract method can be automated in this research we propose an algorithm to identify code locations which will be extracted for creating a query method we performed an experiment to conclude the workability and correctness of our algorithm this is the most important step towards an automatic application of refactoring technique replace temp with query software maintenance automatic code location identification temporary variable query method refactoring techniques bad smell removal software maintainability extract method replace temp with query workability java software maintenance flow graphs software algorithms europe refactoring application program dependency graph program slicing bad smell software maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
27,0,"Generic attacks on content-based video stream authentication The widespread use of mobile platforms for online multimedia on-the-go necessitates a secure and efficient multimedia authentication scheme catered for mobile devices. In this paper, we study the security of using existing content-based authentication schemes to efficiently protect the integrity of video streams while allowing content-preserving manipulations. We point out a common design flaw in existing content-based authentication schemes. Built upon the concept of video coding, we demonstrate generic attacks that exploit this flaw and show that existing schemes in the transform domain cannot detect content-changing attacks on the video stream. Feature extraction, Streaming media, Watermarking, Authentication, Mobile handsets, Data mining, Transforms, Mobile, home surveillance, contentbased authentication, attack",generic attacks on content based video stream authentication the widespread use of mobile platforms for online multimedia on the go necessitates a secure and efficient multimedia authentication scheme catered for mobile devices in this paper we study the security of using existing content based authentication schemes to efficiently protect the integrity of video streams while allowing content preserving manipulations we point out a common design flaw in existing content based authentication schemes built upon the concept of video coding we demonstrate generic attacks that exploit this flaw and show that existing schemes in the transform domain cannot detect content changing attacks on the video stream feature extraction streaming media watermarking authentication mobile handsets data mining transforms mobile home surveillance contentbased authentication attack,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
28,0,"Prioritization of code restructuring for severely affected classes under release time constraints Bad smells help us to look deeper into the problem as they are threat to design principles and quality of software. Redesigning helps us in restructuring code without any change in its external behavior. It is not feasible to restructure each class of the software due release time constraints. Therefore, there is a need to prioritize classes so that effort and quality can be improved. In this study, we have proposed a framework based on the combination of C & K metric suite and eleven types of bad smells. A new metric, Quality Decline Factor (QDF), has been proposed which identify the severity of the classes and helps the software maintenance team to focus only on severely affected code. Pareto analysis is also valid in this study which states that 80% of the code quality can be improved by providing redesigning treatments to 20% of the severely affected code. This study will reduce the work of software maintenance practitioners and will help them to complete their work on time. Pareto analysis, software maintenance, software metrics, software quality, code restructuring, severely affected classes, release time constraints, software quality, external behavior, C & K metric suite, software maintenance team, severely affected code, Pareto analysis, code quality, redesigning treatments, Measurement, Software quality, Open source software, Object oriented modeling, Cloning, Software reliability, software redesigning, bad smell, software mainteinance, metrics",prioritization of code restructuring for severely affected classes under release time constraints bad smells help us to look deeper into the problem as they are threat to design principles and quality of software redesigning helps us in restructuring code without any change in its external behavior it is not feasible to restructure each class of the software due release time constraints therefore there is a need to prioritize classes so that effort and quality can be improved in this study we have proposed a framework based on the combination of c k metric suite and eleven types of bad smells a new metric quality decline factor qdf has been proposed which identify the severity of the classes and helps the software maintenance team to focus only on severely affected code pareto analysis is also valid in this study which states that 80 of the code quality can be improved by providing redesigning treatments to 20 of the severely affected code this study will reduce the work of software maintenance practitioners and will help them to complete their work on time pareto analysis software maintenance software metrics software quality code restructuring severely affected classes release time constraints software quality external behavior c k metric suite software maintenance team severely affected code pareto analysis code quality redesigning treatments measurement software quality open source software object oriented modeling cloning software reliability software redesigning bad smell software mainteinance metrics,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
29,0,"Recommendation of move method refactorings using coupling, cohesion and contextual similarity Method placement is one of the most important design activities in any object oriented application. Recommendation of move method refactorings plays a significant role through grouping similar behavior of methods. It is also used as a refactoring technique of feature envy code smell by placing methods into correct classes from the incorrect ones. Due to this code smell, an application will be tightly coupled and loosely cohesive which reflect poor design and hence development and maintenance effort, time and cost will be increased. Existing techniques mostly used only non-static methods for refactoring the code smell and so these approaches are not generalized for all types of methods (static and non-static). This paper proposes a novel approach for recommending move method refactorings to remove the code smell for both types of methods based on coupling, cohesion and context. The results of a preliminary empirical evaluation indicate that the proposed approach provides better results than JDeodorant (a popular eclipse plugin for refactorings). object-oriented methods, software maintenance, move method refactoring recommendation, application coupling, cohesion, contextual similarity, method placement, object oriented application, feature envy code smell, static method, JDeodorant, eclipse plugin, Couplings, Context, Maintenance engineering, Phase measurement, Manuals, Feature extraction, Code Smell, Refactoring, Move Method, Coupling, Cohesion, Contextual Similarity",recommendation of move method refactorings using coupling cohesion and contextual similarity method placement is one of the most important design activities in any object oriented application recommendation of move method refactorings plays a significant role through grouping similar behavior of methods it is also used as a refactoring technique of feature envy code smell by placing methods into correct classes from the incorrect ones due to this code smell an application will be tightly coupled and loosely cohesive which reflect poor design and hence development and maintenance effort time and cost will be increased existing techniques mostly used only non static methods for refactoring the code smell and so these approaches are not generalized for all types of methods static and non static this paper proposes a novel approach for recommending move method refactorings to remove the code smell for both types of methods based on coupling cohesion and context the results of a preliminary empirical evaluation indicate that the proposed approach provides better results than jdeodorant a popular eclipse plugin for refactorings object oriented methods software maintenance move method refactoring recommendation application coupling cohesion contextual similarity method placement object oriented application feature envy code smell static method jdeodorant eclipse plugin couplings context maintenance engineering phase measurement manuals feature extraction code smell refactoring move method coupling cohesion contextual similarity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
30,0,"Suitable sites identification for solid waste dumping using RS and GIS approach: A case study of Aurangabad, (MS) India Apace growth of urban area produces more solid waste; a city like Aurangabad daily produces approximately 450 metric ton of garbage which is dumped at Naregaon; but residents of Naregaon protesting against dumping of garbage. They are facing serious health issues because water pollution and foul smell. It is a burning issue in Aurangabad city since last year. It is very critical task to identify new sites using traditional way for dumping of solid waste. A rule based identification of new site can be done using a Remote Sensing and GIS, which can save time and increase accuracy. For that purpose a required data was collected from the Survey of India and NRSC Hyderabad. A Spatial feature extraction was done using for Reserved Forest area, Water bodies, Canals, drainage Network, Road and Railway Network. Rasterization processes were applied on Toposheet to extract Settlement area. For every spatial feature a Buffer Zone was created as per guideline given by the Ministry of Environment, GOI. After this process a one by one Overlay Analysis was performed. Seven sites which follow the guidelines and having more than 100 Acres area were selected for Field visit. In Field visit Geographic coordinates were taken using GPS enabled Smartphone with `My GPS Coordinates' android application having accuracy of 4 meter and verified these sites on Google Earth also. On the basis of field visit three sites are proposed as most suitable sites for dumping of solid waste. In this work we have tried to give solution to local decision makers regarding this issue. environmental science computing, feature extraction, geographic information systems, remote sensing, waste disposal, water pollution, suitable sites identification, solid waste dumping, GIS approach, RS approach, India, water pollution, foul smell, Aurangabad city, rule based identification, remote sensing, NRSC Hyderabad, spatial feature extraction, reserved forest area, water bodies, canals, Toposheet, drainage network, railway network, road network, rasterization processes, settlement area extraction, buffer zone, overlay analysis, geographic coordinates, GPS enabled smart phone, My GPS coordinate Android application, Google Earth, Solids, Roads, Geographic information systems, Cities and towns, Remote sensing, Guidelines, Lakes, Remote Sensing, GIS, Solid Waste Dumping: Buffering, Overlay Analysis",suitable sites identification for solid waste dumping using rs and gis approach a case study of aurangabad ms india apace growth of urban area produces more solid waste a city like aurangabad daily produces approximately 450 metric ton of garbage which is dumped at naregaon but residents of naregaon protesting against dumping of garbage they are facing serious health issues because water pollution and foul smell it is a burning issue in aurangabad city since last year it is very critical task to identify new sites using traditional way for dumping of solid waste a rule based identification of new site can be done using a remote sensing and gis which can save time and increase accuracy for that purpose a required data was collected from the survey of india and nrsc hyderabad a spatial feature extraction was done using for reserved forest area water bodies canals drainage network road and railway network rasterization processes were applied on toposheet to extract settlement area for every spatial feature a buffer zone was created as per guideline given by the ministry of environment goi after this process a one by one overlay analysis was performed seven sites which follow the guidelines and having more than 100 acres area were selected for field visit in field visit geographic coordinates were taken using gps enabled smartphone with my gps coordinates android application having accuracy of 4 meter and verified these sites on google earth also on the basis of field visit three sites are proposed as most suitable sites for dumping of solid waste in this work we have tried to give solution to local decision makers regarding this issue environmental science computing feature extraction geographic information systems remote sensing waste disposal water pollution suitable sites identification solid waste dumping gis approach rs approach india water pollution foul smell aurangabad city rule based identification remote sensing nrsc hyderabad spatial feature extraction reserved forest area water bodies canals toposheet drainage network railway network road network rasterization processes settlement area extraction buffer zone overlay analysis geographic coordinates gps enabled smart phone my gps coordinate android application google earth solids roads geographic information systems cities and towns remote sensing guidelines lakes remote sensing gis solid waste dumping buffering overlay analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
31,0,"The study of multimodal gas recognition algorithm based on machine olfaction Gas recognition, smell identification and source localization are among complex problems in today's industry. In this study, we employed an electronic nose (Enose) and applied the Locally Linear Embedding (LLE) algorithm to detect and classify four kinds of industrial gas including C02, NH3, CH4, Volatile Organic Compounds (VOCs). The AIRSENSE PEN3 Enose was used for gas detection and odor data acquisition. We compared the performance of the proposed LLE algorithm with the Principal Component Analysis (PCA) and Linear Discriminate Analysis (LDA) in extracting the gas characteristics as well as quantitative analysis and data processing. The results verified that the LLE algorithm outperformed other selected algorithms in multimodal gas recognition. Therefore, the LLE algorithm can play important role in the field of machine olfactory and odor identification. ammonia, biomedical electronics, chemioception, data acquisition, organic compounds, principal component analysis, ammonia, methane, carbon dioxide, data processing, quantitative analysis, gas characteristics, LDA, linear discriminate analysis, PCA, principal component analysis, odor data acquisition, AIRSENSE PEN3, VOC, volatile organic compounds, LLE algorithm, locally linear embedding algorithm, Enose, electronic nose, source localization, smell identification, machine olfaction, multimodal gas recognition algorithm, Conferences, Data acquisition, Data processing, Feature extraction, Statistical analysis, Machine Olfaction, Multimodal Recognition Algorithm, Local Linear Embedding",the study of multimodal gas recognition algorithm based on machine olfaction gas recognition smell identification and source localization are among complex problems in today s industry in this study we employed an electronic nose enose and applied the locally linear embedding lle algorithm to detect and classify four kinds of industrial gas including c02 nh3 ch4 volatile organic compounds vocs the airsense pen3 enose was used for gas detection and odor data acquisition we compared the performance of the proposed lle algorithm with the principal component analysis pca and linear discriminate analysis lda in extracting the gas characteristics as well as quantitative analysis and data processing the results verified that the lle algorithm outperformed other selected algorithms in multimodal gas recognition therefore the lle algorithm can play important role in the field of machine olfactory and odor identification ammonia biomedical electronics chemioception data acquisition organic compounds principal component analysis ammonia methane carbon dioxide data processing quantitative analysis gas characteristics lda linear discriminate analysis pca principal component analysis odor data acquisition airsense pen3 voc volatile organic compounds lle algorithm locally linear embedding algorithm enose electronic nose source localization smell identification machine olfaction multimodal gas recognition algorithm conferences data acquisition data processing feature extraction statistical analysis machine olfaction multimodal recognition algorithm local linear embedding,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
32,0,"Bad smell refactor removable detection of audit spreadsheet Spreadsheets is one of the most generic software product to have its presence felt across industries ranging with individuals with simple needs to large companies with complex systems. In fact, mutiple judgements are disseminated owing to its high usage in U.S Firms; around 95% of the firms in U.S utilize it for financial reporting. Because of its major applicability around ample areas there is a demand to regulate and authorize its content. Many years of research study have communicated the need of identifying bad smells from spreadsheets which are very recurrent and failure of which can make a company loss billions. Bad smell is notable to be one of the leading genre of hindrance incorporated in the field of Software Engineering which can be made analogous to spreadsheet bad smells. In this paper we developed an automatic tool, a Windows Form Application embedded in .NET framework that efficiently aids in diagnosing catalog of spreadsheet bad smells. Main focus of our tool will be largely on diagnosing bad smells taking spreadsheet data generated during conducting audit process of a Company. Patterns categorizimg each smell is put to match against each spreadsheet cell to validate the reliability of the proposed tool. Main bad smells detected, concerning our tool is Long calculation Chain, Middle Man, Feature Envy, Multiple operations, Conditional Complexity and Multiple References. At the end, result of automatic detection tool on audit data is examined and future scope is considered to refine the process of automatic detection and refactor on Audit data. financial data processing, software maintenance, software product lines, software tools, spreadsheet programs, bad smell refactor removable detection, audit spreadsheet, generic software product, financial reporting, software engineering, automatic tool, Windows form application embedded, .NET framework, long calculation chain, middle man, feature envy, multiple operations, conditional complexity, multiple references, Pattern matching, Complexity theory, Computer architecture, Measurement, Microprocessors, Companies, Visualization",bad smell refactor removable detection of audit spreadsheet spreadsheets is one of the most generic software product to have its presence felt across industries ranging with individuals with simple needs to large companies with complex systems in fact mutiple judgements are disseminated owing to its high usage in u s firms around 95 of the firms in u s utilize it for financial reporting because of its major applicability around ample areas there is a demand to regulate and authorize its content many years of research study have communicated the need of identifying bad smells from spreadsheets which are very recurrent and failure of which can make a company loss billions bad smell is notable to be one of the leading genre of hindrance incorporated in the field of software engineering which can be made analogous to spreadsheet bad smells in this paper we developed an automatic tool a windows form application embedded in net framework that efficiently aids in diagnosing catalog of spreadsheet bad smells main focus of our tool will be largely on diagnosing bad smells taking spreadsheet data generated during conducting audit process of a company patterns categorizimg each smell is put to match against each spreadsheet cell to validate the reliability of the proposed tool main bad smells detected concerning our tool is long calculation chain middle man feature envy multiple operations conditional complexity and multiple references at the end result of automatic detection tool on audit data is examined and future scope is considered to refine the process of automatic detection and refactor on audit data financial data processing software maintenance software product lines software tools spreadsheet programs bad smell refactor removable detection audit spreadsheet generic software product financial reporting software engineering automatic tool windows form application embedded net framework long calculation chain middle man feature envy multiple operations conditional complexity multiple references pattern matching complexity theory computer architecture measurement microprocessors companies visualization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
33,0,"Do developers care about code smells? A replicated study from chile Code smells are a metaphor to describe symptoms in the code that may provoke maintainability problems. Code smell detection and remove have a closer relationship to refactoring which has been a well-known and disseminated practice for improving software maintenance and reuse. In 2013 a study for knowing about the position and knowledge of developers was conducted from Norway. This study covered developers from more than 25 different countries and got interesting results about code smells. In this paper we have replicated this study by interviewing exclusively Chilean participants. The results indicate few differences on poor comprehension about object orientation and a better position of the current Chilean concerns on code smells and refactoring. software maintenance, software reusability, source code (software), replicated study, code smell detection, software maintenance, software reuse, Chile, refactoring, Instruments, Java, Couplers, Software maintenance, Silicon, Switches, code smells, refactoring, replicated study, maintainability",do developers care about code smells a replicated study from chile code smells are a metaphor to describe symptoms in the code that may provoke maintainability problems code smell detection and remove have a closer relationship to refactoring which has been a well known and disseminated practice for improving software maintenance and reuse in 2013 a study for knowing about the position and knowledge of developers was conducted from norway this study covered developers from more than 25 different countries and got interesting results about code smells in this paper we have replicated this study by interviewing exclusively chilean participants the results indicate few differences on poor comprehension about object orientation and a better position of the current chilean concerns on code smells and refactoring software maintenance software reusability source code software replicated study code smell detection software maintenance software reuse chile refactoring instruments java couplers software maintenance silicon switches code smells refactoring replicated study maintainability,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
34,0,"Enhancing TV broadcasting services: A survey on mulsemedia quality of experience One of the goals of next generation broadcasting services is to provide realistic media contents to the users. Realistic media contents are media with multiple sensorial effects (mulsemedia) aimed at increasing user's experience through the five sense representation (i.e., taste, sight, touch, smell, and hearing). In this research area, a key issue is the measure of the impact of mulsemedia on the perceived user's quality of experience (QoE). This paper provides an updated overview of the researches achieved in the domain of QoE for mulsemedia services. Results are summarized based on subjective quality assessments for audiovisual sequences enriched with effects, such as ambient light, wind and vibration effects. This paper aims at providing the broadcasting community with a survey to understand the role that mulsemedia could play in the QoE enhancement in future broadcasting services. With this purpose, the research challenges that may motivate additional researches are described. audio-visual systems, quality of experience, television broadcasting, TV broadcasting service enhancement, mulsemedia quality of experience, next generation broadcasting services, quality of experience, audiovisual sequences, QoE enhancement, Media, Multimedia communication, Tools, Vibrations, Streaming media, Transform coding, Mulsemedia, Quality of Experience, Subjective Quality Assessment, Sensory Effects",enhancing tv broadcasting services a survey on mulsemedia quality of experience one of the goals of next generation broadcasting services is to provide realistic media contents to the users realistic media contents are media with multiple sensorial effects mulsemedia aimed at increasing user s experience through the five sense representation i e taste sight touch smell and hearing in this research area a key issue is the measure of the impact of mulsemedia on the perceived user s quality of experience qoe this paper provides an updated overview of the researches achieved in the domain of qoe for mulsemedia services results are summarized based on subjective quality assessments for audiovisual sequences enriched with effects such as ambient light wind and vibration effects this paper aims at providing the broadcasting community with a survey to understand the role that mulsemedia could play in the qoe enhancement in future broadcasting services with this purpose the research challenges that may motivate additional researches are described audio visual systems quality of experience television broadcasting tv broadcasting service enhancement mulsemedia quality of experience next generation broadcasting services quality of experience audiovisual sequences qoe enhancement media multimedia communication tools vibrations streaming media transform coding mulsemedia quality of experience subjective quality assessment sensory effects,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
35,0,"AntiPattren-based cloud ontology evaluation Nowadays, cloud computing is an emerging technology thanks to its ability to provide on-demand computing services (hardware and software) with less description standardization effort. Multiple issues and challenges in discovering cloud services appear due to the lack of the cloud service description standardization. In fact, the existing cloud providers describe, their similar offered services in different ways. Thus, various existing works aim at standardizing the representation of cloud computing services while proposing ontologies. However, since the existing proposals were not evaluated, they might be less adopted and considered. Indeed, the ontology evaluation has a direct impact on its understandability and reusability. In this paper, we propose an evaluation approach to validate our proposed Cloud Service Ontology (CSO), to guarantee an adequate cloud service discovery. This paper contribution is threefold. First, it specifies a set of patterns and anti-patterns in order to evaluate CSO. Second, it defines an anti-pattern detection method based on SPARQL queries which provides a set of correction recommendations to help ontologists revise the ontology. Finally, some experiment tests were conducted in relation to: (i) the method efficiency and (ii) anti-pattern detection of design anomalies as well as taxonomic and domain errors within CSO. cloud computing, ontologies (artificial intelligence), query processing, cloud computing, on-demand computing services, cloud service description standardization, CSO evaluation, SPARQL queries, antipattern-based cloud ontology evaluation, Ontologies, Cloud computing, Redundancy, Virtual machining, Software as a service, Standards, Electronic mail",antipattren based cloud ontology evaluation nowadays cloud computing is an emerging technology thanks to its ability to provide on demand computing services hardware and software with less description standardization effort multiple issues and challenges in discovering cloud services appear due to the lack of the cloud service description standardization in fact the existing cloud providers describe their similar offered services in different ways thus various existing works aim at standardizing the representation of cloud computing services while proposing ontologies however since the existing proposals were not evaluated they might be less adopted and considered indeed the ontology evaluation has a direct impact on its understandability and reusability in this paper we propose an evaluation approach to validate our proposed cloud service ontology cso to guarantee an adequate cloud service discovery this paper contribution is threefold first it specifies a set of patterns and anti patterns in order to evaluate cso second it defines an anti pattern detection method based on sparql queries which provides a set of correction recommendations to help ontologists revise the ontology finally some experiment tests were conducted in relation to i the method efficiency and ii anti pattern detection of design anomalies as well as taxonomic and domain errors within cso cloud computing ontologies artificial intelligence query processing cloud computing on demand computing services cloud service description standardization cso evaluation sparql queries antipattern based cloud ontology evaluation ontologies cloud computing redundancy virtual machining software as a service standards electronic mail,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
36,0,"Code Bad Smell Detection through Evolutionary Data Mining The existence of code bad smell has a severe impact on the software quality. Numerous researches show that ignoring code bad smells can lead to failure of a software system. Thus, the detection of bad smells has drawn the attention of many researchers and practitioners. Quite a few approaches have been proposed to detect code bad smells. Most approaches are solely based on structural information extracted from source code. However, we have observed that some code bad smells have the evolutionary property, and thus propose a novel approach to detect three code bad smells by mining software evolutionary data: duplicated code, shotgun surgery, and divergent change. It exploits association rules mined from change history of software systems, upon which we define heuristic algorithms to detect the three bad smells. The experimental results on five open source projects demonstrate that the proposed approach achieves higher precision, recall and F-measure. data mining, evolutionary computation, software quality, source code (software), code bad smell detection, software quality, source code, software evolutionary data mining, duplicated code, shotgun surgery, divergent change, Software systems, History, Association rules, Surgery, Couplings",code bad smell detection through evolutionary data mining the existence of code bad smell has a severe impact on the software quality numerous researches show that ignoring code bad smells can lead to failure of a software system thus the detection of bad smells has drawn the attention of many researchers and practitioners quite a few approaches have been proposed to detect code bad smells most approaches are solely based on structural information extracted from source code however we have observed that some code bad smells have the evolutionary property and thus propose a novel approach to detect three code bad smells by mining software evolutionary data duplicated code shotgun surgery and divergent change it exploits association rules mined from change history of software systems upon which we define heuristic algorithms to detect the three bad smells the experimental results on five open source projects demonstrate that the proposed approach achieves higher precision recall and f measure data mining evolutionary computation software quality source code software code bad smell detection software quality source code software evolutionary data mining duplicated code shotgun surgery divergent change software systems history association rules surgery couplings,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
37,0,"Judgment of policy advises; the disharmony between judgment and registered problems Written texts like policy advises are often reviewed and judged. In this study we analyze the expert judgments of 39 policy advises on the same issue. The judgments are given in three different forms. The results show that the judgments of the policy advices are not reliable. And there is little correspondence between the judgments and the registered comments; they are not directing to a specific pattern. This leads to the conclusion that a good judgment of professional writing is not possible. But there is a suspicion of the possible existence of a functional step in professional writing. local government, policy advises, written texts, expert judgments, registered comments, professional writing, Writing, Problem-solving, Context modeling, Local government, Speech processing, Cryptography, writing, policy advices, experts",judgment of policy advises the disharmony between judgment and registered problems written texts like policy advises are often reviewed and judged in this study we analyze the expert judgments of 39 policy advises on the same issue the judgments are given in three different forms the results show that the judgments of the policy advices are not reliable and there is little correspondence between the judgments and the registered comments they are not directing to a specific pattern this leads to the conclusion that a good judgment of professional writing is not possible but there is a suspicion of the possible existence of a functional step in professional writing local government policy advises written texts expert judgments registered comments professional writing writing problem solving context modeling local government speech processing cryptography writing policy advices experts,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
38,0,"Pricing, competition and innovation: A profitable business model to resolve the tussle involved in peer-to-peer streaming applications Peer-to-peer (P2P) streaming applications have led to the disharmony among the involved parties: Content Service Providers (CSPs), Internet Service Providers (ISPs) and P2P streaming End-Users (EUs). This disharmony is not only a technical problem at the network aspect, but also an economic problem at the business aspect. To handle this tussle, this paper proposes a profitable business model to enable all involved parties to enlarge their benefits with the help of a novel QoS-based architecture integrated with caching techniques. We model the interactions, including competition and innovation, among CSPs, ISPs and EUs as a tripartite game by introducing a pricing scheme, which captures both network and business aspects of the P2P streaming applications. We study the tripartite game in different market scenarios as more and more ISPs and CSPs involve into the market. A three-stage Stackelberg game combining with Cournot game is proposed to study the interdependent, interactive and competitive relationship among CSPs, ISPs and EUs. Moreover, we investigate how the market competition motivates ISPs to upgrade the cache service infrastructure. Our theoretical analysis and empirical study both show that the tripartite game can result in a win-win-win outcome. The market competition plays an important role in curbing the pricing power of CSPs and ISPs, and this effect is more remarkable when the amounts of CSPs and ISPs become infinite. Interestingly, we find that in the tripartite game there exists a longstop at which ISPs may have no incentive to upgrade the cache service infrastructure. However, increasing the market competition level can propel the innovation of ISPs. cache storage, game theory, innovation management, Internet, peer-to-peer computing, pricing, profitability, quality of service, innovation, profitable business model, peer-to-peer streaming application, content service provider, Internet service provider, ISP, P2P streaming end-user, economic problem, QoS-based architecture, caching technique, tripartite game, pricing scheme, three-stage Stackelberg game, Cournot game, market competition, cache service infrastructure, pricing power, Games, Bandwidth, Servers, Videos, Pricing, Quality of service",pricing competition and innovation a profitable business model to resolve the tussle involved in peer to peer streaming applications peer to peer p2p streaming applications have led to the disharmony among the involved parties content service providers csps internet service providers isps and p2p streaming end users eus this disharmony is not only a technical problem at the network aspect but also an economic problem at the business aspect to handle this tussle this paper proposes a profitable business model to enable all involved parties to enlarge their benefits with the help of a novel qos based architecture integrated with caching techniques we model the interactions including competition and innovation among csps isps and eus as a tripartite game by introducing a pricing scheme which captures both network and business aspects of the p2p streaming applications we study the tripartite game in different market scenarios as more and more isps and csps involve into the market a three stage stackelberg game combining with cournot game is proposed to study the interdependent interactive and competitive relationship among csps isps and eus moreover we investigate how the market competition motivates isps to upgrade the cache service infrastructure our theoretical analysis and empirical study both show that the tripartite game can result in a win win win outcome the market competition plays an important role in curbing the pricing power of csps and isps and this effect is more remarkable when the amounts of csps and isps become infinite interestingly we find that in the tripartite game there exists a longstop at which isps may have no incentive to upgrade the cache service infrastructure however increasing the market competition level can propel the innovation of isps cache storage game theory innovation management internet peer to peer computing pricing profitability quality of service innovation profitable business model peer to peer streaming application content service provider internet service provider isp p2p streaming end user economic problem qos based architecture caching technique tripartite game pricing scheme three stage stackelberg game cournot game market competition cache service infrastructure pricing power games bandwidth servers videos pricing quality of service,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
39,0,"Do code smells hamper novice programming? A controlled experiment on Scratch programs Recently, block-based programming languages like Alice, Scratch and Blockly have become popular tools for programming education. There is substantial research showing that block-based languages are suitable for early programming education. But can block-based programs be smelly too? And does that matter to learners? In this paper we explore the code smells metaphor in the context of block-based programming language Scratch. We conduct a controlled experiment with 61 novice Scratch programmers, in which we divided the novices into three groups. One third receive a non-smelly program, while the other groups receive a program suffering from the Duplication or the Long Method smell respectively. All subjects then perform the same comprehension tasks on their program, after which we measure their time and correctness. The results of the experiment show that code smell indeed influence performance: subjects working on the program exhibiting code smells perform significantly worse, but the smells did not affect the time subjects needed. Investigating different types of tasks in more detail, we find that Long Method mainly decreases system understanding, while Duplication decreases the ease with which subjects modify Scratch programs. computer aided instruction, computer science education, programming languages, block-based programming languages, programming education, programming language Scratch, duplication smell, long method smell, Programming profession, Sprites (computer), Games, Computer languages, Education",do code smells hamper novice programming a controlled experiment on scratch programs recently block based programming languages like alice scratch and blockly have become popular tools for programming education there is substantial research showing that block based languages are suitable for early programming education but can block based programs be smelly too and does that matter to learners in this paper we explore the code smells metaphor in the context of block based programming language scratch we conduct a controlled experiment with 61 novice scratch programmers in which we divided the novices into three groups one third receive a non smelly program while the other groups receive a program suffering from the duplication or the long method smell respectively all subjects then perform the same comprehension tasks on their program after which we measure their time and correctness the results of the experiment show that code smell indeed influence performance subjects working on the program exhibiting code smells perform significantly worse but the smells did not affect the time subjects needed investigating different types of tasks in more detail we find that long method mainly decreases system understanding while duplication decreases the ease with which subjects modify scratch programs computer aided instruction computer science education programming languages block based programming languages programming education programming language scratch duplication smell long method smell programming profession sprites computer games computer languages education,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
40,0,"Perilous deviations from FRAND harmony- operational pitfalls of the 2015 IEEE patent policy Standard Development Organizations (SDOs) have one thing in common: they uniformly refrain from formally defining the meaning of ""Fair, Reasonable and Non- Discriminatory"" (FRAND) licensing terms required for patents essential to implement technical standards, called standardessential patents (SEPs). This uniformity in non-definition is called FRAND Harmony. However, in a bitterly contested and controversial move, the IEEE Standards Association (IEEE-SA) amended its patent policy, effective March 15, 2015, to become the only major SDO to substantively define FRAND licensing terms, a definition at great variance with other SDOs' practice and a substantial deviation from IEEE's traditional neutrality on FRAND terms. IEEE's new departure from de facto industry standard licensing practice will put parties into irreconcilable legal positions: SEP licenses for new standards may not simultaneously conform to the new FRAND terms mandated by the 2015 IEEE patent policy, and to legacy FRAND terms in the old licenses that necessarily follows legacy technology. This will undermine dynamic efficiencies in innovation where new standards incorporate other legacy standards by reference as ""normative,"" and where standard amendments are rolled-up into new revisions of the standard. Under this new patent policy, IEEE Societies will be handicapped in developing new standards that build on legacy standards. IEEE's deviation from FRAND Harmony has the additional potential of inducing a practice that would discriminate among SEP holders in adopting technologies in IEEE standards. Many top quality and complex standards projects may grind to a halt unless IEEE-SA reverses course, as another SDO did two decades ago when their similar experiment with FRAND disharmony failed. patents, standards, legacy technology, IEEE-SA, IEEE standards association, SEP, standard-essential patents, technical standards, FRAND licensing terms, fair reasonable and nondiscriminatory licensing terms, SDO, standard development organizations, patent policy, FRAND harmony-operational pitfalls, Patents, Licenses, IEEE Standards, Standards organizations, Organizations, Intellectual property, FRAND,  Standard Essential Patent,  Royalty, Injunction,  ANSI, IEEE,  ETSI,  ITU",perilous deviations from frand harmony operational pitfalls of the 2015 ieee patent policy standard development organizations sdos have one thing in common they uniformly refrain from formally defining the meaning of fair reasonable and non discriminatory frand licensing terms required for patents essential to implement technical standards called standardessential patents seps this uniformity in non definition is called frand harmony however in a bitterly contested and controversial move the ieee standards association ieee sa amended its patent policy effective march 15 2015 to become the only major sdo to substantively define frand licensing terms a definition at great variance with other sdos practice and a substantial deviation from ieee s traditional neutrality on frand terms ieee s new departure from de facto industry standard licensing practice will put parties into irreconcilable legal positions sep licenses for new standards may not simultaneously conform to the new frand terms mandated by the 2015 ieee patent policy and to legacy frand terms in the old licenses that necessarily follows legacy technology this will undermine dynamic efficiencies in innovation where new standards incorporate other legacy standards by reference as normative and where standard amendments are rolled up into new revisions of the standard under this new patent policy ieee societies will be handicapped in developing new standards that build on legacy standards ieee s deviation from frand harmony has the additional potential of inducing a practice that would discriminate among sep holders in adopting technologies in ieee standards many top quality and complex standards projects may grind to a halt unless ieee sa reverses course as another sdo did two decades ago when their similar experiment with frand disharmony failed patents standards legacy technology ieee sa ieee standards association sep standard essential patents technical standards frand licensing terms fair reasonable and nondiscriminatory licensing terms sdo standard development organizations patent policy frand harmony operational pitfalls patents licenses ieee standards standards organizations organizations intellectual property frand standard essential patent royalty injunction ansi ieee etsi itu,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
41,0,"Does Refactoring of Test Smells Induce Fixing Flaky Tests? Regression testing is a core activity that allows developers to ensure that source code changes do not introduce bugs. An important prerequisite then is that test cases are deterministic. However, this is not always the case as some tests suffer from socalled flakiness. Flaky tests have serious consequences, as they can hide real bugs and increase software inspection costs. Existing research has focused on understanding the root causes of test flakiness and devising techniques to automatically fix flaky tests; a key area of investigation being concurrency. In this paper, we investigate the relationship between flaky tests and three previously defined test smells, namely Resource Optimism, Indirect Testing and Test Run War.We have set up a study involving 19,532 JUnit test methods belonging to 18 software systems. A key result of our investigation is that 54% of tests that are flaky contain a test code smell that can cause the flakiness. Moreover, we found that refactoring the test smells not only removed the design flaws, but also fixed all 54% of flaky tests causally co-occurring with test smells. program testing, software fault tolerance, software maintenance, source code (software), regression testing, test flakiness, indirect testing, test run war, test smells refactoring, resource optimism, JUnit test methods, source code, Testing, Tools, Computer bugs, Software systems, Java, Production, Test Smells, Flaky Tests, Refactoring",does refactoring of test smells induce fixing flaky tests regression testing is a core activity that allows developers to ensure that source code changes do not introduce bugs an important prerequisite then is that test cases are deterministic however this is not always the case as some tests suffer from socalled flakiness flaky tests have serious consequences as they can hide real bugs and increase software inspection costs existing research has focused on understanding the root causes of test flakiness and devising techniques to automatically fix flaky tests a key area of investigation being concurrency in this paper we investigate the relationship between flaky tests and three previously defined test smells namely resource optimism indirect testing and test run war we have set up a study involving 19 532 junit test methods belonging to 18 software systems a key result of our investigation is that 54 of tests that are flaky contain a test code smell that can cause the flakiness moreover we found that refactoring the test smells not only removed the design flaws but also fixed all 54 of flaky tests causally co occurring with test smells program testing software fault tolerance software maintenance source code software regression testing test flakiness indirect testing test run war test smells refactoring resource optimism junit test methods source code testing tools computer bugs software systems java production test smells flaky tests refactoring,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
42,0,"Improvement of oxidative stability of menhaden fish oil by microencapsulation within biocapsules formed of yeast cells Fish oil, rich in polyunsaturated fatty acids, is a valuable addition to human diet. Its composition makes it difficult to handle as it is prone to oxidation and its strong smell is repelling to many. Encapsulation in yeast cells is a possible solution to these issues. The aim of this study was to determine the best pretreatment approach, optimize the process of microencapsulation and verify the stability of the oil encapsulated in Saccharomyces cerevisiae. Pretreatment by autolysis, chemically facilitated autolysis and enzymatic cell wall digestion was tested. Autolysis at 55$ ^\circ$C supported by addition of 1.5% ethyl acetate was an effective pretreatment method. Process parameter values (temperature, stirring rate and emulsifier addition) were optimized, improving efficiency to ca. 90%. The encapsulated oil was shown to be stable when stored for 30days at relative humidity below 70%. Additional coating with hydroxypropyl methyl cellulose allowed to improve storage stability. Menhaden fish oil, Microencapsulation, , Encapsulation efficiency, Oxidative stability",improvement of oxidative stability of menhaden fish oil by microencapsulation within biocapsules formed of yeast cells fish oil rich in polyunsaturated fatty acids is a valuable addition to human diet its composition makes it difficult to handle as it is prone to oxidation and its strong smell is repelling to many encapsulation in yeast cells is a possible solution to these issues the aim of this study was to determine the best pretreatment approach optimize the process of microencapsulation and verify the stability of the oil encapsulated in saccharomyces cerevisiae pretreatment by autolysis chemically facilitated autolysis and enzymatic cell wall digestion was tested autolysis at 55 circ c supported by addition of 1 5 ethyl acetate was an effective pretreatment method process parameter values temperature stirring rate and emulsifier addition were optimized improving efficiency to ca 90 the encapsulated oil was shown to be stable when stored for 30days at relative humidity below 70 additional coating with hydroxypropyl methyl cellulose allowed to improve storage stability menhaden fish oil microencapsulation encapsulation efficiency oxidative stability,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
43,0,"Care Strategy for Death Rattle in Terminally Ill Cancer Patients and Their Family Members: Recommendations From a Cross-Sectional Nationwide Survey of Bereaved Family Members' Perceptions Context Bereaved family members witnessing a patient's death rattle often experience distress. However, the benefits of specific care measures aimed at decreasing death rattle-associated family distress have not yet been evaluated. Objectives To clarify death rattle-related emotional distress levels among family members and their perceptions of the need for death rattle care improvement and explore the factors influencing both these issues. Methods A cross-sectional questionnaire survey of bereaved family members of cancer patients was conducted in 95 palliative care units in June 2007. Results Six hundred sixty-three questionnaires were mailed out, and 390 (61%) responses were analyzed. Among these, 181 (46%) respondents experienced death rattle. Of these, 66% reported high distress levels and 53% perceived a strong need for improved death rattle care. Factors influencing high distress levels were the gender (female) of family members, unawareness about death rattle being a natural phenomenon, and their fear and distressing interpretations of death rattle. Factors influencing perceptions of a strong need for improved care were the gender (male) of family members, severity of death rattle, death rattle-associated discomfort to patients, family members' experiences of inadequate nursing care (e.g., repositioning) and insufficient consultation about suctioning, and their perception of uncomfortable smells. Conclusion To decrease family-perceived distress, medical staff should alleviate patient symptoms and suffering with a comprehensive care strategy, try to decrease uncomfortable smells, and communicate with family members to address distressing interpretations and fears. Death rattle, respiratory sounds, neoplasm, terminal care",care strategy for death rattle in terminally ill cancer patients and their family members recommendations from a cross sectional nationwide survey of bereaved family members perceptions context bereaved family members witnessing a patient s death rattle often experience distress however the benefits of specific care measures aimed at decreasing death rattle associated family distress have not yet been evaluated objectives to clarify death rattle related emotional distress levels among family members and their perceptions of the need for death rattle care improvement and explore the factors influencing both these issues methods a cross sectional questionnaire survey of bereaved family members of cancer patients was conducted in 95 palliative care units in june 2007 results six hundred sixty three questionnaires were mailed out and 390 61 responses were analyzed among these 181 46 respondents experienced death rattle of these 66 reported high distress levels and 53 perceived a strong need for improved death rattle care factors influencing high distress levels were the gender female of family members unawareness about death rattle being a natural phenomenon and their fear and distressing interpretations of death rattle factors influencing perceptions of a strong need for improved care were the gender male of family members severity of death rattle death rattle associated discomfort to patients family members experiences of inadequate nursing care e g repositioning and insufficient consultation about suctioning and their perception of uncomfortable smells conclusion to decrease family perceived distress medical staff should alleviate patient symptoms and suffering with a comprehensive care strategy try to decrease uncomfortable smells and communicate with family members to address distressing interpretations and fears death rattle respiratory sounds neoplasm terminal care,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
44,0,"How to Make Your Enterprise Architecture Management Endeavor Fail! Enterprise architecture (EA) management is one of the major challenges of modern enterprises. It aims at aligning business and IT in order to optimize their interaction. In contrast to other EAM patterns, which document proven-practices concerning methodologies (M-Pattern), viewpoints (V-Pattern), or information models (I-Pattern), this article includes two anti patterns for EA management. Anti patterns detail on typical mistakes in EA management, and present revised solutions, which help pattern users to prevent these pitfalls. While the first anti pattern Oversized Information Model deals with problems arising from the usage of a giant information model, the second anti pattern Missing Legend shows why every visualization should provide a legend. []",how to make your enterprise architecture management endeavor fail enterprise architecture ea management is one of the major challenges of modern enterprises it aims at aligning business and it in order to optimize their interaction in contrast to other eam patterns which document proven practices concerning methodologies m pattern viewpoints v pattern or information models i pattern this article includes two anti patterns for ea management anti patterns detail on typical mistakes in ea management and present revised solutions which help pattern users to prevent these pitfalls while the first anti pattern oversized information model deals with problems arising from the usage of a giant information model the second anti pattern missing legend shows why every visualization should provide a legend,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
45,0,"The Sweet Smell of Success: Enhancing Multimedia Applications with Olfaction Olfaction, or smell, is one of the last challenges which multimedia applications have to conquer. As far as computerized smell is concerned, there are several difficulties to overcome, particularly those associated with the ambient nature of smell. In this article, we present results from an empirical study exploring users' perception of olfaction-enhanced multimedia displays. Findings show that olfaction significantly adds to the user multimedia experience. Moreover, use of olfaction leads to an increased sense of reality and relevance. Our results also show that users are tolerant of the interference and distortion effects caused by olfactory effect in multimedia. Human-computer interaction, Olfaction, multimedia quality, quality of perception",the sweet smell of success enhancing multimedia applications with olfaction olfaction or smell is one of the last challenges which multimedia applications have to conquer as far as computerized smell is concerned there are several difficulties to overcome particularly those associated with the ambient nature of smell in this article we present results from an empirical study exploring users perception of olfaction enhanced multimedia displays findings show that olfaction significantly adds to the user multimedia experience moreover use of olfaction leads to an increased sense of reality and relevance our results also show that users are tolerant of the interference and distortion effects caused by olfactory effect in multimedia human computer interaction olfaction multimedia quality quality of perception,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
46,0,"Embodied Media: Expanding Human Capacity via Virtual Reality and Telexistence (Keynote) The information we acquire in real life gives us a holistic experience that fully incorporates a variety of sensations and bodily motions such as seeing, hearing, speaking, touching, smelling, tasting, and moving. However, the sensory modalities that can be transmitted in our information space are usually limited to visual and auditory ones. Haptic information is rarely used in the information space in our daily lives except in the case of warnings or alerts such as cellphone vibrations. Embodied media such as virtual reality and telexistence should provide holistic sensations, i.e., integrating visual, auditory, haptic, palatal, olfactory, and kinesthetic sensations, such that human users feel that they are present in a computer-generated virtual information space or a remote space having an alternate presence in the environment. Haptics plays an important role in embodied media because it provides both proprioception and cutaneous sensations; it lets users feel like they are touching distant people and objects and also lets them ``touch'' artificial objects as they see them. In this keynote, an embodied media, which extends human experiences, is overviewed and our research on an embodied media that is both visible and tangible based on our proposed theory of haptic primary colors is introduced. The embodied media would enable telecommunication, tele-experience, and pseudo-experience providing sensations such that the user would feel like working in a natural environment. It would also enable humans to engage in creative activities such as design and creation as though they were in the real environment. We have succeeded in transmitting fine haptic sensations, such as material texture and temperature, from an avatar robot's fingers to a human user's fingers. The avatar robot is a telexistence anthropomorphic robot, called TELESAR V, with a body and limbs with 53 degrees of freedom. This robot can transmit not only visual and auditory sensations of presence to human users but also realistic haptic sensations. Our other inventions include RePro3D, which is a full-parallax autostereoscopic 3D (three-dimensional) display with haptic feedback using RPT (retroreflective projection technology); TECHTILE Toolkit, which is a prototyping tool for the design and improvement of haptic media; and HaptoMIRAGE, which is an 180$ ^\circ$-field-of-view autostereoscopic 3D display using ARIA (active-shuttered real image autostereoscopy) that can be used by three users simultaneously. RPT, TELESAR, Telexistence, VR, autostereoscopy, embodied media, haptics, robotics",embodied media expanding human capacity via virtual reality and telexistence keynote the information we acquire in real life gives us a holistic experience that fully incorporates a variety of sensations and bodily motions such as seeing hearing speaking touching smelling tasting and moving however the sensory modalities that can be transmitted in our information space are usually limited to visual and auditory ones haptic information is rarely used in the information space in our daily lives except in the case of warnings or alerts such as cellphone vibrations embodied media such as virtual reality and telexistence should provide holistic sensations i e integrating visual auditory haptic palatal olfactory and kinesthetic sensations such that human users feel that they are present in a computer generated virtual information space or a remote space having an alternate presence in the environment haptics plays an important role in embodied media because it provides both proprioception and cutaneous sensations it lets users feel like they are touching distant people and objects and also lets them touch artificial objects as they see them in this keynote an embodied media which extends human experiences is overviewed and our research on an embodied media that is both visible and tangible based on our proposed theory of haptic primary colors is introduced the embodied media would enable telecommunication tele experience and pseudo experience providing sensations such that the user would feel like working in a natural environment it would also enable humans to engage in creative activities such as design and creation as though they were in the real environment we have succeeded in transmitting fine haptic sensations such as material texture and temperature from an avatar robot s fingers to a human user s fingers the avatar robot is a telexistence anthropomorphic robot called telesar v with a body and limbs with 53 degrees of freedom this robot can transmit not only visual and auditory sensations of presence to human users but also realistic haptic sensations our other inventions include repro3d which is a full parallax autostereoscopic 3d three dimensional display with haptic feedback using rpt retroreflective projection technology techtile toolkit which is a prototyping tool for the design and improvement of haptic media and haptomirage which is an 180 circ field of view autostereoscopic 3d display using aria active shuttered real image autostereoscopy that can be used by three users simultaneously rpt telesar telexistence vr autostereoscopy embodied media haptics robotics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
47,0,"An Empirical Analysis on Fault-Proneness of Well-Commented Modules Comment statements are useful to enhance the readability and/or understandability of software modules. However, some comments may adjust the readability/understandability of code fragments that are too complicated and hard to understand-a kind of code smell. Consequently, some well-written comments may be signs of poorquality modules. This paper focuses on the lines of comments written in modules, and performs an empirical analysis with three major open source software and their fault data. The empirical results show that the risk of being faulty in wellcommented modules is about 2 to 8 times greater than noncommented modules. public domain software, software fault tolerance, well-commented module fault-proneness, comment statements, software modules, code fragment readability, code fragment understandability, open source software, fault data, Measurement, Correlation, Equations, Mathematical model, Open source software, Java, comment, code smell, fault-prone module, prediction",an empirical analysis on fault proneness of well commented modules comment statements are useful to enhance the readability and or understandability of software modules however some comments may adjust the readability understandability of code fragments that are too complicated and hard to understand a kind of code smell consequently some well written comments may be signs of poorquality modules this paper focuses on the lines of comments written in modules and performs an empirical analysis with three major open source software and their fault data the empirical results show that the risk of being faulty in wellcommented modules is about 2 to 8 times greater than noncommented modules public domain software software fault tolerance well commented module fault proneness comment statements software modules code fragment readability code fragment understandability open source software fault data measurement correlation equations mathematical model open source software java comment code smell fault prone module prediction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
48,0,"Revisiting Context-based Code Smells Prioritization: On Supporting Referred Context Because numerous code smells are revealed by code smell detectors, many attempts have been undertaken to mitigate related problems by prioritizing and filtering code smells. We earlier proposed a technique to prioritize code smells by leveraging the context of the developers, i.e., the modules that the developers plan to implement. Our empirical studies revealed that the results of code smells prioritized using our technique are useful to support developers' implementation on the modules they intend to change. Nonetheless, in software change processes, developers often navigate through many modules and refer to them before making actual changes. Such modules are important when considering the developers' context. Therefore, it is essential to ascertain whether our technique can also support developers on modules to which they are going to refer to make changes. We conducted an empirical study of an open source project adopting tools for recording developers' interaction history. Our results demonstrate that the code smells prioritized using our approach can also be used to support developers for modules to which developers are going to refer, irrespective of the need for modification. code smell, impact analysis, interaction history, issue tracking system",revisiting context based code smells prioritization on supporting referred context because numerous code smells are revealed by code smell detectors many attempts have been undertaken to mitigate related problems by prioritizing and filtering code smells we earlier proposed a technique to prioritize code smells by leveraging the context of the developers i e the modules that the developers plan to implement our empirical studies revealed that the results of code smells prioritized using our technique are useful to support developers implementation on the modules they intend to change nonetheless in software change processes developers often navigate through many modules and refer to them before making actual changes such modules are important when considering the developers context therefore it is essential to ascertain whether our technique can also support developers on modules to which they are going to refer to make changes we conducted an empirical study of an open source project adopting tools for recording developers interaction history our results demonstrate that the code smells prioritized using our approach can also be used to support developers for modules to which developers are going to refer irrespective of the need for modification code smell impact analysis interaction history issue tracking system,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
49,0,"Code Smells Revisited: A Variability Perspective Highly-configurable software systems (also called software product lines) gain momentum in both, academia and industry. For instance, the Linux kernel comes with over 12 000 configuration options and thus, can be customized to run on nearly every kind of system. To a large degree, this configurability is achieved through variable code structures, for instance, using conditional compilation. Such source code variability adds a new dimension of complexity, thus giving rise to new possibilities for design flaws. Code smells are an established concept to describe design flaws or decay in source code. However, existing smells have no notion of variability and thus do not support flaws regarding variable code structures. In this paper, we propose an initial catalog of four variability-aware code smells. We discuss the appearance and negative effects of these smells and present code examples from real-world systems. To evaluate our catalog, we have conducted a survey amongst 15 researchers from the field of software product lines. The results confirm that our proposed smells (a) have been observed in existing product lines and (b) are considered to be problematic for common software development activities, such as program comprehension, maintenance, and evolution. Code Smells, Design Defects, Software Product Lines, Variability",code smells revisited a variability perspective highly configurable software systems also called software product lines gain momentum in both academia and industry for instance the linux kernel comes with over 12 000 configuration options and thus can be customized to run on nearly every kind of system to a large degree this configurability is achieved through variable code structures for instance using conditional compilation such source code variability adds a new dimension of complexity thus giving rise to new possibilities for design flaws code smells are an established concept to describe design flaws or decay in source code however existing smells have no notion of variability and thus do not support flaws regarding variable code structures in this paper we propose an initial catalog of four variability aware code smells we discuss the appearance and negative effects of these smells and present code examples from real world systems to evaluate our catalog we have conducted a survey amongst 15 researchers from the field of software product lines the results confirm that our proposed smells a have been observed in existing product lines and b are considered to be problematic for common software development activities such as program comprehension maintenance and evolution code smells design defects software product lines variability,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
50,0,"Management of chronic rhinosinusitis Summary Chronic rhinosinusitis (CRS) is one of the most common reasons that persons seek medical care.1 CRS may originate from or be perpetuated by local or systemic factors predisposing to sinus ostial obstruction and infection. These factors include anatomic or inflammatory factors leading to sinus ostial narrowing, disturbances in mucociliary transport, and subsequent infection. CRS is diagnosed by various symptoms (lasting for at least 12 weeks), which include long-term nasal congestion, thick mucus production, loss of sense of smell, sinus pressure, and facial pain, as well as physical and radiographic evidence of mucosal swelling. The goal of medical management is to reduce the swelling and inflammation, especially of the ostia, and promote drainage and a more normal nasal environment. The medical treatment should include empiric broad-spectrum antibiotics with adjunctive therapy, including nasal and oral steroids, decongestants, expectorants, and saline nasal irrigation. If symptoms improve after four weeks of treatment initiation, it is recommended that the nasal steroid sprays and nasal saline irrigations should continue for at least three months. If symptoms do not improve and there is still presence of CRS signs and symptoms, the patient should be referred to an appropriate specialist for further management. Chronic rhinosinusitis, Sinusitis",management of chronic rhinosinusitis summary chronic rhinosinusitis crs is one of the most common reasons that persons seek medical care 1 crs may originate from or be perpetuated by local or systemic factors predisposing to sinus ostial obstruction and infection these factors include anatomic or inflammatory factors leading to sinus ostial narrowing disturbances in mucociliary transport and subsequent infection crs is diagnosed by various symptoms lasting for at least 12 weeks which include long term nasal congestion thick mucus production loss of sense of smell sinus pressure and facial pain as well as physical and radiographic evidence of mucosal swelling the goal of medical management is to reduce the swelling and inflammation especially of the ostia and promote drainage and a more normal nasal environment the medical treatment should include empiric broad spectrum antibiotics with adjunctive therapy including nasal and oral steroids decongestants expectorants and saline nasal irrigation if symptoms improve after four weeks of treatment initiation it is recommended that the nasal steroid sprays and nasal saline irrigations should continue for at least three months if symptoms do not improve and there is still presence of crs signs and symptoms the patient should be referred to an appropriate specialist for further management chronic rhinosinusitis sinusitis,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
51,0,"An empirical investigation into the nature of test smells Test smells have been defined as poorly designed tests and, as reported by recent empirical studies, their presence may negatively affect comprehension and maintenance of test suites. Despite this, there are no available automated tools to support identification and repair of test smells. In this paper, we firstly investigate developers' perception of test smells in a study with 19 participants. The results show that developers generally do not recognize (potentially harmful) test smells, highlighting that automated tools for identifying such smells are much needed. However, to build effective tools, deeper insights into the test smells phenomenon are required. To this aim, we conducted a large-scale empirical investigation aimed at analyzing (i) when test smells occur in source code, (ii) what their survivability is, and (iii) whether their presence is associated with the presence of design problems in production code (code smells). The results indicate that test smells are usually introduced when the corresponding test code is committed in the repository for the first time, and they tend to remain in a system for a long time. Moreover, we found various unexpected relationships between test and code smells. Finally, we show how the results of this study can be used to build effective automated tools for test smell detection and refactoring. software maintenance, source code (software), test smells, test suites maintenance, automated tools, source code, production code, code smells, Production, Maintenance engineering, Data mining, Testing, History, Software systems, Test Smells, Mining Software Repositories, Software Evolution",an empirical investigation into the nature of test smells test smells have been defined as poorly designed tests and as reported by recent empirical studies their presence may negatively affect comprehension and maintenance of test suites despite this there are no available automated tools to support identification and repair of test smells in this paper we firstly investigate developers perception of test smells in a study with 19 participants the results show that developers generally do not recognize potentially harmful test smells highlighting that automated tools for identifying such smells are much needed however to build effective tools deeper insights into the test smells phenomenon are required to this aim we conducted a large scale empirical investigation aimed at analyzing i when test smells occur in source code ii what their survivability is and iii whether their presence is associated with the presence of design problems in production code code smells the results indicate that test smells are usually introduced when the corresponding test code is committed in the repository for the first time and they tend to remain in a system for a long time moreover we found various unexpected relationships between test and code smells finally we show how the results of this study can be used to build effective automated tools for test smell detection and refactoring software maintenance source code software test smells test suites maintenance automated tools source code production code code smells production maintenance engineering data mining testing history software systems test smells mining software repositories software evolution,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
52,0,"Breaking BLE Beacons For Fun But Mostly Profit Bluetooth Low Energy (BLE) Beacons introduced a novel technology that enables devices to advertise their presence in an area by constantly broadcasting a static unique identifier. The aim was to enhance services with location and context awareness. Although the hardware components of typical BLE Beacons systems are able to support adequate cryptography, the design and implementation of most publicly available BLE Beacon protocols appears to render them vulnerable to a plethora of attacks. Indeed, in this paper, we were able to perform user tracking, user behavior monitoring, spoofing as well as denial of service (DoS) of many supported services. Our aim is to show that these attacks stem from design flaws of the underlying protocols and assumptions made for the BLE beacons protocols. Using a clearly defined threat model, we provide a formal analysis of the adversarial capabilities and requirements and the attack impact on security and privacy for the end-user. Contrary to popular belief, BLE technology can be exploited even by low-skilled adversaries leading to exposure of user information. To demonstrate our attacks in practice, we selected Apple's iBeacon technology, as a case study. However, our analysis can be easily generalized to other BLE Beacon technologies. []",breaking ble beacons for fun but mostly profit bluetooth low energy ble beacons introduced a novel technology that enables devices to advertise their presence in an area by constantly broadcasting a static unique identifier the aim was to enhance services with location and context awareness although the hardware components of typical ble beacons systems are able to support adequate cryptography the design and implementation of most publicly available ble beacon protocols appears to render them vulnerable to a plethora of attacks indeed in this paper we were able to perform user tracking user behavior monitoring spoofing as well as denial of service dos of many supported services our aim is to show that these attacks stem from design flaws of the underlying protocols and assumptions made for the ble beacons protocols using a clearly defined threat model we provide a formal analysis of the adversarial capabilities and requirements and the attack impact on security and privacy for the end user contrary to popular belief ble technology can be exploited even by low skilled adversaries leading to exposure of user information to demonstrate our attacks in practice we selected apple s ibeacon technology as a case study however our analysis can be easily generalized to other ble beacon technologies,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
53,0,"A Comparative Evaluation of Static Analysis Actionable Alert Identification Techniques Automated static analysis (ASA) tools can identify potential source code anomalies that could lead to field failures. Developer inspection is required to determine if an ASA alert is important enough to fix, or an actionable alert. Supplementing current ASA tools with automated identification of actionable alerts could reduce developer inspection overhead, leading to an increase in industry adoption of ASA tools. The goal of this research is to inform the selection of an actionable alert identification technique for ranking the output of automated static analysis through a comparative evaluation of actionable alert identification techniques. We investigated six actionable alert identification techniques on three subject projects. Among these six techniques, the systematic actionable alert identification (SAAI) technique reported an average accuracy of 82.5% across the three subject projects when considering both ASA tools evaluated. Check 'n' Crash reported an average accuracy of 85.8% for the single ASA tool evaluated. The other actionable alert identification techniques had average accuracies ranging from 42.2%-78.2%. actionable static analysis alert identification, automated static analysis, comparative evaluation",a comparative evaluation of static analysis actionable alert identification techniques automated static analysis asa tools can identify potential source code anomalies that could lead to field failures developer inspection is required to determine if an asa alert is important enough to fix or an actionable alert supplementing current asa tools with automated identification of actionable alerts could reduce developer inspection overhead leading to an increase in industry adoption of asa tools the goal of this research is to inform the selection of an actionable alert identification technique for ranking the output of automated static analysis through a comparative evaluation of actionable alert identification techniques we investigated six actionable alert identification techniques on three subject projects among these six techniques the systematic actionable alert identification saai technique reported an average accuracy of 82 5 across the three subject projects when considering both asa tools evaluated check n crash reported an average accuracy of 85 8 for the single asa tool evaluated the other actionable alert identification techniques had average accuracies ranging from 42 2 78 2 actionable static analysis alert identification automated static analysis comparative evaluation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
54,0,"Investigating the Relationship Between Bad Smells and Bugs in Software Systems Bad smell is a design choice that can degrade different aspects of the source code quality of a software, such as comprehensibility and changeability. Researchers believe that the occurrence of bad smells can lead to the introduction of bugs during maintenance activities. However, there are few studies concerning the impacts of bad smells. Thus, in order to provide more experimental evidence about the impacts of bad smells on software development and maintenance, we conducted an experimental study aiming at investigating the relationship between the occurrence of bad smells and the occurrence of bugs. In this study we evaluated five open-source systems from the Apache community. The results show that classes with bad smells are slightly more related to the occurrence of bugs than classes without bad smells. bad smells, bugs, object-oriented design, software quality, software repositories",investigating the relationship between bad smells and bugs in software systems bad smell is a design choice that can degrade different aspects of the source code quality of a software such as comprehensibility and changeability researchers believe that the occurrence of bad smells can lead to the introduction of bugs during maintenance activities however there are few studies concerning the impacts of bad smells thus in order to provide more experimental evidence about the impacts of bad smells on software development and maintenance we conducted an experimental study aiming at investigating the relationship between the occurrence of bad smells and the occurrence of bugs in this study we evaluated five open source systems from the apache community the results show that classes with bad smells are slightly more related to the occurrence of bugs than classes without bad smells bad smells bugs object oriented design software quality software repositories,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
55,0,"An Interactive Ambient Visualization for Code Smells Code smells are characteristics of software that indicate that code may have a design problem. Code smells have been proposed as a way for programmers to recognize the need for restructuring their software. Because code smells can go unnoticed while programmers are working, tools called smell detectors have been developed to alert programmers to the presence of smells in their code, and to help them understand the cause of those smells. In this paper, we propose a novel smell detector called Stench Blossom that provides an interactive ambient visualization designed to first give programmers a quick, high-level overview of the smells in their code, and then, if they wish, to help in understanding the sources of those code smells. We also describe a laboratory experiment with 12 programmers that tests several hypotheses about our tool. Our findings suggest that programmers can use our tool effectively to identify smells and to make refactoring judgements. This is partly because the tool serves as a memory aid, and partly because it is more reliable and easier to use than heuristics for analyzing smells. code smells, refactoring, software, usability",an interactive ambient visualization for code smells code smells are characteristics of software that indicate that code may have a design problem code smells have been proposed as a way for programmers to recognize the need for restructuring their software because code smells can go unnoticed while programmers are working tools called smell detectors have been developed to alert programmers to the presence of smells in their code and to help them understand the cause of those smells in this paper we propose a novel smell detector called stench blossom that provides an interactive ambient visualization designed to first give programmers a quick high level overview of the smells in their code and then if they wish to help in understanding the sources of those code smells we also describe a laboratory experiment with 12 programmers that tests several hypotheses about our tool our findings suggest that programmers can use our tool effectively to identify smells and to make refactoring judgements this is partly because the tool serves as a memory aid and partly because it is more reliable and easier to use than heuristics for analyzing smells code smells refactoring software usability,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
56,0,"On the Diffusion of Test Smells in Automatically Generated Test Code: An Empirical Study The role of software testing in the software development process is widely recognized as a key activity for successful projects. This is the reason why in the last decade several automatic unit test generation tools have been proposed, focusing particularly on high code coverage. Despite the effort spent by the research community, there is still a lack of empirical investigation aimed at analyzing the characteristics of the produced test code. Indeed, while some studies inspected the effectiveness and the usability of these tools in practice, it is still unknown whether test code is maintainable. In this paper, we conducted a large scale empirical study in order to analyze the diffusion of bad design solutions, namely test smells, in automatically generated unit test classes. Results of the study show the high diffusion of test smells as well as the frequent co-occurrence of different types of design problems. Finally we found that all test smells have strong positive correlation with structural characteristics of the systems such as size or number of classes. automatically generated test classes, empirical studies, mining software repositories, software quality, test smells",on the diffusion of test smells in automatically generated test code an empirical study the role of software testing in the software development process is widely recognized as a key activity for successful projects this is the reason why in the last decade several automatic unit test generation tools have been proposed focusing particularly on high code coverage despite the effort spent by the research community there is still a lack of empirical investigation aimed at analyzing the characteristics of the produced test code indeed while some studies inspected the effectiveness and the usability of these tools in practice it is still unknown whether test code is maintainable in this paper we conducted a large scale empirical study in order to analyze the diffusion of bad design solutions namely test smells in automatically generated unit test classes results of the study show the high diffusion of test smells as well as the frequent co occurrence of different types of design problems finally we found that all test smells have strong positive correlation with structural characteristics of the systems such as size or number of classes automatically generated test classes empirical studies mining software repositories software quality test smells,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
57,0,"Revealing Design Problems in Stinky Code: A Mixed-method Study Developers often have to locate design problems in the source code. Several types of design problem may manifest as code smells in the program. A code smell is a source code structure that may reveal a partial hint about the manifestation of a design problem. Recent studies suggest that developers should ignore smells occurring in isolation in a program location. Instead, they should focus on analyzing stinkier code, i.e. program locations - e.g., a class or a hierarchy - affected by multiple smells. The stinkier a program location is, more likely it contains a design problem. However, there is limited understanding if developers can effectively identify a design problem in stinkier code. Developers may struggle to make a meaning out of inter-related smells affecting the same program location. To address this matter, we applied a mixed-method approach to analyze if and how developers can effectively find design problems when reflecting upon stinky code - i.e., a program location affected by multiple smells. We performed an experiment and an interview with 11 professionals. Surprisingly, our analysis revealed that only 36.36% of the developers found more design problems when explicitly reasoning about multiple smells as compared to single smells. On the other hand, 63.63% of the developers reported much lesser false positives. Developers reported that analyses of stinky code scattered in class hierarchies or packages is often difficult, time consuming, and requires proper visualization support. Moreover, it remains time-consuming to discard stinky program locations that do not represent design problems. agglomeration, code smell, design problem, software design",revealing design problems in stinky code a mixed method study developers often have to locate design problems in the source code several types of design problem may manifest as code smells in the program a code smell is a source code structure that may reveal a partial hint about the manifestation of a design problem recent studies suggest that developers should ignore smells occurring in isolation in a program location instead they should focus on analyzing stinkier code i e program locations e g a class or a hierarchy affected by multiple smells the stinkier a program location is more likely it contains a design problem however there is limited understanding if developers can effectively identify a design problem in stinkier code developers may struggle to make a meaning out of inter related smells affecting the same program location to address this matter we applied a mixed method approach to analyze if and how developers can effectively find design problems when reflecting upon stinky code i e a program location affected by multiple smells we performed an experiment and an interview with 11 professionals surprisingly our analysis revealed that only 36 36 of the developers found more design problems when explicitly reasoning about multiple smells as compared to single smells on the other hand 63 63 of the developers reported much lesser false positives developers reported that analyses of stinky code scattered in class hierarchies or packages is often difficult time consuming and requires proper visualization support moreover it remains time consuming to discard stinky program locations that do not represent design problems agglomeration code smell design problem software design,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
58,0,"Breaking Undercover: Exploiting Design Flaws and Nonuniform Human Behavior This paper reports two attacks on Undercover, a human authentication scheme against passive observers proposed at CHI 2008. The first attack exploits nonuniform human behavior in responding to authentication challenges and the second one is based on information leaked from authentication challenges or responses visible to the attacker. The second attack can be generalized to break two alternative Undercover designs presented at Pervasive 2009. All the attacks exploit design flaws of the Undercover implementations. Theoretical and experimental analyses show that both attacks can reveal the user's password with high probability with O(10) observed login sessions. Both attacks were verified by using the login data collected in a user study with 28 participants. We also propose some enhancements to make Undercover secure against the attacks reported in this paper. Our research in breaking and improving Undercover leads to two broader implications. First, it reemphasizes the principle of ""devil is in details"" for the design of security-related human-computer interface. Secondly, it reveals a subtle relationship between security and usability: human users may behave in an insecure way to compromise the security of a system. To design a secure human-computer interface, designers should pay special attention to possible negative influence of any detail of the interface including how human users interact with the system. audio channel, intersection attack, observation attack, passwords, tactile device, timing attack, undercover",breaking undercover exploiting design flaws and nonuniform human behavior this paper reports two attacks on undercover a human authentication scheme against passive observers proposed at chi 2008 the first attack exploits nonuniform human behavior in responding to authentication challenges and the second one is based on information leaked from authentication challenges or responses visible to the attacker the second attack can be generalized to break two alternative undercover designs presented at pervasive 2009 all the attacks exploit design flaws of the undercover implementations theoretical and experimental analyses show that both attacks can reveal the user s password with high probability with o 10 observed login sessions both attacks were verified by using the login data collected in a user study with 28 participants we also propose some enhancements to make undercover secure against the attacks reported in this paper our research in breaking and improving undercover leads to two broader implications first it reemphasizes the principle of devil is in details for the design of security related human computer interface secondly it reveals a subtle relationship between security and usability human users may behave in an insecure way to compromise the security of a system to design a secure human computer interface designers should pay special attention to possible negative influence of any detail of the interface including how human users interact with the system audio channel intersection attack observation attack passwords tactile device timing attack undercover,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
59,0,"Modelling Access Propagation in Dynamic Systems Access control is a critical feature of many systems, including networks of services, processes within a computer, and objects within a running process. The security consequences of a particular architecture or access control policy are often difficult to determine, especially where some components are not under our control, where components are created dynamically, or where access policies are updated dynamically. The SERSCIS Access Modeller (SAM) takes a model of a system and explores how access can propagate through it. It can both prove defined safety properties and discover unwanted properties. By defining expected behaviours, recording the results as a baseline, and then introducing untrusted actors, SAM can discover a wide variety of design flaws. SAM is designed to handle dynamic systems (i.e., at runtime, new objects are created and access policies modified) and systems where some objects are not trusted. It extends previous approaches such as Scollar and Authodox to provide a programmer-friendly syntax for specifying behaviour, and allows modelling of services with mutually suspicious clients. Taking the Confused Deputy example from Authodox we show that SAM detects the attack automatically; using a web-based backup service, we show how to model RBAC systems, detecting a missing validation check; and using a proxy certificate system, we show how to extend it to model new access mechanisms. On discovering that a library fails to follow an RFC precisely, we re-evaluate our existing models under the new assumption and discover that the proxy certificate design is not safe with this library. Object-capabilities, datalog, proxy certificates",modelling access propagation in dynamic systems access control is a critical feature of many systems including networks of services processes within a computer and objects within a running process the security consequences of a particular architecture or access control policy are often difficult to determine especially where some components are not under our control where components are created dynamically or where access policies are updated dynamically the serscis access modeller sam takes a model of a system and explores how access can propagate through it it can both prove defined safety properties and discover unwanted properties by defining expected behaviours recording the results as a baseline and then introducing untrusted actors sam can discover a wide variety of design flaws sam is designed to handle dynamic systems i e at runtime new objects are created and access policies modified and systems where some objects are not trusted it extends previous approaches such as scollar and authodox to provide a programmer friendly syntax for specifying behaviour and allows modelling of services with mutually suspicious clients taking the confused deputy example from authodox we show that sam detects the attack automatically using a web based backup service we show how to model rbac systems detecting a missing validation check and using a proxy certificate system we show how to extend it to model new access mechanisms on discovering that a library fails to follow an rfc precisely we re evaluate our existing models under the new assumption and discover that the proxy certificate design is not safe with this library object capabilities datalog proxy certificates,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
60,0,"An Annotation-based API for Supporting Runtime Code Annotation Reading Code annotations are the core of the main APIs and frameworks for enterprise development, and are widely used on several applications. However, despite these APIs and frameworks made advanced uses of annotations, the language API for annotation reading is far from their needs. In particular, annotation reading is still a relatively complex task, that can consume a lot of development time and that can couple the framework internal structure to its annotations. This paper proposes an annotation-based API to retrieve metadata from code annotations and populate an instance with meta-information ready to be used by the framework. The proposed API is based on best practices and approaches for metadata definition documented on patterns, and has been implemented by a framework named Esfinge Metadata. We evaluated the approach by refactoring an existing framework to use it through Esfinge Metadata. The original and the refactored versions are compared using several code assessment techniques, such as software metrics, and bad smells detection, followed by a qualitative analysis based on source code inspection. As a result, the case study revealed that the usage of the proposed API can reduce the coupling between the metadata reading code and the annotations. code annotation, framework development, metadata",an annotation based api for supporting runtime code annotation reading code annotations are the core of the main apis and frameworks for enterprise development and are widely used on several applications however despite these apis and frameworks made advanced uses of annotations the language api for annotation reading is far from their needs in particular annotation reading is still a relatively complex task that can consume a lot of development time and that can couple the framework internal structure to its annotations this paper proposes an annotation based api to retrieve metadata from code annotations and populate an instance with meta information ready to be used by the framework the proposed api is based on best practices and approaches for metadata definition documented on patterns and has been implemented by a framework named esfinge metadata we evaluated the approach by refactoring an existing framework to use it through esfinge metadata the original and the refactored versions are compared using several code assessment techniques such as software metrics and bad smells detection followed by a qualitative analysis based on source code inspection as a result the case study revealed that the usage of the proposed api can reduce the coupling between the metadata reading code and the annotations code annotation framework development metadata,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
61,0,"Applying Software Metric Thresholds for Detection of Bad Smells Software metrics can be an effective measurement tool to assess the quality of software. In the literature, there are a lot of software metrics applicable to systems implemented in different paradigms like Objects Oriented Programming (OOP). To guide the use of these metrics in the evaluation of the quality of software systems, it is important to define their thresholds. The aim of this study is to investigate the effectiveness of the thresholds in the evaluation of the quality of object oriented software. To do that, we used a threshold catalog of 18 software metrics derived from 100 software systems to define detection strategies for five bad smells. They are: Large Class, Long Method, Data Class, Feature Envy and Refused Bequest. We investigate the effectiveness of the thresholds in detection analysis of 12 software systems using these strategies. The results obtained by the proposed strategies were compared with the results obtained by the tools JDeodorant and JSPiRIT, used to identify bad smells. This study shows that the metric thresholds were significantly effective in supporting the detection of bad smells. bad smells detection, software metrics, software quality, thresholds",applying software metric thresholds for detection of bad smells software metrics can be an effective measurement tool to assess the quality of software in the literature there are a lot of software metrics applicable to systems implemented in different paradigms like objects oriented programming oop to guide the use of these metrics in the evaluation of the quality of software systems it is important to define their thresholds the aim of this study is to investigate the effectiveness of the thresholds in the evaluation of the quality of object oriented software to do that we used a threshold catalog of 18 software metrics derived from 100 software systems to define detection strategies for five bad smells they are large class long method data class feature envy and refused bequest we investigate the effectiveness of the thresholds in detection analysis of 12 software systems using these strategies the results obtained by the proposed strategies were compared with the results obtained by the tools jdeodorant and jspirit used to identify bad smells this study shows that the metric thresholds were significantly effective in supporting the detection of bad smells bad smells detection software metrics software quality thresholds,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
62,0,"Olfactory Adaptation in Virtual Environments Visual perception is becoming increasingly important in computer graphics. Research on human visual perception has led to the development of perception-driven computer graphics techniques, where knowledge of the human visual system (HVS) and, in particular, its weaknesses are exploited when rendering and displaying 3D graphics. Findings on limitations of the HVS have been used to maintain high perceived quality but reduce the computed quality of some of the image without this quality difference being perceived. This article investigates the amount of time for which (if at all) such limitations could be exploited in the presence of smell. The results show that for our experiment, adaptation to smell does indeed affect participants' ability to determine quality difference in the animations. Having been exposed to a smell before undertaking the experiment, participants were able to determine the quality in a similar fashion to the ``no smell'' condition, whereas without adaptation, participants were not able to distinguish the quality difference. Adaptation to smell, high-fidelity graphics",olfactory adaptation in virtual environments visual perception is becoming increasingly important in computer graphics research on human visual perception has led to the development of perception driven computer graphics techniques where knowledge of the human visual system hvs and in particular its weaknesses are exploited when rendering and displaying 3d graphics findings on limitations of the hvs have been used to maintain high perceived quality but reduce the computed quality of some of the image without this quality difference being perceived this article investigates the amount of time for which if at all such limitations could be exploited in the presence of smell the results show that for our experiment adaptation to smell does indeed affect participants ability to determine quality difference in the animations having been exposed to a smell before undertaking the experiment participants were able to determine the quality in a similar fashion to the no smell condition whereas without adaptation participants were not able to distinguish the quality difference adaptation to smell high fidelity graphics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
63,0,"Code-Smell Detection As a Bilevel Problem Code smells represent design situations that can affect the maintenance and evolution of software. They make the system difficult to evolve. Code smells are detected, in general, using quality metrics that represent some symptoms. However, the selection of suitable quality metrics is challenging due to the absence of consensus in identifying some code smells based on a set of symptoms and also the high calibration effort in determining manually the threshold value for each metric. In this article, we propose treating the generation of code-smell detection rules as a bilevel optimization problem. Bilevel optimization problems represent a class of challenging optimization problems, which contain two levels of optimization tasks. In these problems, only the optimal solutions to the lower-level problem become possible feasible candidates to the upper-level problem. In this sense, the code-smell detection problem can be treated as a bilevel optimization problem, but due to lack of suitable solution techniques, it has been attempted to be solved as a single-level optimization problem in the past. In our adaptation here, the upper-level problem generates a set of detection rules, a combination of quality metrics, which maximizes the coverage of the base of code-smell examples and artificial code smells generated by the lower level. The lower level maximizes the number of generated artificial code smells that cannot be detected by the rules produced by the upper level. The main advantage of our bilevel formulation is that the generation of detection rules is not limited to some code-smell examples identified manually by developers that are difficult to collect, but it allows the prediction of new code-smell behavior that is different from those of the base of examples. The statistical analysis of our experiments over 31 runs on nine open-source systems and one industrial project shows that seven types of code smells were detected with an average of more than 86% in terms of precision and recall. The results confirm the outperformance of our bilevel proposal compared to state-of-art code-smell detection techniques. The evaluation performed by software engineers also confirms the relevance of detected code smells to improve the quality of software systems. Search-based software engineering, code smells, software quality",code smell detection as a bilevel problem code smells represent design situations that can affect the maintenance and evolution of software they make the system difficult to evolve code smells are detected in general using quality metrics that represent some symptoms however the selection of suitable quality metrics is challenging due to the absence of consensus in identifying some code smells based on a set of symptoms and also the high calibration effort in determining manually the threshold value for each metric in this article we propose treating the generation of code smell detection rules as a bilevel optimization problem bilevel optimization problems represent a class of challenging optimization problems which contain two levels of optimization tasks in these problems only the optimal solutions to the lower level problem become possible feasible candidates to the upper level problem in this sense the code smell detection problem can be treated as a bilevel optimization problem but due to lack of suitable solution techniques it has been attempted to be solved as a single level optimization problem in the past in our adaptation here the upper level problem generates a set of detection rules a combination of quality metrics which maximizes the coverage of the base of code smell examples and artificial code smells generated by the lower level the lower level maximizes the number of generated artificial code smells that cannot be detected by the rules produced by the upper level the main advantage of our bilevel formulation is that the generation of detection rules is not limited to some code smell examples identified manually by developers that are difficult to collect but it allows the prediction of new code smell behavior that is different from those of the base of examples the statistical analysis of our experiments over 31 runs on nine open source systems and one industrial project shows that seven types of code smells were detected with an average of more than 86 in terms of precision and recall the results confirm the outperformance of our bilevel proposal compared to state of art code smell detection techniques the evaluation performed by software engineers also confirms the relevance of detected code smells to improve the quality of software systems search based software engineering code smells software quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
64,0,"The Sensation of Taste in the Future of Immersive Media To create a truly immersive virtual experience, perceiving information through multiple human senses is important. Therefore, new forms of media are required that deeply involve various human senses -not only sight, sound, and touch, but also nontraditional senses like taste and smell- to create a perception of presence in a non-physical environment. However, at present, the sensation of taste is considered as one of the final frontiers of immersive media to be achieved. This paper discusses key aspects and opportunities of including the sensation of taste in the future of immersive media technologies. As a solution, we then present 'Taste+' utensils that digitally enhance the taste sensations of food and beverages without additional flavoring ingredients. Finally, we envision several future usage scenarios and challenges of the indicated technology to facilitate future immersive digital experiences. gustation, multimodal interaction, perceptual immersion, taste, taste interfaces, virtual taste",the sensation of taste in the future of immersive media to create a truly immersive virtual experience perceiving information through multiple human senses is important therefore new forms of media are required that deeply involve various human senses not only sight sound and touch but also nontraditional senses like taste and smell to create a perception of presence in a non physical environment however at present the sensation of taste is considered as one of the final frontiers of immersive media to be achieved this paper discusses key aspects and opportunities of including the sensation of taste in the future of immersive media technologies as a solution we then present taste utensils that digitally enhance the taste sensations of food and beverages without additional flavoring ingredients finally we envision several future usage scenarios and challenges of the indicated technology to facilitate future immersive digital experiences gustation multimodal interaction perceptual immersion taste taste interfaces virtual taste,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
65,0,"On Experimenting Refactoring Tools to Remove Code Smells When we develop a software project of a certain complexity, source code maintainability could become a problem, in particular if developers do not use a consolidate development process that simplifies the management of the entire project. When source code becomes very complex, it is difficult for developers to share and modify it. We can improve internal software qualities such as reusability, maintainability and readability through refactoring. Refactoring can be applied to remove possible problems in the code, as code smells. Identifying code smells and removing them through refactoring results in better code maintainability, but it can be an overwhelming task. In this paper, we describe our experimentation on using four refactoring tools to remove code smells in four systems, with the aim to outline advantages and disadvantages of the tools with respect to the accomplishment of this task, and to identify the smells easier to be removed among the ones we considered in this paper. code smells, refactoring",on experimenting refactoring tools to remove code smells when we develop a software project of a certain complexity source code maintainability could become a problem in particular if developers do not use a consolidate development process that simplifies the management of the entire project when source code becomes very complex it is difficult for developers to share and modify it we can improve internal software qualities such as reusability maintainability and readability through refactoring refactoring can be applied to remove possible problems in the code as code smells identifying code smells and removing them through refactoring results in better code maintainability but it can be an overwhelming task in this paper we describe our experimentation on using four refactoring tools to remove code smells in four systems with the aim to outline advantages and disadvantages of the tools with respect to the accomplishment of this task and to identify the smells easier to be removed among the ones we considered in this paper code smells refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
66,0,"Detecting Missing Method Calls As Violations of the Majority Rule When using object-oriented frameworks it is easy to overlook certain important method calls that are required at particular places in code. In this article, we provide a comprehensive set of empirical facts on this problem, starting from traces of missing method calls in a bug repository. We propose a new system that searches for missing method calls in software based on the other method calls that are observable. Our key insight is that the voting theory concept of majority rule holds for method calls: a call is likely to be missing if there is a majority of similar pieces of code where this call is present. The evaluation shows that the system predictions go further missing method calls and often reveal different kinds of code smells (e.g., violations of API best practices). Bugdetection, data mining, static analysis",detecting missing method calls as violations of the majority rule when using object oriented frameworks it is easy to overlook certain important method calls that are required at particular places in code in this article we provide a comprehensive set of empirical facts on this problem starting from traces of missing method calls in a bug repository we propose a new system that searches for missing method calls in software based on the other method calls that are observable our key insight is that the voting theory concept of majority rule holds for method calls a call is likely to be missing if there is a majority of similar pieces of code where this call is present the evaluation shows that the system predictions go further missing method calls and often reveal different kinds of code smells e g violations of api best practices bugdetection data mining static analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
67,0,"Understanding the Evolution of Code Smells by Observing Code Smell Clusters Code smells are more likely to stay inter-connected in software rather than remaining as a single instance. These code smell clusters create maintainability issues in evolving software. This paper aims to understand the evolution of the code smells in software, by analyzing the behavior of these clusters such as size, number and connectivity. For this, the clusters are first identified and then these characteristics are observed. The identification of code smell clusters is performed in three steps - detection of code smells (God Class, Long Method, Feature Envy, Type Checking) using smell detection tools, extraction of their relationships by analyzing the source code architecture, and generation of graphs from the identified smells and their relationships, that finally reveals the smelly clusters. This analysis was executed on JUnit as a case study, and four important cluster behaviors were reported. graph theory, software architecture, software maintenance, source code (software), code smell evolution, code smell cluster, software maintainability, source code architecture, graph generation, Software, Image edge detection, Iron, Feature extraction, Standards, Computer architecture, Libraries, Code smell evolution, smell cluster, code smell cluster, smell cluster evolution, smell evolution pattern, smell mega cluster",understanding the evolution of code smells by observing code smell clusters code smells are more likely to stay inter connected in software rather than remaining as a single instance these code smell clusters create maintainability issues in evolving software this paper aims to understand the evolution of the code smells in software by analyzing the behavior of these clusters such as size number and connectivity for this the clusters are first identified and then these characteristics are observed the identification of code smell clusters is performed in three steps detection of code smells god class long method feature envy type checking using smell detection tools extraction of their relationships by analyzing the source code architecture and generation of graphs from the identified smells and their relationships that finally reveals the smelly clusters this analysis was executed on junit as a case study and four important cluster behaviors were reported graph theory software architecture software maintenance source code software code smell evolution code smell cluster software maintainability source code architecture graph generation software image edge detection iron feature extraction standards computer architecture libraries code smell evolution smell cluster code smell cluster smell cluster evolution smell evolution pattern smell mega cluster,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
68,0,"Size and Cohesion Metrics As Indicators of the Long Method Bad Smell: An Empirical Study Source code bad smells are usually resolved through the application of well-defined solutions, i.e., refactorings. In the literature, software metrics are used as indicators of the existence and prioritization of resolving bad smells. In this paper, we focus on the long method smell (i.e. one of the most frequent and persistent bad smells) that can be resolved by the extract method refactoring. Until now, the identification of long methods or extract method opportunities has been performed based on cohesion, size or complexity metrics. However, the empirical validation of these metrics has exhibited relatively low accuracy with regard to their capacity to indicate the existence of long methods or extract method opportunities. Thus, we empirically explore the ability of size and cohesion metrics to predict the existence and the refactoring urgency of long method occurrences, through a case study on java open-source methods. The results of the study suggest that one size and four cohesion metrics are capable of characterizing the need and urgency for resolving the long method bad smell, with a higher accuracy compared to the previous studies. The obtained results are discussed by providing possible interpretations and implications to practitioners and researchers. Long method, case study, cohesion, metrics, size",size and cohesion metrics as indicators of the long method bad smell an empirical study source code bad smells are usually resolved through the application of well defined solutions i e refactorings in the literature software metrics are used as indicators of the existence and prioritization of resolving bad smells in this paper we focus on the long method smell i e one of the most frequent and persistent bad smells that can be resolved by the extract method refactoring until now the identification of long methods or extract method opportunities has been performed based on cohesion size or complexity metrics however the empirical validation of these metrics has exhibited relatively low accuracy with regard to their capacity to indicate the existence of long methods or extract method opportunities thus we empirically explore the ability of size and cohesion metrics to predict the existence and the refactoring urgency of long method occurrences through a case study on java open source methods the results of the study suggest that one size and four cohesion metrics are capable of characterizing the need and urgency for resolving the long method bad smell with a higher accuracy compared to the previous studies the obtained results are discussed by providing possible interpretations and implications to practitioners and researchers long method case study cohesion metrics size,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
69,0,"Olfactory changes among patients receiving chemotherapy Taste and smell changes (TSCs) are known side effects of chemotherapy, but smell changes (SCs) in the absence of taste changes are understudied. This study aims to explore SCs occurring without taste changes during chemotherapy, to better understand the characteristics of such changes, and how these experiences affect patients in their daily lives. Data derives from a qualitative interview study and a cross-sectional survey of 518 patients, with all patients receiving out-patient cancer chemotherapy in Sweden. Case studies of three patients with SCs and the 8% of survey participants with SCs only are in focus. All 43 participants with exclusively SCs reported increased sensitivity to one or several odors, with no participants reporting decreased sensitivity. Those reporting SCs significantly more often reported weight gain than those reporting TSCs, with oral problems and appetite loss significantly less common in the SC group. There were no differences in reported nausea between SC and TSC groups, but nausea was more common in the SC group than in those without TSCs. The case study reports were linked to and discussed in relation to possible explanatory models for increased olfactory sensitivity. SCs increase during chemotherapy, were often unpredictable and led to emotional consequences. The participants all reported heightened sensitivity to one or several odors which could not fully be explained by the potential explanatory models of anticipatory nausea and vomiting, pseudohallucinations, or increased chemical sensitivity. Olfaction, Signs and symptoms, Cancer, Chemotherapy",olfactory changes among patients receiving chemotherapy taste and smell changes tscs are known side effects of chemotherapy but smell changes scs in the absence of taste changes are understudied this study aims to explore scs occurring without taste changes during chemotherapy to better understand the characteristics of such changes and how these experiences affect patients in their daily lives data derives from a qualitative interview study and a cross sectional survey of 518 patients with all patients receiving out patient cancer chemotherapy in sweden case studies of three patients with scs and the 8 of survey participants with scs only are in focus all 43 participants with exclusively scs reported increased sensitivity to one or several odors with no participants reporting decreased sensitivity those reporting scs significantly more often reported weight gain than those reporting tscs with oral problems and appetite loss significantly less common in the sc group there were no differences in reported nausea between sc and tsc groups but nausea was more common in the sc group than in those without tscs the case study reports were linked to and discussed in relation to possible explanatory models for increased olfactory sensitivity scs increase during chemotherapy were often unpredictable and led to emotional consequences the participants all reported heightened sensitivity to one or several odors which could not fully be explained by the potential explanatory models of anticipatory nausea and vomiting pseudohallucinations or increased chemical sensitivity olfaction signs and symptoms cancer chemotherapy,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
70,0,"Variables associated with olfactory disorders in adults: A U.S. population-based analysis Objective Olfactory dysfunction is known to have significant social, psychological, and safety implications. Despite increasingly recognized prevalence, potential risk factors for olfactory loss have been arbitrarily documented and knowledge is limited in scale. The aim of this study is to identify potential demographic and exposure variables correlating with olfactory dysfunction. Methods Cross-sectional analysis of the 2011--2012 and 2013--2014 editions of the National Health Examination and Nutrition Survey was performed. The utilized survey reports from a nationally representative sample of about 5000 persons each year located in counties across the United States. There is an interview and physical examination component which includes demographic, socioeconomic, dietary, and health-related questions as well as medical, dental, physiologic measurements, and laboratory tests. 3594 adult respondents from 2011 to 2012 and 3708 respondents from 2013 to 2014 were identified from the above population-based database. The frequency of self-reported disorders as well as performance on odor identification testing was determined in relation to demographic factors, occupational or environmental exposures, and urinary levels of environmental and industrial compounds. Results In both subjective and objective analysis, smell disorders were significantly more common with increasing age. While the non-Hispanic Black and non-Hispanic Asian populations were less likely to report subjective olfactory loss, they, along with Hispanics, performed more poorly on odor identification than Caucasians. Those with limited education had a decreased prevalence of hyposmia. Women outperformed men on smell testing. Those reporting exposure to vapors were more likely to experience olfactory dysfunction, and urinary levels of manganese, 2-Thioxothiazolidine-4-carboxylic acid, and 2-Aminothiazoline-4-carboxylic acid were lower among respondents with subjective smell disturbance. In odor detection, elevated serum levels of lead and urinary levels of 2,4 dichlorophenol were associated with anosmia and hyposmia, respectively. Conclusions This study provides current, population-based data identifying demographic and exposure elements related to smell disturbances in U.S. adults. Age, race, gender, education, exposure to vapors, urinary levels of manganese, 2-Thioxothiazolidine-4-carboxylic acid, 2-Aminothiazoline-4-carboxylic acid, 2,4 dichlorophenol, and serum lead levels were all implicated in smell disturbance. Care should be taken in interpretation due to lack of consistency between subjective and objective measures of olfaction as well as limitations related to population-based data. Prospective trials are indicated to further elucidate these relationships. Population based study, Olfaction, Olfactory loss, Olfactory dysfunction, Smell loss, Risk factors",variables associated with olfactory disorders in adults a u s population based analysis objective olfactory dysfunction is known to have significant social psychological and safety implications despite increasingly recognized prevalence potential risk factors for olfactory loss have been arbitrarily documented and knowledge is limited in scale the aim of this study is to identify potential demographic and exposure variables correlating with olfactory dysfunction methods cross sectional analysis of the 2011 2012 and 2013 2014 editions of the national health examination and nutrition survey was performed the utilized survey reports from a nationally representative sample of about 5000 persons each year located in counties across the united states there is an interview and physical examination component which includes demographic socioeconomic dietary and health related questions as well as medical dental physiologic measurements and laboratory tests 3594 adult respondents from 2011 to 2012 and 3708 respondents from 2013 to 2014 were identified from the above population based database the frequency of self reported disorders as well as performance on odor identification testing was determined in relation to demographic factors occupational or environmental exposures and urinary levels of environmental and industrial compounds results in both subjective and objective analysis smell disorders were significantly more common with increasing age while the non hispanic black and non hispanic asian populations were less likely to report subjective olfactory loss they along with hispanics performed more poorly on odor identification than caucasians those with limited education had a decreased prevalence of hyposmia women outperformed men on smell testing those reporting exposure to vapors were more likely to experience olfactory dysfunction and urinary levels of manganese 2 thioxothiazolidine 4 carboxylic acid and 2 aminothiazoline 4 carboxylic acid were lower among respondents with subjective smell disturbance in odor detection elevated serum levels of lead and urinary levels of 2 4 dichlorophenol were associated with anosmia and hyposmia respectively conclusions this study provides current population based data identifying demographic and exposure elements related to smell disturbances in u s adults age race gender education exposure to vapors urinary levels of manganese 2 thioxothiazolidine 4 carboxylic acid 2 aminothiazoline 4 carboxylic acid 2 4 dichlorophenol and serum lead levels were all implicated in smell disturbance care should be taken in interpretation due to lack of consistency between subjective and objective measures of olfaction as well as limitations related to population based data prospective trials are indicated to further elucidate these relationships population based study olfaction olfactory loss olfactory dysfunction smell loss risk factors,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
71,0,"Harmony or disharmony in the regulation and the promotion of competition in EU telecommunications? A survey of the regulatory offices As part of the movement towards harmonised trading relationships in Europe, the European Commission (EC) has introduced a series of policy reforms aimed at opening up European utility markets to competition. This paper is concerned with investigating the degree to which harmonisation is occurring in telecommunications policy. The study is based on a questionnaire sent to the regulator of telecommunications in each member state. Of the 15 member states, 13 regulatory offices agreed to participate in the study and completed the questionnaire. Also, they answered questions of clarification carried out by telephone, email and letter. The study identifies certain differences in the attitudes and policies adopted towards regulation of telecoms across the EU and in the promotion of competition. Telecommunications, EU, Regulation, Competition, Governance, Policy transfer",harmony or disharmony in the regulation and the promotion of competition in eu telecommunications a survey of the regulatory offices as part of the movement towards harmonised trading relationships in europe the european commission ec has introduced a series of policy reforms aimed at opening up european utility markets to competition this paper is concerned with investigating the degree to which harmonisation is occurring in telecommunications policy the study is based on a questionnaire sent to the regulator of telecommunications in each member state of the 15 member states 13 regulatory offices agreed to participate in the study and completed the questionnaire also they answered questions of clarification carried out by telephone email and letter the study identifies certain differences in the attitudes and policies adopted towards regulation of telecoms across the eu and in the promotion of competition telecommunications eu regulation competition governance policy transfer,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
72,0,"How Good Are My Tests? Background: Test quality is a prerequisite for achieving production system quality. While the concept of quality is multidimensional, most of the effort in testing context has been channelled towards measuring test effectiveness. Objective: While effectiveness of tests is certainly important, we aim to identify a core list of testing principles that also address other quality facets of testing, and to discuss how they can be quantified as indicators of test quality. Method: We have conducted a two-day workshop with our industry partners to come up with a list of relevant principles and best practices expected to result in high quality tests. We then utilised our academic and industrial training materials together with recommendations in practitioner oriented testing books to refine the list. We surveyed existing literature for potential metrics to quantify identified principles. Results: We have identified a list of 15 testing principles to capture the essence of testing goals and best practices from quality perspective. Eight principles do not map to existing test smells and we propose metrics for six of those. Further, we have identified additional potential metrics for the seven principles that partially map to test smells. Conclusion: We provide a core list of testing principles along with a discussion of possible ways to quantify them for assessing goodness of tests. We believe that our work would be useful for practitioners in assessing the quality of their tests from multiple perspectives including but not limited to maintainability, comprehension and simplicity. metrics, test quality, unit testing",how good are my tests background test quality is a prerequisite for achieving production system quality while the concept of quality is multidimensional most of the effort in testing context has been channelled towards measuring test effectiveness objective while effectiveness of tests is certainly important we aim to identify a core list of testing principles that also address other quality facets of testing and to discuss how they can be quantified as indicators of test quality method we have conducted a two day workshop with our industry partners to come up with a list of relevant principles and best practices expected to result in high quality tests we then utilised our academic and industrial training materials together with recommendations in practitioner oriented testing books to refine the list we surveyed existing literature for potential metrics to quantify identified principles results we have identified a list of 15 testing principles to capture the essence of testing goals and best practices from quality perspective eight principles do not map to existing test smells and we propose metrics for six of those further we have identified additional potential metrics for the seven principles that partially map to test smells conclusion we provide a core list of testing principles along with a discussion of possible ways to quantify them for assessing goodness of tests we believe that our work would be useful for practitioners in assessing the quality of their tests from multiple perspectives including but not limited to maintainability comprehension and simplicity metrics test quality unit testing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
73,0,"The 40-item Monell Extended Sniffin' Sticks Identification Test (MONEX-40) Background Most existing olfactory identification (ID) tests have the primary aim of diagnosing clinical olfactory dysfunction, thereby rendering them sub-optimal for experimental settings where the aim is to detect differences in healthy subjects' odor ID abilities. Materials and methods We have developed an extended version of the olfactory ID subtest of the Sniffin' Sticks test battery to better assess the variability in ID scores and thereby olfactory abilities of healthy, adult individuals. Twenty-four odorants, corresponding cue labels, and distractor labels were added to the existing 16-item Sniffin' Sticks ID test to create the 40-item Monell Extended Sniffin' Sticks Identification Test (MONEX-40). The MONEX-40 was administered to 259 healthy young subjects, of which 72 were retested on an average of 212 days (SD 112 days) later. Results The added odor items demonstrated good validity, as shown by a significant correlation of the results with the original 16-item ID test. In addition, the MONEX-40 achieved a significant test--retest and split-half reliability. Conclusions Taken together, these results suggest that the MONEX-40 is a reliable method for experimental assessment of odor ID ability in healthy, young individuals. Moreover, its use of a wider range of odors allows the experimenter to present subsets of the MONEX-40 within the same experiment while maintaining statistical power. Smell, Olfaction, Reliability, Validity",the 40 item monell extended sniffin sticks identification test monex 40 background most existing olfactory identification id tests have the primary aim of diagnosing clinical olfactory dysfunction thereby rendering them sub optimal for experimental settings where the aim is to detect differences in healthy subjects odor id abilities materials and methods we have developed an extended version of the olfactory id subtest of the sniffin sticks test battery to better assess the variability in id scores and thereby olfactory abilities of healthy adult individuals twenty four odorants corresponding cue labels and distractor labels were added to the existing 16 item sniffin sticks id test to create the 40 item monell extended sniffin sticks identification test monex 40 the monex 40 was administered to 259 healthy young subjects of which 72 were retested on an average of 212 days sd 112 days later results the added odor items demonstrated good validity as shown by a significant correlation of the results with the original 16 item id test in addition the monex 40 achieved a significant test retest and split half reliability conclusions taken together these results suggest that the monex 40 is a reliable method for experimental assessment of odor id ability in healthy young individuals moreover its use of a wider range of odors allows the experimenter to present subsets of the monex 40 within the same experiment while maintaining statistical power smell olfaction reliability validity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
74,0,"Mining Software Repositories with iSPAROL and a Software Evolution Ontology One of the most important decisions researchers face when analyzing the evolution of software systems is the choice of a proper data analysis/exchange format. Most ex- isting formats have to be processed with special programs written specifically for that purpose and are not easily ex- tendible. Most scientists, therefore, use their own data- base(s) requiring each of them to repeat the work of writing the import/export programs to their format. We present EvoOnt, a software repository data exchange format based on the Web Ontology Language (OWL). EvoOnt includes software, release, and bug-related infor- mation. Since OWL describes the semantics of the data, EvoOnt is (1) easily extendible, (2) comes with many ex- isting tools, and (3) allows to derive assertions through its inherent Description Logic reasoning capabilities. The paper also shows iSPARQL -- our SPARQL-based Semantic Web query engine containing similarity joins. Together with EvoOnt, iSPARQL can accomplish a siz- able number of tasks sought in software repository mining projects, such as an assessment of the amount of change between versions or the detection of bad code smells. To illustrate the usefulness of EvoOnt (and iSPARQL), we per- form a series of experiments with a real-world Java project. These show that a number of software analyses can be re- duced to simple iSPARQL queries on an EvoOnt dataset. []",mining software repositories with isparol and a software evolution ontology one of the most important decisions researchers face when analyzing the evolution of software systems is the choice of a proper data analysis exchange format most ex isting formats have to be processed with special programs written specifically for that purpose and are not easily ex tendible most scientists therefore use their own data base s requiring each of them to repeat the work of writing the import export programs to their format we present evoont a software repository data exchange format based on the web ontology language owl evoont includes software release and bug related infor mation since owl describes the semantics of the data evoont is 1 easily extendible 2 comes with many ex isting tools and 3 allows to derive assertions through its inherent description logic reasoning capabilities the paper also shows isparql our sparql based semantic web query engine containing similarity joins together with evoont isparql can accomplish a siz able number of tasks sought in software repository mining projects such as an assessment of the amount of change between versions or the detection of bad code smells to illustrate the usefulness of evoont and isparql we per form a series of experiments with a real world java project these show that a number of software analyses can be re duced to simple isparql queries on an evoont dataset,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
75,0,"Rapid Requirements Checks with Requirements Smells: Two Case Studies Bad requirements quality can have expensive consequences during the software development lifecycle. Especially, if iterations are long and feedback comes late - the faster a problem is found, the cheaper it is to fix. We propose to detect issues in requirements based on requirements (bad) smells by applying a light-weight static requirements analysis. This light-weight technique allows for instant checks as soon as a requirement is written down. In this paper, we derive a set of smells, including automatic smell detection, from the natural language criteria of the ISO/IEC/IEEE 29148 standard. We evaluated the approach with 336 requirements and 53 use cases from 9 specifications that were written by the car manufacturer Daimler AG and the chemical business company Wacker Chemie AG, and discussed the results with their requirements and domain experts. While not all problems can be detected, the case study shows that lightweight smell analysis can uncover many practically relevant requirements defects. Based on these results and the discussion with our industry partners, we conclude that requirements smells can serve as an efficient supplement to traditional reviews or team discussions, in order to create fast feedback on requirements quality. Analytical Quality Assurance, Requirements Engineering, Requirements Smells",rapid requirements checks with requirements smells two case studies bad requirements quality can have expensive consequences during the software development lifecycle especially if iterations are long and feedback comes late the faster a problem is found the cheaper it is to fix we propose to detect issues in requirements based on requirements bad smells by applying a light weight static requirements analysis this light weight technique allows for instant checks as soon as a requirement is written down in this paper we derive a set of smells including automatic smell detection from the natural language criteria of the iso iec ieee 29148 standard we evaluated the approach with 336 requirements and 53 use cases from 9 specifications that were written by the car manufacturer daimler ag and the chemical business company wacker chemie ag and discussed the results with their requirements and domain experts while not all problems can be detected the case study shows that lightweight smell analysis can uncover many practically relevant requirements defects based on these results and the discussion with our industry partners we conclude that requirements smells can serve as an efficient supplement to traditional reviews or team discussions in order to create fast feedback on requirements quality analytical quality assurance requirements engineering requirements smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
76,0,"Funbrella: Making Rain Fun Rain changes its complexion based on the time and the place. Each aspect of rain provides a unique impression, so experiencing it in distant places and different times would be a new way of sharing information. To represent rain, we focused on an umbrella as a user interface to connect humans and rain. Generally, people experience rain with sounds, sights, or sometimes smells; however, in our proposed system, we exploit the vibration perceived through an umbrella's handle to let people feel the rain. We implemented a vibration-giving mechanism based on a speaker and microphone not only to give vibrations but also to record them so that they reconstruct rain. Using this mechanism, we propose a novel umbrella-like user interface named ""Funbrella"" that can record and replay the rain with FUN (Figure 1). We developed two interesting applications. One is to feel various kinds of rain, and the other transmits rain to different places in real time. With such applications, people can enjoy rain that is usually annoying. []",funbrella making rain fun rain changes its complexion based on the time and the place each aspect of rain provides a unique impression so experiencing it in distant places and different times would be a new way of sharing information to represent rain we focused on an umbrella as a user interface to connect humans and rain generally people experience rain with sounds sights or sometimes smells however in our proposed system we exploit the vibration perceived through an umbrella s handle to let people feel the rain we implemented a vibration giving mechanism based on a speaker and microphone not only to give vibrations but also to record them so that they reconstruct rain using this mechanism we propose a novel umbrella like user interface named funbrella that can record and replay the rain with fun figure 1 we developed two interesting applications one is to feel various kinds of rain and the other transmits rain to different places in real time with such applications people can enjoy rain that is usually annoying,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
77,0,"Decaffeinated coffee induces a faster conditioned reaction time even when participants know that the drink does not contain caffeine We conducted two experiments based on the hypothesis that the taste, smell, and sight of (decaffeinated) coffee and internal senses of ingestion (caffeine-associated stimuli) would induce a conditioned response even when participants were informed that the drink was decaffeinated coffee. The caffeine-associated stimuli were supposed to be associated with caffeine because the participants drank coffee regularly. In experiment 1, forty-four coffee drinkers received decaffeinated coffee or water and completed a simple reaction time task. Reaction time was faster in the decaffeinated group than in the water group. In experiment 2, we examined whether the effect of decaffeinated coffee was extinguished by the repeated intake of decaffeinated coffee (conditioned stimulus). Forty-four coffee drinkers received decaffeinated coffee or water five times. Then, the participants drank decaffeinated coffee and completed a reaction time task. The effect of decaffeinated coffee was weakened in the test session by the extinction procedure: the repeated intake of decaffeinated coffee. In conclusion, both experiments supported the hypothesis that caffeine-associated stimuli induced a conditioned response in people who drank coffee regularly. Therefore, in everyday life, decaffeinated coffee may improve performance in coffee drinkers. Decaffeinated coffee, Classical conditioning, Conditioned response, Extinction, Caffeine, Reaction time",decaffeinated coffee induces a faster conditioned reaction time even when participants know that the drink does not contain caffeine we conducted two experiments based on the hypothesis that the taste smell and sight of decaffeinated coffee and internal senses of ingestion caffeine associated stimuli would induce a conditioned response even when participants were informed that the drink was decaffeinated coffee the caffeine associated stimuli were supposed to be associated with caffeine because the participants drank coffee regularly in experiment 1 forty four coffee drinkers received decaffeinated coffee or water and completed a simple reaction time task reaction time was faster in the decaffeinated group than in the water group in experiment 2 we examined whether the effect of decaffeinated coffee was extinguished by the repeated intake of decaffeinated coffee conditioned stimulus forty four coffee drinkers received decaffeinated coffee or water five times then the participants drank decaffeinated coffee and completed a reaction time task the effect of decaffeinated coffee was weakened in the test session by the extinction procedure the repeated intake of decaffeinated coffee in conclusion both experiments supported the hypothesis that caffeine associated stimuli induced a conditioned response in people who drank coffee regularly therefore in everyday life decaffeinated coffee may improve performance in coffee drinkers decaffeinated coffee classical conditioning conditioned response extinction caffeine reaction time,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
78,0,"Sandwich or sweets? An assessment of two novel implicit association tasks to capture dynamic motivational tendencies and stable evaluations towards foods Desire, purchase, and consumption of fast-moving consumer goods often follow actual motivational states instead of habitual preferences. This has led to an increasing interest within health sciences to investigate the causes for irrational eating behaviours among consumers, particularly with the use of indirect measurements. However, literature results on the relationship between dynamic, motivational concepts (e.g., approach or avoidance tendencies) and evaluative concepts (e.g., positive or negative associations) remain inconclusive, possibly due to the use of different experimental manipulations and methodologies to operationalize these. Our aim with this study is to contribute to this line of research by developing a novel methodology that is based on structurally identical indirect measurement procedures. We measured explicit desire (motivation) and liking (evaluation) of two different foods (sandwich and sweets) on visual analogue scales, as well as implicit approach--avoidance tendencies and implicit positive--negative associations with two variants of the recoding-free Implicit Association Tests (IAT-RFs). At first, all participants (N=108) unwrapped, smelled, and explicitly judged the two foods, then all watched a video clip (during which half of the participants were allowed to eat the sandwich but not the sweets), and finally they all performed the two indirect measurements. Thus, desire for the foods was experimentally manipulated between participants. We hypothesized that a valid measure should show an interaction of food category (manipulated within participants) and desire fulfilment. Hence, explicit desire and implicit approach motivation should be higher for participants that were not allowed to consume the sandwich and fulfil their desire, compared to the group that was able to eat the sandwich during the experiment. Results confirm our hypothesis. The motivational IAT-RF correctly assessed approach tendencies towards the sandwich in the group that did not eat, and approach tendencies towards the sweets in the group that just ate a sandwich. In contrast, the evaluative IAT-RF measure did not reflect a clear ``preference'' towards any of the two popular products in both groups. This research provides a potentially relevant methodology for consumer studies' by offering a chance to differentiate between implicit motivational and evaluative concepts within consumer behaviour. Motivation, Implicit measures, Recoding free Implicit Association Test (IAT-RF), Hunger, Food reward",sandwich or sweets an assessment of two novel implicit association tasks to capture dynamic motivational tendencies and stable evaluations towards foods desire purchase and consumption of fast moving consumer goods often follow actual motivational states instead of habitual preferences this has led to an increasing interest within health sciences to investigate the causes for irrational eating behaviours among consumers particularly with the use of indirect measurements however literature results on the relationship between dynamic motivational concepts e g approach or avoidance tendencies and evaluative concepts e g positive or negative associations remain inconclusive possibly due to the use of different experimental manipulations and methodologies to operationalize these our aim with this study is to contribute to this line of research by developing a novel methodology that is based on structurally identical indirect measurement procedures we measured explicit desire motivation and liking evaluation of two different foods sandwich and sweets on visual analogue scales as well as implicit approach avoidance tendencies and implicit positive negative associations with two variants of the recoding free implicit association tests iat rfs at first all participants n 108 unwrapped smelled and explicitly judged the two foods then all watched a video clip during which half of the participants were allowed to eat the sandwich but not the sweets and finally they all performed the two indirect measurements thus desire for the foods was experimentally manipulated between participants we hypothesized that a valid measure should show an interaction of food category manipulated within participants and desire fulfilment hence explicit desire and implicit approach motivation should be higher for participants that were not allowed to consume the sandwich and fulfil their desire compared to the group that was able to eat the sandwich during the experiment results confirm our hypothesis the motivational iat rf correctly assessed approach tendencies towards the sandwich in the group that did not eat and approach tendencies towards the sweets in the group that just ate a sandwich in contrast the evaluative iat rf measure did not reflect a clear preference towards any of the two popular products in both groups this research provides a potentially relevant methodology for consumer studies by offering a chance to differentiate between implicit motivational and evaluative concepts within consumer behaviour motivation implicit measures recoding free implicit association test iat rf hunger food reward,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
79,0,"Colours in the Web-age We can't say what color is: but we know what happens if (after a shock to the nape) we cease to see the colors. Some neuro-scientists, like Oliver Sacks, have explained such matter, by observing a painter, suddenly turned blind to colors, who went on, living with the memory of colors that he was no longer able to see, and the people from a small atoll in Micronesia, decimated by a tsunami wave, who, after some time, had selected its population in one half capable of seeing colors and committed to agriculture and a half blind to colors, committed to (nightly) fishing. To seek an answer, we can say that color is not a phenomenon of light, but rather a perception and elaboration of our brain. But let's consider the first case. Following a car crash, an American painter bangs his head against the windscreen of his car. No visible damages, only a small disappointment, apologies from the driver of the other car. These things happen. Apparently. But that very evening, and still more the morning after, that painter R. became aware that he was no longer seeing colors. The world around him was suddenly empty of any chromatic stimulus. A world suddenly and completely gray, this is the first word. A world awfully dirty, this is the second sensation for something almost inconceivable, for a painter, nearly deadly. Even gray is a color, but such sudden monochrome shutoff is a dead color, the image of a world that can't be lived in. The painter R. is suddenly become blind to colors. He can't see other than the ghosts of a light, surrounded by blurred shadows, now nearer, now farther. Starting from a black, now present and a moment later absent, a going till a concentration of stunning light beams, almost glaring. An experience such as this one can't be really shared or described. Besides the sensation of an absurd and unmotivated torture, almost an experience of death, with respect to a mystery that human beings have in common with butterflies, the ability to see colors. We can only try to understand how it feels. The painter R. moves along a sort of fog, that comes and goes, independently from his movements in the space of a room, or outside, hesitating from time to time, for fear of stumbling or trampling on something rotten. The outer aspect of things and people, even those who are more familiar, is completely changed, and became dumb and hostile. The outline of the things and of the faces was vague and indefinite, and this uncertainty turned any visual interest into something unpleasant, and disappointing. Anything, and any action, becomes wrong and artificial, but most of all it becomes sort of stained, impure. The painter, for example, couldn't stand the change in the features of other people, and even the aspect of his own face in the mirror, that appeared like an empty window, with a 'person of smoke' inside. The complexion of the people around him, including his own and that of his wife, was horribly gray and unrecognizable. The color of the skin, in all its possible shades, appeared like dirty paper, worn-out linen lacerated by terrible dirt. The (color) TV set was an unbearable atrocity, not even comparable to the reassuring black and white of old movies. Food was a horrible litter. After a long abstinence from food, that almost lead him to consumption, the painter R. surrendered to eat blindfolded, relying on the memory of smell and flavor, because the pleasure of seeing a tasty dish was lost forever. All this only because of the lack of the colors. The painter, luckily, maintained a sort of memory of colors, that, despite a sense of absence and detachment from the world, allowed him to imagine, always blindfolded, a pleasant sensation of reunion to the colorful forms of his former chromatic life. Poor comfort, which however he didn't want, and couldn't, give up, and by contrast even conceiving to commit suicide, when facing the despair of continuing to live in such a condition. In his brain (and not in his eyes) something very serious had happened. He, following an injury, had lost the knowledge and sensation of color, while retaining the awareness, almost obsessive, of the lost color, which, just like any loss, became more and more the absolute meaning of vision. Not only a quality, but the truth of vision itself. The painter R. was victim of a rare, yet possible, event. Just like an invisible bullet had hit and damaged forever the internals of his 'two beans', causing a paralysis. The ability of seeing colors results indeed essential for human activities, much more than monochrome vision, that is typical of most of mammals. The reason why human beings are capable of seeing color remains a mystery, and we can only imagine what would happen when such ability is lost: our painter was prey to despair. Birds and snakes are capable of a four-color sight. Human beings had once the same capability, until (in the struggle for survival) the vision of two of the colors was lost, and later on, a third one was regained. This is how, today, human beings are capable of a three-colors perception, just like the monitor of common computers: R (red) G (green) B (blue), that the most advanced technology completes with Y (yellow). However, the attention and the disposition of humans for colors seems to be perfectly aligned with human evolution and intelligence. It may sound impossible, but 77.000 years ago, in Blombos Cave (South Africa) primitive people were able to manufacture and collect a huge amount of colored sticks, decorated with geometric motifs, presumably used for body painting. The aesthetic attitude towards the world becomes their ability to survive in the race to evolution. Letting at the same time their brain cortex grow. Through colors. []",colours in the web age we can t say what color is but we know what happens if after a shock to the nape we cease to see the colors some neuro scientists like oliver sacks have explained such matter by observing a painter suddenly turned blind to colors who went on living with the memory of colors that he was no longer able to see and the people from a small atoll in micronesia decimated by a tsunami wave who after some time had selected its population in one half capable of seeing colors and committed to agriculture and a half blind to colors committed to nightly fishing to seek an answer we can say that color is not a phenomenon of light but rather a perception and elaboration of our brain but let s consider the first case following a car crash an american painter bangs his head against the windscreen of his car no visible damages only a small disappointment apologies from the driver of the other car these things happen apparently but that very evening and still more the morning after that painter r became aware that he was no longer seeing colors the world around him was suddenly empty of any chromatic stimulus a world suddenly and completely gray this is the first word a world awfully dirty this is the second sensation for something almost inconceivable for a painter nearly deadly even gray is a color but such sudden monochrome shutoff is a dead color the image of a world that can t be lived in the painter r is suddenly become blind to colors he can t see other than the ghosts of a light surrounded by blurred shadows now nearer now farther starting from a black now present and a moment later absent a going till a concentration of stunning light beams almost glaring an experience such as this one can t be really shared or described besides the sensation of an absurd and unmotivated torture almost an experience of death with respect to a mystery that human beings have in common with butterflies the ability to see colors we can only try to understand how it feels the painter r moves along a sort of fog that comes and goes independently from his movements in the space of a room or outside hesitating from time to time for fear of stumbling or trampling on something rotten the outer aspect of things and people even those who are more familiar is completely changed and became dumb and hostile the outline of the things and of the faces was vague and indefinite and this uncertainty turned any visual interest into something unpleasant and disappointing anything and any action becomes wrong and artificial but most of all it becomes sort of stained impure the painter for example couldn t stand the change in the features of other people and even the aspect of his own face in the mirror that appeared like an empty window with a person of smoke inside the complexion of the people around him including his own and that of his wife was horribly gray and unrecognizable the color of the skin in all its possible shades appeared like dirty paper worn out linen lacerated by terrible dirt the color tv set was an unbearable atrocity not even comparable to the reassuring black and white of old movies food was a horrible litter after a long abstinence from food that almost lead him to consumption the painter r surrendered to eat blindfolded relying on the memory of smell and flavor because the pleasure of seeing a tasty dish was lost forever all this only because of the lack of the colors the painter luckily maintained a sort of memory of colors that despite a sense of absence and detachment from the world allowed him to imagine always blindfolded a pleasant sensation of reunion to the colorful forms of his former chromatic life poor comfort which however he didn t want and couldn t give up and by contrast even conceiving to commit suicide when facing the despair of continuing to live in such a condition in his brain and not in his eyes something very serious had happened he following an injury had lost the knowledge and sensation of color while retaining the awareness almost obsessive of the lost color which just like any loss became more and more the absolute meaning of vision not only a quality but the truth of vision itself the painter r was victim of a rare yet possible event just like an invisible bullet had hit and damaged forever the internals of his two beans causing a paralysis the ability of seeing colors results indeed essential for human activities much more than monochrome vision that is typical of most of mammals the reason why human beings are capable of seeing color remains a mystery and we can only imagine what would happen when such ability is lost our painter was prey to despair birds and snakes are capable of a four color sight human beings had once the same capability until in the struggle for survival the vision of two of the colors was lost and later on a third one was regained this is how today human beings are capable of a three colors perception just like the monitor of common computers r red g green b blue that the most advanced technology completes with y yellow however the attention and the disposition of humans for colors seems to be perfectly aligned with human evolution and intelligence it may sound impossible but 77 000 years ago in blombos cave south africa primitive people were able to manufacture and collect a huge amount of colored sticks decorated with geometric motifs presumably used for body painting the aesthetic attitude towards the world becomes their ability to survive in the race to evolution letting at the same time their brain cortex grow through colors,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
80,0,"Real time DNS traffic profiling enhanced detection design for national level network A recent study shows, an investigation of Advanced Persistent Threat (APT) activity can be done effectively through malicious DNS traffic analysis. But, most of the experiments are conducted in a limited, simulated environment e.g. small campus network. Since APT is very dynamic and to address traffic grows, a light weight computation architecture is then needed to profile suspected activity in near real time. In this study, we proposed an enhanced design to detect malicious DNS traffic for high speed, large scale, national level, near real time network. This experiment combines available open source solution tools in order to gain real time, better accuracy of anomaly recognition and faster detection. computer network security, Internet, invasive software, program diagnostics, telecommunication traffic, national level network, Advanced Persistent Threat activity, APT, malicious DNS traffic analysis, real time DNS traffic profiling, enhanced detection design, anomaly recognition, domain name system, Malware, IP networks, Servers, Whitelist, Real-time systems, Tools, Anomaly detection, DNS, traffic profiling, anomaly detection",real time dns traffic profiling enhanced detection design for national level network a recent study shows an investigation of advanced persistent threat apt activity can be done effectively through malicious dns traffic analysis but most of the experiments are conducted in a limited simulated environment e g small campus network since apt is very dynamic and to address traffic grows a light weight computation architecture is then needed to profile suspected activity in near real time in this study we proposed an enhanced design to detect malicious dns traffic for high speed large scale national level near real time network this experiment combines available open source solution tools in order to gain real time better accuracy of anomaly recognition and faster detection computer network security internet invasive software program diagnostics telecommunication traffic national level network advanced persistent threat activity apt malicious dns traffic analysis real time dns traffic profiling enhanced detection design anomaly recognition domain name system malware ip networks servers whitelist real time systems tools anomaly detection dns traffic profiling anomaly detection,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
81,0,"Buying seafood: Understanding barriers to purchase across consumption segments Most consumers have positive attitudes toward seafood and consider it to be an important part of a healthy and balanced diet. However when purchasing seafood, consumers also weigh up various risks which may act as barriers to consumption. In this paper, the findings of an online survey of Australian consumers (n=899) which explored both drivers and barriers to seafood consumption are discussed. The primary focus of this paper is to explore the perceived risks of seafood consumption and how these vary across consumption levels. Perceived risks associated with seafood consumption include functional, social, physical, psychological, and financial risk. With the exceptions of physical and financial risk, perceptions of risk varied across regular, light and very light seafood consumption segments. Lighter fish consumers were more likely to perceive functional risk associated with being less informed and less familiar with fish, experience more difficulties with selecting fish, recognising if fish is fresh, and preparing and serving fish than more regular fish consumers. Regular seafood consumers were less likely than lighter seafood consumers to perceive social risk arising from other members of their household not liking fish. Moreover, regular seafood consumers were less likely to perceive psychological risks associated with unpleasant past experiences or unpleasant sensory qualities, such as not liking the smell of fish and not liking to touch fish. Based on these results strategies for reducing perceived risks as a means of stimulating fish consumption are proposed for further investigation. Seafood, Fish, Consumption, Barriers, Perceived risk, Segments",buying seafood understanding barriers to purchase across consumption segments most consumers have positive attitudes toward seafood and consider it to be an important part of a healthy and balanced diet however when purchasing seafood consumers also weigh up various risks which may act as barriers to consumption in this paper the findings of an online survey of australian consumers n 899 which explored both drivers and barriers to seafood consumption are discussed the primary focus of this paper is to explore the perceived risks of seafood consumption and how these vary across consumption levels perceived risks associated with seafood consumption include functional social physical psychological and financial risk with the exceptions of physical and financial risk perceptions of risk varied across regular light and very light seafood consumption segments lighter fish consumers were more likely to perceive functional risk associated with being less informed and less familiar with fish experience more difficulties with selecting fish recognising if fish is fresh and preparing and serving fish than more regular fish consumers regular seafood consumers were less likely than lighter seafood consumers to perceive social risk arising from other members of their household not liking fish moreover regular seafood consumers were less likely to perceive psychological risks associated with unpleasant past experiences or unpleasant sensory qualities such as not liking the smell of fish and not liking to touch fish based on these results strategies for reducing perceived risks as a means of stimulating fish consumption are proposed for further investigation seafood fish consumption barriers perceived risk segments,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
82,0,"QoE Assessment of Fairness Between Players in Networked Game with Olfaction In this paper, we carry out QoE (Quality of Experience) assessment of fairness between players in a networked game with olfaction. In the assessment, we investigate the influence of the time it takes for a smell to reach a player on the fairness. As the networked game, we deal with a fruit harvesting game in which two players play in a 3D virtual space. As a result, for example, we illustrate that the fairness is hardly damaged when the time is smaller than about 500 ms. QoE, assessment, fairness, networked game, olfaction",qoe assessment of fairness between players in networked game with olfaction in this paper we carry out qoe quality of experience assessment of fairness between players in a networked game with olfaction in the assessment we investigate the influence of the time it takes for a smell to reach a player on the fairness as the networked game we deal with a fruit harvesting game in which two players play in a 3d virtual space as a result for example we illustrate that the fairness is hardly damaged when the time is smaller than about 500 ms qoe assessment fairness networked game olfaction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
83,0,"Alice and Her Friend: A Black ""Picture Book"" of Multisensory Interaction for Visually-Impaired Children Picture books are considered beneficial for children in many ways (e.g., psychological development and language acquisition), yet some children have less opportunity to receive such benefits because of their visual impairment. Considering such a situation, we designed Alice and Her Friend, an interactive book for visually-impaired children. While we put a significant focus on multisensory interaction, the book is designed entirely in black, intending both to emphasize that visually-impaired people also enjoy rich multisensory experiences and to raises awareness of the needs that visually-impaired children have. We used the book to interview experts in related fields to investigate practical needs among visually-impaired children. Based on their insights, we also propose a novel research topic, ""creative technologies for the disabled""; it is necessary to support people with disabilities to create what they need by themselves, since the degrees and types of visual impairment significantly differ among visually-impaired people. Children, creative technologies, multisensory, research-through-design, smell, sound, tactile, visual impairment",alice and her friend a black picture book of multisensory interaction for visually impaired children picture books are considered beneficial for children in many ways e g psychological development and language acquisition yet some children have less opportunity to receive such benefits because of their visual impairment considering such a situation we designed alice and her friend an interactive book for visually impaired children while we put a significant focus on multisensory interaction the book is designed entirely in black intending both to emphasize that visually impaired people also enjoy rich multisensory experiences and to raises awareness of the needs that visually impaired children have we used the book to interview experts in related fields to investigate practical needs among visually impaired children based on their insights we also propose a novel research topic creative technologies for the disabled it is necessary to support people with disabilities to create what they need by themselves since the degrees and types of visual impairment significantly differ among visually impaired people children creative technologies multisensory research through design smell sound tactile visual impairment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
84,0,"Architectural Bad Smells in Software Product Lines: An Exploratory Study The Software Product Lines (SPL) paradigm has arisen for taking advantage of existing common aspects between different products, while also considering product-specific features. The architecture of a SPL comprises a model that will result in product architectures, and may include solutions leading to bad (architectural) design. One way to assess such design decisions is through the identification of architectural bad smells, which are properties that prejudice the overall software quality, but are not necessarily faulty or errant. In this paper, we conduct an exploratory study that aims at characterizing bad smells in the context of product line architectures. We analyzed an open source SPL project and extracted its architecture to investigate the occurrence or absence of four smells initially studied in single systems. In addition, we propose a smell specific to the SPL context and discuss possible causes and implications of having those smells in the architecture of a product line. The results indicate that the granularity of the SPL features may influence on the occurrence of smells. architectural bad smells, architecture, evaluation, exploratory study, software product lines",architectural bad smells in software product lines an exploratory study the software product lines spl paradigm has arisen for taking advantage of existing common aspects between different products while also considering product specific features the architecture of a spl comprises a model that will result in product architectures and may include solutions leading to bad architectural design one way to assess such design decisions is through the identification of architectural bad smells which are properties that prejudice the overall software quality but are not necessarily faulty or errant in this paper we conduct an exploratory study that aims at characterizing bad smells in the context of product line architectures we analyzed an open source spl project and extracted its architecture to investigate the occurrence or absence of four smells initially studied in single systems in addition we propose a smell specific to the spl context and discuss possible causes and implications of having those smells in the architecture of a product line the results indicate that the granularity of the spl features may influence on the occurrence of smells architectural bad smells architecture evaluation exploratory study software product lines,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
85,0,"Performance of the Levenberg--Marquardt neural network training method in electronic nose applications The focus of this study is to find the appropriateness of the Levenberg--Marquardt (LM) neural network (NN) training algorithm for recognition of odor patterns associated with an electronic nose (e-nose). Multiple time-patterns represent step response of the array of sensors to the odorants. The experiments are performed on four representative classes of odorants: coffees, fragrances, hog farm air, and cola beverages. The odor recognition system is composed of a Karhunen--Loéve (KL) based pre-processing unit, and a feedforward neural network with the LM training algorithm. The parameters of the pre-processing unit and the neural network are fine-tuned using a genetic algorithm. Back-propagation algorithm with adaptive learning rate is selected as a standard neural network training method, for the purpose of comparison. The results of the experiments indicate that the LM algorithm provides high correct recognition ratios. In addition, the results confirm that the LM method outperforms the back-propagation (BP) method with adaptive learning rate, for the classes of the odorants provided in this study. Genetic algorithms, Signal processing, Levenberg--Marquardt, Back-propagation, Feature-extraction, Data compression, Sniff, Smell, Odor, Aroma, Scent, Fragrance",performance of the levenberg marquardt neural network training method in electronic nose applications the focus of this study is to find the appropriateness of the levenberg marquardt lm neural network nn training algorithm for recognition of odor patterns associated with an electronic nose e nose multiple time patterns represent step response of the array of sensors to the odorants the experiments are performed on four representative classes of odorants coffees fragrances hog farm air and cola beverages the odor recognition system is composed of a karhunen lo ve kl based pre processing unit and a feedforward neural network with the lm training algorithm the parameters of the pre processing unit and the neural network are fine tuned using a genetic algorithm back propagation algorithm with adaptive learning rate is selected as a standard neural network training method for the purpose of comparison the results of the experiments indicate that the lm algorithm provides high correct recognition ratios in addition the results confirm that the lm method outperforms the back propagation bp method with adaptive learning rate for the classes of the odorants provided in this study genetic algorithms signal processing levenberg marquardt back propagation feature extraction data compression sniff smell odor aroma scent fragrance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
86,0,"Description of the mechanisms underlying geosmin production in Penicillium expansum using proteomics Abstract A 2D-DIGE proteomics experiment was performed to describe the mechanism underlying the production of geosmin, an earthy-smelling sesquiterpene which spoils wine, produced by Penicillium expansum. The strains were identified by sequencing of the ITS and beta-tubulin regions. This study was based on a selection of four strains showing different levels of geosmin production, assessed by GC--MS/MS. The proteomics study revealed the differential abundance of 107 spots between the different strains; these were picked and submitted to MALDI-TOF--TOF MS analysis for identification. They belonged to the functional categories of protein metabolism, redox homeostasis, metabolic processes (glycolysis, ATP production), cell cycle and cell signalling pathways. From these data, an implication of oxidative stress in geosmin production may be hypothesized. Moreover, the differential abundance of some glycolytic enzymes may explain the different patterns of geosmin biosynthesis. This study provides data for the characterisation of the mechanism and the regulation of the production of this off-flavour, which are so far not described in filamentous fungi. Biological significance Green mould on grapes, caused by P. expansum may be at the origin of off-flavours in wine. These are characterized by earthy--mouldy smells and are due to the presence of the compound geosmin. This work aims at describing how geosmin is produced by P. expansum. This knowledge is of use for the research community on grapes for understanding why these off-flavours occasionally occur in vintages. Geosmin, , Proteomics, Oxidative stress, MVA pathway, MEP pathway",description of the mechanisms underlying geosmin production in penicillium expansum using proteomics abstract a 2d dige proteomics experiment was performed to describe the mechanism underlying the production of geosmin an earthy smelling sesquiterpene which spoils wine produced by penicillium expansum the strains were identified by sequencing of the its and beta tubulin regions this study was based on a selection of four strains showing different levels of geosmin production assessed by gc ms ms the proteomics study revealed the differential abundance of 107 spots between the different strains these were picked and submitted to maldi tof tof ms analysis for identification they belonged to the functional categories of protein metabolism redox homeostasis metabolic processes glycolysis atp production cell cycle and cell signalling pathways from these data an implication of oxidative stress in geosmin production may be hypothesized moreover the differential abundance of some glycolytic enzymes may explain the different patterns of geosmin biosynthesis this study provides data for the characterisation of the mechanism and the regulation of the production of this off flavour which are so far not described in filamentous fungi biological significance green mould on grapes caused by p expansum may be at the origin of off flavours in wine these are characterized by earthy mouldy smells and are due to the presence of the compound geosmin this work aims at describing how geosmin is produced by p expansum this knowledge is of use for the research community on grapes for understanding why these off flavours occasionally occur in vintages geosmin proteomics oxidative stress mva pathway mep pathway,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
87,0,"Ethical Dilemmas and PD As Important Steps Towards Critical e-Government Design The delivering of public services to citizens through the internet -- also known as e-government - has gained serious momentum, driven by political ambitions of improved efficiency. E-government, however, is considered complex and e-government failures are well known from media. Research of how e-government is enacted inside government is sparse. Technology mediated public services in real world entail ethical dilemmas. By extracting ethical dilemmas from a qualitative e-government participatory design study, this paper shows how ethical dilemmas may inform future e-government design and design processes. The case, adoption of digital post in a local e-government setting, showed that design flaws, staff's concern for citizens and political fear of citizens' critique had an impact on e-government adoption. action research, design science research, e-government, participatory design, public sector",ethical dilemmas and pd as important steps towards critical e government design the delivering of public services to citizens through the internet also known as e government has gained serious momentum driven by political ambitions of improved efficiency e government however is considered complex and e government failures are well known from media research of how e government is enacted inside government is sparse technology mediated public services in real world entail ethical dilemmas by extracting ethical dilemmas from a qualitative e government participatory design study this paper shows how ethical dilemmas may inform future e government design and design processes the case adoption of digital post in a local e government setting showed that design flaws staff s concern for citizens and political fear of citizens critique had an impact on e government adoption action research design science research e government participatory design public sector,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
88,0,"An Approach to Behavior Authoring for Non-Playing Characters in Digital Games In this paper, we explore a design solution that would enable novice users to successfully author AI behaviors. We detail on the first design pass over the representational vocabulary and the authoring activity created to identify an appropriate user interaction approach. Further, we discuss the results of a user study conducted to evaluate a paper mock-up of the authoring interface that novice users can use to create behaviors. The goal of the study was to understand whether users are able to conduct the authoring process using the proposed paper prototype version and to understand the representational vocabulary. One of the key results that came out of the study was that some of the existing interaction design approaches, representation formalism and vocabulary that we employed in the authoring interface were unsuitable to novice users. The study also helped pointing out early design flaws and new design insights for the work going forward. AI behavior authoring, Authoring tool, digital game, nonplaying character, user tests",an approach to behavior authoring for non playing characters in digital games in this paper we explore a design solution that would enable novice users to successfully author ai behaviors we detail on the first design pass over the representational vocabulary and the authoring activity created to identify an appropriate user interaction approach further we discuss the results of a user study conducted to evaluate a paper mock up of the authoring interface that novice users can use to create behaviors the goal of the study was to understand whether users are able to conduct the authoring process using the proposed paper prototype version and to understand the representational vocabulary one of the key results that came out of the study was that some of the existing interaction design approaches representation formalism and vocabulary that we employed in the authoring interface were unsuitable to novice users the study also helped pointing out early design flaws and new design insights for the work going forward ai behavior authoring authoring tool digital game nonplaying character user tests,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
89,0,"Online Inference and Enforcement of Temporal Properties The interfaces of software components are often paired with specifications or protocols that prescribe correct and safe usage. An important class of these specifications consists of temporal safety properties over function or method call sequences. Because violations of these properties can lead to program crashes or subtly inconsistent program state, these properties are frequently the target of runtime monitoring techniques. However, the properties must be specified in advance, a time-consuming process. Recognizing this problem, researchers have proposed various specification inference techniques, but they suffer from imprecision and require a significant investment in developer time. This work presents the first fully automatic dynamic technique for simultaneously learning and enforcing general temporal properties over method call sequences. Our technique is an online algorithm that operates over a short, finite execution history. This limited view works well in practice due to the inherent temporal locality in sequential method calls on Java objects, a property we validate empirically. We have implemented our algorithm in a practical tool for Java, Ocd, that operates with a high degree of precision and finds new defects and code smells in well-tested applications. dynamic analysis, online algorithm, temporal properties",online inference and enforcement of temporal properties the interfaces of software components are often paired with specifications or protocols that prescribe correct and safe usage an important class of these specifications consists of temporal safety properties over function or method call sequences because violations of these properties can lead to program crashes or subtly inconsistent program state these properties are frequently the target of runtime monitoring techniques however the properties must be specified in advance a time consuming process recognizing this problem researchers have proposed various specification inference techniques but they suffer from imprecision and require a significant investment in developer time this work presents the first fully automatic dynamic technique for simultaneously learning and enforcing general temporal properties over method call sequences our technique is an online algorithm that operates over a short finite execution history this limited view works well in practice due to the inherent temporal locality in sequential method calls on java objects a property we validate empirically we have implemented our algorithm in a practical tool for java ocd that operates with a high degree of precision and finds new defects and code smells in well tested applications dynamic analysis online algorithm temporal properties,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
90,0,"Setting Up Architectural SW Health Builds in a New Product Line Generation Setting up a new product line generation in a mature domain, typically does not start from scratch but takes into consideration the architecture and assets of the former product line generation. Being able to accommodate legacy and 3rd party code is one of the major product line qualities to be met. On the other side, product line qualities like reusability, maintainability and alterability, i.e. being able to cope up with a large amount of variability, with configurability and fast integratability are major drivers. While setting up a new product line generation and thus a new corresponding architecture, we this time focused on architectural software (SW) health and tracking of architectural metrics from the very beginning. Taking the definition of ""architecture being a set of design decisions"" [18] literally, we attempt to implement an architectural check for every design decision taken. Architectural design decisions in our understanding do not only - and even not mainly - deal with the definition of components and their interaction but with patterns and rules or anti-patterns. The rules and anti-patterns, ""what not to do"" or more often also ""what not to do any more"", is even more important in setting up a new product line generation because developers are not only used to the old style of developing and the old architecture, but also still have to develop assets for both generations. In this article we describe selected architectural checks that we have implemented, the layered architecture check and the check for usage of obsolete services. Additionally we discuss selected architectural metrics: the coupling coefficient metrics and the instability metrics. In the summary and outlook we describe our experiences and still open topics in setting up architectural SW health checks for a large-scale product line. The real-world examples are taken from the domain of Engine Control Unit development at Robert Bosch GmbH. architectural checks, architectural technical debt, embedded software, product line development, software architecture, software erosion, technical debt",setting up architectural sw health builds in a new product line generation setting up a new product line generation in a mature domain typically does not start from scratch but takes into consideration the architecture and assets of the former product line generation being able to accommodate legacy and 3rd party code is one of the major product line qualities to be met on the other side product line qualities like reusability maintainability and alterability i e being able to cope up with a large amount of variability with configurability and fast integratability are major drivers while setting up a new product line generation and thus a new corresponding architecture we this time focused on architectural software sw health and tracking of architectural metrics from the very beginning taking the definition of architecture being a set of design decisions 18 literally we attempt to implement an architectural check for every design decision taken architectural design decisions in our understanding do not only and even not mainly deal with the definition of components and their interaction but with patterns and rules or anti patterns the rules and anti patterns what not to do or more often also what not to do any more is even more important in setting up a new product line generation because developers are not only used to the old style of developing and the old architecture but also still have to develop assets for both generations in this article we describe selected architectural checks that we have implemented the layered architecture check and the check for usage of obsolete services additionally we discuss selected architectural metrics the coupling coefficient metrics and the instability metrics in the summary and outlook we describe our experiences and still open topics in setting up architectural sw health checks for a large scale product line the real world examples are taken from the domain of engine control unit development at robert bosch gmbh architectural checks architectural technical debt embedded software product line development software architecture software erosion technical debt,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
91,0,"A novel binary fruit fly optimization algorithm for solving the multidimensional knapsack problem In this paper, a novel binary fruit fly optimization algorithm (bFOA) is proposed to solve the multidimensional knapsack problem (MKP). In the bFOA, binary string is used to represent the solution of the MKP, and three main search processes are designed to perform evolutionary search, including smell-based search process, local vision-based search process and global vision-based search process. In particular, a group generating probability vector is designed for producing new solutions. To enhance the exploration ability, a global vision mechanism based on differential information among fruit flies is proposed to update the probability vector. Meanwhile, two repair operators are employed to guarantee the feasibility of solutions. The influence of the parameter setting is investigated based on the Taguchi method of design of experiment. Extensive numerical testing results based on benchmark instances are provided. And the comparisons to the existing algorithms demonstrate the effectiveness of the proposed bFOA in solving the MKP, especially for the large-scale problems. Multidimensional knapsack problem, Fruit fly optimization algorithm, Binary algorithm, Smell-based search, Vision-based search",a novel binary fruit fly optimization algorithm for solving the multidimensional knapsack problem in this paper a novel binary fruit fly optimization algorithm bfoa is proposed to solve the multidimensional knapsack problem mkp in the bfoa binary string is used to represent the solution of the mkp and three main search processes are designed to perform evolutionary search including smell based search process local vision based search process and global vision based search process in particular a group generating probability vector is designed for producing new solutions to enhance the exploration ability a global vision mechanism based on differential information among fruit flies is proposed to update the probability vector meanwhile two repair operators are employed to guarantee the feasibility of solutions the influence of the parameter setting is investigated based on the taguchi method of design of experiment extensive numerical testing results based on benchmark instances are provided and the comparisons to the existing algorithms demonstrate the effectiveness of the proposed bfoa in solving the mkp especially for the large scale problems multidimensional knapsack problem fruit fly optimization algorithm binary algorithm smell based search vision based search,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
92,0,"Smelling themselves: Dogs investigate their own odours longer when modified in an ``olfactory mirror'' test While domestic dogs, Canis familiaris, have been found to be skillful at social cognitive tasks and even some meta-cognitive tasks, they have not passed the test of mirror self-recognition (MSR). Acknowledging the motivational and sensory challenges that might hinder performance, even before the question of self-recognition is broached, this study creates and enacts a novel design extrapolated from the species' natural behaviour. Given dogs' use of olfactory signals in communication, this experiment presents dogs with various canisters for approach and investigation. Each holds an odorous stimulus: in the critical test, either an ``olfactory mirror'' of the subject − the dog's own urine − or one in which the odour stimulus is modified. By looking at subjects' investigation times of each canister, it is shown that dogs distinguish between the olfactory ``image'' of themselves when modified: investigating their own odour for longer when it had an additional odour accompanying it than when it did not. Such behaviour implies a recognition of the odour as being of or from ``themselves. The ecological validity of this odour presentation is examined by presenting to the subjects odours of other known or unknown dogs: dogs spend longer investigating the odour of other dogs than their own odour. Finally, in a second experiment, subjects spent longer with the modified stimulus than with the modified odour by itself, indicating that novelty alone does not explain the dogs' behavior. This study translates the MSR study for a species whose primary sensory modality is olfaction, and finds both that natural sniffing behaviour can be replicated in the lab and that dogs show more investigative interest in their own odours when modified. Domestic dogs, Olfactory investigation, Mirror self-recognition, Olfactory mirror, Sniffing",smelling themselves dogs investigate their own odours longer when modified in an olfactory mirror test while domestic dogs canis familiaris have been found to be skillful at social cognitive tasks and even some meta cognitive tasks they have not passed the test of mirror self recognition msr acknowledging the motivational and sensory challenges that might hinder performance even before the question of self recognition is broached this study creates and enacts a novel design extrapolated from the species natural behaviour given dogs use of olfactory signals in communication this experiment presents dogs with various canisters for approach and investigation each holds an odorous stimulus in the critical test either an olfactory mirror of the subject the dog s own urine or one in which the odour stimulus is modified by looking at subjects investigation times of each canister it is shown that dogs distinguish between the olfactory image of themselves when modified investigating their own odour for longer when it had an additional odour accompanying it than when it did not such behaviour implies a recognition of the odour as being of or from themselves the ecological validity of this odour presentation is examined by presenting to the subjects odours of other known or unknown dogs dogs spend longer investigating the odour of other dogs than their own odour finally in a second experiment subjects spent longer with the modified stimulus than with the modified odour by itself indicating that novelty alone does not explain the dogs behavior this study translates the msr study for a species whose primary sensory modality is olfaction and finds both that natural sniffing behaviour can be replicated in the lab and that dogs show more investigative interest in their own odours when modified domestic dogs olfactory investigation mirror self recognition olfactory mirror sniffing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
93,0,"Dynamic and static sensory methods to study the role of aroma on taste and texture: A multisensory approach to apple perception To date very little research has been done on sensory interaction taking into account the temporal component. The objectives of this work were to better understand the influence of aroma perception on taste and texture perception in a real food matrix such as the apple, considering sensory perception both as a static and dynamic process. Another objective was to evaluate the suitability of Temporal Dominance of Sensations (TDS) for studying sensory interaction. A set of 9 apple samples, made up of apple discs modified with two distinct aromas (3-methylbutyl acetate and (E)-3-hexen-1-ol) and/or two tastants (fructose and dl-malic acid), was used for the experiment. Samples were analysed by Descriptive Analysis (DA) and TDS performed by two different panels. Samples were also analysed using instrumental measurement of texture, sugar and volatile content. Aroma addition modified perception of the apple in both a static and dynamic way. Some texture-aroma and taste-aroma interaction were highlighted. TDS showed that both aromas made perception of hardness and juiciness less dominant. In some cases, banana aroma modified sweet taste perception and when used without tastants, it tended to anticipate sweetness perception in time. DA evidenced different results: both aromas decreased crunchiness or flouriness intensities when used alone or with fructose respectively. They increased juiciness intensity when combined with malic acid. TDS confirmed well-known relations between taste and smell and showed its appropriateness for studying sensory interaction. Its combination with DA gathered complementary points of view enriching the analysis and revealing unexpected or time-related interaction, a new perspective for understanding the phenomena linked to perception. Interaction, Temporal Dominance of Sensations, Descriptive analysis, Aroma, Tastant, Apple",dynamic and static sensory methods to study the role of aroma on taste and texture a multisensory approach to apple perception to date very little research has been done on sensory interaction taking into account the temporal component the objectives of this work were to better understand the influence of aroma perception on taste and texture perception in a real food matrix such as the apple considering sensory perception both as a static and dynamic process another objective was to evaluate the suitability of temporal dominance of sensations tds for studying sensory interaction a set of 9 apple samples made up of apple discs modified with two distinct aromas 3 methylbutyl acetate and e 3 hexen 1 ol and or two tastants fructose and dl malic acid was used for the experiment samples were analysed by descriptive analysis da and tds performed by two different panels samples were also analysed using instrumental measurement of texture sugar and volatile content aroma addition modified perception of the apple in both a static and dynamic way some texture aroma and taste aroma interaction were highlighted tds showed that both aromas made perception of hardness and juiciness less dominant in some cases banana aroma modified sweet taste perception and when used without tastants it tended to anticipate sweetness perception in time da evidenced different results both aromas decreased crunchiness or flouriness intensities when used alone or with fructose respectively they increased juiciness intensity when combined with malic acid tds confirmed well known relations between taste and smell and showed its appropriateness for studying sensory interaction its combination with da gathered complementary points of view enriching the analysis and revealing unexpected or time related interaction a new perspective for understanding the phenomena linked to perception interaction temporal dominance of sensations descriptive analysis aroma tastant apple,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
94,0,"A genetic algorithm-based approach for automated refactoring of component-based software Context: During its lifecycle, a software system undergoes repeated modifications to quickly fulfill new requirements, but its underlying design is not properly adjusted after each update. This leads to the emergence of bad smells. Refactoring provides a de facto behavior-preserving approach to eliminate these anomalies. However, manually determining and performing useful refactorings is a formidable challenge, as stated in the literature. Therefore, framing object-oriented automated refactoring as a search-based technique has been proposed. However, the literature shows that search-based refactoring of component-based software has not yet received proper attention. Objective: This paper presents a genetic algorithm-based approach for the automated refactoring of component-based software. This approach consists of detecting component-relevant bad smells and eliminating these bad smells by searching for the best sequence of refactorings using a genetic algorithm. Method: Our approach consists of four steps. The first step includes studying the literature related to component-relevant bad smells and formulating bad smell detection rules. The second step involves proposing a catalog of component-relevant refactorings. The third step consists of constructing a source code model by extracting facts from the source code of a component-based software. The final step seeks to identify the best sequence of refactorings to apply to reduce the presence of bad smells in the source code model using a genetic algorithm. The latter uses bad smell detection rules as a fitness function and the catalog of refactorings as a means to explore the search space. Results: As a case study, we conducted experiments on an unbiased set of four real-world component-based applications. The results indicate that our approach is able to efficiently reduce the total number of bad smells by more than one half, which is an acceptable value compared to the recent literature. Moreover, we determined that our approach is also accurate in refactoring only components suffering from bad smells while leaving the remaining components untouched whenever possible. Furthermore, a statistical analysis shows that our genetic algorithm outperforms random search and local search in terms of efficiency and accuracy on almost all the systems investigated in this work. Conclusion: This paper presents a search-based approach for the automated refactoring of component-based software. To the best of our knowledge, our approach is the first to focus on component-based refactoring, whereas the state-of-the-art approaches focus only on object-oriented refactoring. Genetic algorithm, Refactoring, Component-based software engineering, Bad smells",a genetic algorithm based approach for automated refactoring of component based software context during its lifecycle a software system undergoes repeated modifications to quickly fulfill new requirements but its underlying design is not properly adjusted after each update this leads to the emergence of bad smells refactoring provides a de facto behavior preserving approach to eliminate these anomalies however manually determining and performing useful refactorings is a formidable challenge as stated in the literature therefore framing object oriented automated refactoring as a search based technique has been proposed however the literature shows that search based refactoring of component based software has not yet received proper attention objective this paper presents a genetic algorithm based approach for the automated refactoring of component based software this approach consists of detecting component relevant bad smells and eliminating these bad smells by searching for the best sequence of refactorings using a genetic algorithm method our approach consists of four steps the first step includes studying the literature related to component relevant bad smells and formulating bad smell detection rules the second step involves proposing a catalog of component relevant refactorings the third step consists of constructing a source code model by extracting facts from the source code of a component based software the final step seeks to identify the best sequence of refactorings to apply to reduce the presence of bad smells in the source code model using a genetic algorithm the latter uses bad smell detection rules as a fitness function and the catalog of refactorings as a means to explore the search space results as a case study we conducted experiments on an unbiased set of four real world component based applications the results indicate that our approach is able to efficiently reduce the total number of bad smells by more than one half which is an acceptable value compared to the recent literature moreover we determined that our approach is also accurate in refactoring only components suffering from bad smells while leaving the remaining components untouched whenever possible furthermore a statistical analysis shows that our genetic algorithm outperforms random search and local search in terms of efficiency and accuracy on almost all the systems investigated in this work conclusion this paper presents a search based approach for the automated refactoring of component based software to the best of our knowledge our approach is the first to focus on component based refactoring whereas the state of the art approaches focus only on object oriented refactoring genetic algorithm refactoring component based software engineering bad smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
95,0,"Influence of package design on the dynamics of multisensory and emotional food experience During the various stages of user--product interactions, different sensory modalities may be important and different emotional responses may be elicited. We investigated how a dehydrated food product was experienced at different stages of product usage: choosing a product on a supermarket shelf, opening a package, cooking and eating the food. At the buying stage, vision was the most important modality, followed by taste. Smell was dominant at the cooking stage, and taste was the most important sensation while eating the food. Analysis of the emotional dynamics showed that ratings for satisfaction and pleasant surprise tended to be lowest during the buying stages. Fascination and boredom ratings tended to decrease gradually over the course of the experiment. Comments mostly reflected responses to sensory qualities, usability aspects, and the nature of the product. At the purchase stage, pre-existing attitudes and stereotypes towards the product group seemed to play a major role in affective reactions, while in the other stages when other modalities were actively involved, participants' emotional judgements reflected mainly their direct sensory experience. Sensory, Experience, Package, Dynamics, User--product interaction, Emotions",influence of package design on the dynamics of multisensory and emotional food experience during the various stages of user product interactions different sensory modalities may be important and different emotional responses may be elicited we investigated how a dehydrated food product was experienced at different stages of product usage choosing a product on a supermarket shelf opening a package cooking and eating the food at the buying stage vision was the most important modality followed by taste smell was dominant at the cooking stage and taste was the most important sensation while eating the food analysis of the emotional dynamics showed that ratings for satisfaction and pleasant surprise tended to be lowest during the buying stages fascination and boredom ratings tended to decrease gradually over the course of the experiment comments mostly reflected responses to sensory qualities usability aspects and the nature of the product at the purchase stage pre existing attitudes and stereotypes towards the product group seemed to play a major role in affective reactions while in the other stages when other modalities were actively involved participants emotional judgements reflected mainly their direct sensory experience sensory experience package dynamics user product interaction emotions,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
96,0,"Sedimentation stress in a scleractinian coral exposed to terrestrial and marine sediments with contrasting physical, organic and geochemical properties Terrestrial runoff increases siltation and nutrient availability on coastal coral reefs worldwide. However the factors determining stress in corals when exposed to short-term sedimentation, including the interactions between sediments and nutrients, are little understood. We exposed corals to ten different sediment types at environmentally relevant concentrations (33 to 160 mg DW cm−2) and exposure times (12 to 60 h) in laboratory and field experiments. The sediments originated from 2 estuaries, 2 nearshore and one offshore locations and also included ground-up aragonite. For two of these sediments, three grain size fractions were used (silt <63 μm, fine sand: 63--250 μm, medium sand: 250--500 μm). Sediments were characterised by 19 parameters grouped into ``physical'', ``organic and nutrient-related'' and ``geochemical'' parameters. Changes in the photosynthetic yield of the coral Montipora peltiformis was measured by pulse--amplitude modulated chlorophyll fluorometry (PAM) as proxy for photophysiological stress from exposure, and to determine rates of recovery. Different sediments exerted greatly contrasting levels of stress in the corals. Our results show that grain size and organic and nutrient-related sediment properties are key factors determining sedimentation stress in corals after short-term exposure. Photophysiological stress was measurable after 36 h of exposure to most of the silt-sized sediments, and coral recovery was incomplete after 48 to 96 h recovery time. The four sandy sediment types caused no measurable stress at the same concentration for the same exposure time. Stress levels were strongly related to the values of organic and nutrient-related parameters in the sediment, weakly related to the physical parameters and unrelated to the geochemical parameters measured. M. peltiformis removed the sandy grain size classes more easily than the silt, and nutrient-poor sediments were removed more easily than nutrient-rich sediments. Anoxia developed on the sediment surfaces of the nutrient-rich silts, which had become slimy and smelled of hydrogen sulphide, suggesting increased bacterial activity. Our finding that silt-sized and nutrient-rich sediments can stress corals after short exposure, while sandy sediments or nutrient-poor silts affect corals to a lesser extent, will help refining predictions of sedimentation threats to coral reefs at given environmental conditions. Great Barrier Reef, Nutrient enrichment, Scleractinia, Sedimentation, Sediment properties, Terrestrial runoff",sedimentation stress in a scleractinian coral exposed to terrestrial and marine sediments with contrasting physical organic and geochemical properties terrestrial runoff increases siltation and nutrient availability on coastal coral reefs worldwide however the factors determining stress in corals when exposed to short term sedimentation including the interactions between sediments and nutrients are little understood we exposed corals to ten different sediment types at environmentally relevant concentrations 33 to 160 mg dw cm 2 and exposure times 12 to 60 h in laboratory and field experiments the sediments originated from 2 estuaries 2 nearshore and one offshore locations and also included ground up aragonite for two of these sediments three grain size fractions were used silt 63 m fine sand 63 250 m medium sand 250 500 m sediments were characterised by 19 parameters grouped into physical organic and nutrient related and geochemical parameters changes in the photosynthetic yield of the coral montipora peltiformis was measured by pulse amplitude modulated chlorophyll fluorometry pam as proxy for photophysiological stress from exposure and to determine rates of recovery different sediments exerted greatly contrasting levels of stress in the corals our results show that grain size and organic and nutrient related sediment properties are key factors determining sedimentation stress in corals after short term exposure photophysiological stress was measurable after 36 h of exposure to most of the silt sized sediments and coral recovery was incomplete after 48 to 96 h recovery time the four sandy sediment types caused no measurable stress at the same concentration for the same exposure time stress levels were strongly related to the values of organic and nutrient related parameters in the sediment weakly related to the physical parameters and unrelated to the geochemical parameters measured m peltiformis removed the sandy grain size classes more easily than the silt and nutrient poor sediments were removed more easily than nutrient rich sediments anoxia developed on the sediment surfaces of the nutrient rich silts which had become slimy and smelled of hydrogen sulphide suggesting increased bacterial activity our finding that silt sized and nutrient rich sediments can stress corals after short exposure while sandy sediments or nutrient poor silts affect corals to a lesser extent will help refining predictions of sedimentation threats to coral reefs at given environmental conditions great barrier reef nutrient enrichment scleractinia sedimentation sediment properties terrestrial runoff,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
97,0,"Improving multi-objective code-smells correction using development history One of the widely used techniques to improve the quality of software systems is refactoring. Software refactoring improves the internal structure of the system while preserving its external behavior. These two concerns drive the existing approaches to refactoring automation. However, recent studies demonstrated that these concerns are not enough to produce correct and consistent refactoring solutions. In addition to quality improvement and behavior preservation, studies consider, among others, construct semantics preservation and minimization of changes. From another perspective, development history was proven as a powerful source of knowledge in many maintenance tasks. Still, development history is not widely explored in the context of automated software refactoring. In this paper, we use the development history collected from existing software projects to propose new refactoring solutions taking into account context similarity with situations seen in the past. We propose a multi-objective optimization-based approach to find good refactoring sequences that (1) minimize the number of code-smells, and (2) maximize the use of development history while (3) preserving the construct semantics. To this end, we use the non-dominated sorting genetic algorithm (NSGA-II) to find the best trade-offs between these three objectives. We evaluate our approach using a benchmark composed of five medium and large-size open-source systems and four types of code-smells (Blob, spaghetti code, functional decomposition, and data class). Our experimental results show the effectiveness of our approach, compared to three different state-of-the-art approaches, with more than 85% of code-smells fixed and 86% of suggested refactorings semantically coherent when the change history is used. Search-based software engineering, Refactoring, Code-smells",improving multi objective code smells correction using development history one of the widely used techniques to improve the quality of software systems is refactoring software refactoring improves the internal structure of the system while preserving its external behavior these two concerns drive the existing approaches to refactoring automation however recent studies demonstrated that these concerns are not enough to produce correct and consistent refactoring solutions in addition to quality improvement and behavior preservation studies consider among others construct semantics preservation and minimization of changes from another perspective development history was proven as a powerful source of knowledge in many maintenance tasks still development history is not widely explored in the context of automated software refactoring in this paper we use the development history collected from existing software projects to propose new refactoring solutions taking into account context similarity with situations seen in the past we propose a multi objective optimization based approach to find good refactoring sequences that 1 minimize the number of code smells and 2 maximize the use of development history while 3 preserving the construct semantics to this end we use the non dominated sorting genetic algorithm nsga ii to find the best trade offs between these three objectives we evaluate our approach using a benchmark composed of five medium and large size open source systems and four types of code smells blob spaghetti code functional decomposition and data class our experimental results show the effectiveness of our approach compared to three different state of the art approaches with more than 85 of code smells fixed and 86 of suggested refactorings semantically coherent when the change history is used search based software engineering refactoring code smells,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
98,0,"What Can Commit Metadata Tell Us About Design Degradation? Design degradation has long been assessed by means of structural analyses applied on successive versions of a software system. More recently, repository mining techniques have been developed in order to uncover rich historical information of software projects. In this paper, we leverage such information and propose an approach to assess design degradation that is programming language agnostic and relies almost exclusively on commit metadata. Our approach currently focuses on the assessment of two particular design smells: rigidity and fragility. Rigidity refer to designs that are difficult to change due to ripple effects and fragility refer to designs that tend to break in different areas every time a change is performed. We conducted an evaluation of our approach in the project Apache Maven 1 and the results indicated that our approach is feasible and that the project suffered from increasing fragility. Design degradation, commit metadata, mining software repositories, software metrics, version control systems",what can commit metadata tell us about design degradation design degradation has long been assessed by means of structural analyses applied on successive versions of a software system more recently repository mining techniques have been developed in order to uncover rich historical information of software projects in this paper we leverage such information and propose an approach to assess design degradation that is programming language agnostic and relies almost exclusively on commit metadata our approach currently focuses on the assessment of two particular design smells rigidity and fragility rigidity refer to designs that are difficult to change due to ripple effects and fragility refer to designs that tend to break in different areas every time a change is performed we conducted an evaluation of our approach in the project apache maven 1 and the results indicated that our approach is feasible and that the project suffered from increasing fragility design degradation commit metadata mining software repositories software metrics version control systems,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
99,0,"Detecting Code Smells in Python Programs As a traditional dynamic language, Python is increasingly used in various software engineering tasks. However, due to its flexibility and dynamism, Python is a particularly challenging language to write code in and maintain. Consequently, Python programs contain code smells which indicate potential comprehension and maintenance problems. With the aim of supporting refactoring strategies to enhance maintainability, this paper describes how to detect code smells in Python programs. We introduce 11 Python smells and describe the detection strategy. We also implement a smell detection tool named Pysmell and use it to identify code smells in five real world Python systems. The results show that Pysmell can detect 285 code smell instances in total with the average precision of 97.7%. It reveals that Large Class and Large Method are most prevalent. Our experiment also implies Python programs may be suffering code smells further. error detection codes, programming languages, software maintenance, code smells detection, Python programs, dynamic language, software engineering tasks, comprehension problems, maintenance problems, refactoring strategies, maintainability enhancement, detection strategy, smell detection tool, Pysmell, Measurement, Programming, Maintenance engineering, Software, Computer architecture, Manuals, Syntactics, Python, code smells, program maintenance, refactoring",detecting code smells in python programs as a traditional dynamic language python is increasingly used in various software engineering tasks however due to its flexibility and dynamism python is a particularly challenging language to write code in and maintain consequently python programs contain code smells which indicate potential comprehension and maintenance problems with the aim of supporting refactoring strategies to enhance maintainability this paper describes how to detect code smells in python programs we introduce 11 python smells and describe the detection strategy we also implement a smell detection tool named pysmell and use it to identify code smells in five real world python systems the results show that pysmell can detect 285 code smell instances in total with the average precision of 97 7 it reveals that large class and large method are most prevalent our experiment also implies python programs may be suffering code smells further error detection codes programming languages software maintenance code smells detection python programs dynamic language software engineering tasks comprehension problems maintenance problems refactoring strategies maintainability enhancement detection strategy smell detection tool pysmell measurement programming maintenance engineering software computer architecture manuals syntactics python code smells program maintenance refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
100,0,"The vision of software clone management: Past, present, and future (Keynote paper) Duplicated code or code clones are a kind of code smell that have both positive and negative impacts on the development and maintenance of software systems. Software clone research in the past mostly focused on the detection and analysis of code clones, while research in recent years extends to the whole spectrum of clone management. In the last decade, three surveys appeared in the literature, which cover the detection, analysis, and evolutionary characteristics of code clones. This paper presents a comprehensive survey on the state of the art in clone management, with in-depth investigation of clone management activities (e.g., tracing, refactoring, cost-benefit analysis) beyond the detection and analysis. This is the first survey on clone management, where we point to the achievements so far, and reveal avenues for further research necessary towards an integrated clone management system. We believe that we have done a good job in surveying the area of clone management and that this work may serve as a roadmap for future research in the area. program diagnostics, software maintenance, software management, source code (software), software clone management, duplicated code, code clones, code smell, software system development, software system maintenance, code clone detection, code clone anlalysis, indepth investigation, cost-benefit analysis, integrated clone management system, Cloning, Software, Detectors, Visualization, Documentation, Unified modeling language, Syntactics, Code Clones, Clone Analysis, Clone Management, Future Research Directions",the vision of software clone management past present and future keynote paper duplicated code or code clones are a kind of code smell that have both positive and negative impacts on the development and maintenance of software systems software clone research in the past mostly focused on the detection and analysis of code clones while research in recent years extends to the whole spectrum of clone management in the last decade three surveys appeared in the literature which cover the detection analysis and evolutionary characteristics of code clones this paper presents a comprehensive survey on the state of the art in clone management with in depth investigation of clone management activities e g tracing refactoring cost benefit analysis beyond the detection and analysis this is the first survey on clone management where we point to the achievements so far and reveal avenues for further research necessary towards an integrated clone management system we believe that we have done a good job in surveying the area of clone management and that this work may serve as a roadmap for future research in the area program diagnostics software maintenance software management source code software software clone management duplicated code code clones code smell software system development software system maintenance code clone detection code clone anlalysis indepth investigation cost benefit analysis integrated clone management system cloning software detectors visualization documentation unified modeling language syntactics code clones clone analysis clone management future research directions,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
101,0,"Evaluating Cross-sensory Perception of Superimposing Virtual Color Onto Real Drink: Toward Realization of Pseudo-gustatory Displays In this research, we aim to realize a gustatory display that enhances our experience of enjoying food. However, generating a sense of taste is very difficult because the human gustatory system is quite complicated and is not yet fully understood. This is so because gustatory sensation is based on chemical signals whereas visual and auditory sensations are based on physical signals. In addition, the brain perceives flavor by combining the senses of gustation, smell, sight, warmth, memory, etc. The aim of our research is to apply the complexity of the gustatory system in order to realize a pseudo-gustatory display that presents flavors by means of visual feedback. This paper reports on the prototype system of such a display that enables us to experience various tastes without changing their chemical composition through the superimposition of virtual color. The fundamental thrust of our experiment is to evaluate the influence of cross-sensory effects by superimposing virtual color onto actual drinks and recording the responses of subjects who drink them. On the basis of experimental results, we concluded that visual feedback sufficiently affects our perception of flavor to justify the construction of pseudo-gustatory displays. cross-sensory perception, gustatory display, pseudo-gustation",evaluating cross sensory perception of superimposing virtual color onto real drink toward realization of pseudo gustatory displays in this research we aim to realize a gustatory display that enhances our experience of enjoying food however generating a sense of taste is very difficult because the human gustatory system is quite complicated and is not yet fully understood this is so because gustatory sensation is based on chemical signals whereas visual and auditory sensations are based on physical signals in addition the brain perceives flavor by combining the senses of gustation smell sight warmth memory etc the aim of our research is to apply the complexity of the gustatory system in order to realize a pseudo gustatory display that presents flavors by means of visual feedback this paper reports on the prototype system of such a display that enables us to experience various tastes without changing their chemical composition through the superimposition of virtual color the fundamental thrust of our experiment is to evaluate the influence of cross sensory effects by superimposing virtual color onto actual drinks and recording the responses of subjects who drink them on the basis of experimental results we concluded that visual feedback sufficiently affects our perception of flavor to justify the construction of pseudo gustatory displays cross sensory perception gustatory display pseudo gustation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
102,0,"The Sound of the Smell of My Shoes Given the sensory poverty of virtual environments, such as those found in computer games that rely, in the main, solely on audio-visual interfaces, how best do we attain the experience of presence in those environments when presence requires the construction of a coherent (in the sense of realism) place in which to be and in which to act? The paper explores this question through an investigation of the senses of hearing and smell and suggests the possibility of introducing the experience of odours into such environments through the use of sound. Cross-modality, Hearing, Odour, Real virtuality, Smell, Sonic virtuality, Sound, Virtual environments",the sound of the smell of my shoes given the sensory poverty of virtual environments such as those found in computer games that rely in the main solely on audio visual interfaces how best do we attain the experience of presence in those environments when presence requires the construction of a coherent in the sense of realism place in which to be and in which to act the paper explores this question through an investigation of the senses of hearing and smell and suggests the possibility of introducing the experience of odours into such environments through the use of sound cross modality hearing odour real virtuality smell sonic virtuality sound virtual environments,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
103,0,"A Review-based Comparative Study of Bad Smell Detection Tools Bad smells are symptoms that something may be wrong in the system design or code. There are many bad smells defined in the literature and detecting them is far from trivial. Therefore, several tools have been proposed to automate bad smell detection aiming to improve software maintainability. However, we lack a detailed study for summarizing and comparing the wide range of available tools. In this paper, we first present the findings of a systematic literature review of bad smell detection tools. As results of this review, we found 84 tools; 29 of them available online for download. Altogether, these tools aim to detect 61 bad smells by relying on at least six different detection techniques. They also target different programming languages, such as Java, C, C++, and C#. Following up the systematic review, we present a comparative study of four detection tools with respect to two bad smells: Large Class and Long Method. This study relies on two software systems and three metrics for comparison: agreement, recall, and precision. Our findings support that tools provide redundant detection results for the same bad smell. Based on quantitative and qualitative data, we also discuss relevant usability issues and propose guidelines for developers of detection tools. bad smells, comparative study, detection tools, systematic literature review",a review based comparative study of bad smell detection tools bad smells are symptoms that something may be wrong in the system design or code there are many bad smells defined in the literature and detecting them is far from trivial therefore several tools have been proposed to automate bad smell detection aiming to improve software maintainability however we lack a detailed study for summarizing and comparing the wide range of available tools in this paper we first present the findings of a systematic literature review of bad smell detection tools as results of this review we found 84 tools 29 of them available online for download altogether these tools aim to detect 61 bad smells by relying on at least six different detection techniques they also target different programming languages such as java c c and c following up the systematic review we present a comparative study of four detection tools with respect to two bad smells large class and long method this study relies on two software systems and three metrics for comparison agreement recall and precision our findings support that tools provide redundant detection results for the same bad smell based on quantitative and qualitative data we also discuss relevant usability issues and propose guidelines for developers of detection tools bad smells comparative study detection tools systematic literature review,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
104,0,"Automated refactoring of super-class method invocations to the Template Method design pattern Context: Implementation inheritance, i.e., overriding of concrete method implementations through subtyping, is prone to potential class contract violations. Call Super is a code pattern that employs implementation inheritance for extending a method's behaviour. In Call Super the overriding method includes in its body an invocation to the overridden method. Template Method is a design pattern that enables extensions to a multi-step procedure without overriding its concrete implementation. Instead, subclasses provide different variants of the template method's behaviour through implementation of abstract method definitions (interface inheritance). Objective: This work studies the automated refactoring of Call Super to Template Method, contributing, thus, to replacement of implementation inheritance with interface inheritance. Method: We introduce an algorithm for the discovery of refactoring candidates that is based on an extensive set of refactoring preconditions. Moreover, we specify the source code transformation for refactoring a Call Super instance to Template Method. An implementation of the proposed approach is evaluated on a set of open source Java projects. Results: The evaluation results highlight (a) the frequent occurrence of the Call Super pattern among method overridings, (b) the potential provided by our method for discovery and elimination of several non-trivial Call Super instances and (c) the resulting code improvement, as reflected by the Specialization Index metric and the alignment of refactored code with the programmer's intent. The application of all refactorings identified on a set of benchmark projects and the successful execution of their test suites provide empirical evidence on the soundness of the refactoring procedure. Runtime performance results support the scalability of the proposed method. Conclusion: The proposed method automates the replacement of implementation inheritance with interface inheritance through refactoring Call Super instances to Template Method. The empirical evaluation of the method supports its applicability, soundness and runtime efficiency. Call Super, Implementation inheritance, Interface inheritance, Refactoring, Template Method design pattern",automated refactoring of super class method invocations to the template method design pattern context implementation inheritance i e overriding of concrete method implementations through subtyping is prone to potential class contract violations call super is a code pattern that employs implementation inheritance for extending a method s behaviour in call super the overriding method includes in its body an invocation to the overridden method template method is a design pattern that enables extensions to a multi step procedure without overriding its concrete implementation instead subclasses provide different variants of the template method s behaviour through implementation of abstract method definitions interface inheritance objective this work studies the automated refactoring of call super to template method contributing thus to replacement of implementation inheritance with interface inheritance method we introduce an algorithm for the discovery of refactoring candidates that is based on an extensive set of refactoring preconditions moreover we specify the source code transformation for refactoring a call super instance to template method an implementation of the proposed approach is evaluated on a set of open source java projects results the evaluation results highlight a the frequent occurrence of the call super pattern among method overridings b the potential provided by our method for discovery and elimination of several non trivial call super instances and c the resulting code improvement as reflected by the specialization index metric and the alignment of refactored code with the programmer s intent the application of all refactorings identified on a set of benchmark projects and the successful execution of their test suites provide empirical evidence on the soundness of the refactoring procedure runtime performance results support the scalability of the proposed method conclusion the proposed method automates the replacement of implementation inheritance with interface inheritance through refactoring call super instances to template method the empirical evaluation of the method supports its applicability soundness and runtime efficiency call super implementation inheritance interface inheritance refactoring template method design pattern,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
105,0,"Continuous quality assessment with inCode In spite of the progress that has been made over the last ten years in the research fields of software evolution and quality assessment, developers still do not take full advantage of the benefits of new assessment techniques that have been proposed by researchers. Beyond social factors, we believe that there are at least two main elements that contribute to this lack of adoption: (i) the insufficient integration of existing techniques in mainstream IDEs and (ii) the lack of support for a continuous (daily) usage of QA tools. In this context this paper introduces inCode, an Eclipse plugin aimed at transforming quality assessment and code inspections from a standalone activity, into a continuous process, fully integrated in the development life-cycle. But inCode not only assesses continuously the quality of Java systems; it also assists developers in taking restructuring decisions, and even supports them in triggering non-standard, complex refactorings. This paper introduces inCode's differentiating features, it presents the design goals that shaped our construction decisions, and describes a controlled experiment designed to validate the usability of the tool. The experiment has indicated that developers using inCode are more efficient in refactoring design fragments affected by design flaws. Quality assessment, Design quality, Design problems, Code smells, Software metrics",continuous quality assessment with incode in spite of the progress that has been made over the last ten years in the research fields of software evolution and quality assessment developers still do not take full advantage of the benefits of new assessment techniques that have been proposed by researchers beyond social factors we believe that there are at least two main elements that contribute to this lack of adoption i the insufficient integration of existing techniques in mainstream ides and ii the lack of support for a continuous daily usage of qa tools in this context this paper introduces incode an eclipse plugin aimed at transforming quality assessment and code inspections from a standalone activity into a continuous process fully integrated in the development life cycle but incode not only assesses continuously the quality of java systems it also assists developers in taking restructuring decisions and even supports them in triggering non standard complex refactorings this paper introduces incode s differentiating features it presents the design goals that shaped our construction decisions and describes a controlled experiment designed to validate the usability of the tool the experiment has indicated that developers using incode are more efficient in refactoring design fragments affected by design flaws quality assessment design quality design problems code smells software metrics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
106,0,"Levels of Realism: From Virtual Reality to Real Virtuality Realism in real-time has long been a ""holy grail"" of the computer graphics community. While real-time performance is typically accepted as 25fps and above, the definition of realism remains less clear. If we were able to simulate the physics of the real world to minute detail then it would be possible for us to achieve images which were physically correct. However, the amount of computation required for such physical accuracy of complex scenes precludes any possibility of achieving such images in reasonable, let alone real-time, on a desktop computer for many years to come. Furthermore, there is no guarantee of realism as these images do not take into account how the human may perceive this information. Our perception of an environment is not only what we see, but may be significantly influenced by other sensory input, including sound, smell, touch, and even taste. If virtual environments are ever to be regularly used as a valuable tool to experiment in the virtual world with confidence that the results are the same as would be experienced in the real world, then we need to be able to compute these environments to be perceptually equivalent as if we were ""there"" in the real world; so called ""there-reality"" or real virtuality. This paper surveys promising efforts to date and identifies and discusses future research directions. high-fidelity virtual environments, multi-modal, realism in real-time, there-reality",levels of realism from virtual reality to real virtuality realism in real time has long been a holy grail of the computer graphics community while real time performance is typically accepted as 25fps and above the definition of realism remains less clear if we were able to simulate the physics of the real world to minute detail then it would be possible for us to achieve images which were physically correct however the amount of computation required for such physical accuracy of complex scenes precludes any possibility of achieving such images in reasonable let alone real time on a desktop computer for many years to come furthermore there is no guarantee of realism as these images do not take into account how the human may perceive this information our perception of an environment is not only what we see but may be significantly influenced by other sensory input including sound smell touch and even taste if virtual environments are ever to be regularly used as a valuable tool to experiment in the virtual world with confidence that the results are the same as would be experienced in the real world then we need to be able to compute these environments to be perceptually equivalent as if we were there in the real world so called there reality or real virtuality this paper surveys promising efforts to date and identifies and discusses future research directions high fidelity virtual environments multi modal realism in real time there reality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
107,0,"Detecting Anti-patterns in Java EE Runtime System Model With the increasing complexity of enterprise applications, it becomes very challenging to create software systems which can exhibit a satisfactory performance behavior. In current system development practice, it often inevitably exists some ""anti-patterns"", which usually impede the performance or maintainability of software systems. Manually investigating anti-patterns in systems is a time-consuming and labor intensive task. To deal with this problem, we propose a general anti-pattern detection approach for Java EE application. Firstly, we propose a Java EE meta-model, based on which, we use QVT language to specify the detection process of anti-patterns. Secondly, we implement our approach on a runtime architecture-based reflective framework. When a Java EE application runs on one of the supported application servers, we can execute QVT script to detect whether or not there exists a specific anti-pattern in current system and get the report of potential problem components. At last, we perform a case study based on 35 well-known anti-patterns to evaluate the effectiveness and applicability of our approach. Java EE, anti pattern, antipatterns, runtime model",detecting anti patterns in java ee runtime system model with the increasing complexity of enterprise applications it becomes very challenging to create software systems which can exhibit a satisfactory performance behavior in current system development practice it often inevitably exists some anti patterns which usually impede the performance or maintainability of software systems manually investigating anti patterns in systems is a time consuming and labor intensive task to deal with this problem we propose a general anti pattern detection approach for java ee application firstly we propose a java ee meta model based on which we use qvt language to specify the detection process of anti patterns secondly we implement our approach on a runtime architecture based reflective framework when a java ee application runs on one of the supported application servers we can execute qvt script to detect whether or not there exists a specific anti pattern in current system and get the report of potential problem components at last we perform a case study based on 35 well known anti patterns to evaluate the effectiveness and applicability of our approach java ee anti pattern antipatterns runtime model,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
108,0,"Smelling therapeutic landscapes: Embodied encounters within spaces of care farming The conceptual framework of `therapeutic landscapes' has been used as a means of considering the significance of specific environments, spaces, and places for aspects of health. Building on a growing attention to the sensory elements of spaces of health and wellbeing, this article mobilises empirical research on `care farming' practices to discuss how smellscapes come to be crucial in fulfilling anticipations, imaginations, and expectations of a `therapeutic space'. This article highlights how embodied relationships with specific scents can constitute a therapeutic encounter with place, actively influencing practices and engagement with(in) place, and the ways by which place can have a meaningful affect on health. []",smelling therapeutic landscapes embodied encounters within spaces of care farming the conceptual framework of therapeutic landscapes has been used as a means of considering the significance of specific environments spaces and places for aspects of health building on a growing attention to the sensory elements of spaces of health and wellbeing this article mobilises empirical research on care farming practices to discuss how smellscapes come to be crucial in fulfilling anticipations imaginations and expectations of a therapeutic space this article highlights how embodied relationships with specific scents can constitute a therapeutic encounter with place actively influencing practices and engagement with in place and the ways by which place can have a meaningful affect on health,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
109,0,"Size and Frequency of Class Change from a Refactoring Perspective A previous study by Bieman et al., investigated whether large, object-oriented classes were more susceptible to change than smaller classes. The measure of change used in the study was the frequency with which the features of a class had been changed over a specific period of time. From a refactoring perspective, the frequency of class change is of value But even for a relatively simple refactoring such as 'rename method', multiple classes may undergo minor modification without any net increase in class (and system) size. In this paper, we suggest that the combination of 'versions of a class and number of added lines of code ' in the bad code 'smell' detection process may give a better impression of which classes are most suitable candidates for refactoring; as such, effort in detecting bad code smells should apply to classes with a high growth rate as well as a high change frequency. To support our investigation, data relating to changes from 161 Java classes was collected. Results concluded that it is not necessarily the case that large classes are more change-prone than relatively smaller classes. Moreover, the bad code smell detection process is informed by using the combination of change frequency and class size as a heuristic. Java, object-oriented programming, refactoring perspective, object-oriented classes, rename method, bad code smell detection, Java classes, Java, Lab-on-a-chip, Conferences, Information systems, Computer science, Frequency measurement, Time measurement, Data analysis, Software libraries, Software quality, Version, Refactoring, LOC.",size and frequency of class change from a refactoring perspective a previous study by bieman et al investigated whether large object oriented classes were more susceptible to change than smaller classes the measure of change used in the study was the frequency with which the features of a class had been changed over a specific period of time from a refactoring perspective the frequency of class change is of value but even for a relatively simple refactoring such as rename method multiple classes may undergo minor modification without any net increase in class and system size in this paper we suggest that the combination of versions of a class and number of added lines of code in the bad code smell detection process may give a better impression of which classes are most suitable candidates for refactoring as such effort in detecting bad code smells should apply to classes with a high growth rate as well as a high change frequency to support our investigation data relating to changes from 161 java classes was collected results concluded that it is not necessarily the case that large classes are more change prone than relatively smaller classes moreover the bad code smell detection process is informed by using the combination of change frequency and class size as a heuristic java object oriented programming refactoring perspective object oriented classes rename method bad code smell detection java classes java lab on a chip conferences information systems computer science frequency measurement time measurement data analysis software libraries software quality version refactoring loc,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
110,0,"Effect of feeding different levels of foliage of Moringa oleifera to creole dairy cows on intake, digestibility, milk production and composition An experiment was conducted in Nicaragua to determine the effect of feeding different levels of foliage from Moringa oleifera Lam (synonym: Moringa pterygosperma Gaertner) to dairy cows on intake, digestibility, milk production and milk composition. The treatments were: Brachiaria brizantha hay ad libitum, either unsupplemented or supplemented with 2 kg or 3 kg of Moringa on a dry matter (DM) basis. Six Bos indicus cows of the Creole Reyna breed, with a mean body weight of 394$\pm$24 kg were used in a replicated 3×3 Latin square design. Supplementation with Moringa increased (P<0.05) DM intake from 8.5 to 10.2 and 11.0 kg DM day−1 and milk production from 3.1 to 4.9 and 5.1 kg day−1 for B. brizantha hay only and supplementation with 2 kg and 3 kg DM of Moringa, respectively. Milk fat, total solids and crude protein and organoleptic characteristics, smell, taste and colour, were not significantly different between the diets. Apparent digestibility coefficients of DM, OM, CP, NDF and ADF increased (P<0.05) in the diets supplemented with Moringa compared with B. brizantha hay alone. The results showed that the inclusion of Moringa as a protein supplement to low quality diets improved DM intake and digestibility of the diet and increased milk production but did not affect milk composition. , Dairy cows, Intake, Digestibility, Milk production, Milk composition",effect of feeding different levels of foliage of moringa oleifera to creole dairy cows on intake digestibility milk production and composition an experiment was conducted in nicaragua to determine the effect of feeding different levels of foliage from moringa oleifera lam synonym moringa pterygosperma gaertner to dairy cows on intake digestibility milk production and milk composition the treatments were brachiaria brizantha hay ad libitum either unsupplemented or supplemented with 2 kg or 3 kg of moringa on a dry matter dm basis six bos indicus cows of the creole reyna breed with a mean body weight of 394 pm 24 kg were used in a replicated 3 3 latin square design supplementation with moringa increased p 0 05 dm intake from 8 5 to 10 2 and 11 0 kg dm day 1 and milk production from 3 1 to 4 9 and 5 1 kg day 1 for b brizantha hay only and supplementation with 2 kg and 3 kg dm of moringa respectively milk fat total solids and crude protein and organoleptic characteristics smell taste and colour were not significantly different between the diets apparent digestibility coefficients of dm om cp ndf and adf increased p 0 05 in the diets supplemented with moringa compared with b brizantha hay alone the results showed that the inclusion of moringa as a protein supplement to low quality diets improved dm intake and digestibility of the diet and increased milk production but did not affect milk composition dairy cows intake digestibility milk production milk composition,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
111,0,"Computation of Refactoring Plans from Refactoring Strategies Using HTN Planning Complex refactoring processes, such as applying big refactorings or removing design smells are difficult to perform in practice. The complexity of these processes is partly due to their heuristic nature and to the constraints imposed by preconditions on the applicability of the individual refactorings. We introduce refactoring strategies as heuristic-based, automation-suitable specifications of a complex refactoring process. They allow us to specify correction strategies and big refactorings more formally than it is done in current catalogues. Refactoring strategies can be instantiated, for each particular case, into refactoring plans. We define refactoring plans as sequences of refactorings that are immediately applicable over the current system source code. We have developed an approach for instantiating refactoring strategies into refactoring plans that uses Hierarchical Task Network (HTN) planning. This paper describes this approach and presents a case study, in order to evaluate and characterise it. HTN planning, big refactorings, case study, design smell correction, prototype, refactoring, refactoring plans, refactoring strategies",computation of refactoring plans from refactoring strategies using htn planning complex refactoring processes such as applying big refactorings or removing design smells are difficult to perform in practice the complexity of these processes is partly due to their heuristic nature and to the constraints imposed by preconditions on the applicability of the individual refactorings we introduce refactoring strategies as heuristic based automation suitable specifications of a complex refactoring process they allow us to specify correction strategies and big refactorings more formally than it is done in current catalogues refactoring strategies can be instantiated for each particular case into refactoring plans we define refactoring plans as sequences of refactorings that are immediately applicable over the current system source code we have developed an approach for instantiating refactoring strategies into refactoring plans that uses hierarchical task network htn planning this paper describes this approach and presents a case study in order to evaluate and characterise it htn planning big refactorings case study design smell correction prototype refactoring refactoring plans refactoring strategies,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
112,0,"Towards Understanding Residential Privacy by Analyzing Users' Activities in Foursquare Location-based social network systems (LBSNSs) are becoming increasingly popular. At the same time, privacy of users' information in these systems is becoming a huge concern. In LBSNSs, such as Foursquare, users' residential addresses and their check-ins at the residential venues are regarded as sensitive and private information as the exposure of such information can reveal users' home addresses and their absence from their homes. Analysis of users' activities involving residential venues in LBSNSs, therefore, provides useful insights into users' residential privacy concerns. In addition, such analysis can help researchers to better understand users' activities related to their residential privacy so as to develop better privacy protection mechanisms. In this paper, we first analyze Foursquare data to explore the following questions related to users' residential privacy: 1) how users share the addresses of the residential venues; 2) how users share their check-ins at the residential venues. Our analysis shows that users tend to be aware of their residential privacy and try to protect their personal information in Foursquare. During the data analysis, we also identify several system vulnerabilities and privacy risks that can be exploited to violate users' residential privacy in Foursquare. Such vulnerabilities and privacy risks are actually caused by the system's design flaws and users' incautious activities. Based on the results of the data analysis, we then propose a framework that includes access control and alert mechanisms to address these privacy issues. check-ins, foursquare, location-based social network systems, residential address, residential privacy",towards understanding residential privacy by analyzing users activities in foursquare location based social network systems lbsnss are becoming increasingly popular at the same time privacy of users information in these systems is becoming a huge concern in lbsnss such as foursquare users residential addresses and their check ins at the residential venues are regarded as sensitive and private information as the exposure of such information can reveal users home addresses and their absence from their homes analysis of users activities involving residential venues in lbsnss therefore provides useful insights into users residential privacy concerns in addition such analysis can help researchers to better understand users activities related to their residential privacy so as to develop better privacy protection mechanisms in this paper we first analyze foursquare data to explore the following questions related to users residential privacy 1 how users share the addresses of the residential venues 2 how users share their check ins at the residential venues our analysis shows that users tend to be aware of their residential privacy and try to protect their personal information in foursquare during the data analysis we also identify several system vulnerabilities and privacy risks that can be exploited to violate users residential privacy in foursquare such vulnerabilities and privacy risks are actually caused by the system s design flaws and users incautious activities based on the results of the data analysis we then propose a framework that includes access control and alert mechanisms to address these privacy issues check ins foursquare location based social network systems residential address residential privacy,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
113,0,"Measures to Improve Security in a Microkernel Operating System An operating system forms the foundation for all of the user's computer activities. Therefore, it should be trustworthy and function flawlessly. Unfortunately, today's operating systems, such as Windows and Linux, fail to deliver to this ideal, because they suffer from fundamental design flaws and bugs. Their monolithic kernel tend be overloaded with functionality that runs at the highest privilege level. This easily introduces bugs and breaches the Principle of Least Authorization (POLA) with all the related risks. Microkernel operating systems have a different design that makes them less vulnerable to these problems. A microkernel provides only a minimal set of abstractions that runs at the highest privilege level. Extended operating system functionality is typically available by means of user-space servers. By splitting an operating system into small, independent parts, the system becomes less complex and more robust, because the smaller parts are more manageable and help to isolate faults, respectively. This paper reviews the concepts and mechanisms used to improve security in Microkernel Operating system and described in brief about two real-world microkernel operating system, trying to achieve security as its goal. microkernel, performance, security",measures to improve security in a microkernel operating system an operating system forms the foundation for all of the user s computer activities therefore it should be trustworthy and function flawlessly unfortunately today s operating systems such as windows and linux fail to deliver to this ideal because they suffer from fundamental design flaws and bugs their monolithic kernel tend be overloaded with functionality that runs at the highest privilege level this easily introduces bugs and breaches the principle of least authorization pola with all the related risks microkernel operating systems have a different design that makes them less vulnerable to these problems a microkernel provides only a minimal set of abstractions that runs at the highest privilege level extended operating system functionality is typically available by means of user space servers by splitting an operating system into small independent parts the system becomes less complex and more robust because the smaller parts are more manageable and help to isolate faults respectively this paper reviews the concepts and mechanisms used to improve security in microkernel operating system and described in brief about two real world microkernel operating system trying to achieve security as its goal microkernel performance security,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
114,0,"Does housing influence maternal behaviour in sows? Farrowing crates prevent sows during lactation from moving freely and interacting unrestrictedly with their piglets. The aim of this study was to compare sows during lactation in a group-housing system (GH; n=23) and sows in a conventional single-housing system (SH; n=24) with regard to their maternal behaviour. GH sows were only fixed in their pens three days ante partum until one day post partum. For the remaining amount of time they were able to choose between their home pen and a shared running area. Piglets were able to leave their pens on day five post partum. Data were collected in four batches with six sows in each housing system. All sows were observed in week 2 and week 4 of lactation in six successive tests concerning their maternal behaviour. The sows' reaction to piglet distress calls, separation from and reunion with their piglets was tested both in their home pens and in a test arena for a maximum of five minutes. The test arena (3.9m×3.7m) provided a piglet nest in a corner. The sows were only able to hear and smell their piglets. In the piglet scream test in the home pen, GH sows were more responsive to piglet screaming than SH sows. GH sows showed more body movements towards their screaming piglets and aggressiveness towards the experimenter (p<0.05) as well as stronger postural reactions at the end of the test; i.e. standing (p<0.05). However, in the piglet scream test in the test arena, SH sows remained near their handled piglet more frequently (p<0.05) and vocalised more frequently (p<0.05). Whereas, GH sows tended to explore the test arena more (p<0.10). During the separation test in the home pen, no behavioural differences between GH and SH sows could be obtained. During the separation test in the test arena, all sows remained near the piglet nest with their piglets. Furthermore, SH sows walked more (p<0.05), while GH sows explored the test arena more frequently (p<0.05). In the reunion test in the home pen, GH sows tended to vocalise more frequently (p<0.10). No behavioural differences could be found between GH and SH sows in the reunion test in the test arena. Regarding total piglet losses (e.g. crushing, underweight, runting, spay legs), GH sows had lower total losses compared to SH sows (p<0.05). Furthermore, GH sows crushed fewer piglets than SH sows (p<0.05). To conclude, GH sows showed stronger behavioural reactions in the home pen and SH sows in the test arena. Thus, the housing system has an effect on maternal behaviour. Further research is needed to obtain more information, if the significantly lower piglet losses of GH sows are related to the stronger maternal reactions in the home pens of these sows and to the housing conditions ante partum. Maternal behaviour, Group-housing system, Behavioural testing, Lactating sows",does housing influence maternal behaviour in sows farrowing crates prevent sows during lactation from moving freely and interacting unrestrictedly with their piglets the aim of this study was to compare sows during lactation in a group housing system gh n 23 and sows in a conventional single housing system sh n 24 with regard to their maternal behaviour gh sows were only fixed in their pens three days ante partum until one day post partum for the remaining amount of time they were able to choose between their home pen and a shared running area piglets were able to leave their pens on day five post partum data were collected in four batches with six sows in each housing system all sows were observed in week 2 and week 4 of lactation in six successive tests concerning their maternal behaviour the sows reaction to piglet distress calls separation from and reunion with their piglets was tested both in their home pens and in a test arena for a maximum of five minutes the test arena 3 9m 3 7m provided a piglet nest in a corner the sows were only able to hear and smell their piglets in the piglet scream test in the home pen gh sows were more responsive to piglet screaming than sh sows gh sows showed more body movements towards their screaming piglets and aggressiveness towards the experimenter p 0 05 as well as stronger postural reactions at the end of the test i e standing p 0 05 however in the piglet scream test in the test arena sh sows remained near their handled piglet more frequently p 0 05 and vocalised more frequently p 0 05 whereas gh sows tended to explore the test arena more p 0 10 during the separation test in the home pen no behavioural differences between gh and sh sows could be obtained during the separation test in the test arena all sows remained near the piglet nest with their piglets furthermore sh sows walked more p 0 05 while gh sows explored the test arena more frequently p 0 05 in the reunion test in the home pen gh sows tended to vocalise more frequently p 0 10 no behavioural differences could be found between gh and sh sows in the reunion test in the test arena regarding total piglet losses e g crushing underweight runting spay legs gh sows had lower total losses compared to sh sows p 0 05 furthermore gh sows crushed fewer piglets than sh sows p 0 05 to conclude gh sows showed stronger behavioural reactions in the home pen and sh sows in the test arena thus the housing system has an effect on maternal behaviour further research is needed to obtain more information if the significantly lower piglet losses of gh sows are related to the stronger maternal reactions in the home pens of these sows and to the housing conditions ante partum maternal behaviour group housing system behavioural testing lactating sows,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
115,0,"Food Media: Exploring Interactive Entertainment over Telepresent Dinner Families have strong desires to have fun together, even at a distance. ""Food Media"" is an exploration of appropriating food and food activities as a medium for family communication and entertainment, across generations and over a distance. Traditionally, food has always been a social hub which brings people together for communication and entertainment. As the chances for remote families to enjoy shared entertainment are decreasing greatly nowadays, we propose ""Food Media"" as an intuitive multimodal interaction platform to engage remote people into social communication and entertainment within the telepresent family dinner context. Rather than fancy multimedia or computerized social games, this system breathes interactive entertainment into domestic routine activities of family dining, introduces multi-sensory interactions like touch, smell and taste to support enriched experience of interaction, connects and entertains people over a natural and playful eating experience. dining, family entertainment, food, home media technologies, multi-sensory experience, multimodal communication",food media exploring interactive entertainment over telepresent dinner families have strong desires to have fun together even at a distance food media is an exploration of appropriating food and food activities as a medium for family communication and entertainment across generations and over a distance traditionally food has always been a social hub which brings people together for communication and entertainment as the chances for remote families to enjoy shared entertainment are decreasing greatly nowadays we propose food media as an intuitive multimodal interaction platform to engage remote people into social communication and entertainment within the telepresent family dinner context rather than fancy multimedia or computerized social games this system breathes interactive entertainment into domestic routine activities of family dining introduces multi sensory interactions like touch smell and taste to support enriched experience of interaction connects and entertains people over a natural and playful eating experience dining family entertainment food home media technologies multi sensory experience multimodal communication,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
116,0,"Universal Scent Blackbox: Engaging Visitors Communication Through Creating Olfactory Experience at Art Museum This paper describes the experience of experimental artwork ""Universal Scent Blackbox"", which encourages visitors interaction through creating olfactory experience in art museum. Smell is used as the evocative interface between the artwork and the visitors. When a visitor passed by a certain area, it would trigger the odor emission in another area for the other visitors. The visitors on another side could trigger the odor emission back as well. Throughout the experience, visitors can freely explore the scents around the area of the artwork. In addition, the visitors can express their memories of smell through writing onto origami boxes which contribute as a part of the city model of the artwork. The artwork consisted of all the visitors' memories expression and communication at the end of exhibition. The aim of this paper is neither technology investigation nor user experience evaluation. Instead it is an open-end exploration which questions the role of olfactory interface in art museum context and provokes the insights about olfactory interaction design in Human-Computer Interaction. The artwork becomes the inspirational probe to explore the possibilities of olfactory interface with the users when designing for communication. The benefits and drawbacks of the chosen approach towards olfactory interaction design would be discussed. I would also address the lessons learned behind throughout the process. art museum, interactive installation, olfactory interface, smell",universal scent blackbox engaging visitors communication through creating olfactory experience at art museum this paper describes the experience of experimental artwork universal scent blackbox which encourages visitors interaction through creating olfactory experience in art museum smell is used as the evocative interface between the artwork and the visitors when a visitor passed by a certain area it would trigger the odor emission in another area for the other visitors the visitors on another side could trigger the odor emission back as well throughout the experience visitors can freely explore the scents around the area of the artwork in addition the visitors can express their memories of smell through writing onto origami boxes which contribute as a part of the city model of the artwork the artwork consisted of all the visitors memories expression and communication at the end of exhibition the aim of this paper is neither technology investigation nor user experience evaluation instead it is an open end exploration which questions the role of olfactory interface in art museum context and provokes the insights about olfactory interaction design in human computer interaction the artwork becomes the inspirational probe to explore the possibilities of olfactory interface with the users when designing for communication the benefits and drawbacks of the chosen approach towards olfactory interaction design would be discussed i would also address the lessons learned behind throughout the process art museum interactive installation olfactory interface smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
117,0,"Functional Testing: A Pattern to Follow and the Smells to Avoid Functional tests are automated, business process tests co-owned by customers and developers. They are particularly useful for rescuing projects from high bug counts, delayed releases, and dissatisfied customers. Functional tests help projects by elucidating requirements, making project progress visible, and preventing bugs. We present functional testing in pattern format because it is especially expressive in conveying expert advice and enables the reader to make an informed decision regarding the applicability of the solution. The pattern presented aggregates multiple experiences with functional testing over several agile development projects. However, we have seen functional testing become more costly than its benefits, so we describe the symptoms--""smells""--of potentially costly problems. These are not problems with functional testing per se, but with the misinterpretation and mis-implementation of this practice. We draw on our experience to suggest ways of addressing these smells. Done right, functional testing successfully increases software's quality and business value. acceptance testing, agile development practices, functional testing, patterns, testing",functional testing a pattern to follow and the smells to avoid functional tests are automated business process tests co owned by customers and developers they are particularly useful for rescuing projects from high bug counts delayed releases and dissatisfied customers functional tests help projects by elucidating requirements making project progress visible and preventing bugs we present functional testing in pattern format because it is especially expressive in conveying expert advice and enables the reader to make an informed decision regarding the applicability of the solution the pattern presented aggregates multiple experiences with functional testing over several agile development projects however we have seen functional testing become more costly than its benefits so we describe the symptoms smells of potentially costly problems these are not problems with functional testing per se but with the misinterpretation and mis implementation of this practice we draw on our experience to suggest ways of addressing these smells done right functional testing successfully increases software s quality and business value acceptance testing agile development practices functional testing patterns testing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
118,0,"Solving the steelmaking casting problem using an effective fruit fly optimisation algorithm This paper presents an effective fruit fly optimisation algorithm (FOA) to solve the steelmaking casting problem. First, we model the realistic problem as a hybrid flow shop (HFS) scheduling problem with batching in the last stage. Next, the proposed FOA algorithm is applied to solve the realistic HFS problems. In the proposed algorithm, each solution is represented by a fruit fly. Each fruit fly first improves its status through a well-designed smell search procedure. During the vision-based search procedure, the worst fruit fly in the population will be induced by the best fruit fly found thus far to improve the exploitation ability of the entire fruit fly population further. To enhance the exploration ability of the proposed algorithm, in each generation, each fruit fly that has not updated its status during the last several iterations will be replaced by a newly-generated fruit fly. The proposed algorithm is tested on sets of the instances that are generated based on the realistic production. Moreover, the influence of the parameter setting is also investigated using the Taguchi method of the design-of-experiment (DOE) to determine the suitable values for the key parameters. The results indicate that the proposed FOA is more effective than the four presented algorithms. Hybrid flow shop scheduling, Steelmaking casting problem, Fruit fly optimisation algorithm, Realistic scheduling problem, Neighbourhood structure",solving the steelmaking casting problem using an effective fruit fly optimisation algorithm this paper presents an effective fruit fly optimisation algorithm foa to solve the steelmaking casting problem first we model the realistic problem as a hybrid flow shop hfs scheduling problem with batching in the last stage next the proposed foa algorithm is applied to solve the realistic hfs problems in the proposed algorithm each solution is represented by a fruit fly each fruit fly first improves its status through a well designed smell search procedure during the vision based search procedure the worst fruit fly in the population will be induced by the best fruit fly found thus far to improve the exploitation ability of the entire fruit fly population further to enhance the exploration ability of the proposed algorithm in each generation each fruit fly that has not updated its status during the last several iterations will be replaced by a newly generated fruit fly the proposed algorithm is tested on sets of the instances that are generated based on the realistic production moreover the influence of the parameter setting is also investigated using the taguchi method of the design of experiment doe to determine the suitable values for the key parameters the results indicate that the proposed foa is more effective than the four presented algorithms hybrid flow shop scheduling steelmaking casting problem fruit fly optimisation algorithm realistic scheduling problem neighbourhood structure,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
119,0,"The Sound of the Smell (and Taste) of My Shoes Too: Mapping the Senses Using Emotion As a Medium This work discusses basic human senses: sight; sound; touch; taste; and smell; and the way in which it may be possible to compensate for lack of one, or more, of these by explicitly representing stimuli using the remaining senses. There may be many situations or scenarios where not all five of these base senses are being stimulated, either because of an optional restriction or deficit or because of a physical or sensory impairment such as loss of sight or touch sensation. Related to this there are other scenarios where sensory matching problems may occur. For example: a user immersed in a virtual environment may have a sense of smell from the real world that is unconnected to the virtual world. In particular, this paper is concerned with how sound can be used to compensate for the lack of other sensory stimulation and vice-versa. As a link is well established already between the visual, touch, and auditory systems, more attention is given to taste and smell, and their relationship with sound. This work presents theoretical concepts, largely oriented around mapping other sensory qualities to sound, based upon existing work in the literature and emerging technologies, to discuss where particular gaps currently exist, how emotion could be a medium to cross-modal representations, and how these might be addressed in future research. It is postulated that descriptive qualities, such as timbre or emotion, are currently the most viable routes for further study and that this may be later integrated with the wider body of research into sensory augmentation. Human senses, cross-modality, interaction, sensory perception, sonification",the sound of the smell and taste of my shoes too mapping the senses using emotion as a medium this work discusses basic human senses sight sound touch taste and smell and the way in which it may be possible to compensate for lack of one or more of these by explicitly representing stimuli using the remaining senses there may be many situations or scenarios where not all five of these base senses are being stimulated either because of an optional restriction or deficit or because of a physical or sensory impairment such as loss of sight or touch sensation related to this there are other scenarios where sensory matching problems may occur for example a user immersed in a virtual environment may have a sense of smell from the real world that is unconnected to the virtual world in particular this paper is concerned with how sound can be used to compensate for the lack of other sensory stimulation and vice versa as a link is well established already between the visual touch and auditory systems more attention is given to taste and smell and their relationship with sound this work presents theoretical concepts largely oriented around mapping other sensory qualities to sound based upon existing work in the literature and emerging technologies to discuss where particular gaps currently exist how emotion could be a medium to cross modal representations and how these might be addressed in future research it is postulated that descriptive qualities such as timbre or emotion are currently the most viable routes for further study and that this may be later integrated with the wider body of research into sensory augmentation human senses cross modality interaction sensory perception sonification,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
120,0,"Essence: Olfactory Interfaces for Unconscious Influence of Mood and Cognitive Performance The sense of smell is perhaps the most pervasive of all senses, but it is also one of the least understood and least exploited in HCI. We present Essence, the first olfactory computational necklace that can be remotely controlled through a smartphone and can vary the intensity and frequency of the released scent based on biometric or contextual data. This paper discusses the role of smell in designing pervasive systems that affect one's mood and cognitive performance while being asleep or awake. We present a set of applications for this type of technology as well as the implementation of the olfactory display and the supporting software. We also discuss the results of an initial test of the prototype that show the robustness and usability of Essence while wearing it for long periods of time in multiple environments. behavior change, fabrication, fashion clothing, health - wellbeing, olfactory interfaces, pervasive, prototyping implementation, smell, unconscious, wearable computers",essence olfactory interfaces for unconscious influence of mood and cognitive performance the sense of smell is perhaps the most pervasive of all senses but it is also one of the least understood and least exploited in hci we present essence the first olfactory computational necklace that can be remotely controlled through a smartphone and can vary the intensity and frequency of the released scent based on biometric or contextual data this paper discusses the role of smell in designing pervasive systems that affect one s mood and cognitive performance while being asleep or awake we present a set of applications for this type of technology as well as the implementation of the olfactory display and the supporting software we also discuss the results of an initial test of the prototype that show the robustness and usability of essence while wearing it for long periods of time in multiple environments behavior change fabrication fashion clothing health wellbeing olfactory interfaces pervasive prototyping implementation smell unconscious wearable computers,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
121,0,"Interactive Ontology Alignment Using Alignment Antipatterns: A First Experiment A large amount of data repositories became available due to the advances in information and communication technology. Those repositories, however, are highly semantically heterogeneous, which hinders their integration. Ontology alignment has been successfully applied to solve this problem, by discovering correspondences between two distinct ontologies which, in turn, conceptually define the data stored in each repository. Among the various ontology alignment approaches that exist in the literature, interactive ontology alignment includes the participation of experts to improve the quality of the final alignment. An important issue for interactive ontology alignment proposals is to maximize the efficiency of the expert participation. According to OAEI (an evaluation initiative conducted annually), despite the advances in this field there are still recurrent errors in the final alignments obtained by the interactive ontology alignment proposals. In this paper we propose ALIN, an interactive ontology alignment approach that increases the efficiency of the expert participation through the use of alignment anti-patterns. ALIN was evaluated considering three anti-patterns available in the literature, and the results proved the potential of the approach. Correspondence Antipattern, Interactive Ontology Matching, Ontology",interactive ontology alignment using alignment antipatterns a first experiment a large amount of data repositories became available due to the advances in information and communication technology those repositories however are highly semantically heterogeneous which hinders their integration ontology alignment has been successfully applied to solve this problem by discovering correspondences between two distinct ontologies which in turn conceptually define the data stored in each repository among the various ontology alignment approaches that exist in the literature interactive ontology alignment includes the participation of experts to improve the quality of the final alignment an important issue for interactive ontology alignment proposals is to maximize the efficiency of the expert participation according to oaei an evaluation initiative conducted annually despite the advances in this field there are still recurrent errors in the final alignments obtained by the interactive ontology alignment proposals in this paper we propose alin an interactive ontology alignment approach that increases the efficiency of the expert participation through the use of alignment anti patterns alin was evaluated considering three anti patterns available in the literature and the results proved the potential of the approach correspondence antipattern interactive ontology matching ontology,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
122,0,"Application of Ultra-realistic Communication Research to Digital Museum National Institute of Information and Communications Technology (NICT) is conducting ultra-realistic communication research since 2006. The aim of the research is to create a sense of ""being there"" for natural and realistic communication by developing 3D image display, 3D auditory display, multisensory interaction system with vision, sound, touch and smell, and evaluation technologies of human cognitive dynamism[Inoue 2010]. Digital museum is regarded as a good application of the research, but the potential is not clarified yet. This year, we had a chance to investigate the potential by exhibiting developed systems and allowing users to experience them. A multisensory interaction system and other systems related to digital museum were exhibited for 5 weeks as a prototype of digital museum. In this paper, the exhibited systems and the evaluation results are introduced. digital museum, multisensory interaction system, ultra-realistic communication",application of ultra realistic communication research to digital museum national institute of information and communications technology nict is conducting ultra realistic communication research since 2006 the aim of the research is to create a sense of being there for natural and realistic communication by developing 3d image display 3d auditory display multisensory interaction system with vision sound touch and smell and evaluation technologies of human cognitive dynamism inoue 2010 digital museum is regarded as a good application of the research but the potential is not clarified yet this year we had a chance to investigate the potential by exhibiting developed systems and allowing users to experience them a multisensory interaction system and other systems related to digital museum were exhibited for 5 weeks as a prototype of digital museum in this paper the exhibited systems and the evaluation results are introduced digital museum multisensory interaction system ultra realistic communication,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
123,0,"Participatory Video for Nutrition Training for Farmers in Malawi: An Analysis of Knowledge Gain and Adoption This paper explores how participatory video can improve the knowledge and adoption of nutrition and food preparation practices among smallholder farmers in Malawi. Using a pretest-posttest quasi-experimental design, this study found that the participatory video method improved the participants' knowledge as much as the traditional demonstration method. Short-term adoption tests were carried out 7--10 days after the training. The extent of short-term adoption of the technique varied by the training topic. For egg-coated nsima, the overall short-term adoption rate was a little over 60% across the groups, while the rate for egg-coated pumpkin flower was around 32%. This rate for the former practice was significantly lower in the video group (50.9%) than in the traditional demonstration group (75.6%) mainly because the participants were unable to taste and smell the food during the video training. The adoption rate for the latter practice was similar between the two groups. Malawi, extension training, nutrition, participatory video, technology adoption",participatory video for nutrition training for farmers in malawi an analysis of knowledge gain and adoption this paper explores how participatory video can improve the knowledge and adoption of nutrition and food preparation practices among smallholder farmers in malawi using a pretest posttest quasi experimental design this study found that the participatory video method improved the participants knowledge as much as the traditional demonstration method short term adoption tests were carried out 7 10 days after the training the extent of short term adoption of the technique varied by the training topic for egg coated nsima the overall short term adoption rate was a little over 60 across the groups while the rate for egg coated pumpkin flower was around 32 this rate for the former practice was significantly lower in the video group 50 9 than in the traditional demonstration group 75 6 mainly because the participants were unable to taste and smell the food during the video training the adoption rate for the latter practice was similar between the two groups malawi extension training nutrition participatory video technology adoption,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
124,0,"Uniting individual and collective concerns through design: Priming across the senses This paper contributes to design for behaviour change by testing the potential of priming via everyday products as a means of influencing users and dissolving conflicting individual and collective concerns. Self-construal is introduced as a core explanatory concept with respect to behaviours that unite individual and collective concerns. Two studies are reported. In the first, abstract representations of the target behaviour are elicited and incorporated into subconscious priming stimuli for each of the major senses: sight, hearing, touch, and smell. These primes are then evaluated in a controlled experiment. From these studies implications for both researchers and practitioners are identified. In particular, priming showed a significant effect across all senses. user behaviour, behavioural design, design method, product development, social innovation",uniting individual and collective concerns through design priming across the senses this paper contributes to design for behaviour change by testing the potential of priming via everyday products as a means of influencing users and dissolving conflicting individual and collective concerns self construal is introduced as a core explanatory concept with respect to behaviours that unite individual and collective concerns two studies are reported in the first abstract representations of the target behaviour are elicited and incorporated into subconscious priming stimuli for each of the major senses sight hearing touch and smell these primes are then evaluated in a controlled experiment from these studies implications for both researchers and practitioners are identified in particular priming showed a significant effect across all senses user behaviour behavioural design design method product development social innovation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
125,0,"Is a Strategy for Code Smell Assessment Long Overdue? Code smells reflect code decay and, as such, developers should seek to eradicate such smells through application of 'deodorant' in the form of one or more refactorings. However, a dearth of studies exploring code smells either theoretically or empirically suggests that there are reasons why smell eradication is neither being applied in anger, nor the subject of significant research. In this paper, we present three studies as supporting evidence for this claim. The first is an analysis of a set of five, open-source Java systems, the second an empirical study of a sub-system of a proprietary, C# web-based application and the third, a theoretical enumeration of smell-related refactorings. Key findings of the study were first, that developers seemed to avoid eradicating superficially 'simple' smells in favor of more 'obscure' ones; second, a wide range of conflicts and anomalies soon emerged when trying to identify smelly code. Finally, perceived effort to eradicate a smell may be a key factor. The study highlights the need for a clearer research strategy on the issue of code smells and all aspects of their identification and measurement. C#, Java, code smells, empirical studies, refactoring",is a strategy for code smell assessment long overdue code smells reflect code decay and as such developers should seek to eradicate such smells through application of deodorant in the form of one or more refactorings however a dearth of studies exploring code smells either theoretically or empirically suggests that there are reasons why smell eradication is neither being applied in anger nor the subject of significant research in this paper we present three studies as supporting evidence for this claim the first is an analysis of a set of five open source java systems the second an empirical study of a sub system of a proprietary c web based application and the third a theoretical enumeration of smell related refactorings key findings of the study were first that developers seemed to avoid eradicating superficially simple smells in favor of more obscure ones second a wide range of conflicts and anomalies soon emerged when trying to identify smelly code finally perceived effort to eradicate a smell may be a key factor the study highlights the need for a clearer research strategy on the issue of code smells and all aspects of their identification and measurement c java code smells empirical studies refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
126,0,"Collaborative Identification of Code Smells: A Multi-Case Study Code smells are anomalous program structures that may indicate software maintainability problems. God Classes and Feature Envies are examples of code smells that frequently become the target of software refactoring. However, smell identification might be harder than expected due to the subjectivity involved in the recognition of the apparently simple structure of each smell. Moreover, smell identification might require the knowledge of multiple program elements, which are better understood by different developers. Thus, the use of collaboration among developers may have the potential to improve effectiveness on smell identification. However, current knowledge, especially empirically developed and evaluated in the industry, is quite scarce. This paper reports an industrial case study aimed at observing how 13 developers individually and collaboratively performed smell identification in five software projects from two software development organizations. Our results suggest that collaboration contributes to improving effectiveness on the identification of a wide range of code smells. We also analyzed the factors contributing to such effectiveness improvement. groupware, software maintenance, collaborative identification, code smells, software maintainability problems, software refactoring, smell identification, software development organizations, Software, Companies, Collaboration, Government, Tools, Java, Case Study, Collaboration, Identification of Code Smells, Qualitative Analysis",collaborative identification of code smells a multi case study code smells are anomalous program structures that may indicate software maintainability problems god classes and feature envies are examples of code smells that frequently become the target of software refactoring however smell identification might be harder than expected due to the subjectivity involved in the recognition of the apparently simple structure of each smell moreover smell identification might require the knowledge of multiple program elements which are better understood by different developers thus the use of collaboration among developers may have the potential to improve effectiveness on smell identification however current knowledge especially empirically developed and evaluated in the industry is quite scarce this paper reports an industrial case study aimed at observing how 13 developers individually and collaboratively performed smell identification in five software projects from two software development organizations our results suggest that collaboration contributes to improving effectiveness on the identification of a wide range of code smells we also analyzed the factors contributing to such effectiveness improvement groupware software maintenance collaborative identification code smells software maintainability problems software refactoring smell identification software development organizations software companies collaboration government tools java case study collaboration identification of code smells qualitative analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
127,0,"Panappticon: Event-based Tracing to Measure Mobile Application and Platform Performance Improving and optimizing user-perceived smartphone performance requires understanding device, system, and application behavior for real-world workloads. However, measuring such performance is challenging due to the multi-threaded, asynchronous programming paradigms used in modern applications and the multiple layers of hardware and software used to respond to user input events. We address this challenge with Panappticon, a lightweight, system-wide, fine-grained event tracing system for Android that automatically identifies critical execution paths in user transactions. Panappticon monitors the application, system, and kernel software layers and can identify performance problems stemming from application design flaws, underpowered hardware, and harmful interactions between apparently unrelated applications. We carried out a 14-user, one-month study of an Android smartphone system instrumented with Panappticon, which revealed a number of specific problems and areas for improvement that may be of interest to system designers, application developers, and device manufactures. []",panappticon event based tracing to measure mobile application and platform performance improving and optimizing user perceived smartphone performance requires understanding device system and application behavior for real world workloads however measuring such performance is challenging due to the multi threaded asynchronous programming paradigms used in modern applications and the multiple layers of hardware and software used to respond to user input events we address this challenge with panappticon a lightweight system wide fine grained event tracing system for android that automatically identifies critical execution paths in user transactions panappticon monitors the application system and kernel software layers and can identify performance problems stemming from application design flaws underpowered hardware and harmful interactions between apparently unrelated applications we carried out a 14 user one month study of an android smartphone system instrumented with panappticon which revealed a number of specific problems and areas for improvement that may be of interest to system designers application developers and device manufactures,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
128,0,"Some Code Smells Have a Significant but Small Effect on Faults We investigate the relationship between faults and five of Fowler et al.'s least-studied smells in code: Data Clumps, Switch Statements, Speculative Generality, Message Chains, and Middle Man. We developed a tool to detect these five smells in three open-source systems: Eclipse, ArgoUML, and Apache Commons. We collected fault data from the change and fault repositories of each system. We built Negative Binomial regression models to analyse the relationships between smells and faults and report the McFadden effect size of those relationships. Our results suggest that Switch Statements had no effect on faults in any of the three systems; Message Chains increased faults in two systems; Message Chains which occurred in larger files reduced faults; Data Clumps reduced faults in Apache and Eclipse but increased faults in ArgoUML; Middle Man reduced faults only in ArgoUML, and Speculative Generality reduced faults only in Eclipse. File size alone affects faults in some systems but not in all systems. Where smells did significantly affect faults, the size of that effect was small (always under 10 percent). Our findings suggest that some smells do indicate fault-prone code in some circumstances but that the effect that these smells have on faults is small. Our findings also show that smells have different effects on different systems. We conclude that arbitrary refactoring is unlikely to significantly reduce fault-proneness and in some cases may increase fault-proneness. Software code smells, defects",some code smells have a significant but small effect on faults we investigate the relationship between faults and five of fowler et al s least studied smells in code data clumps switch statements speculative generality message chains and middle man we developed a tool to detect these five smells in three open source systems eclipse argouml and apache commons we collected fault data from the change and fault repositories of each system we built negative binomial regression models to analyse the relationships between smells and faults and report the mcfadden effect size of those relationships our results suggest that switch statements had no effect on faults in any of the three systems message chains increased faults in two systems message chains which occurred in larger files reduced faults data clumps reduced faults in apache and eclipse but increased faults in argouml middle man reduced faults only in argouml and speculative generality reduced faults only in eclipse file size alone affects faults in some systems but not in all systems where smells did significantly affect faults the size of that effect was small always under 10 percent our findings suggest that some smells do indicate fault prone code in some circumstances but that the effect that these smells have on faults is small our findings also show that smells have different effects on different systems we conclude that arbitrary refactoring is unlikely to significantly reduce fault proneness and in some cases may increase fault proneness software code smells defects,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
129,0,"Modeling: driving fuel cells You are walking along a busy traffic-filled street and the cars are passing by as they always have done. However, all does not seem right. The air that you are breathing is not filled with the bitter choking smell of exhaust fumes. There is no engine noise coming from the vehicles. How can this be? The answer is that the vehicles are all powered by fuel cells. Once confined to the realms of science fiction, the full commercialization of fuel cells could be just around the corner. Computational chemistry techniques, in particular molecular modeling and simulation, are being used to understand and refine the science driving this quiet, green revolution. Fuel cells were invented in 1839 by Sir William Grove, a Welsh judge and gentleman scientist, as a result of his experiments on the electrolysis of water. To put it simply, fuel cells are electrochemical devices that take hydrogen gas from fuel, combine it with oxygen from the air, and generate electricity and heat, with water as the only by-product. []",modeling driving fuel cells you are walking along a busy traffic filled street and the cars are passing by as they always have done however all does not seem right the air that you are breathing is not filled with the bitter choking smell of exhaust fumes there is no engine noise coming from the vehicles how can this be the answer is that the vehicles are all powered by fuel cells once confined to the realms of science fiction the full commercialization of fuel cells could be just around the corner computational chemistry techniques in particular molecular modeling and simulation are being used to understand and refine the science driving this quiet green revolution fuel cells were invented in 1839 by sir william grove a welsh judge and gentleman scientist as a result of his experiments on the electrolysis of water to put it simply fuel cells are electrochemical devices that take hydrogen gas from fuel combine it with oxygen from the air and generate electricity and heat with water as the only by product,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
130,0,"Helping Mobile Software Code Reviewers: A Study of Bug Repair and Refactoring Patterns Mobile Developers commonly spend a significant amount of time and effort on conducting code reviews on newly introduced and domain-specific practices, such as platform-specific feature addition, quality of service anti-pattern refactorings, and battery-related bug fixes. To address these problems, we conducted a large empirical study over the software change history of 318 open source projects and investigated platform-dependent code changes from open source projects. Our analysis focuses on what types of changes mobile application developers typically make and how they perceive, recall, and communicate changed and affected code. Our study required the development of an automated strategy to examine open source repositories and categorize platform-related refactoring edits, bug repairs, and API updates, mining 1,961,990 commit changes. Our findings call for the need to develop a new recommendation system aimed at efficiently identifying required changes such as bug fixes and refactorings during mobile application code reviews. mobile computing, public domain software, software maintenance, software reviews, source code (software), mobile software code reviewer, bug repair, refactoring pattern, mobile application developer, open source repository, recommendation system, Computer bugs, Mobile communication, Maintenance engineering, Mobile applications, Software, History, Cloning, mobile application development, software repair, refactoring",helping mobile software code reviewers a study of bug repair and refactoring patterns mobile developers commonly spend a significant amount of time and effort on conducting code reviews on newly introduced and domain specific practices such as platform specific feature addition quality of service anti pattern refactorings and battery related bug fixes to address these problems we conducted a large empirical study over the software change history of 318 open source projects and investigated platform dependent code changes from open source projects our analysis focuses on what types of changes mobile application developers typically make and how they perceive recall and communicate changed and affected code our study required the development of an automated strategy to examine open source repositories and categorize platform related refactoring edits bug repairs and api updates mining 1 961 990 commit changes our findings call for the need to develop a new recommendation system aimed at efficiently identifying required changes such as bug fixes and refactorings during mobile application code reviews mobile computing public domain software software maintenance software reviews source code software mobile software code reviewer bug repair refactoring pattern mobile application developer open source repository recommendation system computer bugs mobile communication maintenance engineering mobile applications software history cloning mobile application development software repair refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
131,0,"On the Use of Time Series and Search Based Software Engineering for Refactoring Recommendation To improve the quality of software systems, one of the widely used techniques is refactoring, defined as the process of improving the design of an existing system by changing its internal structure without altering the external behavior. The majority of existing refactoring works do not consider the impact of recommended refactorings on the quality of future releases of a system. In this paper, we propose to combine the use of search-based software engineering with time series to recommend good refactoring strategies in order to manage technical debt. We used a multi-objective algorithm to generate refactoring solutions that maximize the correction of important quality issues and minimize the effort. For these two fitness functions, we adapted time series forecasting to estimate the impact of the generated refactorings solution on future next releases of the system by predicting the evolution of the remaining code smells in the system, after refactoring, using different quality metrics. We evaluated our approach on one industrial project and a benchmark of 4 open source systems. The results confirm the efficiency of our technique to provide better refactoring management comparing to several existing refactoring techniques. data-mining, heuristic search, refactoring",on the use of time series and search based software engineering for refactoring recommendation to improve the quality of software systems one of the widely used techniques is refactoring defined as the process of improving the design of an existing system by changing its internal structure without altering the external behavior the majority of existing refactoring works do not consider the impact of recommended refactorings on the quality of future releases of a system in this paper we propose to combine the use of search based software engineering with time series to recommend good refactoring strategies in order to manage technical debt we used a multi objective algorithm to generate refactoring solutions that maximize the correction of important quality issues and minimize the effort for these two fitness functions we adapted time series forecasting to estimate the impact of the generated refactorings solution on future next releases of the system by predicting the evolution of the remaining code smells in the system after refactoring using different quality metrics we evaluated our approach on one industrial project and a benchmark of 4 open source systems the results confirm the efficiency of our technique to provide better refactoring management comparing to several existing refactoring techniques data mining heuristic search refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
132,0,"Detecting Object Usage Anomalies Interacting with objects often requires following a protocol---for instance, a specific sequence of method calls. These protocols are not always documented, and violations can lead to subtle problems. Our approach takes code examples to automatically infer legal sequences of method calls. The resulting patterns can then be used to detect anomalies such as ""Before calling next, one normally calls hasNext"". To our knowledge, this is the first fully automatic defect detection approach that learns and checks methodcall sequences. Our JADET prototype has detected yet undiscovered defects and code smells in five popular open-source programs, including two new defects in AspectJ. automated defect detection, automated specification generation, data mining for software engineering, object usage anomalies, pattern recognition, programming rules, static analysis",detecting object usage anomalies interacting with objects often requires following a protocol for instance a specific sequence of method calls these protocols are not always documented and violations can lead to subtle problems our approach takes code examples to automatically infer legal sequences of method calls the resulting patterns can then be used to detect anomalies such as before calling next one normally calls hasnext to our knowledge this is the first fully automatic defect detection approach that learns and checks methodcall sequences our jadet prototype has detected yet undiscovered defects and code smells in five popular open source programs including two new defects in aspectj automated defect detection automated specification generation data mining for software engineering object usage anomalies pattern recognition programming rules static analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
133,0,"Metrics for BPEL Process Reusability Analysis in a Workflow System This paper proposes a quantitative metric to analyze potential reusability of a Business Process Execution Language (BPEL) process. The approach is based on the description and logic mismatch probability of a BPEL process that will be reused within potential contexts. The mismatch probabilities have been consolidated to a metric formula for quantifying the probability of potential reuse of BPEL processes. An initial empirical evaluation suggests that the proposed metric properly predicts potential reusability of BPEL processes. According to the experiment, there exists a significant statistical correlation between the results of the metric and the experts' judgments. This indicates predictive dependence between the proposed metric and the potential reusability of BPEL processes as a measuring stick for this phenomenon. If future studies ascertain these findings by replicating this experiment, the practical implications of such a metric are early detection of the design flaws and aiding architects to judge various design alternatives. probability, service-oriented architecture, software metrics, software reusability, Web Services Business Process Execution Language, workflow management software, design flaw, statistical correlation, metric formula, logic mismatch probability, business process execution language process, potential reusability, quantitative metric, workflow system, BPEL process reusability analysis, Business, Measurement, Context, Service-oriented architecture, Switches, XML, Business process execution language (BPEL) process reusability, composite service, service-oriented architecture (SOA) metric, service reusability analysis, Business process execution language (BPEL) process reusability, composite service, service-oriented architecture (SOA) metric, service reusability analysis",metrics for bpel process reusability analysis in a workflow system this paper proposes a quantitative metric to analyze potential reusability of a business process execution language bpel process the approach is based on the description and logic mismatch probability of a bpel process that will be reused within potential contexts the mismatch probabilities have been consolidated to a metric formula for quantifying the probability of potential reuse of bpel processes an initial empirical evaluation suggests that the proposed metric properly predicts potential reusability of bpel processes according to the experiment there exists a significant statistical correlation between the results of the metric and the experts judgments this indicates predictive dependence between the proposed metric and the potential reusability of bpel processes as a measuring stick for this phenomenon if future studies ascertain these findings by replicating this experiment the practical implications of such a metric are early detection of the design flaws and aiding architects to judge various design alternatives probability service oriented architecture software metrics software reusability web services business process execution language workflow management software design flaw statistical correlation metric formula logic mismatch probability business process execution language process potential reusability quantitative metric workflow system bpel process reusability analysis business measurement context service oriented architecture switches xml business process execution language bpel process reusability composite service service oriented architecture soa metric service reusability analysis business process execution language bpel process reusability composite service service oriented architecture soa metric service reusability analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
134,0,"Light modulation of volatile organic compounds from petunia flowers and select fruits Light intensity, duration, direction, and wavelength are informative to plants. The biochemical circuits that connect specific light wavelengths to expression of specific genes and the metabolic networks they govern have been well defined. However, little emphasis has been placed on how discrete wavelengths of light, alone or in combination, may be applied to manipulate postharvest qualities of high-value horticultural crops. Using narrow-bandwidth LED light we test the hypothesis that discrete light wavelengths can affect the accumulation of volatile compounds known to affect aroma or taste in select flower and fruit products. Volatile benzenoid/phenylpropanoid emission from petunia flowers could be altered with light application. Levels of a key floral volatile, 2-phenylethanol, increased with a red and far-red light treatment. Similar experiments demonstrated that fruit volatile profiles of tomato, strawberry, and blueberry can be manipulated with specific light treatments. These results suggest that compounds affecting sensory qualities of flowers and fruits can be modified by adjustment of ambient light conditions. These findings open new areas of inquiry about how the fragrance and flavor of flowers and fruits may be improved with simple changes in postharvest light conditions. Flavor, Flowers, Fruits, Light, Smell, Volatiles",light modulation of volatile organic compounds from petunia flowers and select fruits light intensity duration direction and wavelength are informative to plants the biochemical circuits that connect specific light wavelengths to expression of specific genes and the metabolic networks they govern have been well defined however little emphasis has been placed on how discrete wavelengths of light alone or in combination may be applied to manipulate postharvest qualities of high value horticultural crops using narrow bandwidth led light we test the hypothesis that discrete light wavelengths can affect the accumulation of volatile compounds known to affect aroma or taste in select flower and fruit products volatile benzenoid phenylpropanoid emission from petunia flowers could be altered with light application levels of a key floral volatile 2 phenylethanol increased with a red and far red light treatment similar experiments demonstrated that fruit volatile profiles of tomato strawberry and blueberry can be manipulated with specific light treatments these results suggest that compounds affecting sensory qualities of flowers and fruits can be modified by adjustment of ambient light conditions these findings open new areas of inquiry about how the fragrance and flavor of flowers and fruits may be improved with simple changes in postharvest light conditions flavor flowers fruits light smell volatiles,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
135,0,"Incremental Elaboration of Scenario-based Specifications and Behavior Models Using Implied Scenarios Behavior modeling has proved to be successful in helping uncover design flaws of concurrent and distributed systems. Nevertheless, it has not had a widespread impact on practitioners because model construction remains a difficult task and because the benefits of behavior analysis appear at the end of the model construction effort. In contrast, scenario-based specifications have a wide acceptance in industry and are well suited for developing first approximations of intended behavior; however, they are still maturing with respect to rigorous semantics and analysis tools.This article proposes a process for elaborating system behavior that exploits the potential benefits of behavior modeling and scenario-based specifications yet ameliorates their shortcomings. The concept that drives the elaboration process is that of implied scenarios. Implied scenarios identify gaps in scenario-based specifications that arise from specifying the global behavior of a system that will be implemented component-wise. They are the result of a mismatch between the behavioral and architectural aspects of scenario-based specifications. Due to the partial nature of scenario-based specifications, implied scenarios need to be validated as desired or undesired behavior. The scenario specifications are then updated accordingly with new positive or negative scenarios. By iteratively detecting and validating implied scenarios, it is possible to incrementally elaborate the behavior described both in the scenario-based specification and models. The proposed elaboration process starts with a message sequence chart (MSC) specification that includes basic, high-level and negative MSCs. Implied scenario detection is performed by synthesis and automated analysis of behavior models. The final outcome consists of four artifacts: (1) an MSC specification that has been evolved from its original form to cover important aspects of the concurrent nature of the system that were under-specified or absent in the original specification, (2) a behavior model that captures the component structure of the system that, combined with (3) a constraint model and (4) a property model that provides the basis for modeling and reasoning about system design. LTSA, MSC, implied scenarios, negative scenarios",incremental elaboration of scenario based specifications and behavior models using implied scenarios behavior modeling has proved to be successful in helping uncover design flaws of concurrent and distributed systems nevertheless it has not had a widespread impact on practitioners because model construction remains a difficult task and because the benefits of behavior analysis appear at the end of the model construction effort in contrast scenario based specifications have a wide acceptance in industry and are well suited for developing first approximations of intended behavior however they are still maturing with respect to rigorous semantics and analysis tools this article proposes a process for elaborating system behavior that exploits the potential benefits of behavior modeling and scenario based specifications yet ameliorates their shortcomings the concept that drives the elaboration process is that of implied scenarios implied scenarios identify gaps in scenario based specifications that arise from specifying the global behavior of a system that will be implemented component wise they are the result of a mismatch between the behavioral and architectural aspects of scenario based specifications due to the partial nature of scenario based specifications implied scenarios need to be validated as desired or undesired behavior the scenario specifications are then updated accordingly with new positive or negative scenarios by iteratively detecting and validating implied scenarios it is possible to incrementally elaborate the behavior described both in the scenario based specification and models the proposed elaboration process starts with a message sequence chart msc specification that includes basic high level and negative mscs implied scenario detection is performed by synthesis and automated analysis of behavior models the final outcome consists of four artifacts 1 an msc specification that has been evolved from its original form to cover important aspects of the concurrent nature of the system that were under specified or absent in the original specification 2 a behavior model that captures the component structure of the system that combined with 3 a constraint model and 4 a property model that provides the basis for modeling and reasoning about system design ltsa msc implied scenarios negative scenarios,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
136,0,"Fork/Join Parallelism in the Wild: Documenting Patterns and Anti-patterns in Java Programs Using the Fork/Join Framework Now that multicore processors are commonplace, developing parallel software has escaped the confines of high-performance computing and enters the mainstream. The Fork/Join framework, for instance, is part of the standard Java platform since version 7. Fork/Join is a high-level parallel programming model advocated to make parallelizing recursive divide-and-conquer algorithms particularly easy. While, in theory, Fork/Join is a simple and effective technique to expose parallelism in applications, it has not been investigated before whether and how the technique is applied in practice. We therefore performed an empirical study on a corpus of 120 open source Java projects that use the framework for roughly 362 different tasks. On the one hand, we confirm the frequent use of four best-practice patterns (Sequential Cutoff, Linked Subtasks, Leaf Tasks, and avoiding unnecessary forking) in actual projects. On the other hand, we also discovered three recurring anti-patterns that potentially limit parallel performance: sub-optimal use of Java collections when splitting tasks into subtasks as well as when merging the results of subtasks, and finally the inappropriate sharing of resources between tasks. We document these anti-patterns and study their impact on performance. Java, anti-patterns, empirical study, fork join, open source projects, patterns",fork join parallelism in the wild documenting patterns and anti patterns in java programs using the fork join framework now that multicore processors are commonplace developing parallel software has escaped the confines of high performance computing and enters the mainstream the fork join framework for instance is part of the standard java platform since version 7 fork join is a high level parallel programming model advocated to make parallelizing recursive divide and conquer algorithms particularly easy while in theory fork join is a simple and effective technique to expose parallelism in applications it has not been investigated before whether and how the technique is applied in practice we therefore performed an empirical study on a corpus of 120 open source java projects that use the framework for roughly 362 different tasks on the one hand we confirm the frequent use of four best practice patterns sequential cutoff linked subtasks leaf tasks and avoiding unnecessary forking in actual projects on the other hand we also discovered three recurring anti patterns that potentially limit parallel performance sub optimal use of java collections when splitting tasks into subtasks as well as when merging the results of subtasks and finally the inappropriate sharing of resources between tasks we document these anti patterns and study their impact on performance java anti patterns empirical study fork join open source projects patterns,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
137,0,"UML Specification and Correction of Object-Oriented Anti-patterns Nowadays, the detection and correction of software defects has become a very hard task for software engineers. Most importantly, the lack of standard specifications of these software defects along with the lack of tools for their detection, correction and verification forces developers to perform manual modifications; resulting not only in mistakes, but also in costs of time and resources. The work presented here is a study of the specification and correction of a particular type of software defect: Object-Oriented anti-patterns. More specifically, we define a UML based specification of anti-patterns and establish design transformations for their correction. Through this work, we expect to open up the possibility to automate the detection and correction of these kinds of software defects. formal specification, formal verification, object-oriented methods, Unified Modeling Language, object-oriented anti-pattern correction, software defect correction, software defect detection, software verification, manual software modification, UML based specification, Unified modeling language, Object oriented modeling, Application software, Design engineering, Software standards, Pattern analysis, Standards development, Software engineering, Data engineering, Software performance, Object-Oriented Anti-patterns, UML, Refactoring",uml specification and correction of object oriented anti patterns nowadays the detection and correction of software defects has become a very hard task for software engineers most importantly the lack of standard specifications of these software defects along with the lack of tools for their detection correction and verification forces developers to perform manual modifications resulting not only in mistakes but also in costs of time and resources the work presented here is a study of the specification and correction of a particular type of software defect object oriented anti patterns more specifically we define a uml based specification of anti patterns and establish design transformations for their correction through this work we expect to open up the possibility to automate the detection and correction of these kinds of software defects formal specification formal verification object oriented methods unified modeling language object oriented anti pattern correction software defect correction software defect detection software verification manual software modification uml based specification unified modeling language object oriented modeling application software design engineering software standards pattern analysis standards development software engineering data engineering software performance object oriented anti patterns uml refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
138,0,"Demi-consciences et double consciences. Un parcours historique [] Conscience, Inconscient, Automatisme, Auto-observation, Auto expérimentation, Haschich, Rêve, Double personnalité, Conscience, Unconscious, Automatism, Self-observation, Self experiment, Hashish, Dream, Double personality",demi consciences et double consciences un parcours historique conscience inconscient automatisme auto observation auto exp rimentation haschich r ve double personnalit conscience unconscious automatism self observation self experiment hashish dream double personality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
139,0,"On the Impact of Aspect-Oriented Code Smells on Architecture Modularity: An Exploratory Study Aspect-oriented programming (AOP) aims to improve software modularity, although developers can unwittingly introduce code smells in their programs. A code smell is any symptom in the source code that possibly indicates a deeper modularity problem. Several works have been concerned about code smell occurrences in aspect-oriented systems. However, there is little knowledge about their actual damage to the modularity of architectural designs. This gap makes it difficult for developers understand and manage the harmful architecture-level impact of recurring code smells. This paper presents an exploratory analysis that investigates the influence of aspect-oriented code smells on evolving architectural designs. We analyzed code smell occurrences in 14 versions of 2 applications designed using different architectural styles. The outcome of our evaluation suggests that code smell occurrences often entail architecture modularity problems in these systems. Even worse, our analysis revealed that certain architecturally-relevant code smells were not targeted by the refactoring strategies in place. aspect-oriented programming, software architecture, aspect-oriented code smell, architecture modularity, aspect-oriented programming, software modularity, architecture-level impact, recurring code smell, exploratory analysis, architecturally-relevant code smell, Computer architecture, Software, Connectors, Correlation, Programming, Reliability, Concurrent computing, aspect-oriented programming, code smells, architectural smells",on the impact of aspect oriented code smells on architecture modularity an exploratory study aspect oriented programming aop aims to improve software modularity although developers can unwittingly introduce code smells in their programs a code smell is any symptom in the source code that possibly indicates a deeper modularity problem several works have been concerned about code smell occurrences in aspect oriented systems however there is little knowledge about their actual damage to the modularity of architectural designs this gap makes it difficult for developers understand and manage the harmful architecture level impact of recurring code smells this paper presents an exploratory analysis that investigates the influence of aspect oriented code smells on evolving architectural designs we analyzed code smell occurrences in 14 versions of 2 applications designed using different architectural styles the outcome of our evaluation suggests that code smell occurrences often entail architecture modularity problems in these systems even worse our analysis revealed that certain architecturally relevant code smells were not targeted by the refactoring strategies in place aspect oriented programming software architecture aspect oriented code smell architecture modularity aspect oriented programming software modularity architecture level impact recurring code smell exploratory analysis architecturally relevant code smell computer architecture software connectors correlation programming reliability concurrent computing aspect oriented programming code smells architectural smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
140,0,"A Case Study on Effectively Identifying Technical Debt Context: The technical debt (TD) concept describes a tradeoff between short-term and long-term goals in software development. While it is highly useful as a metaphor, it has utility beyond the facilitation of discussion, to inspire a useful set of methods and tools that support the identification, measurement, monitoring, management, and payment of TD. Objective: This study focuses on the identification of TD. We evaluate human elicitation of TD and compare it to automated identification. Method: We asked a development team to identify TD items in artifacts from a software project on which they were working. We provided the participants with a TD template and a short questionnaire. In addition, we also collected the output of three tools to automatically identify TD and compared it to the results of human elicitation. Results: There is little overlap between the TD reported by different developers, so aggregation, rather than consensus, is an appropriate way to combine TD reported by multiple developers. The tools used are especially useful for identifying defect debt but cannot help in identifying many other types of debt, so involving humans in the identification process is necessary. Conclusion: We have conducted a case study that focuses on the practical identification of TD, one area that could be facilitated by tools and techniques. It contributes to the TD landscape, which depicts an understanding of relationships between different types of debt and how they are best discovered. automatic static analysis, code smells, software maintenance, technical debt",a case study on effectively identifying technical debt context the technical debt td concept describes a tradeoff between short term and long term goals in software development while it is highly useful as a metaphor it has utility beyond the facilitation of discussion to inspire a useful set of methods and tools that support the identification measurement monitoring management and payment of td objective this study focuses on the identification of td we evaluate human elicitation of td and compare it to automated identification method we asked a development team to identify td items in artifacts from a software project on which they were working we provided the participants with a td template and a short questionnaire in addition we also collected the output of three tools to automatically identify td and compared it to the results of human elicitation results there is little overlap between the td reported by different developers so aggregation rather than consensus is an appropriate way to combine td reported by multiple developers the tools used are especially useful for identifying defect debt but cannot help in identifying many other types of debt so involving humans in the identification process is necessary conclusion we have conducted a case study that focuses on the practical identification of td one area that could be facilitated by tools and techniques it contributes to the td landscape which depicts an understanding of relationships between different types of debt and how they are best discovered automatic static analysis code smells software maintenance technical debt,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
141,0,"Using Unconventional Awareness Mechanisms to Support Mobile Work Awareness mechanisms are normally used to deliver context information to computer systems users. These mechanisms have been extensively studied as part of collaborative solutions designed for stationary scenarios, and recently on mobile and pervasive applications. The conventional awareness mechanisms through audio or visual messages have proved to be frequently unsuitable to deliver context information to people performing mobile activities, since the user's attention is not focused on the device he/she is using. This article presents two studies exploring the use of unconventional awareness mechanisms as a way to provide context information to firefighters during urban emergencies. In particular, the effectiveness of using the haptic and smell channels is evaluated as a way to implement direct and indirect capturers of the mobile workers' attention. The obtained results hint that both channels could be used to improve the information delivery. However, the awareness mechanisms that use the haptic channel are much more effective and allow implementing a more diverse set of messages. These awareness mechanisms can be used not only during emergency responses but also in other similar mobile work scenarios. awareness, capturer of the user's attention, emergency response process, information communication, odors for awareness, vibration for awareness",using unconventional awareness mechanisms to support mobile work awareness mechanisms are normally used to deliver context information to computer systems users these mechanisms have been extensively studied as part of collaborative solutions designed for stationary scenarios and recently on mobile and pervasive applications the conventional awareness mechanisms through audio or visual messages have proved to be frequently unsuitable to deliver context information to people performing mobile activities since the user s attention is not focused on the device he she is using this article presents two studies exploring the use of unconventional awareness mechanisms as a way to provide context information to firefighters during urban emergencies in particular the effectiveness of using the haptic and smell channels is evaluated as a way to implement direct and indirect capturers of the mobile workers attention the obtained results hint that both channels could be used to improve the information delivery however the awareness mechanisms that use the haptic channel are much more effective and allow implementing a more diverse set of messages these awareness mechanisms can be used not only during emergency responses but also in other similar mobile work scenarios awareness capturer of the user s attention emergency response process information communication odors for awareness vibration for awareness,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
142,0,"Can organoleptic properties explain the differential use of medicinal plants? Evidence from Northeastern Brazil Ethnopharmacological relevance This study examined how people classify plants in terms of their taste and smell, and how those organoleptic properties influence the differential use of medicinal plants for treating different diseases. Methods We conducted an ethnobotanical survey of household heads in the community of Sucruiu, located in Barreiras, Bahia, Brazil. The head of each family was questioned concerning their knowledge and use of medicinal plants, as well as the therapeutic indications (TIs), taste, and smell of each plant. We then tested for associations between the therapeutic indications and taste attributes of various plants using the Chi-squared test on a contingency table with Monte Carlo simulations. The same analysis was performed for associations between TIs and smell. Results The study participants provided more details when classifying tastes than when classifying smells. We considered only the most cited TIs and attributes, and found significant associations between both taste and therapeutic indications (p<0.001) and smell and therapeutic indications (p<0.0001). Conclusions Our results showed that the taste and smell of a plant can influence its differential medicinal use, since plants with certain tastes and smells prevailed in the treatment of distinct diseases. However, our results are valid only for the most popular TIs and organoleptic attributes. Ethnomedicine, Traditional medicine, Medicinal plant selection, Brazil",can organoleptic properties explain the differential use of medicinal plants evidence from northeastern brazil ethnopharmacological relevance this study examined how people classify plants in terms of their taste and smell and how those organoleptic properties influence the differential use of medicinal plants for treating different diseases methods we conducted an ethnobotanical survey of household heads in the community of sucruiu located in barreiras bahia brazil the head of each family was questioned concerning their knowledge and use of medicinal plants as well as the therapeutic indications tis taste and smell of each plant we then tested for associations between the therapeutic indications and taste attributes of various plants using the chi squared test on a contingency table with monte carlo simulations the same analysis was performed for associations between tis and smell results the study participants provided more details when classifying tastes than when classifying smells we considered only the most cited tis and attributes and found significant associations between both taste and therapeutic indications p 0 001 and smell and therapeutic indications p 0 0001 conclusions our results showed that the taste and smell of a plant can influence its differential medicinal use since plants with certain tastes and smells prevailed in the treatment of distinct diseases however our results are valid only for the most popular tis and organoleptic attributes ethnomedicine traditional medicine medicinal plant selection brazil,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
143,0,"Code smell severity classification using machine learning techniques Several code smells detection tools have been developed providing different results, because smells can be subjectively interpreted and hence detected in different ways. Machine learning techniques have been used for different topics in software engineering, e.g., design pattern detection, code smell detection, bug prediction, recommending systems. In this paper, we focus our attention on the classification of code smell severity through the use of machine learning techniques in different experiments. The severity of code smells is an important factor to take into consideration when reporting code smell detection results, since it allows the prioritization of refactoring efforts. In fact, code smells with high severity can be particularly large and complex, and create larger issues to the maintainability of software a system. In our experiments, we apply several machine learning models, spanning from multinomial classification to regression, plus a method to apply binary classifiers for ordinal classification. In fact, we model code smell severity as an ordinal variable. We take the baseline models from previous work, where we applied binary classification models for code smell detection with good results. We report and compare the performance of the models according to their accuracy and four different performance measures used for the evaluation of ordinal classification techniques. From our results, while the accuracy of the classification of severity is not high as in the binary classification of absence or presence of code smells, the ranking correlation of the actual and predicted severity for the best models reaches 0.88--0.96, measured through Spearman's ρ. Code smells detection, Machine learning, Code smell severity, Ordinal classification, Refactoring prioritization",code smell severity classification using machine learning techniques several code smells detection tools have been developed providing different results because smells can be subjectively interpreted and hence detected in different ways machine learning techniques have been used for different topics in software engineering e g design pattern detection code smell detection bug prediction recommending systems in this paper we focus our attention on the classification of code smell severity through the use of machine learning techniques in different experiments the severity of code smells is an important factor to take into consideration when reporting code smell detection results since it allows the prioritization of refactoring efforts in fact code smells with high severity can be particularly large and complex and create larger issues to the maintainability of software a system in our experiments we apply several machine learning models spanning from multinomial classification to regression plus a method to apply binary classifiers for ordinal classification in fact we model code smell severity as an ordinal variable we take the baseline models from previous work where we applied binary classification models for code smell detection with good results we report and compare the performance of the models according to their accuracy and four different performance measures used for the evaluation of ordinal classification techniques from our results while the accuracy of the classification of severity is not high as in the binary classification of absence or presence of code smells the ranking correlation of the actual and predicted severity for the best models reaches 0 88 0 96 measured through spearman s code smells detection machine learning code smell severity ordinal classification refactoring prioritization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
144,0,"Do Bad Smells Indicate ""Trouble"" in Code? In 1999 Fowler et al. identified 22 Bad Smells in code to direct the effective refactoring. These are increasingly being used by software engineers. However, the empirical basis of using Bad Smells to direct refactoring and to address 'trouble' in code is not clear. Our project aims to empirically investigate the impact of Bad Smells on software in terms of their relationship to faults. bad smells, faults, open source",do bad smells indicate trouble in code in 1999 fowler et al identified 22 bad smells in code to direct the effective refactoring these are increasingly being used by software engineers however the empirical basis of using bad smells to direct refactoring and to address trouble in code is not clear our project aims to empirically investigate the impact of bad smells on software in terms of their relationship to faults bad smells faults open source,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
145,0,"On the Role of Latent Design Conditions in Cyber-physical Systems Security As cyber-physical systems (CPS) become prevalent in everyday life, it is critical to understand the factors that may impact the security of such systems. In this paper, we present insights from an initial study of historical security incidents to analyse such factors for a particular class of CPS: industrial control systems (ICS). Our study challenges the usual tendency to blame human fallibility or resort to simple explanations for what are often complex issues that lead to a security incident. We highlight that (i) perception errors are key in such incidents (ii) latent design conditions -- e.g., improper specifications of a system's borders and capabilities -- play a fundamental role in shaping perceptions, leading to security issues. Such design-time considerations are particularly critical for ICS, the life-cycle of which is usually measured in decades. Based on this analysis, we discuss how key characteristics of future smart CPS in such industrial settings can pose further challenges with regards to tackling latent design flaws. cyber-physical systems, design, industrial control systems, perception, risk",on the role of latent design conditions in cyber physical systems security as cyber physical systems cps become prevalent in everyday life it is critical to understand the factors that may impact the security of such systems in this paper we present insights from an initial study of historical security incidents to analyse such factors for a particular class of cps industrial control systems ics our study challenges the usual tendency to blame human fallibility or resort to simple explanations for what are often complex issues that lead to a security incident we highlight that i perception errors are key in such incidents ii latent design conditions e g improper specifications of a system s borders and capabilities play a fundamental role in shaping perceptions leading to security issues such design time considerations are particularly critical for ics the life cycle of which is usually measured in decades based on this analysis we discuss how key characteristics of future smart cps in such industrial settings can pose further challenges with regards to tackling latent design flaws cyber physical systems design industrial control systems perception risk,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
146,0,"Mining Object-oriented Design Models for Detecting Identical Design Structures The object-oriented design is the most popular design methodology of the last twenty-five years. Several design patterns and principles are defined to improve the design quality of object-oriented software systems. In addition, designers can use unique design motifs which are particular for the specific application domain. Another common habit is cloning and modifying some parts of the software while creating new modules. Therefore, object-oriented programs can include many identical design structures. This work proposes a sub-graph mining based approach to detect identical design structures in object-oriented systems. By identifying and analyzing these structures, we can obtain useful information about the design, such as commonly-used design patterns, most frequent design defects, domain-specific patterns, and design clones, which may help developers to improve their knowledge about the software architecture. Furthermore, problematic parts of frequent identical design structures are the appropriate refactoring opportunities because they affect multiple areas of the architecture. Experiments with several open-source projects show that we can successfully find many identical design structures in each project. We observe that usually most of the identical structures are an implementation of common design patterns; however we also detect various anti-patterns, domain-specific patterns, and design-level clones. clones, graph mining, identical design structures, pattern extraction, software design models, software motifs",mining object oriented design models for detecting identical design structures the object oriented design is the most popular design methodology of the last twenty five years several design patterns and principles are defined to improve the design quality of object oriented software systems in addition designers can use unique design motifs which are particular for the specific application domain another common habit is cloning and modifying some parts of the software while creating new modules therefore object oriented programs can include many identical design structures this work proposes a sub graph mining based approach to detect identical design structures in object oriented systems by identifying and analyzing these structures we can obtain useful information about the design such as commonly used design patterns most frequent design defects domain specific patterns and design clones which may help developers to improve their knowledge about the software architecture furthermore problematic parts of frequent identical design structures are the appropriate refactoring opportunities because they affect multiple areas of the architecture experiments with several open source projects show that we can successfully find many identical design structures in each project we observe that usually most of the identical structures are an implementation of common design patterns however we also detect various anti patterns domain specific patterns and design level clones clones graph mining identical design structures pattern extraction software design models software motifs,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
147,0,"Performance-based Guidelines for Energy Efficient Mobile Applications Mobile and wearable devices are nowadays the de facto personal computers, while desktop computers are becoming less popular. Therefore, it is important for companies to deliver efficient mobile applications. As an example, Google has published a set of best practices to optimize the performance of Android applications. However, these guidelines fall short to address energy consumption. As mobile software applications operate in resource-constrained environments, guidelines to build energy efficient applications are of utmost importance. In this paper, we studied whether or not a set of best performance-based practices have an impact on the energy consumed by Android applications. In an experimental study with six popular mobile applications, we observed that the battery of the mobile device can last up to approximately an extra hour if the applications are developed with energy-aware practices. This work paves the way for a set of guidelines for energy-aware automatic refactoring techniques. anti patterns, green computing, mobile computing",performance based guidelines for energy efficient mobile applications mobile and wearable devices are nowadays the de facto personal computers while desktop computers are becoming less popular therefore it is important for companies to deliver efficient mobile applications as an example google has published a set of best practices to optimize the performance of android applications however these guidelines fall short to address energy consumption as mobile software applications operate in resource constrained environments guidelines to build energy efficient applications are of utmost importance in this paper we studied whether or not a set of best performance based practices have an impact on the energy consumed by android applications in an experimental study with six popular mobile applications we observed that the battery of the mobile device can last up to approximately an extra hour if the applications are developed with energy aware practices this work paves the way for a set of guidelines for energy aware automatic refactoring techniques anti patterns green computing mobile computing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
148,0,"Serological lessons from the bovine lungworm Dictyocaulus viviparus: Antibody titre development is independent of the infection dose and reinfection shortens seropositivity Infections with the bovine lungworm Dictyocaulus viviparus, the causative agent of parasitic bronchitis, are accompanied by substantial economic losses due to impacts on production, clinical respiratory disease or even death of diseased cattle. To detect lungworm antibodies in cattle, an enzyme-linked immunosorbent assay (ELISA) based on recombinant major sperm protein (MSP) has been developed. However, it remained unknown whether the infection dose influences antibody levels, and how acquired immunity influences antibody level patterns during reinfections. The latter may lead to low within-herd seroprevalence and thus to negative MSP-ELISA results in examination of bulk tank milk (BTM). Thus, infection experiments with 12 different doses ranging from 10 to 3000 D. viviparus larvae were performed to assess whether the antibody response is dose-dependent. Second, the impact of reinfections on the antibody response was evaluated in infection experiments, and third, antibody patterns in dairy cows during naturally occurring reinfections were assessed in a longitudinal field study based on individual milk samples. Results of this study demonstrate that the rise in MSP antibodies during first infection is dose-independent at infection doses of 25 lungworm larvae and above. However, following reinfections the magnitude and duration of the MSP antibody response are reduced or lacking, depending on the interval to reinfection. The field study revealed short periods of seropositivity as a common pattern in dairy cows subjected to natural D. viviparus reinfections. Low within-herd seroprevalence in dairy herds can thus be a result of continuous reinfections. Low infection doses should not be a barrier to serodiagnosis of lungworm infection in first-time infected cattle. , Bovine lungworm, Antibody titre, Antibody level, ELISA, Milk ELISA, BTM ELISA, Infection dose, Reinfection",serological lessons from the bovine lungworm dictyocaulus viviparus antibody titre development is independent of the infection dose and reinfection shortens seropositivity infections with the bovine lungworm dictyocaulus viviparus the causative agent of parasitic bronchitis are accompanied by substantial economic losses due to impacts on production clinical respiratory disease or even death of diseased cattle to detect lungworm antibodies in cattle an enzyme linked immunosorbent assay elisa based on recombinant major sperm protein msp has been developed however it remained unknown whether the infection dose influences antibody levels and how acquired immunity influences antibody level patterns during reinfections the latter may lead to low within herd seroprevalence and thus to negative msp elisa results in examination of bulk tank milk btm thus infection experiments with 12 different doses ranging from 10 to 3000 d viviparus larvae were performed to assess whether the antibody response is dose dependent second the impact of reinfections on the antibody response was evaluated in infection experiments and third antibody patterns in dairy cows during naturally occurring reinfections were assessed in a longitudinal field study based on individual milk samples results of this study demonstrate that the rise in msp antibodies during first infection is dose independent at infection doses of 25 lungworm larvae and above however following reinfections the magnitude and duration of the msp antibody response are reduced or lacking depending on the interval to reinfection the field study revealed short periods of seropositivity as a common pattern in dairy cows subjected to natural d viviparus reinfections low within herd seroprevalence in dairy herds can thus be a result of continuous reinfections low infection doses should not be a barrier to serodiagnosis of lungworm infection in first time infected cattle bovine lungworm antibody titre antibody level elisa milk elisa btm elisa infection dose reinfection,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
149,0,"Digital Flavor Interface This demo presents a unique technology to enable digital simulation of flavors. The Digital Flavor Interface, a digital control system, is developed to stimulate taste (using electrical and thermal stimulation methodologies on the human tongue) and smell (using a controlled scent emitting mechanism) senses simultaneously, thus simulating different virtual flavors. A preliminary user experiment was conducted to investigate the effectiveness of this approach with five distinct flavor stimuli. The experimental results suggested that the users' were effectively able to identify different flavors such as minty, spicy, and lemon flavor. In summary, our work demonstrates a novel controllable digital flavor instrument, which may be utilized in interactive computer systems for rendering virtual flavors. flavor, smell, taste, virtual flavor, virtual reality",digital flavor interface this demo presents a unique technology to enable digital simulation of flavors the digital flavor interface a digital control system is developed to stimulate taste using electrical and thermal stimulation methodologies on the human tongue and smell using a controlled scent emitting mechanism senses simultaneously thus simulating different virtual flavors a preliminary user experiment was conducted to investigate the effectiveness of this approach with five distinct flavor stimuli the experimental results suggested that the users were effectively able to identify different flavors such as minty spicy and lemon flavor in summary our work demonstrates a novel controllable digital flavor instrument which may be utilized in interactive computer systems for rendering virtual flavors flavor smell taste virtual flavor virtual reality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
150,0,"Virtual Reality Produced in the Brain External world is physical world, where objects, electromagnetic waves, air waves and temperatures exist. In contrast, we feel that objects have colors, sounds, hotness or coldness, smell and taste. These feelings are qualia, which must be virtual realities occurring in mind. The presence of food, enemies, friends and partners are recognized through virtual realities. Role of the sensory system seems to correlate these two worlds consistently. However, the mechanism to produce virtual reality has not been clarified. Purpose of the present study is to understand mind based on material. Here, we review outline of the sensory system in humans. We show that sensory receptors is a keyboard that make impulses as trigger signal when adequate stimuli is applied, and that sensory system works like a keyboard instrument, which induces virtual reality. Thereafter, we state strategy to clarify the material basis of virtual reality using unicellular organism. brain, neurophysiology, virtual reality, virtual reality, brain, mind, sensory system, sensory receptors, unicellular organism, Virtual reality, Informatics, Keyboards, Biomedical transducers, Biomembranes, Temperature distribution, Educational technology, Electromagnetic scattering, Temperature sensors, Humans, thermostat, transducer, therrmo TRP channel, virtual reality",virtual reality produced in the brain external world is physical world where objects electromagnetic waves air waves and temperatures exist in contrast we feel that objects have colors sounds hotness or coldness smell and taste these feelings are qualia which must be virtual realities occurring in mind the presence of food enemies friends and partners are recognized through virtual realities role of the sensory system seems to correlate these two worlds consistently however the mechanism to produce virtual reality has not been clarified purpose of the present study is to understand mind based on material here we review outline of the sensory system in humans we show that sensory receptors is a keyboard that make impulses as trigger signal when adequate stimuli is applied and that sensory system works like a keyboard instrument which induces virtual reality thereafter we state strategy to clarify the material basis of virtual reality using unicellular organism brain neurophysiology virtual reality virtual reality brain mind sensory system sensory receptors unicellular organism virtual reality informatics keyboards biomedical transducers biomembranes temperature distribution educational technology electromagnetic scattering temperature sensors humans thermostat transducer therrmo trp channel virtual reality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
151,0,"A Process for Assessing Data Quality Abstract: This industrial report stems from practical experience in assessing the quality of customer databases. The process it describes unites three automated audits, - an audit of the database schema, an audit of the database structure and an audit of the database content. The audit of the database schema checks for design smells and rule violations. The audit of the database structure measures the size, complexity and quality of the database model. The audit of the database content processes the data itself to uncover invalid data values, missing records and redundant records. The purpose of these audits is to assess the quality of the database and to determine whether a data reengineering or data clean-up project is required. data auditing, data content validation, data metrics, data quality",a process for assessing data quality abstract this industrial report stems from practical experience in assessing the quality of customer databases the process it describes unites three automated audits an audit of the database schema an audit of the database structure and an audit of the database content the audit of the database schema checks for design smells and rule violations the audit of the database structure measures the size complexity and quality of the database model the audit of the database content processes the data itself to uncover invalid data values missing records and redundant records the purpose of these audits is to assess the quality of the database and to determine whether a data reengineering or data clean up project is required data auditing data content validation data metrics data quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
152,0,"Physical contact while handling is not necessary to reduce fearfulness in the rabbit Rabbits handled around nursing time during the first week after birth show reduced fear response toward humans. Our earlier attempt to reduce the duration of daily treatment necessary to achieve this effect showed that even a minimal human contact, characteristic of animal caretaking in intensive rabbitries, results in reduced fearfulness. Being descendants of a nocturnal mammal species, olfactory cues are of central importance in rabbits, especially just after parturition, when the other sensory organs are undeveloped. In the present experiment, we investigated whether exposing newborn rabbit pups to human smell at nursing time is sufficient to reduce fear of humans in rabbits. For this, we exposed rabbit pups to one of the following handling treatments in the first week of life: (1) full handling, within 0.5h after nursing, which consisted of removing the pups from the nest and weighing them (about 5min/litter), (2) exposing rabbit pups to the smell of humans for about 5min/litter, without touching them, (3) untreated controls. At 28 days of age, the timidity of the pups was measured in a 5min approach test. Pups that were either handled or exposed to human smell appeared to be equally less fearful as they approached the experimenter's hand with a lower latency and more frequently than untreated controls. This indicates that olfactory exposure during handling results in imprinting even without a human contact in rabbits. Early stimulation, Sensitive period, Approach, Handling, Olfaction",physical contact while handling is not necessary to reduce fearfulness in the rabbit rabbits handled around nursing time during the first week after birth show reduced fear response toward humans our earlier attempt to reduce the duration of daily treatment necessary to achieve this effect showed that even a minimal human contact characteristic of animal caretaking in intensive rabbitries results in reduced fearfulness being descendants of a nocturnal mammal species olfactory cues are of central importance in rabbits especially just after parturition when the other sensory organs are undeveloped in the present experiment we investigated whether exposing newborn rabbit pups to human smell at nursing time is sufficient to reduce fear of humans in rabbits for this we exposed rabbit pups to one of the following handling treatments in the first week of life 1 full handling within 0 5h after nursing which consisted of removing the pups from the nest and weighing them about 5min litter 2 exposing rabbit pups to the smell of humans for about 5min litter without touching them 3 untreated controls at 28 days of age the timidity of the pups was measured in a 5min approach test pups that were either handled or exposed to human smell appeared to be equally less fearful as they approached the experimenter s hand with a lower latency and more frequently than untreated controls this indicates that olfactory exposure during handling results in imprinting even without a human contact in rabbits early stimulation sensitive period approach handling olfaction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
153,0,"A cardioprotective insight of the cystathionine γ-lyase/hydrogen sulfide pathway Traditionally, hydrogen sulfide (H2S) was simply considered as a toxic and foul smelling gas, but recently H2S been brought into the spot light of cardiovascular research and development. Since the 1990s, H2S has been mounting evidence of physiological properties such as immune modification, vascular relaxation, attenuation of oxidative stress, inflammatory mitigation, and angiogenesis. H2S has since been recognized as the third physiological gaseous signaling molecule, along with CO and NO [65,66]. H2S is produced endogenously through several key enzymes, including cystathionine β-lyase (CBE), cystathionine γ-lyase (CSE), and 3-mercaptopyruvate sulfurtransferase (MST)/cysteine aminotransferase (CAT). These specific enzymes are expressed accordingly in various organ systems and CSE is the predominant H2S-producing enzyme in the cardiovascular system. The cystathionine γ-lyase (CSE)/H2S pathway has demonstrated various cardioprotective effects, including anti-atherosclerosis, anti-hypertension, pro-angiogenesis, and attenuation of myocardial ischemia--reperfusion injury. CSE exhibits its anti-atherosclerotic effect through 3 mechanisms, namely reduction of chemotactic factor inter cellular adhesion molecule-1 (ICAM-1) and CX3CR1, inhibition of macrophage lipid uptake, and induction of smooth muscle cell apoptosis via MAPK pathway. The CSE/H2S pathway's anti-hypertensive properties are demonstrated via aortic vasodilation through several mechanisms, including the direct stimulation of KATP channels of vascular smooth muscle cells (VSMCs), induction of MAPK pathway, and reduction of homocysteine buildup. Also, CSE/H2S pathway plays an important role in angiogenesis, particularly in increased endothelial cell growth and migration, and in increased vascular network length. In myocardial ischemia--reperfusion injuries, CSE/H2S pathway has shown a clear cardioprotective effect by preserving mitochondria function, increasing antioxidant production, and decreasing infarction injury size. However, CSE/H2S pathway's role in inflammation mitigation is still clouded, due to both pro and anti-inflammatory results presented in the literature, depending on the concentration and form of H2S used in specific experiment models. Cystathionine γ-lyase, Hydrogen sulfide, Atherosclerosis, Vasorelaxation, Angiogenesis, Ischemia--reperfusion injury",a cardioprotective insight of the cystathionine lyase hydrogen sulfide pathway traditionally hydrogen sulfide h2s was simply considered as a toxic and foul smelling gas but recently h2s been brought into the spot light of cardiovascular research and development since the 1990s h2s has been mounting evidence of physiological properties such as immune modification vascular relaxation attenuation of oxidative stress inflammatory mitigation and angiogenesis h2s has since been recognized as the third physiological gaseous signaling molecule along with co and no 65 66 h2s is produced endogenously through several key enzymes including cystathionine lyase cbe cystathionine lyase cse and 3 mercaptopyruvate sulfurtransferase mst cysteine aminotransferase cat these specific enzymes are expressed accordingly in various organ systems and cse is the predominant h2s producing enzyme in the cardiovascular system the cystathionine lyase cse h2s pathway has demonstrated various cardioprotective effects including anti atherosclerosis anti hypertension pro angiogenesis and attenuation of myocardial ischemia reperfusion injury cse exhibits its anti atherosclerotic effect through 3 mechanisms namely reduction of chemotactic factor inter cellular adhesion molecule 1 icam 1 and cx3cr1 inhibition of macrophage lipid uptake and induction of smooth muscle cell apoptosis via mapk pathway the cse h2s pathway s anti hypertensive properties are demonstrated via aortic vasodilation through several mechanisms including the direct stimulation of katp channels of vascular smooth muscle cells vsmcs induction of mapk pathway and reduction of homocysteine buildup also cse h2s pathway plays an important role in angiogenesis particularly in increased endothelial cell growth and migration and in increased vascular network length in myocardial ischemia reperfusion injuries cse h2s pathway has shown a clear cardioprotective effect by preserving mitochondria function increasing antioxidant production and decreasing infarction injury size however cse h2s pathway s role in inflammation mitigation is still clouded due to both pro and anti inflammatory results presented in the literature depending on the concentration and form of h2s used in specific experiment models cystathionine lyase hydrogen sulfide atherosclerosis vasorelaxation angiogenesis ischemia reperfusion injury,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
154,0,"The role of chemical alarm signals in facilitating learned recognition of novel chemical cues in a coral reef fish Detection and recognition of chemical cues from predators may lower the risk of predation in prey fish. Responses to particular cues in fish may be inherited or learned. In a laboratory experiment, we tested whether the coral-reef-dwelling goby, Asterropteryx semipunctatus, can learn to recognize a novel chemical cue and associate it with danger. Gobies were simultaneously exposed to a neutral chemical cue (the smell of a planktivorous damselfish, Acanthochromis polyacanthus) and either conspecific skin extracts (which contains a chemical alarm cue) or skin extracts from the freshwater swordtail, Xiphophorus helleri. Swordtails, which are allopatric with A. semipunctatus, lack the goby alarm cue and were used to control for a general response to the damaged skin of any fish. Two days after the conditioning, the gobies were exposed to only the neutral chemical cue. Gobies that had been conditioned to the neutral cue paired with conspecific skin extracts on day 1 responded to the neutral cue alone on day 3 with a typical alarm response, including decreased movement and feeding. Gobies that had been conditioned to the neutral cue paired with swordtail skin extracts did not show an alarm response. These results suggest that A. semipunctatus can learn to recognize a novel chemical cue and associate it with danger after a single simultaneous exposure to a novel cue and a conspecific alarm signal. This mechanism of rapid learning of novel chemical cues may be an important way in which coral reef fish learn to recognize predators. []",the role of chemical alarm signals in facilitating learned recognition of novel chemical cues in a coral reef fish detection and recognition of chemical cues from predators may lower the risk of predation in prey fish responses to particular cues in fish may be inherited or learned in a laboratory experiment we tested whether the coral reef dwelling goby asterropteryx semipunctatus can learn to recognize a novel chemical cue and associate it with danger gobies were simultaneously exposed to a neutral chemical cue the smell of a planktivorous damselfish acanthochromis polyacanthus and either conspecific skin extracts which contains a chemical alarm cue or skin extracts from the freshwater swordtail xiphophorus helleri swordtails which are allopatric with a semipunctatus lack the goby alarm cue and were used to control for a general response to the damaged skin of any fish two days after the conditioning the gobies were exposed to only the neutral chemical cue gobies that had been conditioned to the neutral cue paired with conspecific skin extracts on day 1 responded to the neutral cue alone on day 3 with a typical alarm response including decreased movement and feeding gobies that had been conditioned to the neutral cue paired with swordtail skin extracts did not show an alarm response these results suggest that a semipunctatus can learn to recognize a novel chemical cue and associate it with danger after a single simultaneous exposure to a novel cue and a conspecific alarm signal this mechanism of rapid learning of novel chemical cues may be an important way in which coral reef fish learn to recognize predators,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
155,0,"Validation of an analytical method for the solid phase extraction, in cartridge derivatization and subsequent gas chromatographic--ion trap tandem mass spectrometric determination of 1-octen-3-one in wines at ngL−1 level An analytical method for the quantification in wines of the strong-smelling compound, 1-octen-3-one, has been developed. 1-Octen-3-one is extracted by passing 90mL of wine through a solid phase extraction (SPE) cartridge packed with 90mg of LiChrolut-EN resins. Wine major volatiles and potential interferences are removed by washing up with 9mL of a 40% methanol--water solution containing 1% NaHCO3. The ketone is subsequently derivatised with O-(2,3,4,5,6-pentafluorobenzyl) hydroxylamine (PFBHA) to form its two isomeric oximes. Reaction takes place in the same cartridge at room temperature (25$ ^\circ$C) in 15min. The excess of reagent is then removed by washing with 20mL of a 0.05M sulphuric acid solution. The corresponding oximes are further eluted with pentane and determined by gas chromatography coupled with ion trap tandem mass spectrometry (GC--MS/MS) by non-resonant fragmentation of the m/z 140 parent ion and subsequent analysis of the corresponding daughter ions (m/z 77, 79, 94 for the trans and m/z 77 and 79 for the cis-isomer, respectively). The analytical signal is highly specific and in all samples the obtained MS spectrum are fully coincident with those from synthetic standards. Recoveries were in all the studied cases 100%. Precision (measured as R.S.D.) is better than 5%, linearity holds at least up to 900ngL−1 (r2=0.9990), and the method detection limit is 0.75ngL−1, well below the olfactory threshold of the compound (15ngL−1). The range of concentrations found in normal, non-spoiled dry wines goes from 7 to 61ngL−1. Sensory experiments have shown, however, that such differences do not seem to be enough to explain sensory differences. Aroma, 1-Octen-3-one, Wine, Solid phase extraction, Gas chromatography--mass spectrometry--mass spectrometry, Derivatization",validation of an analytical method for the solid phase extraction in cartridge derivatization and subsequent gas chromatographic ion trap tandem mass spectrometric determination of 1 octen 3 one in wines at ngl 1 level an analytical method for the quantification in wines of the strong smelling compound 1 octen 3 one has been developed 1 octen 3 one is extracted by passing 90ml of wine through a solid phase extraction spe cartridge packed with 90mg of lichrolut en resins wine major volatiles and potential interferences are removed by washing up with 9ml of a 40 methanol water solution containing 1 nahco3 the ketone is subsequently derivatised with o 2 3 4 5 6 pentafluorobenzyl hydroxylamine pfbha to form its two isomeric oximes reaction takes place in the same cartridge at room temperature 25 circ c in 15min the excess of reagent is then removed by washing with 20ml of a 0 05m sulphuric acid solution the corresponding oximes are further eluted with pentane and determined by gas chromatography coupled with ion trap tandem mass spectrometry gc ms ms by non resonant fragmentation of the m z 140 parent ion and subsequent analysis of the corresponding daughter ions m z 77 79 94 for the trans and m z 77 and 79 for the cis isomer respectively the analytical signal is highly specific and in all samples the obtained ms spectrum are fully coincident with those from synthetic standards recoveries were in all the studied cases 100 precision measured as r s d is better than 5 linearity holds at least up to 900ngl 1 r2 0 9990 and the method detection limit is 0 75ngl 1 well below the olfactory threshold of the compound 15ngl 1 the range of concentrations found in normal non spoiled dry wines goes from 7 to 61ngl 1 sensory experiments have shown however that such differences do not seem to be enough to explain sensory differences aroma 1 octen 3 one wine solid phase extraction gas chromatography mass spectrometry mass spectrometry derivatization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
156,0,"RFID Security in the Context of ""Internet of Things"" Internet has emerged as a medium to connect entities across the world for emailing, conferencing, trading, gaming and so on. Internet of Things (IoT) is emerging as a global network for connecting any objects (physical or virtual) across the globe, ranging applications from home appliances to consumer electronics. In IoT, physical objects such as home appliances, vehicles, supply-chain items, containers, etc. should have unique identities for interacting among themselves. As a result, unique identification of trillion of objects is a foremost requirement in IoT. RFID (Radio Frequency IDentification) technology plays an important role in IoT for solving identification issues of objects around us in a cost effective manner. The usage of low cost RFID tags draws greater attention from researchers in recent past, as the cost of supply-chain items should not exceed much because of embedded tag cost. The communication between tag and reader takes place over insecure channel. Therefore, security concern has become an important issue in RFID systems. In recent years, several light-weight protocols and improvements have been proposed for RFID security. Some of them have succeeded with their security claim, but many protocols suffer from security weaknesses or design flaws. In this paper, we discuss a recently proposed protocol's strengths and weaknesses and then proposed an improved protocol, retaining efficiency of the protocol intact. RFID security, RFID systems, authentication, internet of things, privacy, security",rfid security in the context of internet of things internet has emerged as a medium to connect entities across the world for emailing conferencing trading gaming and so on internet of things iot is emerging as a global network for connecting any objects physical or virtual across the globe ranging applications from home appliances to consumer electronics in iot physical objects such as home appliances vehicles supply chain items containers etc should have unique identities for interacting among themselves as a result unique identification of trillion of objects is a foremost requirement in iot rfid radio frequency identification technology plays an important role in iot for solving identification issues of objects around us in a cost effective manner the usage of low cost rfid tags draws greater attention from researchers in recent past as the cost of supply chain items should not exceed much because of embedded tag cost the communication between tag and reader takes place over insecure channel therefore security concern has become an important issue in rfid systems in recent years several light weight protocols and improvements have been proposed for rfid security some of them have succeeded with their security claim but many protocols suffer from security weaknesses or design flaws in this paper we discuss a recently proposed protocol s strengths and weaknesses and then proposed an improved protocol retaining efficiency of the protocol intact rfid security rfid systems authentication internet of things privacy security,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
157,0,"Empirical Analysis of Fault-Proneness in Methods by Focusing on their Comment Lines This paper focuses on comments described in Java programs, and conducts an empirical analysis about relationships between comments and fault-proneness in the programs. The types of comments analyzed in this paper are comments described inside a method body (inner comments), and comments followed by a method declaration (documentation comments). Although both of them play important roles in the program comprehension, they seem to be described in different purposes, The inner comments are often added to present tips about code fragments, while the documentation comments usually work as a programmer's manual. In the field of code refactoring, well-written inner comments are said to be related to ""code smell"" since they may cover a lack of readability in a complicated code fragment. This paper analyzes the associations of comments with the code quality from the aspect of fault-proneness, with using four popular open source products. The empirical results show that a method having inner comments tends to be 1.8 - 3.0 times likely to be faulty. The key contribution of this work is to reveal the usefulness of inner comments to point at faulty methods. Java, software engineering, fault-proneness, comment lines, Java programs, empirical analysis, program comprehension, popular open source products, inner comments, documentation comments, software development, Documentation, Java, Measurement, Logistics, Electronic mail, History, Regression analysis, metrics, comments, fault-proneness",empirical analysis of fault proneness in methods by focusing on their comment lines this paper focuses on comments described in java programs and conducts an empirical analysis about relationships between comments and fault proneness in the programs the types of comments analyzed in this paper are comments described inside a method body inner comments and comments followed by a method declaration documentation comments although both of them play important roles in the program comprehension they seem to be described in different purposes the inner comments are often added to present tips about code fragments while the documentation comments usually work as a programmer s manual in the field of code refactoring well written inner comments are said to be related to code smell since they may cover a lack of readability in a complicated code fragment this paper analyzes the associations of comments with the code quality from the aspect of fault proneness with using four popular open source products the empirical results show that a method having inner comments tends to be 1 8 3 0 times likely to be faulty the key contribution of this work is to reveal the usefulness of inner comments to point at faulty methods java software engineering fault proneness comment lines java programs empirical analysis program comprehension popular open source products inner comments documentation comments software development documentation java measurement logistics electronic mail history regression analysis metrics comments fault proneness,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
158,0,"Perquimans: A Tool for Visualizing Patterns of Spreadsheet Function Combinations Spreadsheet environments offer many functions to manipulate data, which users can combine into complex formulae. However, for both researchers and practitioners who want to study formulae to improve spreadsheet practices, anticipating these combinations is difficult. Therefore, we developed Perquimans, a tool that analyzes spreadsheet collections to visualize patterns of function combination as an interactive tree, representing both the most common and most anomalous patterns of formula construction and their contexts. Using spreadsheets from the Enron corpus, we conduct a case study and a user study to explore Perquimans' various applications, such as those in flexible smell detection and spreadsheet education. data visualisation, spreadsheet programs, Perquimans, pattern visualization, spreadsheet function combinations, spreadsheet environments, spreadsheet practices, spreadsheet collections, interactive tree, Enron corpus, flexible smell detection, spreadsheet education, Data visualization, Context, Documentation, Image color analysis, Education, Complexity theory, Measurement",perquimans a tool for visualizing patterns of spreadsheet function combinations spreadsheet environments offer many functions to manipulate data which users can combine into complex formulae however for both researchers and practitioners who want to study formulae to improve spreadsheet practices anticipating these combinations is difficult therefore we developed perquimans a tool that analyzes spreadsheet collections to visualize patterns of function combination as an interactive tree representing both the most common and most anomalous patterns of formula construction and their contexts using spreadsheets from the enron corpus we conduct a case study and a user study to explore perquimans various applications such as those in flexible smell detection and spreadsheet education data visualisation spreadsheet programs perquimans pattern visualization spreadsheet function combinations spreadsheet environments spreadsheet practices spreadsheet collections interactive tree enron corpus flexible smell detection spreadsheet education data visualization context documentation image color analysis education complexity theory measurement,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
159,0,"Towards the Characterization of Monitor Smells in Adaptive Systems Adaptive Systems (ASs) can adapt themselves to achanging environment or new user needs. Monitors are essential in AS, being responsible for collecting and processing data from environment. There exist different kinds of monitors with distinct characteristics. Based on a literature review, we have noticed that Monitors are usually designed and implemented in an inadequate way: i) making them obscure in the source-code, ii) compelling all of them to have the same polling rate and also iii) predetermining the execution order among them. This leads to maintenance, evolution and performance problems. Besides, based on our observations, this erroneous way monitors are implemented follows a pattern and it is a recurrent practice. Therefore, we believe it can be classified as Monitor Smells of Adaptive Systems. In this paper we present two architectural smells we have identified: the Obscure Monitor and the Oppressed Monitors. The first smell occurs when the monitors are not evident in the source-code. The second smell occurs when monitors are compelled to have the same poling rate and an immutable execution order at runtime. The presence of these smells compromises the reusability, evolvability and maintainability. We have also conducted an exploratory study by comparing the impact of maintenance tasks in the original version of an AS called PhoneAdapter with a refactored version, in which the smells were removed. The results indicate the maintenance is facilitated in the version without the smells. software maintenance, software reusability, source code (software), data processing, data collection, source-code, polling rate, monitor smells of adaptive system characterization, architectural smells, obscure monitor, oppressed monitors, software reusability, software evolvability, software maintenance, PhoneAdapter, Monitoring, Sensors, Global Positioning System, Bluetooth, Adaptive systems, Maintenance engineering, Broadcasting, Adaptive System, Architectural Smells, Monitoring",towards the characterization of monitor smells in adaptive systems adaptive systems ass can adapt themselves to achanging environment or new user needs monitors are essential in as being responsible for collecting and processing data from environment there exist different kinds of monitors with distinct characteristics based on a literature review we have noticed that monitors are usually designed and implemented in an inadequate way i making them obscure in the source code ii compelling all of them to have the same polling rate and also iii predetermining the execution order among them this leads to maintenance evolution and performance problems besides based on our observations this erroneous way monitors are implemented follows a pattern and it is a recurrent practice therefore we believe it can be classified as monitor smells of adaptive systems in this paper we present two architectural smells we have identified the obscure monitor and the oppressed monitors the first smell occurs when the monitors are not evident in the source code the second smell occurs when monitors are compelled to have the same poling rate and an immutable execution order at runtime the presence of these smells compromises the reusability evolvability and maintainability we have also conducted an exploratory study by comparing the impact of maintenance tasks in the original version of an as called phoneadapter with a refactored version in which the smells were removed the results indicate the maintenance is facilitated in the version without the smells software maintenance software reusability source code software data processing data collection source code polling rate monitor smells of adaptive system characterization architectural smells obscure monitor oppressed monitors software reusability software evolvability software maintenance phoneadapter monitoring sensors global positioning system bluetooth adaptive systems maintenance engineering broadcasting adaptive system architectural smells monitoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
160,0,"Audio Masking Effect on Inter-Component Skews in Olfaction-Enhanced Multimedia Presentations Media-rich content plays a vital role in consumer applications today, as these applications try to find new and interesting ways to engage their users. Video, audio, and the more traditional forms of media content continue to dominate with respect to the use of media content to enhance the user experience. Tactile interactivity has also now become widely popular in modern computing applications, while our olfactory and gustatory senses continue to have a limited role. However, in recent times, there have been significant advancements regarding the use of olfactory media content (i.e., smell), and there are a variety of devices now available to enable its computer-controlled emission. This paper explores the impact of the audio stream on user perception of olfactory-enhanced video content in the presence of skews between the olfactory and video media. This research uses the results from two experimental studies of user-perceived quality of olfactory-enhanced multimedia, where audio was present and absent, respectively. Specifically, the paper shows that the user Quality of Experience (QoE) is generally higher in the absence of audio for nearly perfect synchronized olfactory-enhanced multimedia presentations (i.e., an olfactory media skew of between −10,+10s); however, for greater olfactory media skews (ranging between −30s;−10s and +10s, +30s) user QoE is higher when the audio stream is present. It can be concluded that the presence of the audio has the ability to mask larger synchronization skews between the other media components in olfaction-enhanced multimedia presentations. Audio, masking effect, olfaction, quality of experience, synchronization",audio masking effect on inter component skews in olfaction enhanced multimedia presentations media rich content plays a vital role in consumer applications today as these applications try to find new and interesting ways to engage their users video audio and the more traditional forms of media content continue to dominate with respect to the use of media content to enhance the user experience tactile interactivity has also now become widely popular in modern computing applications while our olfactory and gustatory senses continue to have a limited role however in recent times there have been significant advancements regarding the use of olfactory media content i e smell and there are a variety of devices now available to enable its computer controlled emission this paper explores the impact of the audio stream on user perception of olfactory enhanced video content in the presence of skews between the olfactory and video media this research uses the results from two experimental studies of user perceived quality of olfactory enhanced multimedia where audio was present and absent respectively specifically the paper shows that the user quality of experience qoe is generally higher in the absence of audio for nearly perfect synchronized olfactory enhanced multimedia presentations i e an olfactory media skew of between 10 10s however for greater olfactory media skews ranging between 30s 10s and 10s 30s user qoe is higher when the audio stream is present it can be concluded that the presence of the audio has the ability to mask larger synchronization skews between the other media components in olfaction enhanced multimedia presentations audio masking effect olfaction quality of experience synchronization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
161,0,"Software project management anti-patterns This paper explores the area of bad practices, namely anti-patterns, and their consequences in software project management (SPM). The paper surveys the multitude of anti-patterns that have been reported and documented up to now and stresses the need for tools to formally represent SPM anti-patterns, proposing specific formalisms for such purpose, namely Bayesian Belief Networks, Ontologies and Social Networks. It is also explained how the Web can provide an opportunity for capturing, storing, disseminating and ultimately avoiding SPM anti-patterns. As a consequence, anti-patterns may provide an excellent tool for educating active and future software managers. Finally, conclusions and future research trends are given. Anti-pattern, Software project management, Bayesian belief network, Knowledge management, Social network",software project management anti patterns this paper explores the area of bad practices namely anti patterns and their consequences in software project management spm the paper surveys the multitude of anti patterns that have been reported and documented up to now and stresses the need for tools to formally represent spm anti patterns proposing specific formalisms for such purpose namely bayesian belief networks ontologies and social networks it is also explained how the web can provide an opportunity for capturing storing disseminating and ultimately avoiding spm anti patterns as a consequence anti patterns may provide an excellent tool for educating active and future software managers finally conclusions and future research trends are given anti pattern software project management bayesian belief network knowledge management social network,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
162,0,"The demand for tap water quality: Survey evidence on water hardness and aesthetic quality We design a survey to provide quantitative evidence about household demand for qualitative aspects of tap water supply. We focus on two characteristics that are of importance for households: water hardness and aesthetic quality in terms of taste, smell and appearance. Our survey elicits expenditures on products that improve the overall experience of these characteristics of tap water quality, and administration targets a representative sample of the population in England and Wales. For water hardness, our results show that around 14% of households employ at least one water softener device or purchase products such as softening tablets or descaling agents. For the aesthetic quality of tap water, around 39% of households report some averting behaviour, the most common being the use of filtering devices, purchase of bottled water, or addition of squash or cordial. To study how expenditures on these products vary with the level of service quality, we match household data to highly disaggregated records on regional water hardness (in mg CaCO3/l) and aesthetic quality, as measured by the regional rate of complaints to the water service supplier. Our econometric analysis suggests that households' decision to incur averting expenditures varies with service quality in a statistically and economically significant manner, providing novel evidence that households actively respond to non-health related aspects of tap water quality. Water demand, Tap water quality, Water hardness, Revealed preferences, Averting behaviour, Cost--benefit analysis, Economic surveys",the demand for tap water quality survey evidence on water hardness and aesthetic quality we design a survey to provide quantitative evidence about household demand for qualitative aspects of tap water supply we focus on two characteristics that are of importance for households water hardness and aesthetic quality in terms of taste smell and appearance our survey elicits expenditures on products that improve the overall experience of these characteristics of tap water quality and administration targets a representative sample of the population in england and wales for water hardness our results show that around 14 of households employ at least one water softener device or purchase products such as softening tablets or descaling agents for the aesthetic quality of tap water around 39 of households report some averting behaviour the most common being the use of filtering devices purchase of bottled water or addition of squash or cordial to study how expenditures on these products vary with the level of service quality we match household data to highly disaggregated records on regional water hardness in mg caco3 l and aesthetic quality as measured by the regional rate of complaints to the water service supplier our econometric analysis suggests that households decision to incur averting expenditures varies with service quality in a statistically and economically significant manner providing novel evidence that households actively respond to non health related aspects of tap water quality water demand tap water quality water hardness revealed preferences averting behaviour cost benefit analysis economic surveys,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
163,0,"How Kids Code and How We Know: An Exploratory Study on the Scratch Repository Block-based programming languages like Scratch, Alice and Blockly are becoming increasingly common as introductory languages in programming education. There is substantial research showing that these visual programming environments are suitable for teaching programming concepts. But, what do people do when they use Scratch? In this paper we explore the characteristics of Scratch programs. To this end we have scraped the Scratch public repository and retrieved 250,000 projects. We present an analysis of these projects in three different dimensions. Initially, we look at the types of blocks used and the size of the projects. We then investigate complexity, used abstractions and programming concepts. Finally we detect code smells such as large scripts, dead code and duplicated code blocks. Our results show that 1) most Scratch programs are small, however Scratch programs consisting of over 100 sprites exist, 2) programming abstraction concepts like procedures are not commonly used and 3) Scratch programs do suffer from code smells including large scripts and unmatched broadcast signals. block-based languages, code smells, programming practices, scratch, static analysis",how kids code and how we know an exploratory study on the scratch repository block based programming languages like scratch alice and blockly are becoming increasingly common as introductory languages in programming education there is substantial research showing that these visual programming environments are suitable for teaching programming concepts but what do people do when they use scratch in this paper we explore the characteristics of scratch programs to this end we have scraped the scratch public repository and retrieved 250 000 projects we present an analysis of these projects in three different dimensions initially we look at the types of blocks used and the size of the projects we then investigate complexity used abstractions and programming concepts finally we detect code smells such as large scripts dead code and duplicated code blocks our results show that 1 most scratch programs are small however scratch programs consisting of over 100 sprites exist 2 programming abstraction concepts like procedures are not commonly used and 3 scratch programs do suffer from code smells including large scripts and unmatched broadcast signals block based languages code smells programming practices scratch static analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
164,0,"The Credit Violating Behaviour in China's E-commerce Field This paper adopts the method of combining both the empirical and normative research to study credit violating behaviour in china's e-Commerce field, so as to propose the countermeasure and suggestion for the sustainable development of china's e-Commerce. By the establishment of credit relationship model which was analyzed with the game theory principle, it suggests that institutional design flaw, credit information supply and requirement shortage are the key reasons that cause the e-Commerce fieldpsilas credit violating behaviour; at the same time, it also brings forward some recommendations that can permanently control the credit violating behaviour in china's e-Commerce field. The result indicates that the credit matterpsilas solution in china's e-Commerce field is an unceasing evolutionary process of institutional arrangement and design, which must be conducted in the level of macro, intermediate and micro perpectives, the importance is the conceptive innovation, institutional innovation, administrative innovation and methodological innovation. electronic commerce, game theory, credit violating behaviour, China e-commerce field, game theory principle, institutional design flaw, credit information supply, requirement shortage, macro perpectives, intermediate perpectives, micro perpectives, conceptive innovation, institutional innovation, administrative innovation, methodological innovation, Technological innovation, Electronic commerce, Ethics, Game theory, Information security, Business, Environmental economics, Conference management, Research and development management, Electronic government, E-Commerce, Credit violating behaviour, Credit relationship, game theory",the credit violating behaviour in china s e commerce field this paper adopts the method of combining both the empirical and normative research to study credit violating behaviour in china s e commerce field so as to propose the countermeasure and suggestion for the sustainable development of china s e commerce by the establishment of credit relationship model which was analyzed with the game theory principle it suggests that institutional design flaw credit information supply and requirement shortage are the key reasons that cause the e commerce fieldpsilas credit violating behaviour at the same time it also brings forward some recommendations that can permanently control the credit violating behaviour in china s e commerce field the result indicates that the credit matterpsilas solution in china s e commerce field is an unceasing evolutionary process of institutional arrangement and design which must be conducted in the level of macro intermediate and micro perpectives the importance is the conceptive innovation institutional innovation administrative innovation and methodological innovation electronic commerce game theory credit violating behaviour china e commerce field game theory principle institutional design flaw credit information supply requirement shortage macro perpectives intermediate perpectives micro perpectives conceptive innovation institutional innovation administrative innovation methodological innovation technological innovation electronic commerce ethics game theory information security business environmental economics conference management research and development management electronic government e commerce credit violating behaviour credit relationship game theory,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
165,0,"Algorithmic verification of logic controllers given as sequential function charts The a-posteriori analysis of logic controllers can be a suitable means to detect design flaws if the controller was not developed by a synthesis algorithm that correctly considered all relevant requirements. This paper advocates the verification of logic controllers with a special focus on the following three issues: (a) the control code is given as a sequential function chart (SFC), a description language becoming increasingly popular for industrial controllers; (b) the cyclic operation mode of the hardware on which the controllers is implemented is taken into account; (c) specifications of the control logic that include timers and the real-time behavior of the controlled plant are considered. We propose an approach in which the SFC controller is first translated into a timed automaton using an algorithm that explores a special graph grammar. The automaton can then be composed with a timed automaton modeling the plant behavior, and model-checking of the composition reveals whether a given set of requirements is fulfilled. All steps of the procedure are illustrated for the example of a controlled evaporation system control engineering computing, control system synthesis, flaw detection, formal logic, formal verification, graph grammars, logic controller verification, algorithmic verification, sequential function chart controller, a-posteriori analysis, design flaw detection, synthesis algorithm, description language, industrial controllers, cyclic operation hardware mode, timers, real time behavior, time automaton modeling, graph grammar, evaporation system control, Automatic control, Algorithm design and analysis, Logic design, Industrial control, Automata, Control systems, Manufacturing automation, Nonlinear dynamical systems, Process control, Hardware",algorithmic verification of logic controllers given as sequential function charts the a posteriori analysis of logic controllers can be a suitable means to detect design flaws if the controller was not developed by a synthesis algorithm that correctly considered all relevant requirements this paper advocates the verification of logic controllers with a special focus on the following three issues a the control code is given as a sequential function chart sfc a description language becoming increasingly popular for industrial controllers b the cyclic operation mode of the hardware on which the controllers is implemented is taken into account c specifications of the control logic that include timers and the real time behavior of the controlled plant are considered we propose an approach in which the sfc controller is first translated into a timed automaton using an algorithm that explores a special graph grammar the automaton can then be composed with a timed automaton modeling the plant behavior and model checking of the composition reveals whether a given set of requirements is fulfilled all steps of the procedure are illustrated for the example of a controlled evaporation system control engineering computing control system synthesis flaw detection formal logic formal verification graph grammars logic controller verification algorithmic verification sequential function chart controller a posteriori analysis design flaw detection synthesis algorithm description language industrial controllers cyclic operation hardware mode timers real time behavior time automaton modeling graph grammar evaporation system control automatic control algorithm design and analysis logic design industrial control automata control systems manufacturing automation nonlinear dynamical systems process control hardware,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
166,0,"How Do Software Developers Identify Design Problems?: A Qualitative Analysis When a software design decision has a negative impact on one or more quality attributes, we call it a design problem. For example, the Fat Interface problem indicates that an interface exposes non-cohesive services Thus, clients and implementations of this interface may have to handle with services that they are not interested. A design problem such as this hampers the extensibility and maintainability of a software system. As illustrated by the example, a single design problem often affects several elements in the program. Despite its harmfulness, it is difficult to identify a design problem in a system. It is even more challenging to identify design problems when the source code is the only available artifact. In particular, no study has observed what strategy(ies) developers use in practice to identify design problems when the design documentation is unavailable. In order to address this gap, we conducted a qualitative analysis on how developers identify design problems in two different scenarios: when they are either familiar (Scenario 1) or unfamiliar (Scenario 2) with the analyzed systems. Developers familiar with the systems applied a diverse set of strategies during the identification of each design problem. Some strategies were frequently used to locate code elements for analysis, and other strategies were frequently used to confirm design problems in these elements. Developers unfamiliar with the systems relied only on the use of code smells along the task. Despite some differences among the subjects from both scenarios, we noticed that developers often search for multiple indicators during the identification of each design problem. design problem, software design, strategy, symptoms",how do software developers identify design problems a qualitative analysis when a software design decision has a negative impact on one or more quality attributes we call it a design problem for example the fat interface problem indicates that an interface exposes non cohesive services thus clients and implementations of this interface may have to handle with services that they are not interested a design problem such as this hampers the extensibility and maintainability of a software system as illustrated by the example a single design problem often affects several elements in the program despite its harmfulness it is difficult to identify a design problem in a system it is even more challenging to identify design problems when the source code is the only available artifact in particular no study has observed what strategy ies developers use in practice to identify design problems when the design documentation is unavailable in order to address this gap we conducted a qualitative analysis on how developers identify design problems in two different scenarios when they are either familiar scenario 1 or unfamiliar scenario 2 with the analyzed systems developers familiar with the systems applied a diverse set of strategies during the identification of each design problem some strategies were frequently used to locate code elements for analysis and other strategies were frequently used to confirm design problems in these elements developers unfamiliar with the systems relied only on the use of code smells along the task despite some differences among the subjects from both scenarios we noticed that developers often search for multiple indicators during the identification of each design problem design problem software design strategy symptoms,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
167,0,"Optimized Unit Testing for Antipattern Detection Antipatterns are poor design choices that are conjectured to make object oriented systems harder to maintain. We investigate the impact of antipatterns on classes in object-oriented systems by studying the relation between the presence of antipatterns and the change- and fault-proneness of the classes. Due to increased complexities in the software development, there is huge need of testing process to be carried on in better way. Also as the computer systems are significant to our society in everyday life and are performing an increasing number of critical tasks, so more work in software testing and analysis has become of great importance. Anti pattern testing is type of testing which is used to cut off the directly price associated with testing of different modules. This paper discusses various anti pattern detection techniques and proposes a new testing technique based on GUI for detection of anti patterns during software development. Antipattern, Fault Loop, Loose Connectors, Maintenance Development, Software Development Techniques",optimized unit testing for antipattern detection antipatterns are poor design choices that are conjectured to make object oriented systems harder to maintain we investigate the impact of antipatterns on classes in object oriented systems by studying the relation between the presence of antipatterns and the change and fault proneness of the classes due to increased complexities in the software development there is huge need of testing process to be carried on in better way also as the computer systems are significant to our society in everyday life and are performing an increasing number of critical tasks so more work in software testing and analysis has become of great importance anti pattern testing is type of testing which is used to cut off the directly price associated with testing of different modules this paper discusses various anti pattern detection techniques and proposes a new testing technique based on gui for detection of anti patterns during software development antipattern fault loop loose connectors maintenance development software development techniques,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
168,0,"Effects of castration and fattening period on growth performance and carcass characteristics in Iranian goats A completely randomized design was used to study the effect of castration at three months of age and fattening periods (2, 3, 4, 5 or 6 months of fattening) on the feedlot performance and carcass characteristics of Fars native male goat kids. Six kids were slaughtered on the first day of the experiment (day 0), and 60 kids were divided into two groups (castrate or intact) of similar mean live weight, and housed in individual pens and fed a pelleted total mixed diet ad libitum. At the end of each fattening period, 6 kids per treatment were randomly selected for slaughter and evaluation of carcass quality. The mean live body weight for each fattening period between the castrate and intact groups was significantly different (P<0.01). However, the average daily gain (ADG), daily feed intake and feed conversion ratio (FCR) for each period between the two treatment groups did not differ. The mean live body weight, daily weight gains, daily feed intake and feed conversion ratio were however significantly affected by the fattening period. Dressing percentages after 2, 3 and 4 months of fattening were not significantly different between the castrate and intact groups, but significantly different after 5 and 6 months of fattening. The mean carcass lean and fat percentages during certain periods between the castrated and intact groups were significantly different, but the percentage bone in each period between the two groups was not significantly different. Overall, the mean carcass lean and fat percentages were significantly different between the intact (68.8% and 8.5%, respectively) and castrated (65.4% and 12.5%, respectively) animals. The mean carcass bone percentage was not significantly different between the intact (21.5%) and castrated (20.9%) animals. With castration, the internal fat and carcass fat content increased and carcass lean content decreased. As judged by a taste panel, meat from the castrated kids recorded a milder smell than meat from the intact males (P<0.05). Although the stress of castration had a negative effect on live body weight at the onset of the experiment, a fattening period of 3 months is recommended with castration, given the development of meat odour in goats slaughtered after longer fattening periods. Goat kid, Castration, Fattening period, Growth performance, Carcass characteristics",effects of castration and fattening period on growth performance and carcass characteristics in iranian goats a completely randomized design was used to study the effect of castration at three months of age and fattening periods 2 3 4 5 or 6 months of fattening on the feedlot performance and carcass characteristics of fars native male goat kids six kids were slaughtered on the first day of the experiment day 0 and 60 kids were divided into two groups castrate or intact of similar mean live weight and housed in individual pens and fed a pelleted total mixed diet ad libitum at the end of each fattening period 6 kids per treatment were randomly selected for slaughter and evaluation of carcass quality the mean live body weight for each fattening period between the castrate and intact groups was significantly different p 0 01 however the average daily gain adg daily feed intake and feed conversion ratio fcr for each period between the two treatment groups did not differ the mean live body weight daily weight gains daily feed intake and feed conversion ratio were however significantly affected by the fattening period dressing percentages after 2 3 and 4 months of fattening were not significantly different between the castrate and intact groups but significantly different after 5 and 6 months of fattening the mean carcass lean and fat percentages during certain periods between the castrated and intact groups were significantly different but the percentage bone in each period between the two groups was not significantly different overall the mean carcass lean and fat percentages were significantly different between the intact 68 8 and 8 5 respectively and castrated 65 4 and 12 5 respectively animals the mean carcass bone percentage was not significantly different between the intact 21 5 and castrated 20 9 animals with castration the internal fat and carcass fat content increased and carcass lean content decreased as judged by a taste panel meat from the castrated kids recorded a milder smell than meat from the intact males p 0 05 although the stress of castration had a negative effect on live body weight at the onset of the experiment a fattening period of 3 months is recommended with castration given the development of meat odour in goats slaughtered after longer fattening periods goat kid castration fattening period growth performance carcass characteristics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
169,0,"Sensory functioning in older adults: relevance for food preference The world's population is aging and older adults represent the fastest growing segment of the consumer market. Changes in sensory, perceptual and cognitive function in this segment of the population have been described psychophysically, however, more is known about the young-old than the old-old or oldest-old. Only now are we exploring the potential for neuroimaging tools to probe the changes in central nervous system function related to taste and smell that are relevant to sensory perception, reward value, anticipation of and consumption of food stimuli. There is real potential for brain imaging to provide a greater understanding of older adults' consumer behavior. []",sensory functioning in older adults relevance for food preference the world s population is aging and older adults represent the fastest growing segment of the consumer market changes in sensory perceptual and cognitive function in this segment of the population have been described psychophysically however more is known about the young old than the old old or oldest old only now are we exploring the potential for neuroimaging tools to probe the changes in central nervous system function related to taste and smell that are relevant to sensory perception reward value anticipation of and consumption of food stimuli there is real potential for brain imaging to provide a greater understanding of older adults consumer behavior,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
170,0,"An empirical analysis of the distribution of unit test smells and their impact on software maintenance Unit testing represents a key activity in software development and maintenance. Test suites with high internal quality facilitate maintenance activities, such as code comprehension and regression testing. Several guidelines have been proposed to help developers write good test suites. Unfortunately, such rules are not always followed resulting in the presence of bad test code smells (or simply test smells). Test smells have been defined as poorly designed tests and their presence may negatively affect the maintainability of test suites and production code. Despite the many studies that address code smells in general, until now there has been no empirical evidence regarding test smells (i) distribution in software systems nor (ii) their impact on the maintainability of software systems. This paper fills this gap by presenting two empirical studies. The first study is an exploratory analysis of 18 software systems (two industrial and 16 open source) aimed at analyzing the distribution of test smells in source code. The second study, a controlled experiment involving twenty master students, is aimed at analyzing whether the presence of test smells affects the comprehension of source code during software maintenance. The results show that (i) test smells are widely spread throughout the software systems studied and (ii) most of the test smells have a strong negative impact on the comprehensibility of test suites and production code. program testing, public domain software, software maintenance, empirical analysis, unit test smell distribution, software maintenance, software development, maintenance activity, code comprehension, regression testing, bad test code smell, test suite maintainability, production code, software system maintainability, industrial software, open source software, source code, Testing, Software systems, Fixtures, Software maintenance, Maintenance engineering, Conferences, Test smells, Unit testing, Mining software repositories, Controlled experiments",an empirical analysis of the distribution of unit test smells and their impact on software maintenance unit testing represents a key activity in software development and maintenance test suites with high internal quality facilitate maintenance activities such as code comprehension and regression testing several guidelines have been proposed to help developers write good test suites unfortunately such rules are not always followed resulting in the presence of bad test code smells or simply test smells test smells have been defined as poorly designed tests and their presence may negatively affect the maintainability of test suites and production code despite the many studies that address code smells in general until now there has been no empirical evidence regarding test smells i distribution in software systems nor ii their impact on the maintainability of software systems this paper fills this gap by presenting two empirical studies the first study is an exploratory analysis of 18 software systems two industrial and 16 open source aimed at analyzing the distribution of test smells in source code the second study a controlled experiment involving twenty master students is aimed at analyzing whether the presence of test smells affects the comprehension of source code during software maintenance the results show that i test smells are widely spread throughout the software systems studied and ii most of the test smells have a strong negative impact on the comprehensibility of test suites and production code program testing public domain software software maintenance empirical analysis unit test smell distribution software maintenance software development maintenance activity code comprehension regression testing bad test code smell test suite maintainability production code software system maintainability industrial software open source software source code testing software systems fixtures software maintenance maintenance engineering conferences test smells unit testing mining software repositories controlled experiments,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
171,0,"Senses Working Overtime: On Sensuous Experiences and Public Computer Game Play In this article we will discuss players' experience of computer games in terms of sight, sound, taste, smell, and touch. We discuss how senses shape and give meaning to players' game play experiences in the game café and a mass LAN party. We also discuss how the social environments in which games are played impact on the experience of playing games. The data is drawn on a field study of public gameplay in a game café and a mass LAN party in Sweden. We conclude by highlighting that the social atmosphere is key to understanding public game play experiences. co-located public game settings, game café, mass LAN party, senses, social atmosphere, social environment",senses working overtime on sensuous experiences and public computer game play in this article we will discuss players experience of computer games in terms of sight sound taste smell and touch we discuss how senses shape and give meaning to players game play experiences in the game caf and a mass lan party we also discuss how the social environments in which games are played impact on the experience of playing games the data is drawn on a field study of public gameplay in a game caf and a mass lan party in sweden we conclude by highlighting that the social atmosphere is key to understanding public game play experiences co located public game settings game caf mass lan party senses social atmosphere social environment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
172,0,"Cross-modal tactile--taste interactions in food evaluations Detecting the taste components within a flavoured substance relies on exposing chemoreceptors within the mouth to the chemical components of ingested food. In our paper, we show that the evaluation of taste components can also be influenced by the tactile quality of the food. We first discuss how multisensory factors might influence taste, flavour and smell for both typical and atypical (synaesthetic) populations and we then present two empirical studies showing tactile--taste interactions in the general population. We asked a group of non-synaesthetic adults to evaluate the taste components of flavoured food substances, whilst we presented simultaneous cross-sensory visuo-tactile cues within the eating environment. Specifically, we presented foodstuffs between subjects that were otherwise identical but had a rough versus smooth surface, or were served on a rough versus smooth serving-plate. We found no effect of the serving-plate, but we found the rough/smoothness of the foodstuff itself significantly influenced perception: food was rated as significantly more sour if it had a rough (versus smooth) surface. In modifying taste perception via ostensibly unrelated dimensions, we demonstrate that the detection of tastes within flavours may be influenced by higher level cross-sensory cues. Finally, we suggest that the direction of our cross-sensory associations may speak to the types of hedonic mapping found both in normal multisensory integration, and in the unusual condition of synaesthesia. Cross-modal, Cross-sensory, Texture, Taste, Food, Synaesthesia, Hedonic",cross modal tactile taste interactions in food evaluations detecting the taste components within a flavoured substance relies on exposing chemoreceptors within the mouth to the chemical components of ingested food in our paper we show that the evaluation of taste components can also be influenced by the tactile quality of the food we first discuss how multisensory factors might influence taste flavour and smell for both typical and atypical synaesthetic populations and we then present two empirical studies showing tactile taste interactions in the general population we asked a group of non synaesthetic adults to evaluate the taste components of flavoured food substances whilst we presented simultaneous cross sensory visuo tactile cues within the eating environment specifically we presented foodstuffs between subjects that were otherwise identical but had a rough versus smooth surface or were served on a rough versus smooth serving plate we found no effect of the serving plate but we found the rough smoothness of the foodstuff itself significantly influenced perception food was rated as significantly more sour if it had a rough versus smooth surface in modifying taste perception via ostensibly unrelated dimensions we demonstrate that the detection of tastes within flavours may be influenced by higher level cross sensory cues finally we suggest that the direction of our cross sensory associations may speak to the types of hedonic mapping found both in normal multisensory integration and in the unusual condition of synaesthesia cross modal cross sensory texture taste food synaesthesia hedonic,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
173,0,"Acceptance of novel food by horses: The influence of food cues and nutrient composition Compared to ruminants little is known about how horses modulate food intake and learn about flavour-to-post-ingestive consequences. While it has been suggested that due to hindgut fermentation horse⿿s foraging preferences may be largely influenced by sensory input (e.g. volatiles), it has been established that horses are able to differentiate and select familiar foods (e.g. concentrates and hay) based on nutritional content. Yet it remains unclear how this translates to the acceptance of nutritious novel foods (NF). Therefore, the influence of food cues and nutrient composition on NF acceptance were examined in two experiments using 11 adult mares. In experiment 1, we investigated the influence of a familiar odour (FO) on the acceptance of a nutritious NF and in experiment 2, we determined if horses have the ability to select nutritious NF based on the nutritional content, regardless of sensory preferences. In experiment 1 horses received identical NF in a two-choice test with one of the choices being masked with a FO over a 9-day period. In experiment 2 horses were offered a high or low protein option of an otherwise identical NF in a two-choice test in which the NFs were paired with two unfamiliar flavours (odours). The two-choice test lasted for 14days and the flavour-protein pairing was switched after 7days. NF intakes were recorded over a 10min test period on each test day and analysed using Bayesian hierarchical models. The results of experiment 1 indicate that a FO had a strong positive influence on the NF intake for the first 5days (90⿿100% of total consumption and strong evidence for non-zero temporal effects (Bayes factor B12=110)). This was followed by a more even distribution of intake for the remaining period. In experiment 2 horses had a greater intake of high protein NF regardless of the flavour on days 4, 6 and 7 (80⿿87% of total consumption) and this continued after the switch over (Day 9⿿14; 57⿿81% of total consumption). However, 4 out of 11 horses showed neophobia throughout the testing period, which could have been associated with the novel odours as horses scanned the buckets with little to no sampling. The results suggest that pre-ingestive cues (e.g. smell, taste) of foods play an important role in diet selection and that a FO can increase the acceptance of NF. This new knowledge could be applied by the horse industry to encourage the consumption of new food or forages by horses. Diet selection, Flavour, Food neophobia, Horses, Odour, Novel food",acceptance of novel food by horses the influence of food cues and nutrient composition compared to ruminants little is known about how horses modulate food intake and learn about flavour to post ingestive consequences while it has been suggested that due to hindgut fermentation horse s foraging preferences may be largely influenced by sensory input e g volatiles it has been established that horses are able to differentiate and select familiar foods e g concentrates and hay based on nutritional content yet it remains unclear how this translates to the acceptance of nutritious novel foods nf therefore the influence of food cues and nutrient composition on nf acceptance were examined in two experiments using 11 adult mares in experiment 1 we investigated the influence of a familiar odour fo on the acceptance of a nutritious nf and in experiment 2 we determined if horses have the ability to select nutritious nf based on the nutritional content regardless of sensory preferences in experiment 1 horses received identical nf in a two choice test with one of the choices being masked with a fo over a 9 day period in experiment 2 horses were offered a high or low protein option of an otherwise identical nf in a two choice test in which the nfs were paired with two unfamiliar flavours odours the two choice test lasted for 14days and the flavour protein pairing was switched after 7days nf intakes were recorded over a 10min test period on each test day and analysed using bayesian hierarchical models the results of experiment 1 indicate that a fo had a strong positive influence on the nf intake for the first 5days 90 100 of total consumption and strong evidence for non zero temporal effects bayes factor b12 110 this was followed by a more even distribution of intake for the remaining period in experiment 2 horses had a greater intake of high protein nf regardless of the flavour on days 4 6 and 7 80 87 of total consumption and this continued after the switch over day 9 14 57 81 of total consumption however 4 out of 11 horses showed neophobia throughout the testing period which could have been associated with the novel odours as horses scanned the buckets with little to no sampling the results suggest that pre ingestive cues e g smell taste of foods play an important role in diet selection and that a fo can increase the acceptance of nf this new knowledge could be applied by the horse industry to encourage the consumption of new food or forages by horses diet selection flavour food neophobia horses odour novel food,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
174,0,"Automatic and Continuous Software Architecture Validation Software systems tend to suffer from architectural problems as they are being developed. While modern software development methodologies such as Agile and Dev-Ops suggest different ways of assuring code quality, very little attention is paid to maintaining high quality of the architecture of the evolving systems. By detecting and alerting about violations of the intended software architecture, one can often avoid code-level bad smells such as spaghetti code. Typically, if one wants to reason about the software architecture, the burden of first defining the intended architecture falls on the developer's shoulders. This includes definition of valid and invalid dependencies between software components. However, the developers are seldom familiar with the entire software system, which makes this task difficult, time consuming and error-prone. We propose and implement a solution for automatic detection of architectural violations in software artifacts. The solution, which utilizes a number of predefined and user-defined patterns, does not require prior knowledge of the system or its intended architecture. We propose to leverage this solution as part of the nightly build process used by development teams, thus achieving continuous automatic validation of the system's software architecture. As we show in multiple open-source and proprietary cases, a small set of predefined patterns can detect architectural violations as they are introduced over the course of development, and also capture deterioration in existing architectural problems. By evaluating the tool on relatively large open-source projects, we also validate its scalability and practical applicability to large software systems. []",automatic and continuous software architecture validation software systems tend to suffer from architectural problems as they are being developed while modern software development methodologies such as agile and dev ops suggest different ways of assuring code quality very little attention is paid to maintaining high quality of the architecture of the evolving systems by detecting and alerting about violations of the intended software architecture one can often avoid code level bad smells such as spaghetti code typically if one wants to reason about the software architecture the burden of first defining the intended architecture falls on the developer s shoulders this includes definition of valid and invalid dependencies between software components however the developers are seldom familiar with the entire software system which makes this task difficult time consuming and error prone we propose and implement a solution for automatic detection of architectural violations in software artifacts the solution which utilizes a number of predefined and user defined patterns does not require prior knowledge of the system or its intended architecture we propose to leverage this solution as part of the nightly build process used by development teams thus achieving continuous automatic validation of the system s software architecture as we show in multiple open source and proprietary cases a small set of predefined patterns can detect architectural violations as they are introduced over the course of development and also capture deterioration in existing architectural problems by evaluating the tool on relatively large open source projects we also validate its scalability and practical applicability to large software systems,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
175,0,"An Empirical Study of the Performance Impacts of Android Code Smells Android code smells are bad implementation practices within Android applications (or apps) that may lead to poor software quality, in particular in terms of performance. Yet, performance is a main software quality concern in the development of mobile apps. Correcting Android code smells is thus an important activity to increase the performance of mobile apps and to provide the best experience to mobile end-users while considering the limited constraints of mobile devices (e.g., CPU, memory, battery). However, no empirical study has assessed the positive performance impacts of correcting mobile code smells. In this paper, we therefore conduct an empirical study focusing on the individual and combined performance impacts of three Android performance code smells (namely, Internal Getter/Setter, Member Ignoring Method, and HashMap Usage) on two open source Android apps. To perform this study, we use the Paprika toolkit to detect these three code smells in the analyzed apps, and we derive four versions of the apps by correcting each detected smell independently, and all of them. Then, we evaluate the performance of each version on a common user scenario test. In particular, we evaluate the UI and memory performance using the following metrics: frame time, number of delayed frames, memory usage, and number of garbage collection calls. Our results show that correcting these Android code smells effectively improve the UI and memory performance. In particular, we observe an improvement up to 12.4% on UI metrics when correcting Member Ignoring Method and up to 3.6% on memory-related metrics when correcting the three Android code smells. We believe that developers can benefit from these results to guide their refactoring, and thus improve the quality of their mobile apps. Android (operating system), mobile computing, public domain software, smart phones, software engineering, user interfaces, Android code smell, Android applications, software quality, mobile app development, mobile devices, internal getter setter, member ignoring method, HashMap usage, open source Android apps, Paprika toolkit, UI evaluation, frame time, delayed frame number, memory usage, garbage collection calls, Androids, Humanoid robots, Mobile communication, Performance evaluation, Software quality, Gettering, Android, code smells, metrics, mobile computing, performance",an empirical study of the performance impacts of android code smells android code smells are bad implementation practices within android applications or apps that may lead to poor software quality in particular in terms of performance yet performance is a main software quality concern in the development of mobile apps correcting android code smells is thus an important activity to increase the performance of mobile apps and to provide the best experience to mobile end users while considering the limited constraints of mobile devices e g cpu memory battery however no empirical study has assessed the positive performance impacts of correcting mobile code smells in this paper we therefore conduct an empirical study focusing on the individual and combined performance impacts of three android performance code smells namely internal getter setter member ignoring method and hashmap usage on two open source android apps to perform this study we use the paprika toolkit to detect these three code smells in the analyzed apps and we derive four versions of the apps by correcting each detected smell independently and all of them then we evaluate the performance of each version on a common user scenario test in particular we evaluate the ui and memory performance using the following metrics frame time number of delayed frames memory usage and number of garbage collection calls our results show that correcting these android code smells effectively improve the ui and memory performance in particular we observe an improvement up to 12 4 on ui metrics when correcting member ignoring method and up to 3 6 on memory related metrics when correcting the three android code smells we believe that developers can benefit from these results to guide their refactoring and thus improve the quality of their mobile apps android operating system mobile computing public domain software smart phones software engineering user interfaces android code smell android applications software quality mobile app development mobile devices internal getter setter member ignoring method hashmap usage open source android apps paprika toolkit ui evaluation frame time delayed frame number memory usage garbage collection calls androids humanoid robots mobile communication performance evaluation software quality gettering android code smells metrics mobile computing performance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
176,0,"Time, money, and happiness: Does putting a price on time affect our ability to smell the roses? DeVoe and House (2012; Experiment 3) demonstrated that the process of thinking about one's income in relation to time (i.e., as an hourly wage) affected the enjoyment that participants derived from pleasurable experiences. Participants compelled to think of ``time is money'' experienced more impatience and less enjoyment in reaction to listening to a pleasurable piece of music compared to participants not asked to think of time as money. These effects were attenuated when participants were financially compensated for this leisure time. This suggests that putting a price on time can influence enjoyment of leisure activities, depending on the degree to which individuals are compensated for engaging in these activities. To determine the reliability, and magnitude, of the reported effects, two preregistered high-powered close replications were conducted. These independent replication attempts, as well as the analyses on the combined sample, failed to replicate the original pattern of findings. The results of the current studies suggest that, using these operationalizations of the study variables, the interactive effects of compensation and calculation cannot be considered robust and may not consistently predict happiness or impatience. Time, Money, Impatience, Happiness, Replication, Reproducibility",time money and happiness does putting a price on time affect our ability to smell the roses devoe and house 2012 experiment 3 demonstrated that the process of thinking about one s income in relation to time i e as an hourly wage affected the enjoyment that participants derived from pleasurable experiences participants compelled to think of time is money experienced more impatience and less enjoyment in reaction to listening to a pleasurable piece of music compared to participants not asked to think of time as money these effects were attenuated when participants were financially compensated for this leisure time this suggests that putting a price on time can influence enjoyment of leisure activities depending on the degree to which individuals are compensated for engaging in these activities to determine the reliability and magnitude of the reported effects two preregistered high powered close replications were conducted these independent replication attempts as well as the analyses on the combined sample failed to replicate the original pattern of findings the results of the current studies suggest that using these operationalizations of the study variables the interactive effects of compensation and calculation cannot be considered robust and may not consistently predict happiness or impatience time money impatience happiness replication reproducibility,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
177,0,"Experience dependent changes in odour--viscosity perception One consequence of experiencing flavour --- the combination of taste, smell and somatosensation that occurs during ingestion --- is that it can result in perceptual changes for the odour component, when this is later smelled alone. One such change is the acquisition of taste-like properties, but whether odours can also acquire somatosensory-like qualities is largely unknown. Participants here were exposed to one odour sampled in a viscous solution, another sampled in a sweet/viscous solution, and a further odour sampled in water. The odour sampled in the sweet/viscous solution was, when later sniffed alone, judged to smell thicker and sweeter, than the other two odours. Similarly, when the sweet/viscous paired odour was added to a viscous solution, the combination was judged as more viscous, than the other two odours --- and sweeter when added to a sweet solution. This experiment suggests that odours can acquire tactile-like somatosensory qualities and this may best occur when a taste is present during learning. Recent work indicates that tastes may be superior to somatosensory stimuli alone in promoting flavour binding, a seeming precondition for this type of learning. Odour, Taste, Somatosensation",experience dependent changes in odour viscosity perception one consequence of experiencing flavour the combination of taste smell and somatosensation that occurs during ingestion is that it can result in perceptual changes for the odour component when this is later smelled alone one such change is the acquisition of taste like properties but whether odours can also acquire somatosensory like qualities is largely unknown participants here were exposed to one odour sampled in a viscous solution another sampled in a sweet viscous solution and a further odour sampled in water the odour sampled in the sweet viscous solution was when later sniffed alone judged to smell thicker and sweeter than the other two odours similarly when the sweet viscous paired odour was added to a viscous solution the combination was judged as more viscous than the other two odours and sweeter when added to a sweet solution this experiment suggests that odours can acquire tactile like somatosensory qualities and this may best occur when a taste is present during learning recent work indicates that tastes may be superior to somatosensory stimuli alone in promoting flavour binding a seeming precondition for this type of learning odour taste somatosensation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
178,0,"Soil properties and crop yields on a vertisol in India with application of distillery effluent Distillery effluent, a foul smelling, dark coloured by-product of distillery industries, is usually applied as irrigation water or as an amendment to arable land in some areas which are in the vicinity of the distillery industries. A field experiment on soybean--wheat system was conducted for 3 consecutive years in a Vertisol of central India to evaluate the effect of distillery effluent (DE) as an amendment on soil properties and crop productivity. The treatments were control (no fertilizer or manure or DE, T1), 100% NPK+FYM @ 4Mgha−1 to soybean (T2) and four graded levels of DE, viz.: 2.5cm DE to soybean and wheat on residual nutrition (T3), 2.5cm DE to soybean and 1.25cm to wheat (T4), 5cm DE to soybean and wheat on residual nutrition (T5), 5cm DE to soybean and 2.5cm to wheat (T6). The organic carbon, microbial biomass carbon and electrical conductivity (EC) of the surface (0--10cm) soil increased significantly with application of DE compared to T1 and T2, but the soil pH was not affected. The EC increased from 0.47dSm−1 and 0.58dSm−1, respectively, in T1 and T2 to 1.52dSm−1 in T6, where highest dose of DE was applied. This indicated a slight build-up of salinity with DE application. The application of DE showed a significant improvement in the physical properties of the soil. The mean weight diameter (MWD), saturated hydraulic conductivity, water retention at field capacity and available water content were significantly (P<0.05) higher, while bulk density (BD) and penetration resistance of the surface soil were significantly lower (P<0.05) in all DE treated plots except in T3 than those in T1 and T2. The fractions of WSA of more than 1mm diameter in T6, T5 and T4 were, respectively, 141%, 107% and 116% more than the control. The MWD showed a positive linear relationship with the organic carbon (r=0.84**) and microbial biomass carbon (r=0.90**) of the soil. A significant (P<0.01) negative linear relationship (r=0.70**) was found between soil organic carbon and BD. Except T3, all the DE treated plots recorded significantly higher total and microporosity of the soil than control. Water retention at permanent wilting point and macroporosity of the soil were not affected by treatment. The seed yield of soybean in all the DE treatments was similar with T2 (1.86Mgha−1) but significantly more than control (1.28Mgha−1). The DE application levels have not affected the seed yield of soybean. In wheat highest grain yield was recorded in T2 (3.47Mgha−1), which was similar with T4 (3.16Mgha−1), T5 (3.22Mgha−1) and T6 (3.46Mgha−1). DE application up to T4 level was found suitable from productivity, salinity and sustainability point of view. The study showed that judicious application of DE as an amendment to the agricultural field could be considered as a viable option for safe disposal of this industrial waste. Distillery effluent, Soil physical properties, Organic carbon, SMBC, Electrical conductivity, Vertisols",soil properties and crop yields on a vertisol in india with application of distillery effluent distillery effluent a foul smelling dark coloured by product of distillery industries is usually applied as irrigation water or as an amendment to arable land in some areas which are in the vicinity of the distillery industries a field experiment on soybean wheat system was conducted for 3 consecutive years in a vertisol of central india to evaluate the effect of distillery effluent de as an amendment on soil properties and crop productivity the treatments were control no fertilizer or manure or de t1 100 npk fym 4mgha 1 to soybean t2 and four graded levels of de viz 2 5cm de to soybean and wheat on residual nutrition t3 2 5cm de to soybean and 1 25cm to wheat t4 5cm de to soybean and wheat on residual nutrition t5 5cm de to soybean and 2 5cm to wheat t6 the organic carbon microbial biomass carbon and electrical conductivity ec of the surface 0 10cm soil increased significantly with application of de compared to t1 and t2 but the soil ph was not affected the ec increased from 0 47dsm 1 and 0 58dsm 1 respectively in t1 and t2 to 1 52dsm 1 in t6 where highest dose of de was applied this indicated a slight build up of salinity with de application the application of de showed a significant improvement in the physical properties of the soil the mean weight diameter mwd saturated hydraulic conductivity water retention at field capacity and available water content were significantly p 0 05 higher while bulk density bd and penetration resistance of the surface soil were significantly lower p 0 05 in all de treated plots except in t3 than those in t1 and t2 the fractions of wsa of more than 1mm diameter in t6 t5 and t4 were respectively 141 107 and 116 more than the control the mwd showed a positive linear relationship with the organic carbon r 0 84 and microbial biomass carbon r 0 90 of the soil a significant p 0 01 negative linear relationship r 0 70 was found between soil organic carbon and bd except t3 all the de treated plots recorded significantly higher total and microporosity of the soil than control water retention at permanent wilting point and macroporosity of the soil were not affected by treatment the seed yield of soybean in all the de treatments was similar with t2 1 86mgha 1 but significantly more than control 1 28mgha 1 the de application levels have not affected the seed yield of soybean in wheat highest grain yield was recorded in t2 3 47mgha 1 which was similar with t4 3 16mgha 1 t5 3 22mgha 1 and t6 3 46mgha 1 de application up to t4 level was found suitable from productivity salinity and sustainability point of view the study showed that judicious application of de as an amendment to the agricultural field could be considered as a viable option for safe disposal of this industrial waste distillery effluent soil physical properties organic carbon smbc electrical conductivity vertisols,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
179,0,"Judicial disharmony: A study of dissent While it is well documented that judges at times disagree on case outcomes, less understood is the process by which they justify their divergence. In this article, we empirically examine how judges differ in their view of the relevant law to a case. We create a unique dataset looking at the universe of published opinions in federal appellate court cases from the United States between 2001 and 2005 that include a dissenting opinion. We find that judges who disagree on the outcome of a case disagree as to which binding precedents apply. Authoring judges gravitate toward precedents that are ideologically similar to their own preferences. Precedents cited only by the majority are strongly ideologically correlated with the majority author's preferences; precedents cited only by the dissenting judge are ideologically similar to her preferences. Precedents cited by both the majority and dissent (i.e., precedent that both judges agree are relevant to the case before them) are not ideologically correlated with either judge. Our findings provide strong evidence that judicial differences over case outcomes do not reflect judges' divergent interpretations of the same precedent, but gravitation towards largely different precedent. []",judicial disharmony a study of dissent while it is well documented that judges at times disagree on case outcomes less understood is the process by which they justify their divergence in this article we empirically examine how judges differ in their view of the relevant law to a case we create a unique dataset looking at the universe of published opinions in federal appellate court cases from the united states between 2001 and 2005 that include a dissenting opinion we find that judges who disagree on the outcome of a case disagree as to which binding precedents apply authoring judges gravitate toward precedents that are ideologically similar to their own preferences precedents cited only by the majority are strongly ideologically correlated with the majority author s preferences precedents cited only by the dissenting judge are ideologically similar to her preferences precedents cited by both the majority and dissent i e precedent that both judges agree are relevant to the case before them are not ideologically correlated with either judge our findings provide strong evidence that judicial differences over case outcomes do not reflect judges divergent interpretations of the same precedent but gravitation towards largely different precedent,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
180,0,"Defining and Applying Detection Strategies for Aspect-Oriented Code Smells A code smell is any symptom in the source code that possibly indicates a bad design or programming problem. Many code smells in aspect-oriented programming (AOP) are very different from those in object-oriented programming. Therefore, new detection strategies should be conceived to identify whether a particular slice of aspect-oriented code is affected by a specific smell. Unfortunately, research on AOP usually focuses on providing abstract descriptions of code smells, without providing operational definitions of their detection strategies. Such strategies are becoming increasingly required due to the growing use of AOP in the development of long-living systems, including frameworks, libraries and software product lines. This paper presents a family of metric-based strategies that support the detection of recurring smells observed in existing aspect-oriented systems. We analyzed the accuracy of such smell detection strategies and also of those previously reported in the literature. Our study involved in total 17 releases of 3 evolving aspect-oriented systems from different domains. The outcome of our evaluation suggests that strategies for previously-documented AOP smells do not present a satisfactory accuracy. Our analysis also revealed that: (1) newly-discovered strategies achieved better results than well-known ones, and (2) the detection strategies seem to have high accuracy with respect to the identification of both trivial and non-trivial code smells. aspect-oriented programming, chemioception, libraries, object-oriented programming, software metrics, code smells, source code, aspect-oriented programming, object-oriented programming, AOP, long-living systems, libraries, software product lines, metric-based strategies, Measurement, Accuracy, Complexity theory, Context, Software, Programming, Catalogs, Code Smell, Detection Strategy, AOP, Exploratory Study",defining and applying detection strategies for aspect oriented code smells a code smell is any symptom in the source code that possibly indicates a bad design or programming problem many code smells in aspect oriented programming aop are very different from those in object oriented programming therefore new detection strategies should be conceived to identify whether a particular slice of aspect oriented code is affected by a specific smell unfortunately research on aop usually focuses on providing abstract descriptions of code smells without providing operational definitions of their detection strategies such strategies are becoming increasingly required due to the growing use of aop in the development of long living systems including frameworks libraries and software product lines this paper presents a family of metric based strategies that support the detection of recurring smells observed in existing aspect oriented systems we analyzed the accuracy of such smell detection strategies and also of those previously reported in the literature our study involved in total 17 releases of 3 evolving aspect oriented systems from different domains the outcome of our evaluation suggests that strategies for previously documented aop smells do not present a satisfactory accuracy our analysis also revealed that 1 newly discovered strategies achieved better results than well known ones and 2 the detection strategies seem to have high accuracy with respect to the identification of both trivial and non trivial code smells aspect oriented programming chemioception libraries object oriented programming software metrics code smells source code aspect oriented programming object oriented programming aop long living systems libraries software product lines metric based strategies measurement accuracy complexity theory context software programming catalogs code smell detection strategy aop exploratory study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
181,0,"Effect of dietary inclusion of a herbal extract mixture and different oils on pig performance and meat quality The aim of the study was to evaluate the effect of a herbal extract mixture on pig performance and meat quality. The experiment was performed on 60 fatteners (60$\pm$0.5--112$\pm$2.0kg). Group I (control) was fed with standard feed; groups II and III received the same feed supplemented with 150mg BHT or 500mg of a herbal extract mixture (sage, nettle, lemon balm and coneflower) per kg of feed, respectively. In each group, half of the animals received 4% rapeseed oil, the other half soybean oil. The herbal extracts had no effect on animal performance but significantly improved meat oxidative stability, lowered cholesterol and TI index and increased PUFA content in meat. Slight differences between animals fed with rapeseed or soybean oils were observed. Gilt meat had significantly better (P≤0.01) AI, TI, and h/H indices than barrow meat. It was concluded that herbal extracts have a beneficial effect on pork health-promoting properties due to changes in lipid fraction. Plant extracts, Fattening pigs, Meat quality, Oxidative stability",effect of dietary inclusion of a herbal extract mixture and different oils on pig performance and meat quality the aim of the study was to evaluate the effect of a herbal extract mixture on pig performance and meat quality the experiment was performed on 60 fatteners 60 pm 0 5 112 pm 2 0kg group i control was fed with standard feed groups ii and iii received the same feed supplemented with 150mg bht or 500mg of a herbal extract mixture sage nettle lemon balm and coneflower per kg of feed respectively in each group half of the animals received 4 rapeseed oil the other half soybean oil the herbal extracts had no effect on animal performance but significantly improved meat oxidative stability lowered cholesterol and ti index and increased pufa content in meat slight differences between animals fed with rapeseed or soybean oils were observed gilt meat had significantly better p 0 01 ai ti and h h indices than barrow meat it was concluded that herbal extracts have a beneficial effect on pork health promoting properties due to changes in lipid fraction plant extracts fattening pigs meat quality oxidative stability,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
182,0,"Causes of Premature Aging During Software Development: An Observational Study Much work has been done on the subject of what happens to software architecture during maintenance activities. There seems to be a consensus that it degrades during the evolution of the software. More recent work shows that this degradation occurs even during development activities: design decisions are either adjusted or forgotten. Some studies have looked into the causes of this degradation, but these have mostly done so at a very high level. This study examines three projects at code level. Three architectural pre-implementation designs are compared with their post-implementation design counterparts, with special attention paid to the causes of the changes. We found many negative changes causing anti-patterns, at the package, class, and method levels. After analysis of the code, we were able to find the specific reasons for the poor design decisions. Although the underlying causes are varied, they can be grouped into three basic categories: knowledge problems, artifact problems, and management problems. This categorization shows that anti-pattern causes are varied and are not all due to the developers. The main conclusion is that promoting awareness of anti-patterns to developers is insufficient to prevent them since some of the causes escape their grasp. design erosion, post-implementation design, pre-implementation design, software aging",causes of premature aging during software development an observational study much work has been done on the subject of what happens to software architecture during maintenance activities there seems to be a consensus that it degrades during the evolution of the software more recent work shows that this degradation occurs even during development activities design decisions are either adjusted or forgotten some studies have looked into the causes of this degradation but these have mostly done so at a very high level this study examines three projects at code level three architectural pre implementation designs are compared with their post implementation design counterparts with special attention paid to the causes of the changes we found many negative changes causing anti patterns at the package class and method levels after analysis of the code we were able to find the specific reasons for the poor design decisions although the underlying causes are varied they can be grouped into three basic categories knowledge problems artifact problems and management problems this categorization shows that anti pattern causes are varied and are not all due to the developers the main conclusion is that promoting awareness of anti patterns to developers is insufficient to prevent them since some of the causes escape their grasp design erosion post implementation design pre implementation design software aging,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
183,0,"xfACL: An Extensible Functional Language for Access Control The main goal of modern access control policy languages is to offer high-level languages, by using which security officers and application developers can express a large variety of access restrictions and isolate the security logic from the application logic. However, the current state-of-the-art language, XACML, suffers from some design flaws and lacks important features, such as those that characterize the RBAC model. Therefore, we propose an access control language that combines the benefits of both XACML and RBAC while avoiding their drawbacks. access control, language, policy",xfacl an extensible functional language for access control the main goal of modern access control policy languages is to offer high level languages by using which security officers and application developers can express a large variety of access restrictions and isolate the security logic from the application logic however the current state of the art language xacml suffers from some design flaws and lacks important features such as those that characterize the rbac model therefore we propose an access control language that combines the benefits of both xacml and rbac while avoiding their drawbacks access control language policy,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
184,0,"Identifying Code Smells with Collaborative Practices: A Controlled Experiment Code smells are often considered as key indicators of software quality degradation. If code smells are not systematically removed from a program, its continuous degradation may lead to either major maintenance effort or the complete redesign of the system. For several reasons, software developers introduce smells in their code as soon as they start to learn programming. If novice developers are ought to become either proficient programmers or skilled code reviewers, they should be early prepared to effectively identify code smells in existing programs. However, effective identification of code smells is often not a non-trivial task in particular to a novice developer working in isolation. Thus, the use of collaborative practices may have the potential to support developers in improving their effectiveness on this task at their early stages of their careers. These practices offer the opportunity for two or more developers analyzing the source code together and collaboratively reason about potential smells prevailing on it. Pair Programming (PP) and Coding Dojo Randori (CDR) are two increasingly adopted practices for improving the effectiveness of developers with limited or no knowledge in software engineering tasks, including code review tasks. However, there is no broad understanding about the impact of these collaborative practices on the effectiveness of code smell identification. This paper presents a controlled experiment involving 28 novice developers, aimed at assessing the effectiveness of collaborative practices in the identification of code smells. We compared PP and CDR with solo programming in order to better distinguish their impact on the effective identification of code smells. Our study is also the first in the literature to observe how novice developers work individually and together to identify smells. Our results suggest that collaborative practices contribute to the effectiveness on the identification of a wide range of code smells. Our findings can also be used in practice to guide educators, researchers or teams on improving detection and training on code smell identification. software maintenance, software quality, software reviews, source code (software), code smell identification, software quality degradation, software maintenance, source code, pair programming, Coding Dojo Randori, CDR, PP, software engineering tasks, code review tasks, solo programming, Collaboration, Software, Programming profession, Encoding, Degradation, Software engineering, Code Smells, Collaborative Practices, Controlled Experiment, Program Comprehension, Software Degradation",identifying code smells with collaborative practices a controlled experiment code smells are often considered as key indicators of software quality degradation if code smells are not systematically removed from a program its continuous degradation may lead to either major maintenance effort or the complete redesign of the system for several reasons software developers introduce smells in their code as soon as they start to learn programming if novice developers are ought to become either proficient programmers or skilled code reviewers they should be early prepared to effectively identify code smells in existing programs however effective identification of code smells is often not a non trivial task in particular to a novice developer working in isolation thus the use of collaborative practices may have the potential to support developers in improving their effectiveness on this task at their early stages of their careers these practices offer the opportunity for two or more developers analyzing the source code together and collaboratively reason about potential smells prevailing on it pair programming pp and coding dojo randori cdr are two increasingly adopted practices for improving the effectiveness of developers with limited or no knowledge in software engineering tasks including code review tasks however there is no broad understanding about the impact of these collaborative practices on the effectiveness of code smell identification this paper presents a controlled experiment involving 28 novice developers aimed at assessing the effectiveness of collaborative practices in the identification of code smells we compared pp and cdr with solo programming in order to better distinguish their impact on the effective identification of code smells our study is also the first in the literature to observe how novice developers work individually and together to identify smells our results suggest that collaborative practices contribute to the effectiveness on the identification of a wide range of code smells our findings can also be used in practice to guide educators researchers or teams on improving detection and training on code smell identification software maintenance software quality software reviews source code software code smell identification software quality degradation software maintenance source code pair programming coding dojo randori cdr pp software engineering tasks code review tasks solo programming collaboration software programming profession encoding degradation software engineering code smells collaborative practices controlled experiment program comprehension software degradation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
185,0,"Why Data Deletion Fails? A Study on Deletion Flaws and Data Remanence in Android Systems Smart mobile devices are becoming the main vessel of personal privacy information. While they carry valuable information, data erasure is somehow much more vulnerable than was predicted. The security mechanisms provided by the Android system are not flexible enough to thoroughly delete sensitive data. In addition to the weakness among several provided data-erasing and file-deleting mechanisms, we also target the Android OS design flaws in data erasure, and unveil that the design of the Android OS contradicts some secure data-erasure demands. We present the data-erasure flaws in three typical scenarios on mainstream Android devices, such as the data clearing flaw, application uninstallation flaw, and factory reset flaw. Some of these flaws are inherited data-deleting security issues from the Linux kernel, and some are new vulnerabilities in the Android system. Those scenarios reveal the data leak points in Android systems. Moreover, we reveal that the data remanence on the disk is rarely affected by the user's daily operation, such as file deletion and app installation and uninstallation, by a real-world data deletion latency experiment. After one volunteer used the Android phone for 2 months, the data remanence amount was still considerable. Then, we proposed DataRaider for file recovering from disk fragments. It adopts a file-carving technique and is implemented as an automated sensitive information recovering framework. DataRaider is able to extract private data in a raw disk image without any file system information, and the recovery rate is considerably high in the four test Android phones. We propose some mitigation for data remanence issues, and give the users some suggestions on data protection in Android systems. Data recovery, file carving, mobile security, secure deletion",why data deletion fails a study on deletion flaws and data remanence in android systems smart mobile devices are becoming the main vessel of personal privacy information while they carry valuable information data erasure is somehow much more vulnerable than was predicted the security mechanisms provided by the android system are not flexible enough to thoroughly delete sensitive data in addition to the weakness among several provided data erasing and file deleting mechanisms we also target the android os design flaws in data erasure and unveil that the design of the android os contradicts some secure data erasure demands we present the data erasure flaws in three typical scenarios on mainstream android devices such as the data clearing flaw application uninstallation flaw and factory reset flaw some of these flaws are inherited data deleting security issues from the linux kernel and some are new vulnerabilities in the android system those scenarios reveal the data leak points in android systems moreover we reveal that the data remanence on the disk is rarely affected by the user s daily operation such as file deletion and app installation and uninstallation by a real world data deletion latency experiment after one volunteer used the android phone for 2 months the data remanence amount was still considerable then we proposed dataraider for file recovering from disk fragments it adopts a file carving technique and is implemented as an automated sensitive information recovering framework dataraider is able to extract private data in a raw disk image without any file system information and the recovery rate is considerably high in the four test android phones we propose some mitigation for data remanence issues and give the users some suggestions on data protection in android systems data recovery file carving mobile security secure deletion,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
186,0,"Exploring the conceptualization of the sensory dimension of tourist experiences This paper aims to contribute to the conceptualization of the sensory dimension of tourist experiences by discussing its theoretical underpinnings. A multidisciplinary approach to the human senses shows their importance to the individual's experience and perception of the surrounding world, recommending the appropriateness of a holistic analysis of sensescapes in tourism. A review of empirical studies conducted under the experiential paradigm of tourism on the five human senses (sight, hearing, smell, taste, and touch) evidences the use of both qualitative and quantitative methodologies, which depends on research purposes, but also the practical implications of findings and data analysis to destination marketing and management. The paper discusses the role of the senses in designing tourist experiences, and identifies important topics regarding the study of the sensory dimension of tourist experiences, considering future research opportunities. Sensory experience, Tourist experience, Experiential paradigm, , Destination marketing",exploring the conceptualization of the sensory dimension of tourist experiences this paper aims to contribute to the conceptualization of the sensory dimension of tourist experiences by discussing its theoretical underpinnings a multidisciplinary approach to the human senses shows their importance to the individual s experience and perception of the surrounding world recommending the appropriateness of a holistic analysis of sensescapes in tourism a review of empirical studies conducted under the experiential paradigm of tourism on the five human senses sight hearing smell taste and touch evidences the use of both qualitative and quantitative methodologies which depends on research purposes but also the practical implications of findings and data analysis to destination marketing and management the paper discusses the role of the senses in designing tourist experiences and identifies important topics regarding the study of the sensory dimension of tourist experiences considering future research opportunities sensory experience tourist experience experiential paradigm destination marketing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
187,0,"Pleasure propagation to reward predictors Learning has always been one of the core mechanics in computer games. Players learn specific battle mechanics, control schemes, and much more, which enables them to progress further through the game and experience pleasure. Previous studies on learning often focused on the learning of predictors (cues) for reward and their motivational properties, but fail to address the impact on pleasure. For example, the cue of a smell of chocolate will already produce a pleasure feeling, which means that apart from the motivational learning of the smell cue, something affected pleasure generation as well. In this paper, we perform an experimental study to investigate this relation of learning and pleasure. The study, in which 38 test subjects participated, used smile reactions to rewards of showing funny pictures as a primary measure of pleasure. The findings of the study demonstrate that experiment repetition leads to an increase in pleasure at the cue, a decrease in pleasure at the reward, and a potential relation between motivation and pleasure change at the cue. behavioural sciences computing, computer games, entertainment, learning (artificial intelligence), pleasure propagation, computer game, learning, motivation, reward predictor, Electromyography, Games, Particle measurements, Atmospheric measurements, Sensors, Copper, Mice",pleasure propagation to reward predictors learning has always been one of the core mechanics in computer games players learn specific battle mechanics control schemes and much more which enables them to progress further through the game and experience pleasure previous studies on learning often focused on the learning of predictors cues for reward and their motivational properties but fail to address the impact on pleasure for example the cue of a smell of chocolate will already produce a pleasure feeling which means that apart from the motivational learning of the smell cue something affected pleasure generation as well in this paper we perform an experimental study to investigate this relation of learning and pleasure the study in which 38 test subjects participated used smile reactions to rewards of showing funny pictures as a primary measure of pleasure the findings of the study demonstrate that experiment repetition leads to an increase in pleasure at the cue a decrease in pleasure at the reward and a potential relation between motivation and pleasure change at the cue behavioural sciences computing computer games entertainment learning artificial intelligence pleasure propagation computer game learning motivation reward predictor electromyography games particle measurements atmospheric measurements sensors copper mice,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
188,0,"The inconsistent measurement of Message Chains Fowler and Beck defined 22 Code Bad Smells. These smells are useful indicators of code that may need to be refactored. A range of tools have been developed that measure smells in Java code. We aim to compare the results of using two smell measurement tools (DECOR which is embedded in the Ptidej tool and Stench Blossom) on the same Java code (ArgoUML). This comparison identifies the code each tool identifies as containing Message Chains. We evaluate the results from these two tools using human judgment on the smells that the code contains. We look in detail at how and why the results differ. Our results show that each tool identified very different code as containing Message Chains. Stench Blossom identified very many more code instances of Message Chains than DECOR. We found three reasons why these discrepancies occurred. First there are significant differences in the definitions of Message Chains used by each tool. Second, the tools use very different measurement strategies. Third, the thresholds embedded in the tools vary. This measurement inconsistency is a problem to practitioners as they may be applying refactoring ineffectively. This inconsistency is also a problem for researchers as it undermines the reliability of making cross study comparisons and prevents mature knowledge the impact of smells being developed. Java, software maintenance, software metrics, software reliability, Unified Modeling Language, inconsistent message chain measurement, code bad smells, measure smells, Java code, smell measurement tools, DECOR, Ptidej tool, Stench blossom, human judgment, measurement inconsistency, ArgoUML, Manuals, Measurement, Java, Educational institutions, Niobium, Reliability, Encoding, Code Bad Smells, Message Chains, measurement tools, performance, measurement",the inconsistent measurement of message chains fowler and beck defined 22 code bad smells these smells are useful indicators of code that may need to be refactored a range of tools have been developed that measure smells in java code we aim to compare the results of using two smell measurement tools decor which is embedded in the ptidej tool and stench blossom on the same java code argouml this comparison identifies the code each tool identifies as containing message chains we evaluate the results from these two tools using human judgment on the smells that the code contains we look in detail at how and why the results differ our results show that each tool identified very different code as containing message chains stench blossom identified very many more code instances of message chains than decor we found three reasons why these discrepancies occurred first there are significant differences in the definitions of message chains used by each tool second the tools use very different measurement strategies third the thresholds embedded in the tools vary this measurement inconsistency is a problem to practitioners as they may be applying refactoring ineffectively this inconsistency is also a problem for researchers as it undermines the reliability of making cross study comparisons and prevents mature knowledge the impact of smells being developed java software maintenance software metrics software reliability unified modeling language inconsistent message chain measurement code bad smells measure smells java code smell measurement tools decor ptidej tool stench blossom human judgment measurement inconsistency argouml manuals measurement java educational institutions niobium reliability encoding code bad smells message chains measurement tools performance measurement,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
189,0,"Smelling, Pulling, and Looking: Unpacking Similarities and Differences in Dog and Human City Life The problem of understanding animals, e.g., what they want and what they are doing, are recurrent matters for the emerging field of animal-computer interaction (ACI). We focus on animals in the city by bridging the field with urban studies and open up for new design opportunities in terms of the possibilities of new digital technology to reconfigure animal city life. We present an ethnomethodological video analysis of the negotiations and interactional work between two leashed pugs and a handler walking down a street. We unpack similarities and differences between the two species in terms of their interests and intentions in an urban environment through detailed examination of the moments in the walk when the leash is pulled taut. We show how a strained leash can result from a conflict between the dog's attentiveness towards other dogs by smelling and looking, and the human's urge to move along. We propose design directions supporting the dogs' wants and needs by accessing the handler with information on the dogs' curiosities in other dogs by visualizing the invisible scent-universe of the dogs and encourage dog-dog interaction. animal-computer interaction, dog walking, dog-dog interaction, dogs, ethnomethodology, human-dog interaction, smelling, urban design",smelling pulling and looking unpacking similarities and differences in dog and human city life the problem of understanding animals e g what they want and what they are doing are recurrent matters for the emerging field of animal computer interaction aci we focus on animals in the city by bridging the field with urban studies and open up for new design opportunities in terms of the possibilities of new digital technology to reconfigure animal city life we present an ethnomethodological video analysis of the negotiations and interactional work between two leashed pugs and a handler walking down a street we unpack similarities and differences between the two species in terms of their interests and intentions in an urban environment through detailed examination of the moments in the walk when the leash is pulled taut we show how a strained leash can result from a conflict between the dog s attentiveness towards other dogs by smelling and looking and the human s urge to move along we propose design directions supporting the dogs wants and needs by accessing the handler with information on the dogs curiosities in other dogs by visualizing the invisible scent universe of the dogs and encourage dog dog interaction animal computer interaction dog walking dog dog interaction dogs ethnomethodology human dog interaction smelling urban design,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
190,0,"Clinical availability of a self-administered odor questionnaire for patients with olfactory disorders Objective This study demonstrated statistical correlations between a novel self-administered odor questionnaire (SAOQ) and other olfaction tests in patients with olfactory disorders, and the usefulness of this questionnaire was discussed. Materials and methods Between December 2004 and November 2009 (5 years), the SAOQ was completed by 405 healthy people without any nasal diseases (Group A) and 539 patients with an olfactory disorder (Group B) at the Department of Otolaryngology, Hyogo College of Medicine. This was a prospective study. The SAOQ proposed by the Japan Rhinology Society is a self-administered survey consisting of 20 smell-related items: ``steamed rice, miso, seaweed, soy sauce, baked bread, butter, curry, garlic, orange, strawberry, green tea, coffee, chocolate, household gas, garbage, timber, stercus, sweat, flower, and perfume''. The normal reference range of scores (%) of the SAOQ was calculated in Group A. To determine whether the results of the SAOQ were correlated with those of visual analogue scale (VAS) and T&T olfactometer, pre- and post-treatment results of the SAOQ and olfaction tests were analyzed. Results The questionnaire response rates were 99.5% (403/405 people) in Group A and 95.9% (517/539 patients) in Group B. The statistically normal reference level of the SAOQ was determined as more than 70%. In Group B, the mean pre-treatment SAOQ score (20.4%), VAS score (16.5%), and T&T recognition threshold (5.0) significantly improved to values of 46.7%, 41.1%, and 4.1 after treatments, respectively (n=249). Both pre- and post-treatment SAOQ scores (ΔQ) had statistically significant relationships with those of VAS and T&T (n=249). Conclusion The utility of the SAOQ as an easy method of estimating olfaction was suggested. Olfactory disorder, Visual analogue scales (VAS), T&T olfactometer, Endoscopic sinus surgery (ESS), Rhinology",clinical availability of a self administered odor questionnaire for patients with olfactory disorders objective this study demonstrated statistical correlations between a novel self administered odor questionnaire saoq and other olfaction tests in patients with olfactory disorders and the usefulness of this questionnaire was discussed materials and methods between december 2004 and november 2009 5 years the saoq was completed by 405 healthy people without any nasal diseases group a and 539 patients with an olfactory disorder group b at the department of otolaryngology hyogo college of medicine this was a prospective study the saoq proposed by the japan rhinology society is a self administered survey consisting of 20 smell related items steamed rice miso seaweed soy sauce baked bread butter curry garlic orange strawberry green tea coffee chocolate household gas garbage timber stercus sweat flower and perfume the normal reference range of scores of the saoq was calculated in group a to determine whether the results of the saoq were correlated with those of visual analogue scale vas and t t olfactometer pre and post treatment results of the saoq and olfaction tests were analyzed results the questionnaire response rates were 99 5 403 405 people in group a and 95 9 517 539 patients in group b the statistically normal reference level of the saoq was determined as more than 70 in group b the mean pre treatment saoq score 20 4 vas score 16 5 and t t recognition threshold 5 0 significantly improved to values of 46 7 41 1 and 4 1 after treatments respectively n 249 both pre and post treatment saoq scores q had statistically significant relationships with those of vas and t t n 249 conclusion the utility of the saoq as an easy method of estimating olfaction was suggested olfactory disorder visual analogue scales vas t t olfactometer endoscopic sinus surgery ess rhinology,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
191,0,"Preference of horses for grass conserved as hay, haylage or silage The purpose of this experiment was to determine if different methods of forage conservation influenced horse preference for conserved forages. Silage, haylage with two different dry matter (DM) levels and hay was produced from the same grass crop at the same botanical maturity stage. Four horses were simultaneously offered the four forages (1kg DM of each forage) once daily for four consecutive experimental periods, each period consisting of 5 days. On each experimental day, the horses were observed for 2h and their first choice, eating time and forage consumption was registered for every forage. The number of times each horse depleted individual forages and the number of times each horse tasted or smelled a forage, but left it in favour of another forage, was also recorded. Silage had the highest rate of consumption (0.90kgDM/day, S.D. 0.14) and longest eating time (28.4min/day, S.D. 5.16). Hay had the lowest rate of consumption (0.23kgDM/day, S.D. 0.14) and shortest eating time (6.8min/day, S.D. 4.08), while the haylages were intermediate. Silage was the first choice 72 of 84 times (85%). Hay was never completely consumed and silage was never left in favour of another forage after smelling or tasting it. We conclude that the forage conservation methods had an impact on horse preference in favour of silage, even if the reason for silage preference remains to be explained. Horse, Preference, Silage, Haylage, Hay",preference of horses for grass conserved as hay haylage or silage the purpose of this experiment was to determine if different methods of forage conservation influenced horse preference for conserved forages silage haylage with two different dry matter dm levels and hay was produced from the same grass crop at the same botanical maturity stage four horses were simultaneously offered the four forages 1kg dm of each forage once daily for four consecutive experimental periods each period consisting of 5 days on each experimental day the horses were observed for 2h and their first choice eating time and forage consumption was registered for every forage the number of times each horse depleted individual forages and the number of times each horse tasted or smelled a forage but left it in favour of another forage was also recorded silage had the highest rate of consumption 0 90kgdm day s d 0 14 and longest eating time 28 4min day s d 5 16 hay had the lowest rate of consumption 0 23kgdm day s d 0 14 and shortest eating time 6 8min day s d 4 08 while the haylages were intermediate silage was the first choice 72 of 84 times 85 hay was never completely consumed and silage was never left in favour of another forage after smelling or tasting it we conclude that the forage conservation methods had an impact on horse preference in favour of silage even if the reason for silage preference remains to be explained horse preference silage haylage hay,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
192,0,"Funbrella: Recording and Replaying Vibrations Through an Umbrella Axis We propose an umbrella-like device called Funbrella that entertains people with many types of rain by focusing on an umbrella as a user interface that connects humans and rain. Generally, people experience rain with sound, sight, or sometimes smell; however, in our proposed system, we focus on the vibration perceived through an umbrella's handle so that people can feel the rain. We implemented a vibration-giving mechanism with an extremely simple structure based on a dynamic microphone and a dynamic speaker whose structures are almost identical. With this structure, Funbrella records the vibrations caused by raindrops and plays them. We implemented three applications: Crazy Rain, Tele-rain, and Minibrella. A questionnaire study about Crazy Rain application reveals that Funbrella is amusing enough for people regardless of age or gender because Funbrella accurately reproduces rain. bidirectional, empathy, haptic device, real-time, telecommunication, vibration record replay",funbrella recording and replaying vibrations through an umbrella axis we propose an umbrella like device called funbrella that entertains people with many types of rain by focusing on an umbrella as a user interface that connects humans and rain generally people experience rain with sound sight or sometimes smell however in our proposed system we focus on the vibration perceived through an umbrella s handle so that people can feel the rain we implemented a vibration giving mechanism with an extremely simple structure based on a dynamic microphone and a dynamic speaker whose structures are almost identical with this structure funbrella records the vibrations caused by raindrops and plays them we implemented three applications crazy rain tele rain and minibrella a questionnaire study about crazy rain application reveals that funbrella is amusing enough for people regardless of age or gender because funbrella accurately reproduces rain bidirectional empathy haptic device real time telecommunication vibration record replay,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
193,0,"Survey of the Frequency of Olfactory Dysfunction in Taiwan Background Olfactory function is related to the scrutiny of environmental dangers and the tasting of food. However, olfactory dysfunction is not as distinctive as visual loss and may go unnoticed, especially when olfactory function deteriorates slowly. Most studies have used either questionnaires or relatively insensitive tests to assess olfactory dysfunction. Therefore, the objective of this study was to evaluate the frequency of olfactory dysfunction in Taiwan. Methods A total of 211 participants were recruited randomly from the community, factories or offices in Taichung City, Taiwan from April 2005 to March 2006. Age ranged from 19 to 89 years (mean age, 43.3 $\pm$ 12.7 years). All participants filled in questionnaires about sociodemographic data, self-rated olfactory function and impact on quality of life. The olfactory test was performed with identification task of the ``Sniffin' Sticks'' olfactory function test. Results The frequency of olfactory dysfunction in our series was 12.3%. There was a statistically significant difference in the ages of the normal and olfactory dysfunction groups (t test, p < 0.0001). The incidences of parosmia and phantosmia in the 211 participants were 10% and 30.8%, respectively. Most subjects did not rate their olfactory function well. There was no correlation between olfactory function and self-ratings of impact of olfactory function on quality of life. Conclusion Our present results provide preliminary data and clinical experience regarding the frequency of olfactory dysfunction in Taiwan. Future modifications and suggestions for the study of the prevalence of olfactory dysfunction are also mentioned. olfactory dysfunction, smell, Sniffin' Sticks",survey of the frequency of olfactory dysfunction in taiwan background olfactory function is related to the scrutiny of environmental dangers and the tasting of food however olfactory dysfunction is not as distinctive as visual loss and may go unnoticed especially when olfactory function deteriorates slowly most studies have used either questionnaires or relatively insensitive tests to assess olfactory dysfunction therefore the objective of this study was to evaluate the frequency of olfactory dysfunction in taiwan methods a total of 211 participants were recruited randomly from the community factories or offices in taichung city taiwan from april 2005 to march 2006 age ranged from 19 to 89 years mean age 43 3 pm 12 7 years all participants filled in questionnaires about sociodemographic data self rated olfactory function and impact on quality of life the olfactory test was performed with identification task of the sniffin sticks olfactory function test results the frequency of olfactory dysfunction in our series was 12 3 there was a statistically significant difference in the ages of the normal and olfactory dysfunction groups t test p 0 0001 the incidences of parosmia and phantosmia in the 211 participants were 10 and 30 8 respectively most subjects did not rate their olfactory function well there was no correlation between olfactory function and self ratings of impact of olfactory function on quality of life conclusion our present results provide preliminary data and clinical experience regarding the frequency of olfactory dysfunction in taiwan future modifications and suggestions for the study of the prevalence of olfactory dysfunction are also mentioned olfactory dysfunction smell sniffin sticks,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
194,0,"Marital violence and sexually transmitted infections among women in post-revolution Egypt Objectives To explore the relationship between past year physical or sexual partner violence against women and women's self-report of sexually transmitted infection (STI) symptoms in post-revolution Egypt; and to examine the effects of men's and women's risky sexual behavioural characteristics and structural dimensions of poverty and gender inequality on this relationship. Study design This study uses the nationally representative cross-sectional demographic and health survey data conducted in 2014. Multivariate logistic regression was used to assess the relationship between past year partner violence and self-report of STI symptoms among currently married women. Main outcome measures women's self-report of STI was based on their responses to three questions; whether in the past year they had: got a disease through sexual contact?, a genital sore or ulcer?, or a bad smelling abnormal genital discharge? Women who gave an affirmative response to one or more of these questions were assumed to self-report STI. Results Almost one-third of women self-reported symptoms of STI. Fourteen percent of women reported they had experienced physical or sexual violence by a male partner in the past 12months. Abused women had a 2.76 times higher odds of self-reported STI symptoms (95% CI 2.25--3.38). The significant relationship between self-reported STI and past year partner violence against women did not alter when adjusting for men's and women's behavioural characteristics and factors related to poverty and gender inequality. Conclusions Public health interventions that address women's sexual and reproductive health need to consider violence response and prevention strategies. Sexually transmitted infections, Partner violence, Egypt",marital violence and sexually transmitted infections among women in post revolution egypt objectives to explore the relationship between past year physical or sexual partner violence against women and women s self report of sexually transmitted infection sti symptoms in post revolution egypt and to examine the effects of men s and women s risky sexual behavioural characteristics and structural dimensions of poverty and gender inequality on this relationship study design this study uses the nationally representative cross sectional demographic and health survey data conducted in 2014 multivariate logistic regression was used to assess the relationship between past year partner violence and self report of sti symptoms among currently married women main outcome measures women s self report of sti was based on their responses to three questions whether in the past year they had got a disease through sexual contact a genital sore or ulcer or a bad smelling abnormal genital discharge women who gave an affirmative response to one or more of these questions were assumed to self report sti results almost one third of women self reported symptoms of sti fourteen percent of women reported they had experienced physical or sexual violence by a male partner in the past 12months abused women had a 2 76 times higher odds of self reported sti symptoms 95 ci 2 25 3 38 the significant relationship between self reported sti and past year partner violence against women did not alter when adjusting for men s and women s behavioural characteristics and factors related to poverty and gender inequality conclusions public health interventions that address women s sexual and reproductive health need to consider violence response and prevention strategies sexually transmitted infections partner violence egypt,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
195,0,"Architecture-sensitive Heuristics for Prioritizing Critical Code Anomalies The progressive insertion of code anomalies in evolving software systems might lead to architecture degradation symptoms. Code anomalies are particularly harmful when they contribute to the architecture degradation. Although several approaches have been proposed aiming to detect anomalies in the source code, most of them fail to assist developers when prioritizing code anomalies critical to the architectural design. Blueprints of the architecture design are artifacts often available in industry software projects. However, such blueprints are rarely explored to support the prioritization of code anomalies in terms of their architecture relevance. This paper proposes and evaluates 2 sets of blueprint-based heuristics for supporting the prioritization of critical code anomalies. The prioritization is based on their potential impact on revealing architectural drift problems. The heuristics allow developers prioritizing critical code anomalies by exploiting architectural information provided in the blueprint. The contributions of this paper include: (i) a set of architecture sensitive heuristics to support developers when prioritizing critical code anomalies; (ii) an evaluation of the proposed heuristics in terms of their prioritization accuracy in 3 systems; and (iii) an empirical analysis on how the blueprints' information might enhance the prioritization of critical code anomalies, as opposed to existing heuristics strictly based on source code analysis. Blueprints, Code Anomalies, Component, Empirical Evaluation, Heuristics, Software Architecture",architecture sensitive heuristics for prioritizing critical code anomalies the progressive insertion of code anomalies in evolving software systems might lead to architecture degradation symptoms code anomalies are particularly harmful when they contribute to the architecture degradation although several approaches have been proposed aiming to detect anomalies in the source code most of them fail to assist developers when prioritizing code anomalies critical to the architectural design blueprints of the architecture design are artifacts often available in industry software projects however such blueprints are rarely explored to support the prioritization of code anomalies in terms of their architecture relevance this paper proposes and evaluates 2 sets of blueprint based heuristics for supporting the prioritization of critical code anomalies the prioritization is based on their potential impact on revealing architectural drift problems the heuristics allow developers prioritizing critical code anomalies by exploiting architectural information provided in the blueprint the contributions of this paper include i a set of architecture sensitive heuristics to support developers when prioritizing critical code anomalies ii an evaluation of the proposed heuristics in terms of their prioritization accuracy in 3 systems and iii an empirical analysis on how the blueprints information might enhance the prioritization of critical code anomalies as opposed to existing heuristics strictly based on source code analysis blueprints code anomalies component empirical evaluation heuristics software architecture,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
196,0,"Chemical substance classification by electronic noses Normally, an electronic nose project uses two researches areas which are hardware for developing sensors to detect substance smell and software using pattern matching theorem for recognizing substance. The operation begins with sensors hit the smell of chemical substance. The result is converted from analog to digital representation. An artificial intelligence is a tool of a thinking system which can create knowledge as if a human does. The objective of this research is to classify chemical substance by using electronic noses. We used eight types of chemical substance in the experiment which are 1) acetone, 2) benzene, 3) propanal, 4) butanol, 5) chloroform, 6) ethanol, 7) methane and 8) tetrahydrofuran. We compared nine structures of neural network to classify the chemical substance data. The precision of correctness is equal to 94.64 for a neural network structure as 54 input-layer nodes, 216 hidden-layer1 nodes, 8 hidden-layer2 nodes and 8 output-layer nodes. chemical engineering computing, electronic noses, neural nets, pattern classification, pattern matching, chemical substance classification, electronic noses, pattern matching theorem, artificial intelligence, acetone, benzene, propanal, butanol, chloroform, ethanol, methane, tetrahydrofuran, neural network, Electronic noses, Chemical sensors, Intelligent sensors, Neural networks, Hardware, Pattern matching, Pattern recognition, Artificial intelligence, Humans, Ethanol, Electronic Noses, Chemical substance Classification, Neural Network",chemical substance classification by electronic noses normally an electronic nose project uses two researches areas which are hardware for developing sensors to detect substance smell and software using pattern matching theorem for recognizing substance the operation begins with sensors hit the smell of chemical substance the result is converted from analog to digital representation an artificial intelligence is a tool of a thinking system which can create knowledge as if a human does the objective of this research is to classify chemical substance by using electronic noses we used eight types of chemical substance in the experiment which are 1 acetone 2 benzene 3 propanal 4 butanol 5 chloroform 6 ethanol 7 methane and 8 tetrahydrofuran we compared nine structures of neural network to classify the chemical substance data the precision of correctness is equal to 94 64 for a neural network structure as 54 input layer nodes 216 hidden layer1 nodes 8 hidden layer2 nodes and 8 output layer nodes chemical engineering computing electronic noses neural nets pattern classification pattern matching chemical substance classification electronic noses pattern matching theorem artificial intelligence acetone benzene propanal butanol chloroform ethanol methane tetrahydrofuran neural network electronic noses chemical sensors intelligent sensors neural networks hardware pattern matching pattern recognition artificial intelligence humans ethanol electronic noses chemical substance classification neural network,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
197,0,"Accessory and main olfactory systems influences on predator odor-induced behavioral and endocrine stress responses in rats Exposures to predator odors are very effective methods to evoke a variety of stress responses in rodents. We have previously found that ferret odor exposure leads to changes in endocrine hormones (corticosterone and ACTH) and behavior. To distinguish the contributions of the main and accessory olfactory systems in these responses, studies were designed to interfere with these two systems either independently, or simultaneously. Male Sprague--Dawley rats were treated with 10% zinc sulfate (ZnSO4), which renders rodents anosmic (unable to smell) while leaving the accessory olfactory areas intact, or saline, in Experiment 1. In Experiment 2, the vomeronasal organs of rats were surgically removed (VNX) to block accessory olfactory processing, while leaving the main olfactory system intact. And in the third experiment both the main and accessory olfactory areas were disrupted by combining the two procedures in the same rats. Neither ZnSO4 treatment nor VNX alone reliably reduced the increased corticosterone response to ferret odor compared to strawberry odor, but in combination, they did. This suggests that processing through the main or the accessory olfactory system can elicit the endocrine stress response to ferret odor. VNX alone also did not affect the behavioral responses to the ferret odor. ZnSO4 treatment, alone and in combination with VNX, led to changes in behavior in response to both ferret and strawberry odor, making the behavioral results less clearly interpretable. Overall these studies suggest that both the main and accessory olfactory systems mediate the neuroendocrine response to predator odor. Acute stress, Corticosterone, Olfaction, Predator, Vomeronasal organ, Zinc sulfate",accessory and main olfactory systems influences on predator odor induced behavioral and endocrine stress responses in rats exposures to predator odors are very effective methods to evoke a variety of stress responses in rodents we have previously found that ferret odor exposure leads to changes in endocrine hormones corticosterone and acth and behavior to distinguish the contributions of the main and accessory olfactory systems in these responses studies were designed to interfere with these two systems either independently or simultaneously male sprague dawley rats were treated with 10 zinc sulfate znso4 which renders rodents anosmic unable to smell while leaving the accessory olfactory areas intact or saline in experiment 1 in experiment 2 the vomeronasal organs of rats were surgically removed vnx to block accessory olfactory processing while leaving the main olfactory system intact and in the third experiment both the main and accessory olfactory areas were disrupted by combining the two procedures in the same rats neither znso4 treatment nor vnx alone reliably reduced the increased corticosterone response to ferret odor compared to strawberry odor but in combination they did this suggests that processing through the main or the accessory olfactory system can elicit the endocrine stress response to ferret odor vnx alone also did not affect the behavioral responses to the ferret odor znso4 treatment alone and in combination with vnx led to changes in behavior in response to both ferret and strawberry odor making the behavioral results less clearly interpretable overall these studies suggest that both the main and accessory olfactory systems mediate the neuroendocrine response to predator odor acute stress corticosterone olfaction predator vomeronasal organ zinc sulfate,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
198,0,"Behavioral characterization of non-copulating male mice Non-copulating (NC) males are those animals that do not mate in spite of repeated testing with sexually receptive females. They have been observed in several species including rats and mice. The present experiment was designed to perform a detailed behavioral characterization of NC male mice. Thus, we evaluated their sexual incentive motivation for a sexually receptive female or a sexually active male, olfactory preference for volatile and non-volatile odors from females or males, and olfactory discrimination between female and male volatile odors and food related odors (milk versus vinegar). We compared the activity of the accessory olfactory system (AOS) in copulating (C) and NC males in response to estrous bedding using the induction of Fos-immunoreactivity (Fos-IR) as a measure of neuronal activation. We also determined if estradiol or dopamine treatment could induce sexual behavior in NC males. Finally, we compared the testis weight and the number of penile spines in C, NC, and gonadectomized males. In the sexual incentive motivation test C males spend significantly more time in the female incentive zone than in the male incentive zone. On the other hand, NC males spend the same amount of time in both incentive zones. In tests of olfactory preference, NC males spent less time investigating estrous odors than C males. As well, NC males discriminate urine from conspecifics but they spend less time smelling these odors than C males. In addition, no increase in Fos expression is observed in NC males when they are exposed to odors from estrous females. Our data also suggest that the deficits observed in NC males are not due to lower circulating levels of gonadal hormones, because estradiol supplementation does not induce sexual behavior in these animals, and their testis weight and the number of penile spines are normal. The results suggest that NC males are not sexually motivated by the receptive females and their odors. Non-copulating (NC), Sexual incentive motivation, Olfactory preference, Estradiol",behavioral characterization of non copulating male mice non copulating nc males are those animals that do not mate in spite of repeated testing with sexually receptive females they have been observed in several species including rats and mice the present experiment was designed to perform a detailed behavioral characterization of nc male mice thus we evaluated their sexual incentive motivation for a sexually receptive female or a sexually active male olfactory preference for volatile and non volatile odors from females or males and olfactory discrimination between female and male volatile odors and food related odors milk versus vinegar we compared the activity of the accessory olfactory system aos in copulating c and nc males in response to estrous bedding using the induction of fos immunoreactivity fos ir as a measure of neuronal activation we also determined if estradiol or dopamine treatment could induce sexual behavior in nc males finally we compared the testis weight and the number of penile spines in c nc and gonadectomized males in the sexual incentive motivation test c males spend significantly more time in the female incentive zone than in the male incentive zone on the other hand nc males spend the same amount of time in both incentive zones in tests of olfactory preference nc males spent less time investigating estrous odors than c males as well nc males discriminate urine from conspecifics but they spend less time smelling these odors than c males in addition no increase in fos expression is observed in nc males when they are exposed to odors from estrous females our data also suggest that the deficits observed in nc males are not due to lower circulating levels of gonadal hormones because estradiol supplementation does not induce sexual behavior in these animals and their testis weight and the number of penile spines are normal the results suggest that nc males are not sexually motivated by the receptive females and their odors non copulating nc sexual incentive motivation olfactory preference estradiol,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
199,0,"Hashing It out in Public: Common Failure Modes of DHT-based Anonymity Schemes We examine peer-to-peer anonymous communication systems that use Distributed Hash Table algorithms for relay selection. We show that common design flaws in these schemes lead to highly effective attacks against the anonymity provided by the schemes. These attacks stem from attacks on DHT routing, and are not mitigated by the well-known DHT security mechanisms due to a fundamental mismatch between the security requirements of DHT routing's put/get functionality and anonymous routing's relay selection functionality. Our attacks essentially allow an adversary that controls only a small fraction of the relays to function as a global active adversary. We apply these attacks in more detail to two schemes: Salsa and Cashmere. In the case of Salsa, we show that an attacker that controls 10% of the relays in a network of size 10,000 can compromise more than 80% of all completed circuits; and in the case of Cashmere, we show that an attacker that controls 20% of the relays in a network of size 64000 can compromise 42% of the circuits. anonymity, peer-to-peer networks, selective denial of service",hashing it out in public common failure modes of dht based anonymity schemes we examine peer to peer anonymous communication systems that use distributed hash table algorithms for relay selection we show that common design flaws in these schemes lead to highly effective attacks against the anonymity provided by the schemes these attacks stem from attacks on dht routing and are not mitigated by the well known dht security mechanisms due to a fundamental mismatch between the security requirements of dht routing s put get functionality and anonymous routing s relay selection functionality our attacks essentially allow an adversary that controls only a small fraction of the relays to function as a global active adversary we apply these attacks in more detail to two schemes salsa and cashmere in the case of salsa we show that an attacker that controls 10 of the relays in a network of size 10 000 can compromise more than 80 of all completed circuits and in the case of cashmere we show that an attacker that controls 20 of the relays in a network of size 64000 can compromise 42 of the circuits anonymity peer to peer networks selective denial of service,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
200,0,"A Study about the Life Cycle of Code Anomalies Software projects usually follow key architectural principles, such as modularity, high cohesion, low coupling, etc. However, during software evolution, sometimes developers introduce changes that are not compatible with these principles, called code anomalies. Some approaches aim at detecting and fixing code anomalies, but they miss a deeper discussion about the introduction patterns and life cycle of such code anomalies. In this paper we analyze several projects to understand the incidence of code anomalies and their life cycle. In addition, we correlate code anomalies with some project characteristics and with other code anomalies. For example, we could observe that Shotgun Surgery and God Method anomalies never happen together. Moreover, we observed that Shotgun Surgery, God Package, and Misplaced Class anomaly life cycles are closely correlated. software architecture, source code (software), misplaced class anomaly life cycles, god method anomaly, shotgun surgery anomaly, code anomaly life cycle, Software, Surgery, Computer architecture, Google, Electronic mail, Couplings, Nanoelectromechanical systems, code anomalies, Shotgun Surgery, God Method, God Package, Misplaced Class, Feature Envy",a study about the life cycle of code anomalies software projects usually follow key architectural principles such as modularity high cohesion low coupling etc however during software evolution sometimes developers introduce changes that are not compatible with these principles called code anomalies some approaches aim at detecting and fixing code anomalies but they miss a deeper discussion about the introduction patterns and life cycle of such code anomalies in this paper we analyze several projects to understand the incidence of code anomalies and their life cycle in addition we correlate code anomalies with some project characteristics and with other code anomalies for example we could observe that shotgun surgery and god method anomalies never happen together moreover we observed that shotgun surgery god package and misplaced class anomaly life cycles are closely correlated software architecture source code software misplaced class anomaly life cycles god method anomaly shotgun surgery anomaly code anomaly life cycle software surgery computer architecture google electronic mail couplings nanoelectromechanical systems code anomalies shotgun surgery god method god package misplaced class feature envy,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
201,0,"Characterizing and Detecting Anti-Patterns in the Logging Code Snippets of logging code are output statements (e.g., LOG.info or System.out.println) that developers insert into a software system. Although more logging code can provide more execution context of the system's behavior during runtime, it is undesirable to instrument the system with too much logging code due to maintenance overhead. Furthermore, excessive logging may cause unexpected side-effects like performance slow-down or high disk I/O bandwidth. Recent studies show that there are no well-defined coding guidelines for performing effective logging. Previous research on the logging code mainly tackles the problems of where-to-log and what-to-log. There are very few works trying to address the problem of how-to-log (developing and maintaining high-quality logging code). In this paper, we study the problem of how-to-log by characterizing and detecting the anti-patterns in the logging code. As the majority of the logging code is evolved together with the feature code, the remaining set of logging code changes usually contains the fixes to the anti-patterns. We have manually examined 352 pairs of independently changed logging code snippets from three well-maintenance open source systems: ActiveMQ, Hadoop and Maven. Our analysis has resulted in six different anti-patterns in the logging code. To demonstrate the value of our findings, we have encoded these anti-patterns into a static code analysis tool, LCAnalyzer. Case studies show that LCAnalyzer has an average recall of 95% and precision of 60% and can be used to automatically detect previously unknown anti-patterns in the source code. To gather feedback, we have filed 64 representative instances of the logging code anti-patterns from the most recent releases of ten open source software systems. Among them, 46 instances (72%) have already been accepted by their developers. data handling, parallel processing, program diagnostics, public domain software, software maintenance, source code (software), anti-pattern detection, anti-pattern characterization, system behavior, maintenance overhead, high disk I O bandwidth, logging code snippets, ActiveMQ, Hadoop, Maven, static code analysis tool, LCAnalyzer, source code, open source software systems, how-to-log problem, Tools, Open source software, Software systems, Runtime, Computer crashes, Data mining, anti-patterns, logging code, logging practices, empirical studies, software maintenance",characterizing and detecting anti patterns in the logging code snippets of logging code are output statements e g log info or system out println that developers insert into a software system although more logging code can provide more execution context of the system s behavior during runtime it is undesirable to instrument the system with too much logging code due to maintenance overhead furthermore excessive logging may cause unexpected side effects like performance slow down or high disk i o bandwidth recent studies show that there are no well defined coding guidelines for performing effective logging previous research on the logging code mainly tackles the problems of where to log and what to log there are very few works trying to address the problem of how to log developing and maintaining high quality logging code in this paper we study the problem of how to log by characterizing and detecting the anti patterns in the logging code as the majority of the logging code is evolved together with the feature code the remaining set of logging code changes usually contains the fixes to the anti patterns we have manually examined 352 pairs of independently changed logging code snippets from three well maintenance open source systems activemq hadoop and maven our analysis has resulted in six different anti patterns in the logging code to demonstrate the value of our findings we have encoded these anti patterns into a static code analysis tool lcanalyzer case studies show that lcanalyzer has an average recall of 95 and precision of 60 and can be used to automatically detect previously unknown anti patterns in the source code to gather feedback we have filed 64 representative instances of the logging code anti patterns from the most recent releases of ten open source software systems among them 46 instances 72 have already been accepted by their developers data handling parallel processing program diagnostics public domain software software maintenance source code software anti pattern detection anti pattern characterization system behavior maintenance overhead high disk i o bandwidth logging code snippets activemq hadoop maven static code analysis tool lcanalyzer source code open source software systems how to log problem tools open source software software systems runtime computer crashes data mining anti patterns logging code logging practices empirical studies software maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
202,0,"Ontological anti-patterns: empirically uncovered error-prone structures in ontology-driven conceptual models The construction of large-scale reference conceptual models is a complex engineering activity. To develop high-quality models, a modeler must have the support of expressive engineering tools such as theoretically well-founded modeling languages and methodologies, patterns and anti-patterns and automated supporting environments. This paper proposes a set of Ontological Anti-Patterns for Ontology-Driven Conceptual Modeling. These anti-patterns capture error-prone modeling decisions that can result in the creation of models that fail to exclude unintended model instances (representing unintended state of affairs) or forbid intended ones (representing intended states of affairs). The anti-patterns presented here have been empirically elicited through an approach of conceptual models validation via visual simulation. The paper also presents a series of refactoring plans for rectifying the models in which these anti-patterns occur. In addition, we present here a computational tool that is able to: automatically identify these anti-patterns in user's models, guide users in assessing their consequences, and generate corrections to these models by the automatic inclusion of OCL constraints implementing the proposed refactoring plans. Finally, the paper also presents an empirical study for assessing the harmfulness of each of the uncovered anti-patterns (i.e., the likelihood that its occurrence in a model entails unintended consequences) as well as the effectiveness of the proposed refactoring plans. Ontology-driven conceptual modeling, Ontological anti-patterns, OntoUML, UFO",ontological anti patterns empirically uncovered error prone structures in ontology driven conceptual models the construction of large scale reference conceptual models is a complex engineering activity to develop high quality models a modeler must have the support of expressive engineering tools such as theoretically well founded modeling languages and methodologies patterns and anti patterns and automated supporting environments this paper proposes a set of ontological anti patterns for ontology driven conceptual modeling these anti patterns capture error prone modeling decisions that can result in the creation of models that fail to exclude unintended model instances representing unintended state of affairs or forbid intended ones representing intended states of affairs the anti patterns presented here have been empirically elicited through an approach of conceptual models validation via visual simulation the paper also presents a series of refactoring plans for rectifying the models in which these anti patterns occur in addition we present here a computational tool that is able to automatically identify these anti patterns in user s models guide users in assessing their consequences and generate corrections to these models by the automatic inclusion of ocl constraints implementing the proposed refactoring plans finally the paper also presents an empirical study for assessing the harmfulness of each of the uncovered anti patterns i e the likelihood that its occurrence in a model entails unintended consequences as well as the effectiveness of the proposed refactoring plans ontology driven conceptual modeling ontological anti patterns ontouml ufo,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
203,0,"Good is Not Good Enough: Evaluating and Improving Software Architecture Software engineering has an increasing impact on the diverse products, services, and solutions offered by technology-oriented industries. For example, within SIEMENS AG over 60% of revenues depend on software. Consequently, failures in software development projects lead to significant costs. If software is so important, we need sustainable software architectures designed by well-educated and skilled software architects as backbone of high quality software systems. However, due to the complexity of problem and solution domains and the increased desiderata of customers, software systems cannot be created in a big bang approach. Instead, software architectures must be systematically designed and then implemented using piecemeal growth which implies that software architects need to incrementally and iteratively refine, assess, and improve a software system. Otherwise, wrong or inefficient design decisions will be hard and costly to detect and eliminate inevitably causing design erosion to creep in. Thus, Software Architecture Evaluation and Improvement play an important role in the development of sustainable software systems. But how can we seamlessly integrate Software Architecture and Improvement into the architecture design process? A systematic process for creating software architecture comprises among many other ingredients the (stepwise) clarification and prioritization of requirements, the incremental and iterative evolution of the software architecture driven by requirements and risks, Continuous quality assessment for assuring that the software system meets its internal and external qualities as well as its functional expectations. For continuous quality assessment Test-Driven Development and Design for Testability denote approaches that are applicable when the implementation is available. In order to assess the architecture itself, even in absence of a (full) implementation, qualitative and quantitative architecture assessment methods are available. For example, the experience-based industry review method applies a SWOT analysis to identify potential threats and weaknesses as well as potential means to resolve these issues. Architecture Analysis tools support software architects in this endeavor. But how can software architects improve the internal or external quality of the software system after they detected some architecture smells? It is essential to get rid of these issues by continuous software architecture improvement which exactly is the place where architecture refactoring, reengineering, and rewriting come in. software architecture assessment, software architecture improvement, software architecture refactoring",good is not good enough evaluating and improving software architecture software engineering has an increasing impact on the diverse products services and solutions offered by technology oriented industries for example within siemens ag over 60 of revenues depend on software consequently failures in software development projects lead to significant costs if software is so important we need sustainable software architectures designed by well educated and skilled software architects as backbone of high quality software systems however due to the complexity of problem and solution domains and the increased desiderata of customers software systems cannot be created in a big bang approach instead software architectures must be systematically designed and then implemented using piecemeal growth which implies that software architects need to incrementally and iteratively refine assess and improve a software system otherwise wrong or inefficient design decisions will be hard and costly to detect and eliminate inevitably causing design erosion to creep in thus software architecture evaluation and improvement play an important role in the development of sustainable software systems but how can we seamlessly integrate software architecture and improvement into the architecture design process a systematic process for creating software architecture comprises among many other ingredients the stepwise clarification and prioritization of requirements the incremental and iterative evolution of the software architecture driven by requirements and risks continuous quality assessment for assuring that the software system meets its internal and external qualities as well as its functional expectations for continuous quality assessment test driven development and design for testability denote approaches that are applicable when the implementation is available in order to assess the architecture itself even in absence of a full implementation qualitative and quantitative architecture assessment methods are available for example the experience based industry review method applies a swot analysis to identify potential threats and weaknesses as well as potential means to resolve these issues architecture analysis tools support software architects in this endeavor but how can software architects improve the internal or external quality of the software system after they detected some architecture smells it is essential to get rid of these issues by continuous software architecture improvement which exactly is the place where architecture refactoring reengineering and rewriting come in software architecture assessment software architecture improvement software architecture refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
204,0,"Does Refactoring Improve Software Structural Quality? A Longitudinal Study of 25 Projects Code smells in a program represent indications of structural quality problems, which can be addressed by software refactoring. Refactoring is widely practiced by developers, and considerable development effort has been invested in refactoring tooling support. There is an explicit assumption that software refactoring improves the structural quality of a program by reducing its density of code smells. However, little has been reported about whether and to what extent developers successfully remove code smells through refactoring. This paper reports a first longitudinal study intended to address this gap. We analyze how often the commonly-used refactoring types affect the density of 5 types of code smells along the version histories of 25 projects. Our findings are based on the analysis of 2,635 refactorings distributed in 11 different types. Surprisingly, 2,506 refactorings (95.1%) did not reduce or introduce code smells. Thus, these findings suggest that refactorings lead to smell reduction less often than what has been reported. According to our data, only 2.24% of refactoring changes removed code smells and 2.66% introduced new ones. Moreover, several smells induced by refactoring tended to live long, i.e., 146 days on average. These smells were only eventually removed when smelly elements started to exhibit poor structural quality and, as a consequence, started to be more costly to get rid of. Code Smells, Refactoring, Structural Quality",does refactoring improve software structural quality a longitudinal study of 25 projects code smells in a program represent indications of structural quality problems which can be addressed by software refactoring refactoring is widely practiced by developers and considerable development effort has been invested in refactoring tooling support there is an explicit assumption that software refactoring improves the structural quality of a program by reducing its density of code smells however little has been reported about whether and to what extent developers successfully remove code smells through refactoring this paper reports a first longitudinal study intended to address this gap we analyze how often the commonly used refactoring types affect the density of 5 types of code smells along the version histories of 25 projects our findings are based on the analysis of 2 635 refactorings distributed in 11 different types surprisingly 2 506 refactorings 95 1 did not reduce or introduce code smells thus these findings suggest that refactorings lead to smell reduction less often than what has been reported according to our data only 2 24 of refactoring changes removed code smells and 2 66 introduced new ones moreover several smells induced by refactoring tended to live long i e 146 days on average these smells were only eventually removed when smelly elements started to exhibit poor structural quality and as a consequence started to be more costly to get rid of code smells refactoring structural quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
205,0,"Development of a Learning Progression for the Particle Model of Matter Prior research indicates that one of the most difficult concepts for students to understand is that of the particle nature of matter. The How can I smell things from a distance? chemistry unit takes the approach of building students' ideas through the construction and revision of models. The purpose of this study is to describe the changes in students' understanding of the particle nature of matter as they were engaged in an eight-week model-based curriculum. One teacher and her two 6th-grade classes in a midwestern school district were the focus of the study. Data sources include pre- and posttests, students' artifacts, and video recordings of the curriculum enactment, including students' creation of models of various phenomena. Results from this study were used to help develop a learning progression for the particle nature of matter. []",development of a learning progression for the particle model of matter prior research indicates that one of the most difficult concepts for students to understand is that of the particle nature of matter the how can i smell things from a distance chemistry unit takes the approach of building students ideas through the construction and revision of models the purpose of this study is to describe the changes in students understanding of the particle nature of matter as they were engaged in an eight week model based curriculum one teacher and her two 6th grade classes in a midwestern school district were the focus of the study data sources include pre and posttests students artifacts and video recordings of the curriculum enactment including students creation of models of various phenomena results from this study were used to help develop a learning progression for the particle nature of matter,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
206,0,"An Empirical Study of the Impact of OCL Smells and Refactorings on the Understandability of OCL Specifications The Object Constraint Language (OCL) is a OMG standard that plays an important role in the elaboration of precise models. However, it is not hard to find models and metamodels containing overly complex OCL expressions. Refactoring is a technique that can be used in this context since its goal is to reduce complexity by incrementally improving the internal software quality. Indeed several refactorings have already been proposed to improve the quality of OCL expressions. This paper presents the results of an empirical study that investigates the impact of poor OCL constructs, also known as OCL Smells, and OCL refactorings on the understandability of OCL expressions. Current results show that most refactorings significantly improve the understandability of OCL specifications. []",an empirical study of the impact of ocl smells and refactorings on the understandability of ocl specifications the object constraint language ocl is a omg standard that plays an important role in the elaboration of precise models however it is not hard to find models and metamodels containing overly complex ocl expressions refactoring is a technique that can be used in this context since its goal is to reduce complexity by incrementally improving the internal software quality indeed several refactorings have already been proposed to improve the quality of ocl expressions this paper presents the results of an empirical study that investigates the impact of poor ocl constructs also known as ocl smells and ocl refactorings on the understandability of ocl expressions current results show that most refactorings significantly improve the understandability of ocl specifications,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
207,0,"Revealing Architecturally-relevant Flaws in Aspectual Decompositions Although aspect-oriented programming (AOP) aims to improve the software modularity, developers can unwittingly introduce code smells in their programs. Even though a few code smells for AOP have been reported in the literature, there is no evidence whether and how they occur in evolving software projects. There is also little knowledge on their actual impact on architecture degeneration, such as their correlation with architecturally-relevant flaws. Therefore, in this research we investigate which AOP smells occur in evolving software systems and how their (co-)occurrence are usually associated with architecturally-relevant flaws. The basic idea is to equip AOP developers with analysis techniques for the source code that exploit the architectural design information. architectural degeneration, aspect-oriented programming, code smells, exploratory study, software maintenance",revealing architecturally relevant flaws in aspectual decompositions although aspect oriented programming aop aims to improve the software modularity developers can unwittingly introduce code smells in their programs even though a few code smells for aop have been reported in the literature there is no evidence whether and how they occur in evolving software projects there is also little knowledge on their actual impact on architecture degeneration such as their correlation with architecturally relevant flaws therefore in this research we investigate which aop smells occur in evolving software systems and how their co occurrence are usually associated with architecturally relevant flaws the basic idea is to equip aop developers with analysis techniques for the source code that exploit the architectural design information architectural degeneration aspect oriented programming code smells exploratory study software maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
208,0,"A Catalogue of Lightweight Visualizations to Support Code Smell Inspection Preserving the integrity of software systems is essential in ensuring future product success. Commonly, companies allocate only a limited budget toward perfective maintenance and instead pressure developers to focus on implementing new features. Traditional techniques, such as code inspection, consume many staff resources and attention from developers. Metrics automate the process of checking for problems but produce voluminous, imprecise, and incongruent results. An opportunity exists for visualization to assist where automated measures have failed; however, current software visualization techniques only handle the voluminous aspect of data but fail to address imprecise and incongruent aspects. In this paper, we describe several techniques for visualizing possible defects reported by automated inspection tools. We propose a catalogue of lightweight visualizations that assist reviewers in weeding out false positives. We implemented the visualizations in a tool called NOSEPRINTS and present a case study on several commercial systems and open source applications in which we examined the impact of our tool on the inspection process. code inspection, code smells, lightweight visualization, refactoring",a catalogue of lightweight visualizations to support code smell inspection preserving the integrity of software systems is essential in ensuring future product success commonly companies allocate only a limited budget toward perfective maintenance and instead pressure developers to focus on implementing new features traditional techniques such as code inspection consume many staff resources and attention from developers metrics automate the process of checking for problems but produce voluminous imprecise and incongruent results an opportunity exists for visualization to assist where automated measures have failed however current software visualization techniques only handle the voluminous aspect of data but fail to address imprecise and incongruent aspects in this paper we describe several techniques for visualizing possible defects reported by automated inspection tools we propose a catalogue of lightweight visualizations that assist reviewers in weeding out false positives we implemented the visualizations in a tool called noseprints and present a case study on several commercial systems and open source applications in which we examined the impact of our tool on the inspection process code inspection code smells lightweight visualization refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
209,0,"Digital Taste and Smell Communication In this paper, we introduce a new technology, which allows people to share taste and smell sensations digitally with a remote person through existing networking technologies such as the Internet. By introducing this technology, we expect people to share their smell and taste experiences with their family and friends remotely. Sharing these senses are immensely beneficial since those are strongly associated with individual memories, emotions, and everyday experiences. As the initial step, we developed a control system, an actuator, which could digitally stimulate the sense of taste remotely. The system uses two approaches to stimulate taste sensations digitally: the electrical and thermal stimulations on tongue. Primary results suggested that sourness and saltiness are the main sensations that could be evoked through this device. Furthermore, this paper focuses on future aspects of such technology for remote smell actuation followed by applications and possibilities for further developments. control systems, smell, taste, user interfaces, virtual reality",digital taste and smell communication in this paper we introduce a new technology which allows people to share taste and smell sensations digitally with a remote person through existing networking technologies such as the internet by introducing this technology we expect people to share their smell and taste experiences with their family and friends remotely sharing these senses are immensely beneficial since those are strongly associated with individual memories emotions and everyday experiences as the initial step we developed a control system an actuator which could digitally stimulate the sense of taste remotely the system uses two approaches to stimulate taste sensations digitally the electrical and thermal stimulations on tongue primary results suggested that sourness and saltiness are the main sensations that could be evoked through this device furthermore this paper focuses on future aspects of such technology for remote smell actuation followed by applications and possibilities for further developments control systems smell taste user interfaces virtual reality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
210,0,"What if I Had No Smells? What would have happened if I did not have any code smell? This is an interesting question that no previous study, to the best of our knowledge, has tried to answer. In this paper, we present a method for implementing a what-if scenario analysis estimating the number of defective files in the absence of smells. Our industrial case study shows that 20% of the total defective files were likely avoidable by avoiding smells. Such estimation needs to be used with the due care though as it is based on a hypothetical history (i.e., zero number of smells and same process and product change characteristics). Specifically, the number of defective files could even increase for some types of smells. In addition, we note that in some circumstances, accepting code with smells might still be a good option for a company. software maintenance, software quality, code smell, total defective files, Tools, Maintenance engineering, Software, Logic gates, Estimation, History, Business, code smells, machine learning, software estimation, technical debt",what if i had no smells what would have happened if i did not have any code smell this is an interesting question that no previous study to the best of our knowledge has tried to answer in this paper we present a method for implementing a what if scenario analysis estimating the number of defective files in the absence of smells our industrial case study shows that 20 of the total defective files were likely avoidable by avoiding smells such estimation needs to be used with the due care though as it is based on a hypothetical history i e zero number of smells and same process and product change characteristics specifically the number of defective files could even increase for some types of smells in addition we note that in some circumstances accepting code with smells might still be a good option for a company software maintenance software quality code smell total defective files tools maintenance engineering software logic gates estimation history business code smells machine learning software estimation technical debt,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
211,0,"Pill Properties that Cause Dysphagia and Treatment Failure Background Pills (tablets and capsules) are widely used to administer prescription drugs or to take supplements such as vitamins. Unfortunately, little is known about how much effort it takes Americans to swallow these various pills. More specifically, it is not known to what extent hard-to-swallow pills might affect treatment outcomes (eg, interfering with adherence to prescribed medications or causing clinical complications). It is also unclear which properties (eg, size, shape, or surface texture) Americans prefer or reject for their pills. To learn more about these issues, we interviewed a small group of individuals. Methods We invited individuals in waiting rooms of our tertiary health care center to participate in structured interviews about their pill-taking habits and any problems they have swallowing pills. We inquired which pill properties they believed caused swallowing problems. Participants scored capsules and pills of representative size, shape, and texture for swallowing effort and reported their personal preferences. Results Of 100 successive individuals, 99 participants completed the interview (65% women, mean age = 41 years, range = 23-77 years). Eighty-three percent took pills daily (mean 4 pills/d; 56% of those pills were prescribed by providers). Fifty-four percent of participants replied yes to the question, Did you ever have to swallow a solid medication that was too difficult? Four percent recounted serious complications: 1% pill esophagitis, 1% pill impaction, and 2% stopped treatments (antibiotic and prenatal supplement) because they could not swallow the prescribed pills. Half of all participants routinely resorted to special techniques (eg, plenty of liquids or repeated or forceful swallows). Sixty-one percent of those having difficulties cited specific pill properties: 27% blamed size (20% of problems were caused by pills that were too large whereas 7% complained about pills that were too small to sense); 12% faulted rough surface texture; others cited sharp edges, odd shapes, or bad taste/smell. Extra-large pills were widely loathed, with 4 out of 5 participants preferring to take 3 or more medium-sized pills instead of a single jumbo pill. Conclusions Our survey results suggest that 4 out of 5 adult Americans take several pills daily, and do so without undue effort. It also suggests that half of today's Americans encounter pills that are hard to swallow. Up to 4% of our participants gave up on treatments because they could not swallow the prescribed pills. Up to 7% categorically rejected taking pills that are hard to swallow. Specific material properties are widely blamed for making pills hard to swallow; extra-large capsules and tablets are universally feared, whereas medium-sized pills with a smooth coating are widely preferred. Our findings suggest that health care providers could minimize treatment failures and complications by prescribing and dispensing pills that are easy to swallow. Industry and regulatory bodies may facilitate this by making swallowability an essential criterion in the design and licensing of oral medications. Such policies could lessen the burden of pill taking for Americans and improve the adherence with prescribed treatments. dysphagia, medical compounds, pill swallowing",pill properties that cause dysphagia and treatment failure background pills tablets and capsules are widely used to administer prescription drugs or to take supplements such as vitamins unfortunately little is known about how much effort it takes americans to swallow these various pills more specifically it is not known to what extent hard to swallow pills might affect treatment outcomes eg interfering with adherence to prescribed medications or causing clinical complications it is also unclear which properties eg size shape or surface texture americans prefer or reject for their pills to learn more about these issues we interviewed a small group of individuals methods we invited individuals in waiting rooms of our tertiary health care center to participate in structured interviews about their pill taking habits and any problems they have swallowing pills we inquired which pill properties they believed caused swallowing problems participants scored capsules and pills of representative size shape and texture for swallowing effort and reported their personal preferences results of 100 successive individuals 99 participants completed the interview 65 women mean age 41 years range 23 77 years eighty three percent took pills daily mean 4 pills d 56 of those pills were prescribed by providers fifty four percent of participants replied yes to the question did you ever have to swallow a solid medication that was too difficult four percent recounted serious complications 1 pill esophagitis 1 pill impaction and 2 stopped treatments antibiotic and prenatal supplement because they could not swallow the prescribed pills half of all participants routinely resorted to special techniques eg plenty of liquids or repeated or forceful swallows sixty one percent of those having difficulties cited specific pill properties 27 blamed size 20 of problems were caused by pills that were too large whereas 7 complained about pills that were too small to sense 12 faulted rough surface texture others cited sharp edges odd shapes or bad taste smell extra large pills were widely loathed with 4 out of 5 participants preferring to take 3 or more medium sized pills instead of a single jumbo pill conclusions our survey results suggest that 4 out of 5 adult americans take several pills daily and do so without undue effort it also suggests that half of today s americans encounter pills that are hard to swallow up to 4 of our participants gave up on treatments because they could not swallow the prescribed pills up to 7 categorically rejected taking pills that are hard to swallow specific material properties are widely blamed for making pills hard to swallow extra large capsules and tablets are universally feared whereas medium sized pills with a smooth coating are widely preferred our findings suggest that health care providers could minimize treatment failures and complications by prescribing and dispensing pills that are easy to swallow industry and regulatory bodies may facilitate this by making swallowability an essential criterion in the design and licensing of oral medications such policies could lessen the burden of pill taking for americans and improve the adherence with prescribed treatments dysphagia medical compounds pill swallowing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
212,0,"Effects of nitrogen fertilization on insect pests, their parasitoids, plant diseases and volatile organic compounds in Brassica napus Nitrogen (N) availability is a key factor influencing the yield of Brassica napus L. Thus, mineral fertilization is widely used to improve the quality and quantity of seeds. In this study, we conducted field experiments to determine the impact of nitrogen fertilization on B. napus pests, their parasitoids and plant diseases. The results showed that N treatment had an impact on the abundance of pollen beetles (Meligethes aeneus Fab.) and cabbage seed weevils (Ceutorhynchus obstrictus Marsh.) as well as dark spot disease (Alternaria brassicae (Berk.) Sacc.). Since pest abundance was not correlated with the flower and silique numbers, the feeding and oviposition sites, plant smell bouquets were analysed to determine potentially attractive or repellent volatile organic compounds. We detected 19 different compounds among which acetic acid and several lipoxygenase pathway products were emitted at higher levels from N-treated plants. Emission of a few other terpenoid compounds was correlated with the pest abundance in field conditions. Abundance of parasitoids of both pests was related to the host availability rather than to the fertilization treatment. Therefore, we suggest that plant chemical cues play a minor role in localization of hosts in close proximity to parasitoid. Dark spot disease levels decreased with increasing N availability, possibly reflecting enhanced emissions of acetic acid, a known antifungal volatile. This study demonstrates the effects of N fertilization on bud and flower volatile bouquets, which might play a role in B. napus insect pest host selection and in resistance to fungal plant diseases. Further studies are necessary to investigate the behavioural responses of insects to the changed volatile bouquets. N fertilization, VOC emission, , , , Winter oilseed rape",effects of nitrogen fertilization on insect pests their parasitoids plant diseases and volatile organic compounds in brassica napus nitrogen n availability is a key factor influencing the yield of brassica napus l thus mineral fertilization is widely used to improve the quality and quantity of seeds in this study we conducted field experiments to determine the impact of nitrogen fertilization on b napus pests their parasitoids and plant diseases the results showed that n treatment had an impact on the abundance of pollen beetles meligethes aeneus fab and cabbage seed weevils ceutorhynchus obstrictus marsh as well as dark spot disease alternaria brassicae berk sacc since pest abundance was not correlated with the flower and silique numbers the feeding and oviposition sites plant smell bouquets were analysed to determine potentially attractive or repellent volatile organic compounds we detected 19 different compounds among which acetic acid and several lipoxygenase pathway products were emitted at higher levels from n treated plants emission of a few other terpenoid compounds was correlated with the pest abundance in field conditions abundance of parasitoids of both pests was related to the host availability rather than to the fertilization treatment therefore we suggest that plant chemical cues play a minor role in localization of hosts in close proximity to parasitoid dark spot disease levels decreased with increasing n availability possibly reflecting enhanced emissions of acetic acid a known antifungal volatile this study demonstrates the effects of n fertilization on bud and flower volatile bouquets which might play a role in b napus insect pest host selection and in resistance to fungal plant diseases further studies are necessary to investigate the behavioural responses of insects to the changed volatile bouquets n fertilization voc emission winter oilseed rape,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
213,0,"Following human-given cues or not? Horses (Equus caballus) get smarter and change strategy in a delayed three choice task To date, horses have seemed capable of using human local enhancement cues only when the experimenter remains close to the reward, since they fail to understand the communicative meaning of the human as momentary local enhancement cue (when the human is not present at the moment of the animal's choice). This study was designed to analyse the ability of horses to understand, remember and use human-given cues in a delayed (10s) three-choice task. Twelve horses (experimental group) had to find a piece of carrot hidden under one of three overturned buckets after seeing the experimenter hide it. The results were then compared with those of a control group (twelve horses) that had to find the carrot using only the sense of smell or random attempts. At the beginning, the experimental horses made more correct choices at the first attempt, although they took more time to find the carrot. Later the same horses were less accurate but found the carrot in less time. This suggests that the value of the proximal momentary local enhancement cues became less critical. It seemed, in fact, that the experimental and control group had aligned their behaviour as the trials proceeded. Despite this similarity, in the second half of the trials, the experimental group tended to first approach the bucket where they had found the carrot in the immediately preceding trial. Our findings indicate that horses are capable of remembering the location of food hidden by the experimenter after a delay, by using the human positioned close to the target as valuable information. The same horses are also capable of changing their decision-making strategy by shifting from the accuracy inferred from human given cues to speed. Therefore, horses are able to decide whether or not to use human given-cues, depending on a speed-accuracy trade-off. , Human-given cues, Momentary local enhancement cue, Speed-accuracy trade-off, Behavioural plasticity, Memory",following human given cues or not horses equus caballus get smarter and change strategy in a delayed three choice task to date horses have seemed capable of using human local enhancement cues only when the experimenter remains close to the reward since they fail to understand the communicative meaning of the human as momentary local enhancement cue when the human is not present at the moment of the animal s choice this study was designed to analyse the ability of horses to understand remember and use human given cues in a delayed 10s three choice task twelve horses experimental group had to find a piece of carrot hidden under one of three overturned buckets after seeing the experimenter hide it the results were then compared with those of a control group twelve horses that had to find the carrot using only the sense of smell or random attempts at the beginning the experimental horses made more correct choices at the first attempt although they took more time to find the carrot later the same horses were less accurate but found the carrot in less time this suggests that the value of the proximal momentary local enhancement cues became less critical it seemed in fact that the experimental and control group had aligned their behaviour as the trials proceeded despite this similarity in the second half of the trials the experimental group tended to first approach the bucket where they had found the carrot in the immediately preceding trial our findings indicate that horses are capable of remembering the location of food hidden by the experimenter after a delay by using the human positioned close to the target as valuable information the same horses are also capable of changing their decision making strategy by shifting from the accuracy inferred from human given cues to speed therefore horses are able to decide whether or not to use human given cues depending on a speed accuracy trade off human given cues momentary local enhancement cue speed accuracy trade off behavioural plasticity memory,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
214,0,"Experimental study on the progressive collapse performance of RC frames with infill walls The interaction between the infill walls and the reinforced concrete (RC) frame members in the progressive collapse process was examined experimentally in this study. Two 1/3 scaled, four-bay, two-story RC frame specimens, one of which was featured without infill walls while the other with infill walls, were tested. The frame specimens were designed in such a way that the center column of the first story was missing, in order to simulate the failure of the structural component due to abnormal loads or design flaws. The frame specimens were quasi-statically pushed downward at the top of center column under displacement control to investigate the progressive collapse mechanism of the RC frames, with a focus on the effects of infill walls. Specifically, the physical quantities and phenomena of great interest in this study include the collapse resistance force and mechanism, strain variation and crack development in structural components, and local and global failure modes of the frames. The test results showed that the infill walls can provide alternative load paths for transferring the loads originally only supported by the beams, and thus, improve the collapse resistance capacity of the RC frame. The infill walls, however, may reduce the ductility of the RC frame and may change the failure mode of the frame. It is concluded that the infill walls may affect (i.e., either improve or impair) the performance of RC frames against progressive collapse in different aspects. Reinforced concrete frame, Progressive collapse performance, Experiment, Infill wall, Failure mode",experimental study on the progressive collapse performance of rc frames with infill walls the interaction between the infill walls and the reinforced concrete rc frame members in the progressive collapse process was examined experimentally in this study two 1 3 scaled four bay two story rc frame specimens one of which was featured without infill walls while the other with infill walls were tested the frame specimens were designed in such a way that the center column of the first story was missing in order to simulate the failure of the structural component due to abnormal loads or design flaws the frame specimens were quasi statically pushed downward at the top of center column under displacement control to investigate the progressive collapse mechanism of the rc frames with a focus on the effects of infill walls specifically the physical quantities and phenomena of great interest in this study include the collapse resistance force and mechanism strain variation and crack development in structural components and local and global failure modes of the frames the test results showed that the infill walls can provide alternative load paths for transferring the loads originally only supported by the beams and thus improve the collapse resistance capacity of the rc frame the infill walls however may reduce the ductility of the rc frame and may change the failure mode of the frame it is concluded that the infill walls may affect i e either improve or impair the performance of rc frames against progressive collapse in different aspects reinforced concrete frame progressive collapse performance experiment infill wall failure mode,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
215,0,"Unsteady characteristics of the dispersion process in the vicinity of a pig barn. Wind tunnel experiments and comparison with field data Two complementary methods, field experiments and physical modelling in a wind tunnel, have been used to investigate the dispersion of tracer-gas released from the ventilation system of a pig barn, under near-neutral stability conditions. In both cases, concentration fluctuations were measured and the deduced statistical results were compared. The choice of data processing applied to the time series of concentration was motivated by special issues in the assessment of odour annoyances: ``where, how often, how long and how strong does it smell?'' These features were described by the mean concentration distribution, the intermittency factor, the persistence and the 90-percentile. The good agreement between field and wind tunnel data confirmed the ability to replicate in wind tunnel the unsteady properties of a dispersion process, if the unsteady turbulent behaviour of the atmospheric boundary layer was properly modelled. A parametrical study of the influence on the dispersion process of the ratio between the exhaust velocity from the stack and the wind speed was then performed in wind tunnel. The fundamental outcome was that the near-field dispersion process under neutral stability conditions, despite the strong influence of the building wake, was for the most part driven by the meandering behaviour of the plume and not so much by the diffusion process. This study was also focused on the influence of the averaging time on the statistical results. The scatter generated by using dimensionless averaging times 200<Ta*<400 (used during field experiments) instead of Ta*→∞ (averaging time to ensure reproducible statistic results) was quantified in the wind tunnel. A degree of representativity of the results obtained from short-term samples, compared to fully converged statistical results was therefore assessed. Odour dispersion, Concentration fluctuations, Physical modelling, Averaging time, Intermittency, Persistence, 90-percentile",unsteady characteristics of the dispersion process in the vicinity of a pig barn wind tunnel experiments and comparison with field data two complementary methods field experiments and physical modelling in a wind tunnel have been used to investigate the dispersion of tracer gas released from the ventilation system of a pig barn under near neutral stability conditions in both cases concentration fluctuations were measured and the deduced statistical results were compared the choice of data processing applied to the time series of concentration was motivated by special issues in the assessment of odour annoyances where how often how long and how strong does it smell these features were described by the mean concentration distribution the intermittency factor the persistence and the 90 percentile the good agreement between field and wind tunnel data confirmed the ability to replicate in wind tunnel the unsteady properties of a dispersion process if the unsteady turbulent behaviour of the atmospheric boundary layer was properly modelled a parametrical study of the influence on the dispersion process of the ratio between the exhaust velocity from the stack and the wind speed was then performed in wind tunnel the fundamental outcome was that the near field dispersion process under neutral stability conditions despite the strong influence of the building wake was for the most part driven by the meandering behaviour of the plume and not so much by the diffusion process this study was also focused on the influence of the averaging time on the statistical results the scatter generated by using dimensionless averaging times 200 ta 400 used during field experiments instead of ta averaging time to ensure reproducible statistic results was quantified in the wind tunnel a degree of representativity of the results obtained from short term samples compared to fully converged statistical results was therefore assessed odour dispersion concentration fluctuations physical modelling averaging time intermittency persistence 90 percentile,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
216,0,"Refactoring Pipe-like Mashups for End-user Programmers Mashups are becoming increasingly popular as end users are able to easily access, manipulate, and compose data from many web sources. We have observed, however, that mashups tend to suffer from deficiencies that propagate as mashups are reused. To address these deficiencies, we would like to bring some of the benefits of software engineering techniques to the end users creating these programs. In this work, we focus on identifying code smells indicative of the deficiencies we observed in web mashups programmed in the popular Yahoo! Pipes environment. Through an empirical study, we explore the impact of those smells on end-user programmers and observe that users generally prefer mashups without smells. We then introduce refactorings targeting those smells, reducing the complexity of the mashup programs, increasing their abstraction, updating broken data sources and dated components, and standardizing their structures to fit the community development patterns. Our assessment of a large sample of mashups shows that smells are present in 81% of them and that the proposed refactorings can reduce the number of smelly mashups to 16%, illustrating the potential of refactoring to support the thousands of end users programming mashups. end user software engineering, refactoring, web mashups",refactoring pipe like mashups for end user programmers mashups are becoming increasingly popular as end users are able to easily access manipulate and compose data from many web sources we have observed however that mashups tend to suffer from deficiencies that propagate as mashups are reused to address these deficiencies we would like to bring some of the benefits of software engineering techniques to the end users creating these programs in this work we focus on identifying code smells indicative of the deficiencies we observed in web mashups programmed in the popular yahoo pipes environment through an empirical study we explore the impact of those smells on end user programmers and observe that users generally prefer mashups without smells we then introduce refactorings targeting those smells reducing the complexity of the mashup programs increasing their abstraction updating broken data sources and dated components and standardizing their structures to fit the community development patterns our assessment of a large sample of mashups shows that smells are present in 81 of them and that the proposed refactorings can reduce the number of smelly mashups to 16 illustrating the potential of refactoring to support the thousands of end users programming mashups end user software engineering refactoring web mashups,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
217,0,"An exploratory study on exception handling bugs in Java programs Most mainstream programming languages provide constructs to throw and to handle exceptions. However, several studies argue that exception handling code is usually of poor quality and that it is commonly neglected by developers. Moreover, it is said to be the least understood, documented, and tested part of the implementation of a system. Nevertheless, there are very few studies that analyze the actual exception handling bugs that occur in real software systems or that attempt to understand developers' perceptions of these bugs. In this work we present an exploratory study on exception handling bugs that employs two complementary approaches: a survey of 154 developers and an analysis of 220 exception handling bugs from the repositories of Eclipse and Tomcat. Only 27% of the respondents claimed that policies and standards for the implementation of error handling are part of the culture of their organizations. Moreover, in 70% of the organizations there are no specific tests for the exception handling code. Also, 61% of the respondents stated that no to little importance is given to the documentation of exception handling in the design phase of the projects with which they are involved. In addition, about 40% of the respondents consider the quality of exception handling code to be either good or very good and only 14% of the respondents consider it to be bad or very bad. Furthermore, the repository analysis has shown (with statistical significance) that exception handling bugs are ignored by developers less often than other bugs. We have also observed that while overly general catch blocks are a well-known bad smell related to exceptions, bugs stemming from these catch blocks are rare, even though many overly general catch blocks occur in the code. Furthermore, while developers often mention empty catch blocks as causes of bugs they have fixed in the past, we found very few bug reports caused by them. On top of that, empty catch blocks are frequently used as part of bug fixes, including fixes for exception handling bugs. Based on our findings, we propose a classification of exception handling bugs and their causes. The proposed classification can be used to assist in the design and implementation of test suites, to guide code inspections, or as a basis for static analysis tools. Exception handling, Bugs, Repository mining",an exploratory study on exception handling bugs in java programs most mainstream programming languages provide constructs to throw and to handle exceptions however several studies argue that exception handling code is usually of poor quality and that it is commonly neglected by developers moreover it is said to be the least understood documented and tested part of the implementation of a system nevertheless there are very few studies that analyze the actual exception handling bugs that occur in real software systems or that attempt to understand developers perceptions of these bugs in this work we present an exploratory study on exception handling bugs that employs two complementary approaches a survey of 154 developers and an analysis of 220 exception handling bugs from the repositories of eclipse and tomcat only 27 of the respondents claimed that policies and standards for the implementation of error handling are part of the culture of their organizations moreover in 70 of the organizations there are no specific tests for the exception handling code also 61 of the respondents stated that no to little importance is given to the documentation of exception handling in the design phase of the projects with which they are involved in addition about 40 of the respondents consider the quality of exception handling code to be either good or very good and only 14 of the respondents consider it to be bad or very bad furthermore the repository analysis has shown with statistical significance that exception handling bugs are ignored by developers less often than other bugs we have also observed that while overly general catch blocks are a well known bad smell related to exceptions bugs stemming from these catch blocks are rare even though many overly general catch blocks occur in the code furthermore while developers often mention empty catch blocks as causes of bugs they have fixed in the past we found very few bug reports caused by them on top of that empty catch blocks are frequently used as part of bug fixes including fixes for exception handling bugs based on our findings we propose a classification of exception handling bugs and their causes the proposed classification can be used to assist in the design and implementation of test suites to guide code inspections or as a basis for static analysis tools exception handling bugs repository mining,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
218,0,"Prioritizing Software Anomalies with Software Metrics and Architecture Blueprints: A Controlled Experiment According to recent studies, architecture degradation is to a large extent a consequence of the introduction of code anomalies as the system evolves. Many approaches have been proposed for detecting code anomalies, but none of them has been efficient on prioritizing code anomalies that represent real problems in the architecture design. In this sense, our work aims to investigate whether the prioritization of instances of three types of classical code anomalies, Divergent Change, God Class and Shotgun Surgery, can be improved when supported by architecture blueprints. These blueprints are informal models often available in software projects, and they are used to capture key architecture decisions. Moreover, we are also investigating what information may be useful in the design blueprints to help developers on prioritizing the most critical software anomalies. In many cases, developers indicated that it would be interesting the insertion of additional information on the blueprints in order to detect architecturally-relevant anomalies. architectural design, code anomaly, design blueprint, software metrics",prioritizing software anomalies with software metrics and architecture blueprints a controlled experiment according to recent studies architecture degradation is to a large extent a consequence of the introduction of code anomalies as the system evolves many approaches have been proposed for detecting code anomalies but none of them has been efficient on prioritizing code anomalies that represent real problems in the architecture design in this sense our work aims to investigate whether the prioritization of instances of three types of classical code anomalies divergent change god class and shotgun surgery can be improved when supported by architecture blueprints these blueprints are informal models often available in software projects and they are used to capture key architecture decisions moreover we are also investigating what information may be useful in the design blueprints to help developers on prioritizing the most critical software anomalies in many cases developers indicated that it would be interesting the insertion of additional information on the blueprints in order to detect architecturally relevant anomalies architectural design code anomaly design blueprint software metrics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
219,0,"The Back End is Only One Part of the Picture: Mobile-Aware Application Performance Monitoring and Problem Diagnosis The success of modern businesses relies on the quality of their supporting application systems. Continuous application performance management is mandatory to enable efficient problem detection, diagnosis, and resolution during production. In today's age of ubiquitous computing, large fractions of users access application systems from mobile devices, such as phones and tablets. For detecting, diagnosing, and resolving performance and availability problems, an end-to-end view, i.e., traceability of requests starting on the (mobile) clients' devices, is becoming increasingly important. In this paper, we propose an approach for end-to-end monitoring of applications from the users' mobile devices to the back end, and diagnosing root-causes of detected performance problems. We extend our previous work on diagnosing performance anti-patterns from execution traces by new metrics and rules. The evaluation of this work shows that our approach successfully detects and diagnoses performance anti-patterns in applications with iOS-based mobile clients. While there are threats to validity to our experiment, our research is a promising starting point for future work. application performance monitoring, iOS, performance anti-patterns",the back end is only one part of the picture mobile aware application performance monitoring and problem diagnosis the success of modern businesses relies on the quality of their supporting application systems continuous application performance management is mandatory to enable efficient problem detection diagnosis and resolution during production in today s age of ubiquitous computing large fractions of users access application systems from mobile devices such as phones and tablets for detecting diagnosing and resolving performance and availability problems an end to end view i e traceability of requests starting on the mobile clients devices is becoming increasingly important in this paper we propose an approach for end to end monitoring of applications from the users mobile devices to the back end and diagnosing root causes of detected performance problems we extend our previous work on diagnosing performance anti patterns from execution traces by new metrics and rules the evaluation of this work shows that our approach successfully detects and diagnoses performance anti patterns in applications with ios based mobile clients while there are threats to validity to our experiment our research is a promising starting point for future work application performance monitoring ios performance anti patterns,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
220,0,"Using Concept Analysis to Detect Co-change Patterns Software systems need to change over time to cope with new requirements, and due to design decisions, the changes happen to crosscut the system's structure. Understanding how changes appear in the system can reveal hidden dependencies between different entities of the system. We propose the usage of concept analysis to identify groups of entities that change in the same way and in the same time. We apply our approach at different levels of abstraction (i.e., method, class, package) and we detect fine grained changes (i.e., statements were added in a class, but no method was added there). Concept analysis is a technique that identifies entities that have the same properties, but it requires manual inspection due to the large number of candidates it detects. We propose a heuristic that dramatically eliminate the false positives. We apply our approach on two case studies and we show how we can identify hidden dependencies and detect bad smells. co-change analysis, concept analysis, evolution analysis",using concept analysis to detect co change patterns software systems need to change over time to cope with new requirements and due to design decisions the changes happen to crosscut the system s structure understanding how changes appear in the system can reveal hidden dependencies between different entities of the system we propose the usage of concept analysis to identify groups of entities that change in the same way and in the same time we apply our approach at different levels of abstraction i e method class package and we detect fine grained changes i e statements were added in a class but no method was added there concept analysis is a technique that identifies entities that have the same properties but it requires manual inspection due to the large number of candidates it detects we propose a heuristic that dramatically eliminate the false positives we apply our approach on two case studies and we show how we can identify hidden dependencies and detect bad smells co change analysis concept analysis evolution analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
221,0,"Ownership, Filters and Crossing Handlers: Flexible Ownership in Dynamic Languages Sharing mutable objects can result in broken invariants, exposure of internal details, and other subtle bugs. To prevent such issues, it is important to control accessibility and aliasing of objects. Dynamic Ownership is an effective way to do so, but its owner-as-dominator discipline is too restrictive: objects are either accessible or not. We propose in this paper to control accessibility and aliasing with more flexibility using two mechanisms, filters and crossing handlers. We demonstrate the benefits of the flexibility offered by these mechanisms, and report on the adaptation of a Smalltalk web server with our approach. We conclude that our variant of dynamic ownership is flexible enough to accommodate an existing design, while at the same time constraining it enough to highlight design anomalies. encapsulation, ownership",ownership filters and crossing handlers flexible ownership in dynamic languages sharing mutable objects can result in broken invariants exposure of internal details and other subtle bugs to prevent such issues it is important to control accessibility and aliasing of objects dynamic ownership is an effective way to do so but its owner as dominator discipline is too restrictive objects are either accessible or not we propose in this paper to control accessibility and aliasing with more flexibility using two mechanisms filters and crossing handlers we demonstrate the benefits of the flexibility offered by these mechanisms and report on the adaptation of a smalltalk web server with our approach we conclude that our variant of dynamic ownership is flexible enough to accommodate an existing design while at the same time constraining it enough to highlight design anomalies encapsulation ownership,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
222,0,"Calorimetric investigations of the pollination biology of the thermogenic inflorescences of the dragon lily (Dracunculus vulgaris) and its pollinator (Protaetia cretica) on Crete This paper concerns thermometric and direct and indirect investigations of the heat produced by the thermogenic dragon lily (Dracunculus vulgaris) and its main pollinating beetle Protaetia (formerly named Potosia) cretica. The experiments were performed on scented and scentless populations at Panormo, Therisos and Lassithi on the North coast of Crete in the springs of 2007 and 2008. D. vulgaris inflorescences consist of a large spike (spadix) surrounded by a bract (spathe) that forms a floral chamber containing male and female florets, produce a powerful putrid scent and show a triphasic pattern of thermogenesis. The pattern began with a weak heating by the male florets during the night before opening, followed by appendix heating on the next day associated with scent production, and a more powerful male thermogenesis on the next night associated with insects trapped inside. Mass-specific thermogenesis of the scentless variety was identical to that in scented ones, but different insects were attracted. Beetles with a mean weight of 700mg show heat production rates around 5mW or 7mWg−1 at 25$ ^\circ$C. Discontinuous gas exchange cycles (DGCs) were observed calorimetrically at and below 24$ ^\circ$C, significantly depending in amplitude and frequency on the experimental temperature. Beetle metabolism, Discontinuous gas exchange cycles, Floral scent, Plant metabolism, Thermogenic flowers",calorimetric investigations of the pollination biology of the thermogenic inflorescences of the dragon lily dracunculus vulgaris and its pollinator protaetia cretica on crete this paper concerns thermometric and direct and indirect investigations of the heat produced by the thermogenic dragon lily dracunculus vulgaris and its main pollinating beetle protaetia formerly named potosia cretica the experiments were performed on scented and scentless populations at panormo therisos and lassithi on the north coast of crete in the springs of 2007 and 2008 d vulgaris inflorescences consist of a large spike spadix surrounded by a bract spathe that forms a floral chamber containing male and female florets produce a powerful putrid scent and show a triphasic pattern of thermogenesis the pattern began with a weak heating by the male florets during the night before opening followed by appendix heating on the next day associated with scent production and a more powerful male thermogenesis on the next night associated with insects trapped inside mass specific thermogenesis of the scentless variety was identical to that in scented ones but different insects were attracted beetles with a mean weight of 700mg show heat production rates around 5mw or 7mwg 1 at 25 circ c discontinuous gas exchange cycles dgcs were observed calorimetrically at and below 24 circ c significantly depending in amplitude and frequency on the experimental temperature beetle metabolism discontinuous gas exchange cycles floral scent plant metabolism thermogenic flowers,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
223,0,"Olfactory signal processing Olfaction, the sense of smell, has received scant attention from a signal processing perspective in comparison to audition and vision. In this paper, we develop a signal processing paradigm for olfactory signals based on new scientific discoveries including the psychophysics concept of olfactory white. We describe a framework for predicting the perception of odorant compounds from their physicochemical features and use the prediction as a foundation for several downstream processing tasks. We detail formulations for odor cancellation and food steganography, and provide real-world empirical examples for the two tasks. We also discuss adaptive filtering and other olfactory signal processing tasks at a high level. Adaptive filtering, Food steganography, Noise cancellation, Odor cancellation, Perception, Structured sparsity",olfactory signal processing olfaction the sense of smell has received scant attention from a signal processing perspective in comparison to audition and vision in this paper we develop a signal processing paradigm for olfactory signals based on new scientific discoveries including the psychophysics concept of olfactory white we describe a framework for predicting the perception of odorant compounds from their physicochemical features and use the prediction as a foundation for several downstream processing tasks we detail formulations for odor cancellation and food steganography and provide real world empirical examples for the two tasks we also discuss adaptive filtering and other olfactory signal processing tasks at a high level adaptive filtering food steganography noise cancellation odor cancellation perception structured sparsity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
224,0,"Static Analysis of Deterministic Negotiations Negotiation diagrams are a model of concurrent computation akin to workflow Petri nets. Deterministic negotiation diagrams, equivalent to the much studied and used free-choice workflow Petri nets, are surprisingly amenable to verification. Soundness (a property close to deadlock-freedom) can be decided in Ptime. Further, other fundamental questions like computing summaries or the expected cost, can also be solved in Ptime for sound deterministic negotiation diagrams, while they are PSPACE-complete in the general case. In this paper we generalize and explain these results. We extend the classical ""meet-over-all-paths"" (MOP) formulation of static analysis problems to our concurrent setting, and introduce Mazurkiewicz-invariant analysis problems, which encompass the questions above and new ones. We show that any Mazurkiewicz-invariant analysis problem can be solved in Ptime for sound deterministic negotiations whenever it is in Ptime for sequential flow-graphs---even though the flow-graph of a deterministic negotiation diagram can be exponentially larger than the diagram itself. This gives a common explanation to the low-complexity of all the analysis questions studied so far. Finally, we show that classical gen/kill analyses are also an instance of our framework, and obtain a Ptime algorithm for detecting anti-patterns in free-choice workflow Petri nets. Our result is based on a novel decomposition theorem, of independent interest, showing that sound deterministic negotiation diagrams can be hierarchically decomposed into (possibly overlapping) smaller sound diagrams. []",static analysis of deterministic negotiations negotiation diagrams are a model of concurrent computation akin to workflow petri nets deterministic negotiation diagrams equivalent to the much studied and used free choice workflow petri nets are surprisingly amenable to verification soundness a property close to deadlock freedom can be decided in ptime further other fundamental questions like computing summaries or the expected cost can also be solved in ptime for sound deterministic negotiation diagrams while they are pspace complete in the general case in this paper we generalize and explain these results we extend the classical meet over all paths mop formulation of static analysis problems to our concurrent setting and introduce mazurkiewicz invariant analysis problems which encompass the questions above and new ones we show that any mazurkiewicz invariant analysis problem can be solved in ptime for sound deterministic negotiations whenever it is in ptime for sequential flow graphs even though the flow graph of a deterministic negotiation diagram can be exponentially larger than the diagram itself this gives a common explanation to the low complexity of all the analysis questions studied so far finally we show that classical gen kill analyses are also an instance of our framework and obtain a ptime algorithm for detecting anti patterns in free choice workflow petri nets our result is based on a novel decomposition theorem of independent interest showing that sound deterministic negotiation diagrams can be hierarchically decomposed into possibly overlapping smaller sound diagrams,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
225,0,"Understanding and attitude regarding the shelf life labels and dates on pre-packed food products by Belgian consumers Based on an on-line survey using questionnaires, information on Belgian consumers (n = 907) regarding their understanding and attitude towards shelf life labels and dates was collected. 80.1% of the respondents were familiar with the terminology of the label use by and best before while 69.6% indicated to know the difference between the meaning of the two labels. Judging edibility of food products at home occurs mainly by a combination of checking visually and smelling (82.5%), followed by looking at the shelf life date (67.5%) or tasting (50.4%). About half of the consumers is aware of and appreciates the difference between the two labels during this judgment. Most of the consumers interpret shelf life labels and dates with some flexibility, with variation depending upon the type of food product under consideration. Overall, the share of consumers willing to eat expired refrigerated products was lower than for expired products stored at ambient temperature: 19.1% for refrigerated raw products (e.g. meat and fish); 34.7% for refrigerated ready-to-eat products (e.g. deli-meat, cheese products, smoked fish); 61.0% for canned products (e.g. conserves) and drinks (e.g. beer) and lastly 69.3% for other products generally stored at ambient temperature (e.g. bread, unopened UHT milk, chocolate, cereals). Differences linked to age and gender are discussed. The suboptimal understanding and application of the EU date label framework by consumers may lead on the one hand to increased food disease burden by consuming certain expired use by products allowing growth of pathogens. On the other hand discarding food at the shelf life data in case of a best before date contributes to food waste by consumers. A better understanding of the shelf life labels use by (referring to food safety) and best before dates (referring to food quality) by consumers should be promoted. Consumer survey, Shelf life labels, , , Food safety, Food waste",understanding and attitude regarding the shelf life labels and dates on pre packed food products by belgian consumers based on an on line survey using questionnaires information on belgian consumers n 907 regarding their understanding and attitude towards shelf life labels and dates was collected 80 1 of the respondents were familiar with the terminology of the label use by and best before while 69 6 indicated to know the difference between the meaning of the two labels judging edibility of food products at home occurs mainly by a combination of checking visually and smelling 82 5 followed by looking at the shelf life date 67 5 or tasting 50 4 about half of the consumers is aware of and appreciates the difference between the two labels during this judgment most of the consumers interpret shelf life labels and dates with some flexibility with variation depending upon the type of food product under consideration overall the share of consumers willing to eat expired refrigerated products was lower than for expired products stored at ambient temperature 19 1 for refrigerated raw products e g meat and fish 34 7 for refrigerated ready to eat products e g deli meat cheese products smoked fish 61 0 for canned products e g conserves and drinks e g beer and lastly 69 3 for other products generally stored at ambient temperature e g bread unopened uht milk chocolate cereals differences linked to age and gender are discussed the suboptimal understanding and application of the eu date label framework by consumers may lead on the one hand to increased food disease burden by consuming certain expired use by products allowing growth of pathogens on the other hand discarding food at the shelf life data in case of a best before date contributes to food waste by consumers a better understanding of the shelf life labels use by referring to food safety and best before dates referring to food quality by consumers should be promoted consumer survey shelf life labels food safety food waste,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
226,0,"Valuing ecosystem services across water bodies: Results from a discrete choice experiment As demands on the environment and associated ecosystem services increase, the need for a more integrated approach to managing the exploitation of these natural resources also increases. This is particularly true for the alternative types of water bodies such as a sea, river and/or a lake. The purpose of this paper is to explore the preferences of residents in the Republic of Ireland for a number of ecosystem services provided by Irish water bodies. In particular the paper examines whether, and how, preferences for the same ecosystem services differ when the public is asked to consider the alternative water body types (sea, river and lake). This is relevant as the ecosystem services' economic benefits are not necessarily uniform across water bodies, a factor that has not been explored in detail previously. Ecosystem services, Water bodies, Non-market valuation, Willingness to pay",valuing ecosystem services across water bodies results from a discrete choice experiment as demands on the environment and associated ecosystem services increase the need for a more integrated approach to managing the exploitation of these natural resources also increases this is particularly true for the alternative types of water bodies such as a sea river and or a lake the purpose of this paper is to explore the preferences of residents in the republic of ireland for a number of ecosystem services provided by irish water bodies in particular the paper examines whether and how preferences for the same ecosystem services differ when the public is asked to consider the alternative water body types sea river and lake this is relevant as the ecosystem services economic benefits are not necessarily uniform across water bodies a factor that has not been explored in detail previously ecosystem services water bodies non market valuation willingness to pay,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
227,0,"Automatically detecting architecturally-relevant code anomalies Software architecture degradation is a longstanding problem in software engineering. Previous studies have shown that certain code anomalies - or patterns of code anomalies - are likely to be harmful to architecture design, although their identification is far from trivial. This study presents a system for not only detecting architecturally-relevant code anomalies, but also helping developers to prioritize their removal by ranking them. We detect code anomaly patterns based on static analysis that also exploit architecture information. program diagnostics, software architecture, software development management, software maintenance, software architecture, software engineering, software developement, code anomaly pattern detection, static analysis, Computer architecture, Degradation, Surgery, Informatics, Software engineering, Complexity theory, Recommender systems, code anomaly, architectural problem, refactoring",automatically detecting architecturally relevant code anomalies software architecture degradation is a longstanding problem in software engineering previous studies have shown that certain code anomalies or patterns of code anomalies are likely to be harmful to architecture design although their identification is far from trivial this study presents a system for not only detecting architecturally relevant code anomalies but also helping developers to prioritize their removal by ranking them we detect code anomaly patterns based on static analysis that also exploit architecture information program diagnostics software architecture software development management software maintenance software architecture software engineering software developement code anomaly pattern detection static analysis computer architecture degradation surgery informatics software engineering complexity theory recommender systems code anomaly architectural problem refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
228,0,"Thinking with their trunks: elephants use smell but not sound to locate food and exclude nonrewarding alternatives The two-way object choice paradigm has been used extensively in studies of animal cognition. The paradigm involves presenting two options, one rewarding and one nonrewarding, to a subject and allowing it to make a choice between the two, potentially by exploiting specific cues provided by the experimenter. Using the paradigm, we tested first whether Asian elephants, Elephas maximus, could use auditory and/or olfactory cues to find food. While elephants were unable to locate hidden food by following an auditory cue, they were capable of finding food when the cue was olfactory. The second part of the study involved providing the subjects with only olfactory information about one option before presenting them with a choice between two. In trials in which subjects were allowed to investigate only the nonrewarding option, they made choices by exclusion, either inferring the location of the rewarding option or simply avoiding the nonrewarding one. Elephants thus relied on olfaction to locate food and to exclude nonrewarding food locations, but failed to use auditory information (when it was the only cue presented) to do the same. This study represents important evidence of elephants using their sense of smell in a cognitive task. acoustics, choice by exclusion, discrimination, elephant, inference, olfaction, two-way object choice",thinking with their trunks elephants use smell but not sound to locate food and exclude nonrewarding alternatives the two way object choice paradigm has been used extensively in studies of animal cognition the paradigm involves presenting two options one rewarding and one nonrewarding to a subject and allowing it to make a choice between the two potentially by exploiting specific cues provided by the experimenter using the paradigm we tested first whether asian elephants elephas maximus could use auditory and or olfactory cues to find food while elephants were unable to locate hidden food by following an auditory cue they were capable of finding food when the cue was olfactory the second part of the study involved providing the subjects with only olfactory information about one option before presenting them with a choice between two in trials in which subjects were allowed to investigate only the nonrewarding option they made choices by exclusion either inferring the location of the rewarding option or simply avoiding the nonrewarding one elephants thus relied on olfaction to locate food and to exclude nonrewarding food locations but failed to use auditory information when it was the only cue presented to do the same this study represents important evidence of elephants using their sense of smell in a cognitive task acoustics choice by exclusion discrimination elephant inference olfaction two way object choice,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
229,0,"Can odours acquire fat-like properties? Odours can acquire taste-like properties via simultaneous pairing in the mouth with tastants like sucrose. The experiment reported here sought to test whether qualities other than taste may also be acquired. Participants received pairings between odour A and low-fat unsweetened milk (LFUN), odour B and low-fat sweetened milk (LFSW), odour C and high-fat unsweetened milk (HFUN) and odour D and high-fat sweetened milk (HFSW). On test, participants reported that odours paired with milks perceived as being fattier (i.e. LFSW, HFUN, HFSW) were judged to smell fattier than they did prior to conditioning. In a further test, participants were asked to sample each of the four odours in a slightly fatty-sweet milk target. Odours previously paired with high-fat milks enhanced perceived fattiness of the target, whilst odours previously paired with sweetened milks enhanced perceived sweetness. These results were not well accounted for by participants' explicit knowledge of the odour-milk pairings and suggest that fat-like qualities may be acquired. Odour, Associative learning, Cross-modal learning, Flavour",can odours acquire fat like properties odours can acquire taste like properties via simultaneous pairing in the mouth with tastants like sucrose the experiment reported here sought to test whether qualities other than taste may also be acquired participants received pairings between odour a and low fat unsweetened milk lfun odour b and low fat sweetened milk lfsw odour c and high fat unsweetened milk hfun and odour d and high fat sweetened milk hfsw on test participants reported that odours paired with milks perceived as being fattier i e lfsw hfun hfsw were judged to smell fattier than they did prior to conditioning in a further test participants were asked to sample each of the four odours in a slightly fatty sweet milk target odours previously paired with high fat milks enhanced perceived fattiness of the target whilst odours previously paired with sweetened milks enhanced perceived sweetness these results were not well accounted for by participants explicit knowledge of the odour milk pairings and suggest that fat like qualities may be acquired odour associative learning cross modal learning flavour,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
230,0,"Stress-associated changes in the steady-state expression of latent Epstein--Barr virus: Implications for chronic fatigue syndrome and cancer Antibodies to several Epstein--Barr virus (EBV)-encoded enzymes are observed in patients with different EBV-associated diseases. The reason for these antibody patterns and the role these proteins might play in the pathophysiology of disease, separate from their role in virus replication, is unknown. In this series of studies, we found that purified EBV deoxyuridine triphosphate nucleotidohydrolase (dUTPase) can inhibit the replication of human peripheral blood mononuclear cells in vitro and upregulate the production of TNF-α, IL-1β, IL-6, IL-8, and IL-10. It also enhanced the ability of natural killer cells to lyse target cells. The EBV dUTPase also significantly inhibited the replication of mitogen-stimulated lymphocytes and the synthesis of IFN-γ by cells isolated from lymph nodes and spleens obtained from mice inoculated with the protein. It also produced sickness behaviors known to be induced by some of the cytokines that were studied in the in vitro experiments. These symptoms include an increase in body temperature, a decrease in body mass and in physical activity. The data provide a new perspective on how an early nonstructural EBV-encoded protein can cause immune dysregulation and produce clinical symptoms observed in patients with chronic fatigue syndrome (CFS) separate from its role in virus replication and may serve as a new approach to help identify one of the etiological agents for CFS. The data also provide additional insight into the pathophysiology of EBV infection, inflammation, and cancer. EBV, Viral latency, Chronic fatigue syndrome, Cancer, dUTPase, Stress, Immune dysregulation",stress associated changes in the steady state expression of latent epstein barr virus implications for chronic fatigue syndrome and cancer antibodies to several epstein barr virus ebv encoded enzymes are observed in patients with different ebv associated diseases the reason for these antibody patterns and the role these proteins might play in the pathophysiology of disease separate from their role in virus replication is unknown in this series of studies we found that purified ebv deoxyuridine triphosphate nucleotidohydrolase dutpase can inhibit the replication of human peripheral blood mononuclear cells in vitro and upregulate the production of tnf il 1 il 6 il 8 and il 10 it also enhanced the ability of natural killer cells to lyse target cells the ebv dutpase also significantly inhibited the replication of mitogen stimulated lymphocytes and the synthesis of ifn by cells isolated from lymph nodes and spleens obtained from mice inoculated with the protein it also produced sickness behaviors known to be induced by some of the cytokines that were studied in the in vitro experiments these symptoms include an increase in body temperature a decrease in body mass and in physical activity the data provide a new perspective on how an early nonstructural ebv encoded protein can cause immune dysregulation and produce clinical symptoms observed in patients with chronic fatigue syndrome cfs separate from its role in virus replication and may serve as a new approach to help identify one of the etiological agents for cfs the data also provide additional insight into the pathophysiology of ebv infection inflammation and cancer ebv viral latency chronic fatigue syndrome cancer dutpase stress immune dysregulation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
231,0,"A Comprehensive Analysis of Common Copy-Number Variations in the Human Genome Segmental copy-number variations (CNVs) in the human genome are associated with developmental disorders and susceptibility to diseases. More importantly, CNVs may represent a major genetic component of our phenotypic diversity. In this study, using a whole-genome array comparative genomic hybridization assay, we identified 3,654 autosomal segmental CNVs, 800 of which appeared at a frequency of at least 3%. Of these frequent CNVs, 77% are novel. In the 95 individuals analyzed, the two most diverse genomes differed by at least 9 Mb in size or varied by at least 266 loci in content. Approximately 68% of the 800 polymorphic regions overlap with genes, which may reflect human diversity in senses (smell, hearing, taste, and sight), rhesus phenotype, metabolism, and disease susceptibility. Intriguingly, 14 polymorphic regions harbor 21 of the known human microRNAs, raising the possibility of the contribution of microRNAs to phenotypic diversity in humans. This in-depth survey of CNVs across the human genome provides a valuable baseline for studies involving human genetics. []",a comprehensive analysis of common copy number variations in the human genome segmental copy number variations cnvs in the human genome are associated with developmental disorders and susceptibility to diseases more importantly cnvs may represent a major genetic component of our phenotypic diversity in this study using a whole genome array comparative genomic hybridization assay we identified 3 654 autosomal segmental cnvs 800 of which appeared at a frequency of at least 3 of these frequent cnvs 77 are novel in the 95 individuals analyzed the two most diverse genomes differed by at least 9 mb in size or varied by at least 266 loci in content approximately 68 of the 800 polymorphic regions overlap with genes which may reflect human diversity in senses smell hearing taste and sight rhesus phenotype metabolism and disease susceptibility intriguingly 14 polymorphic regions harbor 21 of the known human micrornas raising the possibility of the contribution of micrornas to phenotypic diversity in humans this in depth survey of cnvs across the human genome provides a valuable baseline for studies involving human genetics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
232,0,"Exploring Multiple Modalities for Selective Rendering of Virtual Environments The cross-modal interaction between vision and other senses is a key part of how we perceive the real world. Significant stimulation to hearing, sense of smell, taste or touch can reduce the cognitive resources the brain is able to allocate to sight, and thus limit what the Human Visual System (HVS) can actually perceive at that moment. Selective rendering is able to exploit such knowledge of the HVS, to render those parts of a virtual environment a viewer is attending to at a high quality and the rest of the scene at a much lower quality, and thus at a substantially reduced rendering time, without the viewer being aware of this quality difference. This paper investigates how the presence of the modalities of sound, smell and ambient temperature in a virtual environment significantly affects a viewer's ability to perceive the quality of the graphics used for that environment. Experiments were run with a total of 356 participants to determine the graphics quality thresholds across the different cross-modal interactions. The results revealed a significant effect of strong perfume, high temperature and audio noise on perceived rendering quality. Under given conditions, this particular combination of modalities can be thus exploited when rendering virtual environments, to substantially reduce rendering time without any loss in the user's perception of delivered visual quality. Ambient temperature, Cross-modal, High-fidelity rendering, Olfaction, Selective rendering, Virtual Reality",exploring multiple modalities for selective rendering of virtual environments the cross modal interaction between vision and other senses is a key part of how we perceive the real world significant stimulation to hearing sense of smell taste or touch can reduce the cognitive resources the brain is able to allocate to sight and thus limit what the human visual system hvs can actually perceive at that moment selective rendering is able to exploit such knowledge of the hvs to render those parts of a virtual environment a viewer is attending to at a high quality and the rest of the scene at a much lower quality and thus at a substantially reduced rendering time without the viewer being aware of this quality difference this paper investigates how the presence of the modalities of sound smell and ambient temperature in a virtual environment significantly affects a viewer s ability to perceive the quality of the graphics used for that environment experiments were run with a total of 356 participants to determine the graphics quality thresholds across the different cross modal interactions the results revealed a significant effect of strong perfume high temperature and audio noise on perceived rendering quality under given conditions this particular combination of modalities can be thus exploited when rendering virtual environments to substantially reduce rendering time without any loss in the user s perception of delivered visual quality ambient temperature cross modal high fidelity rendering olfaction selective rendering virtual reality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
233,0,"A case study in object-oriented patterns identified during manual refactoring Software design patterns are often-repeated implementations that have been identified and cataloged. These are commonly seen as useful and good patterns to implement. Occasionally the term ``anti-pattern'' has been used to identify less-useful patterns that also appear regularly. The exact definition of an anti-pattern is somewhat subjective, and the term has even been applied to some recognized design patterns. This paper discusses four manual refactoring case studies where patterns were discovered and cataloged. Evidence observed in the source code is used to infer how these patterns evolved. Based on these findings, preventive development practices are suggested. Potential improvements to development tools and a new method for pattern classification are suggested as subjects for future work. object-oriented methods, pattern classification, software maintenance, source code (software), object-oriented patterns, manual refactoring, software design patterns, antipattern, source code, pattern classification, Pattern recognition, Aging, Context, Manuals, Software design, Maintenance engineering, Software evolution, reverse engineering, software aging, software quality, refactoring, design patterns, anti-patterns",a case study in object oriented patterns identified during manual refactoring software design patterns are often repeated implementations that have been identified and cataloged these are commonly seen as useful and good patterns to implement occasionally the term anti pattern has been used to identify less useful patterns that also appear regularly the exact definition of an anti pattern is somewhat subjective and the term has even been applied to some recognized design patterns this paper discusses four manual refactoring case studies where patterns were discovered and cataloged evidence observed in the source code is used to infer how these patterns evolved based on these findings preventive development practices are suggested potential improvements to development tools and a new method for pattern classification are suggested as subjects for future work object oriented methods pattern classification software maintenance source code software object oriented patterns manual refactoring software design patterns antipattern source code pattern classification pattern recognition aging context manuals software design maintenance engineering software evolution reverse engineering software aging software quality refactoring design patterns anti patterns,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
234,0,"Call Me Back!: Attacks on System Server and System Apps in Android Through Synchronous Callback Android is the most commonly used mobile device operation system. The core of Android, the System Server (SS), is a multi-threaded process that provides most of the system services. Based on a new understanding of the security risks introduced by the callback mechanism in system services, we have discovered a general type of design flaw. A vulnerability detection tool has been designed and implemented based on static taint analysis. We applied the tool on all the 80 system services in the SS of Android 5.1.0. With its help, we have discovered six previously unknown vulnerabilities, which are further confirmed on Android 2.3.7-6.0.1. According to our analysis, about 97.3% of the entire 1.4 billion real-world Android devices are vulnerable. Our proof-of-concept attack proves that the vulnerabilities can enable a malicious app to freeze critical system functionalities or soft-reboot the system immediately. It is a neat type of denial-of-service at-tack. We also proved that the attacks can be conducted at mission critical moments to achieve meaningful goals, such as anti anti-virus, anti process-killer, hindering app updates or system patching. After being informed, Google confirmed our findings promptly. Several suggestions on how to use callbacks safely are also proposed to Google. denial of service, mobile security, synchronous callback, taint analysis, vulnerability detection",call me back attacks on system server and system apps in android through synchronous callback android is the most commonly used mobile device operation system the core of android the system server ss is a multi threaded process that provides most of the system services based on a new understanding of the security risks introduced by the callback mechanism in system services we have discovered a general type of design flaw a vulnerability detection tool has been designed and implemented based on static taint analysis we applied the tool on all the 80 system services in the ss of android 5 1 0 with its help we have discovered six previously unknown vulnerabilities which are further confirmed on android 2 3 7 6 0 1 according to our analysis about 97 3 of the entire 1 4 billion real world android devices are vulnerable our proof of concept attack proves that the vulnerabilities can enable a malicious app to freeze critical system functionalities or soft reboot the system immediately it is a neat type of denial of service at tack we also proved that the attacks can be conducted at mission critical moments to achieve meaningful goals such as anti anti virus anti process killer hindering app updates or system patching after being informed google confirmed our findings promptly several suggestions on how to use callbacks safely are also proposed to google denial of service mobile security synchronous callback taint analysis vulnerability detection,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
235,0,"DLint: Dynamically Checking Bad Coding Practices in JavaScript JavaScript has become one of the most popular programming languages, yet it is known for its suboptimal design. To effectively use JavaScript despite its design flaws, developers try to follow informal code quality rules that help avoid correctness, maintainability, performance, and security problems. Lightweight static analyses, implemented in ""lint-like"" tools, are widely used to find violations of these rules, but are of limited use because of the language's dynamic nature. This paper presents DLint, a dynamic analysis approach to check code quality rules in JavaScript. DLint consists of a generic framework and an extensible set of checkers that each addresses a particular rule. We formally describe and implement 28 checkers that address problems missed by state-of-the-art static approaches. Applying the approach in a comprehensive empirical study on over 200 popular web sites shows that static and dynamic checking complement each other. On average per web site, DLint detects 49 problems that are missed statically, including visible bugs on the web sites of IKEA, Hilton, eBay, and CNBC. Code practice, DLint, dynamic analysis, metric",dlint dynamically checking bad coding practices in javascript javascript has become one of the most popular programming languages yet it is known for its suboptimal design to effectively use javascript despite its design flaws developers try to follow informal code quality rules that help avoid correctness maintainability performance and security problems lightweight static analyses implemented in lint like tools are widely used to find violations of these rules but are of limited use because of the language s dynamic nature this paper presents dlint a dynamic analysis approach to check code quality rules in javascript dlint consists of a generic framework and an extensible set of checkers that each addresses a particular rule we formally describe and implement 28 checkers that address problems missed by state of the art static approaches applying the approach in a comprehensive empirical study on over 200 popular web sites shows that static and dynamic checking complement each other on average per web site dlint detects 49 problems that are missed statically including visible bugs on the web sites of ikea hilton ebay and cnbc code practice dlint dynamic analysis metric,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
236,0,"A novel fruit fly optimization algorithm for the semiconductor final testing scheduling problem In this paper, a novel fruit fly optimization algorithm (nFOA) is proposed to solve the semiconductor final testing scheduling problem (SFTSP). First, a new encoding scheme is presented to represent solutions reasonably, and a new decoding scheme is presented to map solutions to feasible schedules. Second, it uses multiple fruit fly groups during the evolution process to enhance the parallel search ability of the FOA. According to the characteristics of the SFTSP, a smell-based search operator and a vision-based search operator are well designed for the groups to stress exploitation. Third, to simulate the information communication behavior among fruit flies, a cooperative search process is developed to stress exploration. The cooperative search process includes a modified improved precedence operation crossover (IPOX) and a modified multipoint preservative crossover (MPX) based on two popular structures of the flexible job shop scheduling. Moreover, the influence of the parameter setting is investigated by using Taguchi method of design-of-experiment (DOE), and suitable values are determined for key parameters. Finally, computational tests results with some benchmark instances and the comparisons to some existing algorithms are provided, which demonstrate the effectiveness and the efficiency of the nFOA in solving the SFTSP. Fruit fly optimization algorithm, Smell-based search, Vision-based search, Cooperative search, Semiconductor final testing scheduling problem",a novel fruit fly optimization algorithm for the semiconductor final testing scheduling problem in this paper a novel fruit fly optimization algorithm nfoa is proposed to solve the semiconductor final testing scheduling problem sftsp first a new encoding scheme is presented to represent solutions reasonably and a new decoding scheme is presented to map solutions to feasible schedules second it uses multiple fruit fly groups during the evolution process to enhance the parallel search ability of the foa according to the characteristics of the sftsp a smell based search operator and a vision based search operator are well designed for the groups to stress exploitation third to simulate the information communication behavior among fruit flies a cooperative search process is developed to stress exploration the cooperative search process includes a modified improved precedence operation crossover ipox and a modified multipoint preservative crossover mpx based on two popular structures of the flexible job shop scheduling moreover the influence of the parameter setting is investigated by using taguchi method of design of experiment doe and suitable values are determined for key parameters finally computational tests results with some benchmark instances and the comparisons to some existing algorithms are provided which demonstrate the effectiveness and the efficiency of the nfoa in solving the sftsp fruit fly optimization algorithm smell based search vision based search cooperative search semiconductor final testing scheduling problem,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
237,0,"Lexicon Bad Smells in Software We introduce the notion of ""lexicon bad smell"", which parallels that of ""code smell"" and indicates some potential lexicon construction problems that can be addressed through refactoring (e.g., renaming). We created a catalog of lexicon bad smells and we developed a publicly available suite of detectors to locate them. The paper presents a case study in which we used the detectors on two open-source systems. The study revealed the main challenges faced in detecting the lexicon bad smells. public domain software, software maintenance, software lexicon bad smell catalog, source code smell, lexicon construction problem, software refactoring, open-source system, Detectors, Face detection, Documentation, Reverse engineering, Computer science, Open source software, Terminology, Programming environments, Programming profession, Speech",lexicon bad smells in software we introduce the notion of lexicon bad smell which parallels that of code smell and indicates some potential lexicon construction problems that can be addressed through refactoring e g renaming we created a catalog of lexicon bad smells and we developed a publicly available suite of detectors to locate them the paper presents a case study in which we used the detectors on two open source systems the study revealed the main challenges faced in detecting the lexicon bad smells public domain software software maintenance software lexicon bad smell catalog source code smell lexicon construction problem software refactoring open source system detectors face detection documentation reverse engineering computer science open source software terminology programming environments programming profession speech,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
238,0,"Social but not solitary bees reject dangerous flowers where a conspecific has recently been attacked Social bees are known to avoid inflorescences marked with dead conspecifics or their smell. The avoidance response could be triggered by alarm signals actively given by attacked bees or by substances passively released through injuries as a by-product of the attack. To discriminate between these two options we note that both social and solitary bees are expected to react to nonsignalling cues associated with predation risk, while only social bees are expected to give alarm signals. We simulated risky inflorescences by pinching a landing bee with forceps, and compared the rate at which bees visited these experimental inflorescences and unmanipulated control inflorescences. We conducted the experiment with four species of social bees, Apis mellifera, Apis dorsata, Apis florea and Bombus terrestris and with three species of solitary bees, Eucera sp., Panurgus sp. and Nomia strigata. We found that while the three species of solitary bees responded similarly to control and experimental inflorescences, all four species of social bees strongly rejected inflorescences where we simulated a predation attempt. The finding that only social species avoided landing on dangerous inflorescences strongly suggests that the release of the alarm cue has been selected for its signalling value in social bees. antipredator behaviour, evasive pheromone, social bee, solitary bee, warning signal",social but not solitary bees reject dangerous flowers where a conspecific has recently been attacked social bees are known to avoid inflorescences marked with dead conspecifics or their smell the avoidance response could be triggered by alarm signals actively given by attacked bees or by substances passively released through injuries as a by product of the attack to discriminate between these two options we note that both social and solitary bees are expected to react to nonsignalling cues associated with predation risk while only social bees are expected to give alarm signals we simulated risky inflorescences by pinching a landing bee with forceps and compared the rate at which bees visited these experimental inflorescences and unmanipulated control inflorescences we conducted the experiment with four species of social bees apis mellifera apis dorsata apis florea and bombus terrestris and with three species of solitary bees eucera sp panurgus sp and nomia strigata we found that while the three species of solitary bees responded similarly to control and experimental inflorescences all four species of social bees strongly rejected inflorescences where we simulated a predation attempt the finding that only social species avoided landing on dangerous inflorescences strongly suggests that the release of the alarm cue has been selected for its signalling value in social bees antipredator behaviour evasive pheromone social bee solitary bee warning signal,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
239,0,"A Continuous Software Quality Monitoring Approach for Small and Medium Enterprises Context: SMEs cannot always afford the effort required for software quality assurance, and therefore there is the need of easy and affordable practices to prevent issues in the software they develop. Object: In this paper we propose an approach to allow SMEs to access SQA practices, using an SQA approach based on a continuous issue and error monitoring and a recommendation system that will suggest quality practices, recommending a set of quality actions based on the issues that previously created errors, so as to help SMEs to maintain quality above a minimum threshold. Method: First, we aim to identify a set of SQA practices applicable in SMEs, based on the main constraints of SMEs and a set of tools and practices to fulfill a complete DevOps pipeline. Second, we aim to define a recommendation system to provide software quality feedback to micro-teams, suggesting which action(s) they should take to maintain a certain quality level and allowing them to remove the most severe issues with the lowest possible effort. Our approach will be validated by a set of local SMEs. Moreover, the tools developed will be published as Open Source. anti-patterns, code smells, continuous quality assurance, software maintenance, software monitoring",a continuous software quality monitoring approach for small and medium enterprises context smes cannot always afford the effort required for software quality assurance and therefore there is the need of easy and affordable practices to prevent issues in the software they develop object in this paper we propose an approach to allow smes to access sqa practices using an sqa approach based on a continuous issue and error monitoring and a recommendation system that will suggest quality practices recommending a set of quality actions based on the issues that previously created errors so as to help smes to maintain quality above a minimum threshold method first we aim to identify a set of sqa practices applicable in smes based on the main constraints of smes and a set of tools and practices to fulfill a complete devops pipeline second we aim to define a recommendation system to provide software quality feedback to micro teams suggesting which action s they should take to maintain a certain quality level and allowing them to remove the most severe issues with the lowest possible effort our approach will be validated by a set of local smes moreover the tools developed will be published as open source anti patterns code smells continuous quality assurance software maintenance software monitoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
240,0,"When AR meets food: A structural overview of the research space on multi-facets of food Food has always been interwoven with the human life, biologically and emotionally. Recently, there has been growing research interest in the various aspects of food itself and the food-related activities, in both physical and digital format. Yet, the progress made and the key research questions for these researches are rarely analyzed systematically. In this paper, we summarized the characteristics of food from different perspectives and provided a survey of existing works. We categorized the functions of food into biological, psychological and cultural, and described how augmented and mixed reality technologies have been applied to various aspects of food. We then discussed about the structural research space based on the literatures to address the opportunities and challenges for further development around augmented food experience. The main purpose is to highlight the expressiveness of technology-enhanced food and engage people's emotional perception and experience with food. augmented reality, cultural aspects, food products, psychology, food-related activities, mixed reality technologies, augmented reality technology, biological technology, psychological technology, cultural technology, structural research space, augmented food experience, technology-enhanced food, people emotional perception, AR, Augmented reality, Cultural differences, Biology, Psychology, Visualization, Shape, Food, Augmented Reality, smell, taste, entertainment",when ar meets food a structural overview of the research space on multi facets of food food has always been interwoven with the human life biologically and emotionally recently there has been growing research interest in the various aspects of food itself and the food related activities in both physical and digital format yet the progress made and the key research questions for these researches are rarely analyzed systematically in this paper we summarized the characteristics of food from different perspectives and provided a survey of existing works we categorized the functions of food into biological psychological and cultural and described how augmented and mixed reality technologies have been applied to various aspects of food we then discussed about the structural research space based on the literatures to address the opportunities and challenges for further development around augmented food experience the main purpose is to highlight the expressiveness of technology enhanced food and engage people s emotional perception and experience with food augmented reality cultural aspects food products psychology food related activities mixed reality technologies augmented reality technology biological technology psychological technology cultural technology structural research space augmented food experience technology enhanced food people emotional perception ar augmented reality cultural differences biology psychology visualization shape food augmented reality smell taste entertainment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
241,0,"Biochemical gas-sensor (bio-sniffer) for breath analysis after drinking An alcohol oxidase (AOD) immobilized gas-sensor (bio-sniffer) with stick-type configuration was developed for convenient analysis of ethanol vapor. The stick-type sniffer device was constructed in a sandwich configuration with a filter paper placed between carbon- and Ag/AgCl electrodes. The electrode-coated paper was shaped by knife into 2 mm-wide stick. In order to isolate a sensitive- (length: 5 mm) and terminal-areas, an epoxy-resin adhesive was applied to the middle part of the narrow stick paper. AOD was immobilized to the sensitive area with photocrosslinkable polymer. The characteristics of the stick-type sniffer moistened with phosphate buffer were assessed using standard ethanol vapor supplied from a gas generator. The oxidation current of hydrogen peroxide, produced by the AOD enzymatic reaction by applying ethanol vapor, was detected a computer-controlled potentiostat at a fixed voltage of +900 mV. The calibration range of the ethanol sniffer covered the concentration range encountered in breath after alcohol consumption including the permissible legal limit (130 ppm) for driving, and the sensing range of smell in humans. As the physiological application, the bio-sniffer was used to monitor the concentration change of breath ethanol after drinking. gas sensors, physiology, pneumodynamics, biochemistry, blood, biosensors, alcohol oxidase immobilized gas-sensor, bio-sniffer, ethanol vapor, stick-type sniffer device, sandwich configuration, electrode-coated paper, epoxy-resin adhesive, photocrosslinkable polymer, phosphate buffer, gas generator, hydrogen peroxide, AOD enzymatic reaction, computer-controlled potentiostat, alcohol consumption, physiological application, breath analysis, Biochemical analysis, Ethanol, Alcoholic beverages, Filters, Electrodes, Polymers, Character generation, Oxidation, Voltage, Calibration",biochemical gas sensor bio sniffer for breath analysis after drinking an alcohol oxidase aod immobilized gas sensor bio sniffer with stick type configuration was developed for convenient analysis of ethanol vapor the stick type sniffer device was constructed in a sandwich configuration with a filter paper placed between carbon and ag agcl electrodes the electrode coated paper was shaped by knife into 2 mm wide stick in order to isolate a sensitive length 5 mm and terminal areas an epoxy resin adhesive was applied to the middle part of the narrow stick paper aod was immobilized to the sensitive area with photocrosslinkable polymer the characteristics of the stick type sniffer moistened with phosphate buffer were assessed using standard ethanol vapor supplied from a gas generator the oxidation current of hydrogen peroxide produced by the aod enzymatic reaction by applying ethanol vapor was detected a computer controlled potentiostat at a fixed voltage of 900 mv the calibration range of the ethanol sniffer covered the concentration range encountered in breath after alcohol consumption including the permissible legal limit 130 ppm for driving and the sensing range of smell in humans as the physiological application the bio sniffer was used to monitor the concentration change of breath ethanol after drinking gas sensors physiology pneumodynamics biochemistry blood biosensors alcohol oxidase immobilized gas sensor bio sniffer ethanol vapor stick type sniffer device sandwich configuration electrode coated paper epoxy resin adhesive photocrosslinkable polymer phosphate buffer gas generator hydrogen peroxide aod enzymatic reaction computer controlled potentiostat alcohol consumption physiological application breath analysis biochemical analysis ethanol alcoholic beverages filters electrodes polymers character generation oxidation voltage calibration,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
242,0,"Java quality assurance by detecting code smells Software inspection is a known technique for improving software quality. It involves carefully examining the code, the design, and the documentation of software and checking these for aspects that are known to be potentially problematic based on past experience. Code smells are a metaphor to describe patterns that are generally associated with bad design and bad programming practices. Originally, code smells are used to find the places in software that could benefit from refactoring. In this paper we investigate how the quality of code can be automatically assessed by checking for the presence of code smells and how this approach can contribute to automatic code inspection. We present an approach for the automatic detection and visualization of code smells and discuss how this approach can be used in the design of a software inspection tool. We illustrate the feasibility of our approach with the development of jCOSMO, a prototype code smell browser that detects and visualizes code smells in JAVA source code. Finally, we show how this tool was applied in a case study. Java, software quality, program visualisation, software quality, code smells, Java, refactoring, software inspection, quality assurance, automatic code inspection, Java, Quality assurance, Inspection, Software quality, Visualization, Documentation, Software design, Software tools, Software prototyping, Prototypes",java quality assurance by detecting code smells software inspection is a known technique for improving software quality it involves carefully examining the code the design and the documentation of software and checking these for aspects that are known to be potentially problematic based on past experience code smells are a metaphor to describe patterns that are generally associated with bad design and bad programming practices originally code smells are used to find the places in software that could benefit from refactoring in this paper we investigate how the quality of code can be automatically assessed by checking for the presence of code smells and how this approach can contribute to automatic code inspection we present an approach for the automatic detection and visualization of code smells and discuss how this approach can be used in the design of a software inspection tool we illustrate the feasibility of our approach with the development of jcosmo a prototype code smell browser that detects and visualizes code smells in java source code finally we show how this tool was applied in a case study java software quality program visualisation software quality code smells java refactoring software inspection quality assurance automatic code inspection java quality assurance inspection software quality visualization documentation software design software tools software prototyping prototypes,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
243,0,"Olfactory Measurement System to Quantify the Ability to Smell Using Pulse Ejection Olfaction is a very important sense in daily life. Decline in olfaction has been reported to be an early symptom of diseases such as Alzheimer's and Parkinson's diseases. It is therefore important to understand the condition of the olfactory system. However, existing olfactory measurement techniques suffer from the problems of scents scattering in the air and measurements needing a lot of time and effort. In this study, we developed an olfactory measurement system that uses pulse ejection. Unlike existing olfactory measurement techniques, our olfactory display employing pulse ejection measures olfaction by changing the ejection quantity. We conducted an experiment that measured and quantified the human olfactory characteristics in precise detail in response to pulsed scents. The results reveal that people are able to sense extremely small quantities of scent. Measurements were finished in approximately 5 min and were influenced very little by lingering scent. In the future we aim to find a diagnostic threshold for smell disorders through measurements of more people and hope that screening by olfactory measurement will be implemented at health checkups and in hospitals. biomedical measurement, chemioception, diseases, medical disorders, olfactory measurement system, olfaction, Alzheimer's diseases, Parkinson's diseases, pulse ejection measurement, human olfactory characteristics, pulsed scents, lingering scent, diagnostic threshold, smell disorders, health checkups, Olfactory, Atmospheric measurements, Particle measurements, Pulse measurements, Measurement techniques, Time measurement, Current measurement, Olfactory measurement, olfactory display, scent",olfactory measurement system to quantify the ability to smell using pulse ejection olfaction is a very important sense in daily life decline in olfaction has been reported to be an early symptom of diseases such as alzheimer s and parkinson s diseases it is therefore important to understand the condition of the olfactory system however existing olfactory measurement techniques suffer from the problems of scents scattering in the air and measurements needing a lot of time and effort in this study we developed an olfactory measurement system that uses pulse ejection unlike existing olfactory measurement techniques our olfactory display employing pulse ejection measures olfaction by changing the ejection quantity we conducted an experiment that measured and quantified the human olfactory characteristics in precise detail in response to pulsed scents the results reveal that people are able to sense extremely small quantities of scent measurements were finished in approximately 5 min and were influenced very little by lingering scent in the future we aim to find a diagnostic threshold for smell disorders through measurements of more people and hope that screening by olfactory measurement will be implemented at health checkups and in hospitals biomedical measurement chemioception diseases medical disorders olfactory measurement system olfaction alzheimer s diseases parkinson s diseases pulse ejection measurement human olfactory characteristics pulsed scents lingering scent diagnostic threshold smell disorders health checkups olfactory atmospheric measurements particle measurements pulse measurements measurement techniques time measurement current measurement olfactory measurement olfactory display scent,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
244,0,"Sequence variations at the human leukocyte antigen--linked olfactory receptor cluster do not influence female preferences for male odors We previously reported that paternally inherited human leukocyte antigen (HLA) alleles are a template for women's preferences for male odors (p = 0.0007). However, it has been suggested that sequence variation in a nearby olfactory receptor (OR) cluster on chromosome 6p influences smell preference. To determine whether the HLA-linked OR genes contribute to previously observed HLA-mediated behaviors, we use the odor preference data from our earlier study in combination with a new resequencing study of four functional, HLA-linked OR genes in the same subjects. Our results indicate that OR alleles in the genes surveyed are not in linkage disequilibrium with HLA variation and do not explain the previous findings of HLA-associated odor preference. Olfactory receptor genes, HLA alleles, Linkage disequilibrium, Smell preferences",sequence variations at the human leukocyte antigen linked olfactory receptor cluster do not influence female preferences for male odors we previously reported that paternally inherited human leukocyte antigen hla alleles are a template for women s preferences for male odors p 0 0007 however it has been suggested that sequence variation in a nearby olfactory receptor or cluster on chromosome 6p influences smell preference to determine whether the hla linked or genes contribute to previously observed hla mediated behaviors we use the odor preference data from our earlier study in combination with a new resequencing study of four functional hla linked or genes in the same subjects our results indicate that or alleles in the genes surveyed are not in linkage disequilibrium with hla variation and do not explain the previous findings of hla associated odor preference olfactory receptor genes hla alleles linkage disequilibrium smell preferences,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
245,0,"Sweet odours and sweet tastes are conflated in memory Certain odours and certain tastes appear to share common perceptual properties. One example is sweetness, a perceptual experience that results from stimulation of taste receptors on the tongue typically by sugars. The experiment here examined for evidence of this perceptual similarity using a novel and indirect test. Participants were exposed six times each, to three odours (strawberry, caramel, and oregano) and three tastes (sucrose, saline, and citric acid). Following a 10-min interval, participants were given a surprise frequency estimation task, in which they had to judge how often each stimulus had occurred. If sweet-smelling strawberry and caramel odours really do share this perceptual characteristic in common with sweet tasting sucrose, then frequency estimates for sucrose should be overestimated relative to non-sweet tastes. Not only was this observed, but frequency estimates for sweet tastes were also found to correlate with (1) evaluations from a later test of similarity between these sweet smells and sucrose, and (2) the degree to which these odours smelled sweet. These findings suggest a shared perceptual feature between such odours and sucrose -- sweetness -- under conditions where no judgment of perceptual quality was required. Odour, Taste, Interaction, Similarity",sweet odours and sweet tastes are conflated in memory certain odours and certain tastes appear to share common perceptual properties one example is sweetness a perceptual experience that results from stimulation of taste receptors on the tongue typically by sugars the experiment here examined for evidence of this perceptual similarity using a novel and indirect test participants were exposed six times each to three odours strawberry caramel and oregano and three tastes sucrose saline and citric acid following a 10 min interval participants were given a surprise frequency estimation task in which they had to judge how often each stimulus had occurred if sweet smelling strawberry and caramel odours really do share this perceptual characteristic in common with sweet tasting sucrose then frequency estimates for sucrose should be overestimated relative to non sweet tastes not only was this observed but frequency estimates for sweet tastes were also found to correlate with 1 evaluations from a later test of similarity between these sweet smells and sucrose and 2 the degree to which these odours smelled sweet these findings suggest a shared perceptual feature between such odours and sucrose sweetness under conditions where no judgment of perceptual quality was required odour taste interaction similarity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
246,0,"Scent engineering: toward the goal of controlling how flowers smell Floral scent has an important role in the reproductive processes of many plants and a considerable economic value in guaranteeing yield and quality of many crops. It also enhances the aesthetic properties of ornamental plants and cut flowers. Many floral scent volatiles fall into the terpenoid or phenylpropanoid/benzenoid classes of compounds. Although the biochemistry of floral scent is still a relatively new field of investigation, in the past decade investigators have begun to identify `scent genes'. Several of these genes, most of which, but not all, encode enzymes that directly catalyze the formation of volatile terpenoid or phenylpropanoid/benzenoid compounds, have now been used to manipulate, through genetic engineering techniques, the mix of volatiles emitted from the flowers of several plant species. The outcomes of these experiments, which are discussed here, have indicated that the genetic engineering approach to altering floral scents has potential; however, they have also revealed the limitations that result from our inadequate knowledge of the metabolic pathways responsible for scents and their regulation. []",scent engineering toward the goal of controlling how flowers smell floral scent has an important role in the reproductive processes of many plants and a considerable economic value in guaranteeing yield and quality of many crops it also enhances the aesthetic properties of ornamental plants and cut flowers many floral scent volatiles fall into the terpenoid or phenylpropanoid benzenoid classes of compounds although the biochemistry of floral scent is still a relatively new field of investigation in the past decade investigators have begun to identify scent genes several of these genes most of which but not all encode enzymes that directly catalyze the formation of volatile terpenoid or phenylpropanoid benzenoid compounds have now been used to manipulate through genetic engineering techniques the mix of volatiles emitted from the flowers of several plant species the outcomes of these experiments which are discussed here have indicated that the genetic engineering approach to altering floral scents has potential however they have also revealed the limitations that result from our inadequate knowledge of the metabolic pathways responsible for scents and their regulation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
247,0,"Refactoring of Crosscutting Concerns with Metaphor-Based Heuristics It has been advocated that Aspect-Oriented Programming (AOP) is an effective technique to improve software maintainability through explicit support for modularising crosscutting concerns. However, in order to take the advantages of AOP, there is a need for supporting the systematic refactoring of crosscutting concerns to aspects. Existing techniques for aspect-oriented refactoring are too fine-grained and do not take the concern structure into consideration. This paper presents two categories towards a metaphor-based classification of crosscutting concerns driven by their manifested shapes through a system's modular structure. The proposed categories provide an intuitive and fundamental terminology for detecting concern-oriented design flaws and identifying refactorings in terms of recurring crosscutting structures. On top of this classification, we define a suite of metaphor-based refactorings to guide the ``aspectisation'' of each concern category. We evaluate our technique by classifying concerns of 23 design patterns and by proposing refactorings to aspectise them according to observations made in previous empirical studies. Based on our experience, we also determine a catalogue of potential additional categories and heuristics for refactoring of crosscutting concerns. Refactoring, Aspect-oriented programming, Crosscutting concerns, Metaphor-based classification, Design heuristics",refactoring of crosscutting concerns with metaphor based heuristics it has been advocated that aspect oriented programming aop is an effective technique to improve software maintainability through explicit support for modularising crosscutting concerns however in order to take the advantages of aop there is a need for supporting the systematic refactoring of crosscutting concerns to aspects existing techniques for aspect oriented refactoring are too fine grained and do not take the concern structure into consideration this paper presents two categories towards a metaphor based classification of crosscutting concerns driven by their manifested shapes through a system s modular structure the proposed categories provide an intuitive and fundamental terminology for detecting concern oriented design flaws and identifying refactorings in terms of recurring crosscutting structures on top of this classification we define a suite of metaphor based refactorings to guide the aspectisation of each concern category we evaluate our technique by classifying concerns of 23 design patterns and by proposing refactorings to aspectise them according to observations made in previous empirical studies based on our experience we also determine a catalogue of potential additional categories and heuristics for refactoring of crosscutting concerns refactoring aspect oriented programming crosscutting concerns metaphor based classification design heuristics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
248,0,"Removal of cyanobacterial cells and Microcystin-LR from drinking water using a hollow fiber microfiltration pilot plant Various species of cyanobacteria may produce cyanotoxins, bad smell and taste and cause a deterioration of the water's sensory characteristics and serious harmful effects on human health. This study investigates the possibility of removing total algae and cyanobacteria from lake water by means of a hollow fiber microfiltration pilot plant (2--4m3/h). The influence of these treatments on water chemical and microbiological quality was evaluated too. Among the seventeen species of cyanobacteria analyzed, the highest density in the feed water was observed for Anabaena lemmermannii while the species most frequently detected was Microcystaceae D5. Microfiltration was able to achieve removal rates higher than 98% for a large number of species of cyanobacteria and the removal efficiency of total algae content was about 98--99%. Moreover, no release of toxins into the permeate water was observed during water treatment. Microfiltration was able to guarantee also good removal yields for turbidity (>90%), suspended solids (yield >80%) and organic compounds (yield of about 70% for UV absorbance at 254nm). Cyanobacteria, Cyanotoxins, Drinking water, Hollow fiber, Microfiltration",removal of cyanobacterial cells and microcystin lr from drinking water using a hollow fiber microfiltration pilot plant various species of cyanobacteria may produce cyanotoxins bad smell and taste and cause a deterioration of the water s sensory characteristics and serious harmful effects on human health this study investigates the possibility of removing total algae and cyanobacteria from lake water by means of a hollow fiber microfiltration pilot plant 2 4m3 h the influence of these treatments on water chemical and microbiological quality was evaluated too among the seventeen species of cyanobacteria analyzed the highest density in the feed water was observed for anabaena lemmermannii while the species most frequently detected was microcystaceae d5 microfiltration was able to achieve removal rates higher than 98 for a large number of species of cyanobacteria and the removal efficiency of total algae content was about 98 99 moreover no release of toxins into the permeate water was observed during water treatment microfiltration was able to guarantee also good removal yields for turbidity 90 suspended solids yield 80 and organic compounds yield of about 70 for uv absorbance at 254nm cyanobacteria cyanotoxins drinking water hollow fiber microfiltration,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
249,0,"Fault-Prone Module Prediction Using a Prediction Model and Manual Inspection This paper proposes a fault-prone prediction approach that combines a fault-prone prediction model and manual inspection. Manual inspection is conducted by a predefined checklist that consists of questions and scoring procedures. The questions capture the fault signs or indications that are difficult to be captured by source code metrics used as input by prediction models. Our approach consists of two steps. In the first, the modules are prioritized by a fault-prone prediction model. In the second step, an inspector inspects and scores α percent of the prioritized modules. We conducted a case study of source code modules in commercial software that had been maintained and evolved over ten years and compared AUC (Area Under the Curve) values of Alberg Diagram among three prediction models: (A) support vector machines, (B) lines of code, and (C) random predictor with four prioritization orders. Our results indicated that the maximum AUC values under appropriate α and the coefficient of the inspection score were larger than the AUC values of the prediction models without manual inspection in each of the four combinations and the three models in our context. In two combinations, our approach increased the AUC values to 0.860 from 0.774 and 0.724. Our results also indicated that one of the combinations monotonically increased the AUC values with the numbers of manually inspected modules. This might lead to flexible inspection; the number of manually inspected modules has not been preliminary determined, and the inspectors can inspect as many modules as possible, depending on the available effort. software fault tolerance, software quality, support vector machines, fault-prone module prediction, prediction model, manual inspection, fault-prone prediction approach, scoring procedures, source code metrics, source code modules, AUC value, area-under-the-curve, Alberg diagram, support vector machines, lines-of-code, random predictor, prioritization orders, Predictive models, Inspection, Manuals, Measurement, Manganese, Libraries, Logistics, source code inspection, code smell, hybrid faultprone",fault prone module prediction using a prediction model and manual inspection this paper proposes a fault prone prediction approach that combines a fault prone prediction model and manual inspection manual inspection is conducted by a predefined checklist that consists of questions and scoring procedures the questions capture the fault signs or indications that are difficult to be captured by source code metrics used as input by prediction models our approach consists of two steps in the first the modules are prioritized by a fault prone prediction model in the second step an inspector inspects and scores percent of the prioritized modules we conducted a case study of source code modules in commercial software that had been maintained and evolved over ten years and compared auc area under the curve values of alberg diagram among three prediction models a support vector machines b lines of code and c random predictor with four prioritization orders our results indicated that the maximum auc values under appropriate and the coefficient of the inspection score were larger than the auc values of the prediction models without manual inspection in each of the four combinations and the three models in our context in two combinations our approach increased the auc values to 0 860 from 0 774 and 0 724 our results also indicated that one of the combinations monotonically increased the auc values with the numbers of manually inspected modules this might lead to flexible inspection the number of manually inspected modules has not been preliminary determined and the inspectors can inspect as many modules as possible depending on the available effort software fault tolerance software quality support vector machines fault prone module prediction prediction model manual inspection fault prone prediction approach scoring procedures source code metrics source code modules auc value area under the curve alberg diagram support vector machines lines of code random predictor prioritization orders predictive models inspection manuals measurement manganese libraries logistics source code inspection code smell hybrid faultprone,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
250,0,"A logic foundation for a general-purpose history querying tool Version control systems (VCS) have become indispensable software development tools. The version snapshots they store to provide support for change coordination and release management, effectively track the evolution of the versioned software and its development process. Despite this wealth of historical information, it has only been leveraged by tools that are dedicated to a specific task such as empirical validation of software engineering practices or fault prediction. General-purpose tool support for reasoning about the historical information stored in a version control system is limited. This paper provides a comprehensive description of a logic-based, general-purpose history query tool called Absinthe. Absinthe supports querying versioned Smalltalk system using logic queries in which quantified regular path expressions are embedded. These expressions lend themselves to specifying the properties that each individual version in a sequence of successive software versions ought to exhibit. To demonstrate the general-purpose nature of our history query tool, we use it to verify development process constraints, to identify temporal bad smells and to answer questions that developers commonly ask. Finally, we compare a query written in Absinthe to an equivalent one written in Smalltalk. History queries, Meta-programming, Smalltalk, Logic programming, Program analysis",a logic foundation for a general purpose history querying tool version control systems vcs have become indispensable software development tools the version snapshots they store to provide support for change coordination and release management effectively track the evolution of the versioned software and its development process despite this wealth of historical information it has only been leveraged by tools that are dedicated to a specific task such as empirical validation of software engineering practices or fault prediction general purpose tool support for reasoning about the historical information stored in a version control system is limited this paper provides a comprehensive description of a logic based general purpose history query tool called absinthe absinthe supports querying versioned smalltalk system using logic queries in which quantified regular path expressions are embedded these expressions lend themselves to specifying the properties that each individual version in a sequence of successive software versions ought to exhibit to demonstrate the general purpose nature of our history query tool we use it to verify development process constraints to identify temporal bad smells and to answer questions that developers commonly ask finally we compare a query written in absinthe to an equivalent one written in smalltalk history queries meta programming smalltalk logic programming program analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
251,0,"Empirical study on refactoring large-scale industrial systems and its effects on maintainability Software evolves continuously, it gets modified, enhanced, and new requirements always arise. If we do not spend time occasionally on improving our source code, its maintainability will inevitably decrease. The literature tells us that we can improve the maintainability of a software system by regularly refactoring it. But does refactoring really increase software maintainability? Can it happen that refactoring decreases the maintainability? Empirical studies show contradicting answers to these questions and there have been only a few studies which were performed in a large-scale, industrial context. In our paper, we assess these questions in an in vivo context, where we analyzed the source code and measured the maintainability of 6 large-scale, proprietary software systems in their manual refactoring phase. We analyzed 2.5 million lines of code and studied the effects on maintainability of 315 refactoring commits which fixed 1273 coding issues. We found that single refactorings only make a very little difference (sometimes even decrease maintainability), but a whole refactoring period, in general, can significantly increase maintainability, which can result not only in the local, but also in the global improvement of the code. Refactoring, Software quality, Maintainability, Coding issues, Antipatterns, ISO IEC 25010",empirical study on refactoring large scale industrial systems and its effects on maintainability software evolves continuously it gets modified enhanced and new requirements always arise if we do not spend time occasionally on improving our source code its maintainability will inevitably decrease the literature tells us that we can improve the maintainability of a software system by regularly refactoring it but does refactoring really increase software maintainability can it happen that refactoring decreases the maintainability empirical studies show contradicting answers to these questions and there have been only a few studies which were performed in a large scale industrial context in our paper we assess these questions in an in vivo context where we analyzed the source code and measured the maintainability of 6 large scale proprietary software systems in their manual refactoring phase we analyzed 2 5 million lines of code and studied the effects on maintainability of 315 refactoring commits which fixed 1273 coding issues we found that single refactorings only make a very little difference sometimes even decrease maintainability but a whole refactoring period in general can significantly increase maintainability which can result not only in the local but also in the global improvement of the code refactoring software quality maintainability coding issues antipatterns iso iec 25010,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
252,0,"Questioning Software Maintenance Metrics: A Comparative Case Study Context: Many metrics are used in software engineering research as surrogates for maintainability of software systems. Aim: Our aim was to investigate whether such metrics are consistent among themselves and the extent to which they predict maintenance effort at the entire system level. Method: The Maintainability Index, a set of structural measures, two code smells (Feature Envy and God Class) and size were applied to a set of four functionally equivalent systems. The metrics were compared with each other and with the outcome of a study in which six developers were hired to perform three maintenance tasks on the same systems. Results: The metrics were not mutually consistent. Only system size and low cohesion were strongly associated with increased maintenance effort. Conclusion: Apart from size, surrogate maintainability measures may not reflect future maintenance effort. Surrogates need to be evaluated in the contexts for which they will be used. While traditional metrics are used to identify problematic areas in the code, the improvements of the worst areas may, inadvertently, lead to more problems for the entire system. Our results suggest that local improvements should be accompanied by an evaluation at the system level. software maintenance, software metrics",questioning software maintenance metrics a comparative case study context many metrics are used in software engineering research as surrogates for maintainability of software systems aim our aim was to investigate whether such metrics are consistent among themselves and the extent to which they predict maintenance effort at the entire system level method the maintainability index a set of structural measures two code smells feature envy and god class and size were applied to a set of four functionally equivalent systems the metrics were compared with each other and with the outcome of a study in which six developers were hired to perform three maintenance tasks on the same systems results the metrics were not mutually consistent only system size and low cohesion were strongly associated with increased maintenance effort conclusion apart from size surrogate maintainability measures may not reflect future maintenance effort surrogates need to be evaluated in the contexts for which they will be used while traditional metrics are used to identify problematic areas in the code the improvements of the worst areas may inadvertently lead to more problems for the entire system our results suggest that local improvements should be accompanied by an evaluation at the system level software maintenance software metrics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
253,0,"Improving the Teaching of Object-oriented Design Knowledge In the general sphere of the teaching of software engineering concepts, it can be noted that there are very few pieces of work dealing with how to get across, through teaching, the practical experience that has been built up on the subject of object-oriented design. The few works that do exist focus on design patterns. Pattern catalogues, however, do not completely resolve the problem of imparting the experience about object-oriented design, an area where it is clear that the greatest benefit derived from the patterns is achieved when their designers are already-experienced. What is more, other elements associated with object-oriented knowledge, such as principles, heuristics, best practices, bad smells, etc., are components related to practical knowledge of design. These are barely taken into consideration, however. In an effort to solve these problems, we put forward an ontology which brings together and integrates object-oriented design which improves teaching, amongst other things. It makes the great quantity of knowledge that has been built up clearer and brings it together into a united whole. It is thus possible to create catalogues of integrated knowledge. design, knowledge, object-oriented, teaching",improving the teaching of object oriented design knowledge in the general sphere of the teaching of software engineering concepts it can be noted that there are very few pieces of work dealing with how to get across through teaching the practical experience that has been built up on the subject of object oriented design the few works that do exist focus on design patterns pattern catalogues however do not completely resolve the problem of imparting the experience about object oriented design an area where it is clear that the greatest benefit derived from the patterns is achieved when their designers are already experienced what is more other elements associated with object oriented knowledge such as principles heuristics best practices bad smells etc are components related to practical knowledge of design these are barely taken into consideration however in an effort to solve these problems we put forward an ontology which brings together and integrates object oriented design which improves teaching amongst other things it makes the great quantity of knowledge that has been built up clearer and brings it together into a united whole it is thus possible to create catalogues of integrated knowledge design knowledge object oriented teaching,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
254,0,"Directional Aptitude Analysis in Odor Source Localization Techniques for Rescue Robots Applications Olfaction is an interesting new challenging area for intelligent systems to be developed and applied in rescue robots applications. The use of a sniffing robot following the smell of precise odors is one way to increase the efficiency and the fastness of a multi-robot team in a disaster area. The most important task of a sniffing robot in a rescue application is the odor source localization, which inspired on nature, requires the capacity of directionality. The intention of this document is to prove that the diffusion, advection, and gradient behaviors are actually present in a semi-controlled environment with an odor source simulating a continuous and relatively constant gas leak. chemioception, disasters, electronic noses, mobile robots, multi-robot systems, directional aptitude analysis, odor source localization, rescue robots, olfaction, intelligent systems, multirobot team, disaster, sniffing robot, Robot sensing systems, Arrays, Robot kinematics, Voltage measurement, Chemicals, Olfactory, advectiom, chemical sensor, diffusion, odor sensor, odor source localization techniques, smell sense",directional aptitude analysis in odor source localization techniques for rescue robots applications olfaction is an interesting new challenging area for intelligent systems to be developed and applied in rescue robots applications the use of a sniffing robot following the smell of precise odors is one way to increase the efficiency and the fastness of a multi robot team in a disaster area the most important task of a sniffing robot in a rescue application is the odor source localization which inspired on nature requires the capacity of directionality the intention of this document is to prove that the diffusion advection and gradient behaviors are actually present in a semi controlled environment with an odor source simulating a continuous and relatively constant gas leak chemioception disasters electronic noses mobile robots multi robot systems directional aptitude analysis odor source localization rescue robots olfaction intelligent systems multirobot team disaster sniffing robot robot sensing systems arrays robot kinematics voltage measurement chemicals olfactory advectiom chemical sensor diffusion odor sensor odor source localization techniques smell sense,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
255,0,"Code Smells in iOS Apps: How Do They Compare to Android? With billions of app downloads, the Apple App Store and Google Play Store succeeded to conquer mobile devices. However, this success also challenges app developers to publish high-quality apps to keep attracting and satisfying end-users. In particular, taming the ever-growing complexity of mobile apps to cope with maintenance and evolution tasks under such a pressure may lead to bad development choices. While these bad choices, a.k.a. code smells, are widely studied in object-oriented software, their study in the context of mobile apps, and in particular iOS apps, remains in its infancy. Therefore, in this paper, we consider the presence of object-oriented and iOS-specific code smells by analyzing 279 open-source iOS apps. As part of this empirical study, we extended the Paprika toolkit, which was previously designed to analyze Android apps, in order to support the analysis of iOS apps developed in Objective-C or Swift. We report on the results of this analysis as well as a comparison between iOS and Android apps. We comment our findings related to the quality of apps in these two ecosystems. Interestingly, we observed that iOS apps tend to contain the same proportions of code smells regardless of the development language, but they seem to be less prone to code smells compared to Android apps. Android, code smells, iOS, mobile apps, software quality",code smells in ios apps how do they compare to android with billions of app downloads the apple app store and google play store succeeded to conquer mobile devices however this success also challenges app developers to publish high quality apps to keep attracting and satisfying end users in particular taming the ever growing complexity of mobile apps to cope with maintenance and evolution tasks under such a pressure may lead to bad development choices while these bad choices a k a code smells are widely studied in object oriented software their study in the context of mobile apps and in particular ios apps remains in its infancy therefore in this paper we consider the presence of object oriented and ios specific code smells by analyzing 279 open source ios apps as part of this empirical study we extended the paprika toolkit which was previously designed to analyze android apps in order to support the analysis of ios apps developed in objective c or swift we report on the results of this analysis as well as a comparison between ios and android apps we comment our findings related to the quality of apps in these two ecosystems interestingly we observed that ios apps tend to contain the same proportions of code smells regardless of the development language but they seem to be less prone to code smells compared to android apps android code smells ios mobile apps software quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
256,0,"Smells Are Sensitive to Developers! On the Efficiency of (Un)Guided Customized Detection Code smells indicate poor implementation choices that may hinder program comprehension and maintenance. Their informal definition allows developers to follow different heuristics to detect smells in their projects. Machine learning has been used to customize smell detection according to the developer's perception. However, such customization is not guided (i.e. constrained) to consider alternative heuristics used by developers when detecting smells. As a result, their customization might not be efficient, requiring a considerable effort to reach high effectiveness. In fact, there is no empirical knowledge yet about the efficiency of such unguided approaches for supporting developer-sensitive smell detection. This paper presents Histrategy, a guided customization technique to improve the efficiency on smell detection. Histrategy considers a limited set of detection strategies, produced from different detection heuristics, as input of a customization process. The output of the customization process consists of a detection strategy tailored to each developer. The technique was evaluated in an experimental study with 48 developers and four types of code smells. The results showed that Histrategy is able to outperform six widely adopted machine learning algorithms - used in unguided approaches - both in effectiveness and efficiency. It was also confirmed that most developers benefit from using alternative heuristics to: (i) build their tailored detection strategies, and (ii) achieve efficient smell detection. software maintenance, source code (software), unguided customized detection, program comprehension, program maintenance, developer perception, smell detection customization, Histrategy, guided customization technique, detection strategies, detection heuristics, code smells, Machine learning algorithms, Training, Measurement, Electronic mail, Software, Informatics, Context",smells are sensitive to developers on the efficiency of un guided customized detection code smells indicate poor implementation choices that may hinder program comprehension and maintenance their informal definition allows developers to follow different heuristics to detect smells in their projects machine learning has been used to customize smell detection according to the developer s perception however such customization is not guided i e constrained to consider alternative heuristics used by developers when detecting smells as a result their customization might not be efficient requiring a considerable effort to reach high effectiveness in fact there is no empirical knowledge yet about the efficiency of such unguided approaches for supporting developer sensitive smell detection this paper presents histrategy a guided customization technique to improve the efficiency on smell detection histrategy considers a limited set of detection strategies produced from different detection heuristics as input of a customization process the output of the customization process consists of a detection strategy tailored to each developer the technique was evaluated in an experimental study with 48 developers and four types of code smells the results showed that histrategy is able to outperform six widely adopted machine learning algorithms used in unguided approaches both in effectiveness and efficiency it was also confirmed that most developers benefit from using alternative heuristics to i build their tailored detection strategies and ii achieve efficient smell detection software maintenance source code software unguided customized detection program comprehension program maintenance developer perception smell detection customization histrategy guided customization technique detection strategies detection heuristics code smells machine learning algorithms training measurement electronic mail software informatics context,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
257,0,"Is the need to follow chains a possible deterrent to certain refactorings and an inducement to others? A current and difficult challenge in the software engineering arena is assessment of code smells and subsequent re-engineering decisions. The mechanics of seventy-two individual, object-oriented refactorings are specified in the seminal text by Fowler, providing the steps that need to be undertaken to complete each. While it is relatively easy to identify dasiarelatedpsila refactorings, i.e., those that each refactoring itself directly uses as part of those mechanics, what is not so clear is the chain of required refactorings that may emerge due to these indirect (and composite) relationships. In this paper, we investigate the characteristics of fourteen of the seventy-two refactorings, identifying, for each, its related refactorings and the implications this may have for the overall time and effort required to carry out each. We supported our analysis with data from a previous empirical analysis. The key result was that refactorings inducing long chains tended to be utilized less by developers than refactorings with short chains, suggesting that complexity given by long chains may be a real consideration prior to refactoring; empirically, long chains were found to be composed of sets of smaller, inter-related refactorings. On a general note, understanding the composition of refactorings is recognized as an emerging yet under-researched area but has significant implications for the amount of effort that a developer might have to invest in any single dasiachangepsila to a system involving refactoring. object-oriented programming, software cost estimation, software maintenance, software metrics, systems re-engineering, software refactoring chain, software engineering, software code smell assessment, software re-engineering decision, object-oriented refactoring, software effort investment, software complexity, object-oriented, refactoring, chains, tools",is the need to follow chains a possible deterrent to certain refactorings and an inducement to others a current and difficult challenge in the software engineering arena is assessment of code smells and subsequent re engineering decisions the mechanics of seventy two individual object oriented refactorings are specified in the seminal text by fowler providing the steps that need to be undertaken to complete each while it is relatively easy to identify dasiarelatedpsila refactorings i e those that each refactoring itself directly uses as part of those mechanics what is not so clear is the chain of required refactorings that may emerge due to these indirect and composite relationships in this paper we investigate the characteristics of fourteen of the seventy two refactorings identifying for each its related refactorings and the implications this may have for the overall time and effort required to carry out each we supported our analysis with data from a previous empirical analysis the key result was that refactorings inducing long chains tended to be utilized less by developers than refactorings with short chains suggesting that complexity given by long chains may be a real consideration prior to refactoring empirically long chains were found to be composed of sets of smaller inter related refactorings on a general note understanding the composition of refactorings is recognized as an emerging yet under researched area but has significant implications for the amount of effort that a developer might have to invest in any single dasiachangepsila to a system involving refactoring object oriented programming software cost estimation software maintenance software metrics systems re engineering software refactoring chain software engineering software code smell assessment software re engineering decision object oriented refactoring software effort investment software complexity object oriented refactoring chains tools,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
258,0,"Ad-Smell: Advertising Movie with a Simple Olfactory Display The idea of adding the smell to the advertising movie for describing the scent of each event in the advertising movie has been proposed to improve the current way of advertising movies, which can perceive only pictures and sound. Using the Ad-Smell, the customer can smell the advertising movie. The users need an Ad-Smell application to read a smell and an olfactory display in order to release scents. There are two main parts in an Ad-Smell system, which are an olfactory display and a release smell application. An olfactory display consists of a control box and four smell boxes with four fans. Fans will be turned on and release scents when receiving the signal from an Ad-Smell application. The Ad-Smell application is designed to detect a customer movement from a web camera and then show an advertising movie. During a display of advertising movie, Ad-Smell reads control signals in the movie and decides to send signals to an olfactory display. The Ad-Smell application consists of six major components: 1) Webcam Controlling, 2) Motion Detection, 3) Movie Controlling, 4) SubSmell Reading, 5) Scent Releasing, and 6) Olfactory Display Monitoring. We use Microsoft Visual Basic 6.0 to develop the user interface and the Ad-Smell components. Ad-Smell, advertising movie, multimedia, olfactory display",ad smell advertising movie with a simple olfactory display the idea of adding the smell to the advertising movie for describing the scent of each event in the advertising movie has been proposed to improve the current way of advertising movies which can perceive only pictures and sound using the ad smell the customer can smell the advertising movie the users need an ad smell application to read a smell and an olfactory display in order to release scents there are two main parts in an ad smell system which are an olfactory display and a release smell application an olfactory display consists of a control box and four smell boxes with four fans fans will be turned on and release scents when receiving the signal from an ad smell application the ad smell application is designed to detect a customer movement from a web camera and then show an advertising movie during a display of advertising movie ad smell reads control signals in the movie and decides to send signals to an olfactory display the ad smell application consists of six major components 1 webcam controlling 2 motion detection 3 movie controlling 4 subsmell reading 5 scent releasing and 6 olfactory display monitoring we use microsoft visual basic 6 0 to develop the user interface and the ad smell components ad smell advertising movie multimedia olfactory display,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
259,0,"Identifying refactoring through formal model based on data flow graph Identifying refactoring is an important step of bad smell removal process. Many developers have problem identifying refactoring, e.g., novice developers are not sure which refactorings should be applied. Even skilled developers may need to spend a lot of time doing this manually. Identifying refactoring techniques can alleviate these problems for developers. In our previous work, we proposed refactoring filtering conditions (RFC) that identify candidate refactorings for removing long method bad smell. These conditions analyze internal structure inside a method with data flow analysis. Our research improves these RFC based on more refined data flow analysis and presents its formal description. This research also demonstrates an approach of using the improved RFC of three refactorings. Moreover, we conducted an experiment to compare the efficiency of the results of our approach with that of our previous work and that of developer suggestion. data flow analysis, data flow graphs, software maintenance, refactoring identification, formal model, data flow graph, bad smell removal process, refactoring filtering condition, data flow analysis, formal description, Flow graphs, Programming, Software metrics, Filtering, Software, Boolean functions, Object recognition, refactoring, bad smell, maintainability, software maintenance",identifying refactoring through formal model based on data flow graph identifying refactoring is an important step of bad smell removal process many developers have problem identifying refactoring e g novice developers are not sure which refactorings should be applied even skilled developers may need to spend a lot of time doing this manually identifying refactoring techniques can alleviate these problems for developers in our previous work we proposed refactoring filtering conditions rfc that identify candidate refactorings for removing long method bad smell these conditions analyze internal structure inside a method with data flow analysis our research improves these rfc based on more refined data flow analysis and presents its formal description this research also demonstrates an approach of using the improved rfc of three refactorings moreover we conducted an experiment to compare the efficiency of the results of our approach with that of our previous work and that of developer suggestion data flow analysis data flow graphs software maintenance refactoring identification formal model data flow graph bad smell removal process refactoring filtering condition data flow analysis formal description flow graphs programming software metrics filtering software boolean functions object recognition refactoring bad smell maintainability software maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
260,0,"Investigating the energy impact of Android smells Android code smells are bad implementation practices within Android applications (or apps) that may lead to poor software quality. These code smells are known to degrade the performance of apps and to have an impact on energy consumption. However, few studies have assessed the positive impact on energy consumption when correcting code smells. In this paper, we therefore propose a tooled and reproducible approach, called HOT-PEPPER, to automatically correct code smells and evaluate their impact on energy consumption. Currently, HOT-PEPPER is able to automatically correct three types of Android-specific code smells: Internal Getter/Setter, Member Ignoring Method, and HashMap Usage. HOT-PEPPER derives four versions of the apps by correcting each detected smell independently, and all of them at once. HOT-PEPPER is able to report on the energy consumption of each app version with a single user scenario test. Our empirical study on five open-source Android apps shows that correcting the three aforementioned Android code smells effectively and significantly reduces the energy consumption of apps. In particular, we observed a global reduction in energy consumption by 4,83% in one app when the three code smells are corrected. We also take advantage of the flexibility of HOT-PEPPER to investigate the impact of three picture smells (bad picture format, compression, and bitmap format) in sample apps. We observed that the usage of optimised JPG pictures with the Android default bitmap format is the most energy efficient combination in Android apps. We believe that developers can benefit from our approach and results to guide their refactoring, and thus improve the energy consumption of their mobile apps. Android (operating system), energy consumption, mobile computing, power aware computing, public domain software, software quality, source code (software), energy impact, Android code smells, Android applications, software quality, energy consumption, code smell correction, HOT-PEPPER, automatic code smell correction, Android-specific code smells, Internal Getter-Setter, member ignoring method, HashMap usage, open-source Android apps, bitmap format, bad picture format, optimised JPG pictures, Android default bitmap format, Energy consumption, Smart phones, Androids, Humanoid robots, Mobile communication, Batteries, Android, energy consumption, code smells, picture",investigating the energy impact of android smells android code smells are bad implementation practices within android applications or apps that may lead to poor software quality these code smells are known to degrade the performance of apps and to have an impact on energy consumption however few studies have assessed the positive impact on energy consumption when correcting code smells in this paper we therefore propose a tooled and reproducible approach called hot pepper to automatically correct code smells and evaluate their impact on energy consumption currently hot pepper is able to automatically correct three types of android specific code smells internal getter setter member ignoring method and hashmap usage hot pepper derives four versions of the apps by correcting each detected smell independently and all of them at once hot pepper is able to report on the energy consumption of each app version with a single user scenario test our empirical study on five open source android apps shows that correcting the three aforementioned android code smells effectively and significantly reduces the energy consumption of apps in particular we observed a global reduction in energy consumption by 4 83 in one app when the three code smells are corrected we also take advantage of the flexibility of hot pepper to investigate the impact of three picture smells bad picture format compression and bitmap format in sample apps we observed that the usage of optimised jpg pictures with the android default bitmap format is the most energy efficient combination in android apps we believe that developers can benefit from our approach and results to guide their refactoring and thus improve the energy consumption of their mobile apps android operating system energy consumption mobile computing power aware computing public domain software software quality source code software energy impact android code smells android applications software quality energy consumption code smell correction hot pepper automatic code smell correction android specific code smells internal getter setter member ignoring method hashmap usage open source android apps bitmap format bad picture format optimised jpg pictures android default bitmap format energy consumption smart phones androids humanoid robots mobile communication batteries android energy consumption code smells picture,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
261,0,"JSNOSE: Detecting JavaScript Code Smells JavaScript is a powerful and flexible prototype-based scripting language that is increasingly used by developers to create interactive web applications. The language is interpreted, dynamic, weakly-typed, and has first-class functions. In addition, it interacts with other web languages such as CSS and HTML at runtime. All these characteristics make JavaScript code particularly error-prone and challenging to write and maintain. Code smells are patterns in the source code that can adversely influence program comprehension and maintainability of the program in the long term. We propose a set of 13 JavaScript code smells, collected from various developer resources. We present a JavaScript code smell detection technique called JSNOSE. Our metric-based approach combines static and dynamic analysis to detect smells in client-side code. This automated technique can help developers to spot code that could benefit from refactoring. We evaluate the smell finding capabilities of our technique through an empirical study. By analyzing 11 web applications, we investigate which smells detected by JSNOSE are more prevalent. Internet, Java, program debugging, refactoring, HTML languages, CSS languages, interactive Web applications, prototype-based scripting language, JavaScript code smells detection technique, JSNOSE technique, HTML, Cascading style sheets, Reactive power, Runtime, Measurement, Prototypes, Conferences, JavaScript, code smell, web applications, smell detection",jsnose detecting javascript code smells javascript is a powerful and flexible prototype based scripting language that is increasingly used by developers to create interactive web applications the language is interpreted dynamic weakly typed and has first class functions in addition it interacts with other web languages such as css and html at runtime all these characteristics make javascript code particularly error prone and challenging to write and maintain code smells are patterns in the source code that can adversely influence program comprehension and maintainability of the program in the long term we propose a set of 13 javascript code smells collected from various developer resources we present a javascript code smell detection technique called jsnose our metric based approach combines static and dynamic analysis to detect smells in client side code this automated technique can help developers to spot code that could benefit from refactoring we evaluate the smell finding capabilities of our technique through an empirical study by analyzing 11 web applications we investigate which smells detected by jsnose are more prevalent internet java program debugging refactoring html languages css languages interactive web applications prototype based scripting language javascript code smells detection technique jsnose technique html cascading style sheets reactive power runtime measurement prototypes conferences javascript code smell web applications smell detection,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
262,0,"Analyzing Websites for User-visible Security Design Flaws An increasing number of people rely on secure websites to carry out their daily business. A survey conducted by Pew Internet states 42% of all internet users bank online. Considering the types of secure transactions being conducted, businesses are rigorously testing their sites for security flaws. In spite of this testing, some design flaws still remain that prevent secure usage. In this paper, we examine the prevalence of user-visible security design flaws by looking at sites from 214 U.S. financial institutions. We specifically chose financial websites because of their high security requirements. We found a number of flaws that may lead users to make bad security decisions, even if they are knowledgeable about security and exhibit proper browser use consistent with the site's security policies. To our surprise, these design flaws were widespread. We found that 76% of the sites in our survey suffered from at least one design flaw. This indicates that these flaws are not widely understood, even by experts who are responsible for web security. Finally, we present our methodology for testing websites and discuss how it can help systematically discover user-visible security design flaws. []",analyzing websites for user visible security design flaws an increasing number of people rely on secure websites to carry out their daily business a survey conducted by pew internet states 42 of all internet users bank online considering the types of secure transactions being conducted businesses are rigorously testing their sites for security flaws in spite of this testing some design flaws still remain that prevent secure usage in this paper we examine the prevalence of user visible security design flaws by looking at sites from 214 u s financial institutions we specifically chose financial websites because of their high security requirements we found a number of flaws that may lead users to make bad security decisions even if they are knowledgeable about security and exhibit proper browser use consistent with the site s security policies to our surprise these design flaws were widespread we found that 76 of the sites in our survey suffered from at least one design flaw this indicates that these flaws are not widely understood even by experts who are responsible for web security finally we present our methodology for testing websites and discuss how it can help systematically discover user visible security design flaws,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
263,0,"Implementation of Behaviour Based Robot with Sense of Smell and Sight Mobile olfaction and odour source localisation has become a noticeable research field in recent years. Current developments in mobile robots and the dynamic nature of environments that the robot performs its tasks have increased robot's computation requirements. Behaviour based robot has been lauded to be robust and cost effective to counter the earlier mentioned problems. Experiments leading to the implementation of our behaviour based robot in this paper were done on our integrated testbed built specifically for mobile olfaction related experiments. The functionality and advantages of using the testbed were highlighted. Furthermore, various mapping techniques were implemented for both single and multiple robot system which has the potential to aid odour source localisation task carried by the robot. Finally, a simple behaviour based approach was implemented on a robot with sense of smell and sight in dynamic conditions to evade the time-consuming and rigidity of algorithm based approach. The enhancements of this approach on the different odour source localisation task were highlighted. A Braitenberg vehicle was implemented for odour source localisation. Mobile olfaction, Gas sensing robots, SLAM, LIDAR, Swarm robots, Braitenberg vehicle , ",implementation of behaviour based robot with sense of smell and sight mobile olfaction and odour source localisation has become a noticeable research field in recent years current developments in mobile robots and the dynamic nature of environments that the robot performs its tasks have increased robot s computation requirements behaviour based robot has been lauded to be robust and cost effective to counter the earlier mentioned problems experiments leading to the implementation of our behaviour based robot in this paper were done on our integrated testbed built specifically for mobile olfaction related experiments the functionality and advantages of using the testbed were highlighted furthermore various mapping techniques were implemented for both single and multiple robot system which has the potential to aid odour source localisation task carried by the robot finally a simple behaviour based approach was implemented on a robot with sense of smell and sight in dynamic conditions to evade the time consuming and rigidity of algorithm based approach the enhancements of this approach on the different odour source localisation task were highlighted a braitenberg vehicle was implemented for odour source localisation mobile olfaction gas sensing robots slam lidar swarm robots braitenberg vehicle,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
264,0,"Do bottlenose dolphins display behavioural response to fish taste? The chemosensory abilities (i.e. taste, smell and trigeminal perception) of odontocete cetaceans are still widely unknown. However, a better understanding of their potential use of these senses would not only improve our knowledge of their behavioural ecology, but also allow us to develop behavioural enrichment strategies for captive odontocetes using sensory stimulation. While studies on taste bud anatomy and taste receptor genes in these animals have provided useful information, ultimately behavioural experiments are crucial to assess whether odontocetes use their sense of taste in water. Go/no go and conditioning experiments in bottlenose dolphins (Tursiops truncatus) have previously shown that they can perceive basic tastes, but it is still unclear whether they are able to detect food-related chemical mixtures. We thus designed a spontaneous choice experiment using floating taste diffusers in order to test whether captive bottlenose dolphins could detect and display attraction behaviours towards a natural fish taste stimulus. Four dolphins, two adult males and two juvenile females, were involved in the experiment. Our results show that the juvenile females interacted with the fish taste diffuser significantly more than with the control. However, the adult males did not seem to make a clear choice. Also, the juvenile females showed a significantly greater level of motivation towards the test, spending more time interacting with the diffusers and holding them in their open mouth more often than the adult males. These findings corroborate previous behavioural studies suggesting that taste perception is functional in bottlenose dolphins, at least in young individuals. They also suggest that the taste of their natural prey could be attractive to them. Finally, the methodology used in this study proved to be easy to implement in captive odontocetes and will allow for investigating further their use of taste in feeding and social contexts without the need for conditioning experiments that require long periods of training. This experimental design could also be included in behavioural enrichment initiatives in captive marine mammals. Sensory stimulation, Toothed whales, Taste, Enrichment, Spontaneous behaviour, Chemoreception",do bottlenose dolphins display behavioural response to fish taste the chemosensory abilities i e taste smell and trigeminal perception of odontocete cetaceans are still widely unknown however a better understanding of their potential use of these senses would not only improve our knowledge of their behavioural ecology but also allow us to develop behavioural enrichment strategies for captive odontocetes using sensory stimulation while studies on taste bud anatomy and taste receptor genes in these animals have provided useful information ultimately behavioural experiments are crucial to assess whether odontocetes use their sense of taste in water go no go and conditioning experiments in bottlenose dolphins tursiops truncatus have previously shown that they can perceive basic tastes but it is still unclear whether they are able to detect food related chemical mixtures we thus designed a spontaneous choice experiment using floating taste diffusers in order to test whether captive bottlenose dolphins could detect and display attraction behaviours towards a natural fish taste stimulus four dolphins two adult males and two juvenile females were involved in the experiment our results show that the juvenile females interacted with the fish taste diffuser significantly more than with the control however the adult males did not seem to make a clear choice also the juvenile females showed a significantly greater level of motivation towards the test spending more time interacting with the diffusers and holding them in their open mouth more often than the adult males these findings corroborate previous behavioural studies suggesting that taste perception is functional in bottlenose dolphins at least in young individuals they also suggest that the taste of their natural prey could be attractive to them finally the methodology used in this study proved to be easy to implement in captive odontocetes and will allow for investigating further their use of taste in feeding and social contexts without the need for conditioning experiments that require long periods of training this experimental design could also be included in behavioural enrichment initiatives in captive marine mammals sensory stimulation toothed whales taste enrichment spontaneous behaviour chemoreception,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
265,0,"Security Smells in Android The ubiquity of smartphones, and their very broad capabilities and usage, make the security of these devices tremendously important. Unfortunately, despite all progress in security and privacy mechanisms, vulnerabilities continue to proliferate.,,Research has shown that many vulnerabilities are due to insecure programming practices. However, each study has often dealt with a specific issue, making the results less actionable for practitioners. To promote secure programming practices, we have reviewed related research, and identified avoidable vulnerabilities in Android-run devices and the security code smells that indicate their presence. In particular, we explain the vulnerabilities, their corresponding smells, and we discuss how they could be eliminated or mitigated during development. Moreover, we develop a lightweight static analysis tool and discuss the extent to which it successfully detects several vulnerabilities in about 46 000 apps hosted by the official Android market. Android (operating system), data privacy, invasive software, mobile computing, program diagnostics, programming, smart phones, source code (software), privacy mechanisms, secure programming practices, security code, Android, smartphones, security mechanisms, security code smells, static analysis tool, Libraries, Androids, Humanoid robots, Tools, Cryptography, Smart phones, Security, Smell, Android, Programming",security smells in android the ubiquity of smartphones and their very broad capabilities and usage make the security of these devices tremendously important unfortunately despite all progress in security and privacy mechanisms vulnerabilities continue to proliferate research has shown that many vulnerabilities are due to insecure programming practices however each study has often dealt with a specific issue making the results less actionable for practitioners to promote secure programming practices we have reviewed related research and identified avoidable vulnerabilities in android run devices and the security code smells that indicate their presence in particular we explain the vulnerabilities their corresponding smells and we discuss how they could be eliminated or mitigated during development moreover we develop a lightweight static analysis tool and discuss the extent to which it successfully detects several vulnerabilities in about 46 000 apps hosted by the official android market android operating system data privacy invasive software mobile computing program diagnostics programming smart phones source code software privacy mechanisms secure programming practices security code android smartphones security mechanisms security code smells static analysis tool libraries androids humanoid robots tools cryptography smart phones security smell android programming,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
266,0,"Impact of Gamification on Code Review Process: An Experimental Study Researchers have supported the idea of gamification to enhance students' interest in activities like code reviews, change management, knowledge management, issue tracking, etc. which might otherwise be repetitive and monotonous. We performed an experimental study consisting of nearly 180+ participants to measure the impact of gamification on code review process using 5 different code review tools, including one gamified code review instance from our extensible architectural framework. We assess the impact of gamification based on the code smells and bugs identified in a gamified and non-gamified environment as per code inspection report. Further, measurement and comparison of the quantity and usefulness of code review comments was done using machine learning techniques. Architectural Framework, Classification, Code Reviews, Evaluation, Gamification, Text Analysis",impact of gamification on code review process an experimental study researchers have supported the idea of gamification to enhance students interest in activities like code reviews change management knowledge management issue tracking etc which might otherwise be repetitive and monotonous we performed an experimental study consisting of nearly 180 participants to measure the impact of gamification on code review process using 5 different code review tools including one gamified code review instance from our extensible architectural framework we assess the impact of gamification based on the code smells and bugs identified in a gamified and non gamified environment as per code inspection report further measurement and comparison of the quantity and usefulness of code review comments was done using machine learning techniques architectural framework classification code reviews evaluation gamification text analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
267,0,"Process Mining Multiple Repositories for Software Defect Resolution from Control and Organizational Perspective Issue reporting and resolution is a software engineering process supported by tools such as Issue Tracking System (ITS), Peer Code Review (PCR) system and Version Control System (VCS). Several open source software projects such as Google Chromium and Android follow process in which a defect or feature enhancement request is reported to an issue tracker followed by source-code change or patch review and patch commit using a version control system. We present an application of process mining three software repositories (ITS, PCR and VCS) from control flow and organizational perspective for effective process management. ITS, PCR and VCS are not explicitly linked so we implement regular expression based heuristics to integrate data from three repositories for Google Chromium project. We define activities such as bug reporting, bug fixing, bug verification, patch submission, patch review, and source code commit and create an event log of the bug resolution process. The extracted event log contains audit trail data such as caseID, timestamp, activity name and performer. We discover runtime process model for bug resolution process spanning three repositories using process mining tool, Disco, and conduct process performance and efficiency analysis. We identify bottlenecks, define and detect basic and composite anti-patterns. In addition to control flow analysis, we mine event log to perform organizational analysis and discover metrics such as handover of work, subcontracting, joint cases and joint activities. Empirical Software Engineering and Measurements, Issue Tracking System, Peer Code Review System, Process Mining, Social Network Analysis, Software Maintenance",process mining multiple repositories for software defect resolution from control and organizational perspective issue reporting and resolution is a software engineering process supported by tools such as issue tracking system its peer code review pcr system and version control system vcs several open source software projects such as google chromium and android follow process in which a defect or feature enhancement request is reported to an issue tracker followed by source code change or patch review and patch commit using a version control system we present an application of process mining three software repositories its pcr and vcs from control flow and organizational perspective for effective process management its pcr and vcs are not explicitly linked so we implement regular expression based heuristics to integrate data from three repositories for google chromium project we define activities such as bug reporting bug fixing bug verification patch submission patch review and source code commit and create an event log of the bug resolution process the extracted event log contains audit trail data such as caseid timestamp activity name and performer we discover runtime process model for bug resolution process spanning three repositories using process mining tool disco and conduct process performance and efficiency analysis we identify bottlenecks define and detect basic and composite anti patterns in addition to control flow analysis we mine event log to perform organizational analysis and discover metrics such as handover of work subcontracting joint cases and joint activities empirical software engineering and measurements issue tracking system peer code review system process mining social network analysis software maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
268,0,"Detecting Android Smells Using Multi-objective Genetic Programming The evolution rate of mobile applications is much higher than regular software applications having shorter release deadlines and smaller code base. Mobile applications tend to be evolved quickly by developers to meet several new customer requirements and fix discovered bugs. However, evolving the existing features and design may introduce bad design practices, also called code smells, which can highly decrease the maintainability and performance of these mobile applications. However, unlike the area of object-oriented software systems, the detection of code smells in mobile applications received a very little of attention. Recent, few studies defined a set of quality metrics for Android applications and proposed a support to manually write a set of rules to detect code smells by combining these quality metrics. However, finding the best combination of metrics and their thresholds to identify code smells is left to the developer as a manual process. In this paper, we propose to automatically generate rules for the detection of code smells in Android applications using a multi-objective genetic programming algorithm (MOGP). The MOGP algorithm aims at finding the best set of rules that cover a set of code smell examples of Android applications based on two conflicting objective functions of precision and recall. We evaluate our approach on 184 Android projects with source code hosted in GitHub. The statistical test of our results show that the generated detection rules identified 10 Android smell types on these mobile applications with an average correctness higher than 82% and an average relevance of 77% based on the feedback of active developers of mobile apps. Android apps, quality, search-based software engineering",detecting android smells using multi objective genetic programming the evolution rate of mobile applications is much higher than regular software applications having shorter release deadlines and smaller code base mobile applications tend to be evolved quickly by developers to meet several new customer requirements and fix discovered bugs however evolving the existing features and design may introduce bad design practices also called code smells which can highly decrease the maintainability and performance of these mobile applications however unlike the area of object oriented software systems the detection of code smells in mobile applications received a very little of attention recent few studies defined a set of quality metrics for android applications and proposed a support to manually write a set of rules to detect code smells by combining these quality metrics however finding the best combination of metrics and their thresholds to identify code smells is left to the developer as a manual process in this paper we propose to automatically generate rules for the detection of code smells in android applications using a multi objective genetic programming algorithm mogp the mogp algorithm aims at finding the best set of rules that cover a set of code smell examples of android applications based on two conflicting objective functions of precision and recall we evaluate our approach on 184 android projects with source code hosted in github the statistical test of our results show that the generated detection rules identified 10 android smell types on these mobile applications with an average correctness higher than 82 and an average relevance of 77 based on the feedback of active developers of mobile apps android apps quality search based software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
269,0,"The sweet smell of\ldots courtship: Effects of pleasant ambient fragrance on women's receptivity to a man's courtship request Studies have shown that pleasant scents favor positive social relationships. However, the effect of pleasant ambient odor on romantic relationships has never been tested. In a field experiment, 18--25 year old women walking alone in a shopping mall were approached by an attractive 20 year old male-confederate who solicited them for their phone number. The women were solicited as they were walking in areas with pleasant ambient odors (e.g., pastries) or with no odor. It was found that women agreed more often to the confederate's courtship solicitation in the pleasant smelling areas. Positive mood induced by ambient odors may explain such results. Odor, Environment, Woman, Request, Courtship",the sweet smell of ldots courtship effects of pleasant ambient fragrance on women s receptivity to a man s courtship request studies have shown that pleasant scents favor positive social relationships however the effect of pleasant ambient odor on romantic relationships has never been tested in a field experiment 18 25 year old women walking alone in a shopping mall were approached by an attractive 20 year old male confederate who solicited them for their phone number the women were solicited as they were walking in areas with pleasant ambient odors e g pastries or with no odor it was found that women agreed more often to the confederate s courtship solicitation in the pleasant smelling areas positive mood induced by ambient odors may explain such results odor environment woman request courtship,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
270,0,"Cough Triggers and Their Pathophysiology in Patients with Prolonged or Chronic Cough ABSTRACT Background The character or timing of chronic cough is considered to be unpredictable for diagnosing its cause. However, the associations of cough triggers with cough pathophysiology remains unknown. Methods We developed a closed questionnaire listing 18 triggers that were reported by ≥1% of 213 patients in a retrospective survey. Using this questionnaire, patients with cough-predominant or cough-variant asthma (n = 140) and those with non-asthmatic cough (54) were asked whether their cough was induced by the listed triggers. Associations of triggers with causes of cough, airway sensitivity to inhaled methacholine, exhaled nitric oxide (NO) levels, number of sensitizing allergens, and scores from gastroesophageal reflux (GER) questionnaires were examined. Factor analysis was used to categorize variables, including the 12 most common cough triggers, diagnosis of asthmatic cough, airway sensitivity, and exhaled NO levels. Results Cold air and fatigue/stress induced cough more often in asthmatic coughers than in non-asthmatic coughers. Spices and meals induced cough more frequently in GER-coughers (n = 19). Patients who marked cold air as the trigger were more sensitive to inhaled methacholine and showed higher exhaled NO levels than those who did not mark this trigger. The post-nasal drip trigger was associated with elevated exhaled NO levels, and this association was mainly exhibited by patients with cough-predominant asthma. The triggers pollen and mold smell were associated with a number of sensitizing allergens. The number of triggers was weakly associated with GER scores. By factor analysis, cold air, fatigue/stress, asthmatic cough, airway hypersensitivity, and elevated NO levels were categorized into the same factor. Conclusions Several cough triggers may reflect the pathophysiology of prolonged or chronic cough. allergens, chronic cough, cough triggers, cough variant asthma, gastroesophageal reflux",cough triggers and their pathophysiology in patients with prolonged or chronic cough abstract background the character or timing of chronic cough is considered to be unpredictable for diagnosing its cause however the associations of cough triggers with cough pathophysiology remains unknown methods we developed a closed questionnaire listing 18 triggers that were reported by 1 of 213 patients in a retrospective survey using this questionnaire patients with cough predominant or cough variant asthma n 140 and those with non asthmatic cough 54 were asked whether their cough was induced by the listed triggers associations of triggers with causes of cough airway sensitivity to inhaled methacholine exhaled nitric oxide no levels number of sensitizing allergens and scores from gastroesophageal reflux ger questionnaires were examined factor analysis was used to categorize variables including the 12 most common cough triggers diagnosis of asthmatic cough airway sensitivity and exhaled no levels results cold air and fatigue stress induced cough more often in asthmatic coughers than in non asthmatic coughers spices and meals induced cough more frequently in ger coughers n 19 patients who marked cold air as the trigger were more sensitive to inhaled methacholine and showed higher exhaled no levels than those who did not mark this trigger the post nasal drip trigger was associated with elevated exhaled no levels and this association was mainly exhibited by patients with cough predominant asthma the triggers pollen and mold smell were associated with a number of sensitizing allergens the number of triggers was weakly associated with ger scores by factor analysis cold air fatigue stress asthmatic cough airway hypersensitivity and elevated no levels were categorized into the same factor conclusions several cough triggers may reflect the pathophysiology of prolonged or chronic cough allergens chronic cough cough triggers cough variant asthma gastroesophageal reflux,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
271,0,"Do dogs (Canis lupus familiaris) prefer family? Kin recognition requires the ability to discriminate between one's own genetic relatives and non-relatives. There are two mechanisms that aid in kin discrimination: phenotype matching and familiarity. Dogs may be a good model for assessing these mechanisms as dogs are a promiscuous social species with a keen sense of smell. Domestic dogs of both sexes were presented with two scents (close kin, distant-kin) and preference was assessed through three measures (latency to approach, number of visits, time spent). Experiment 1 explored the possibility of phenotype matching as subjects had no contact with sires, whose scent was presented alongside a control male's scent. Experiment 2 explored recognition of siblings raised with the subjects and then separated at seven weeks of age. Whereas female dogs in this experiment did not show a statistically significant preference, male dogs showed a preference for distant-kin when presented with sire and female sibling samples. Kin preference, Kin discrimination, Phenotype matching, Domestic dogs",do dogs canis lupus familiaris prefer family kin recognition requires the ability to discriminate between one s own genetic relatives and non relatives there are two mechanisms that aid in kin discrimination phenotype matching and familiarity dogs may be a good model for assessing these mechanisms as dogs are a promiscuous social species with a keen sense of smell domestic dogs of both sexes were presented with two scents close kin distant kin and preference was assessed through three measures latency to approach number of visits time spent experiment 1 explored the possibility of phenotype matching as subjects had no contact with sires whose scent was presented alongside a control male s scent experiment 2 explored recognition of siblings raised with the subjects and then separated at seven weeks of age whereas female dogs in this experiment did not show a statistically significant preference male dogs showed a preference for distant kin when presented with sire and female sibling samples kin preference kin discrimination phenotype matching domestic dogs,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
272,0,"Software test-code engineering: A systematic mapping Context As a result of automated software testing, large amounts of software test code (script) are usually developed by software teams. Automated test scripts provide many benefits, such as repeatable, predictable, and efficient test executions. However, just like any software development activity, development of test scripts is tedious and error prone. We refer, in this study, to all activities that should be conducted during the entire lifecycle of test-code as Software Test-Code Engineering (STCE). Objective As the STCE research area has matured and the number of related studies has increased, it is important to systematically categorize the current state-of-the-art and to provide an overview of the trends in this field. Such summarized and categorized results provide many benefits to the broader community. For example, they are valuable resources for new researchers (e.g., PhD students) aiming to conduct additional secondary studies. Method In this work, we systematically classify the body of knowledge related to STCE through a systematic mapping (SM) study. As part of this study, we pose a set of research questions, define selection and exclusion criteria, and systematically develop and refine a systematic map. Results Our study pool includes a set of 60 studies published in the area of STCE between 1999 and 2012. Our mapping data is available through an online publicly-accessible repository. We derive the trends for various aspects of STCE. Among our results are the following: (1) There is an acceptable mix of papers with respect to different contribution facets in the field of STCE and the top two leading facets are tool (68%) and method (65%). The studies that presented new processes, however, had a low rate (3%), which denotes the need for more process-related studies in this area. (2) Results of investigation about research facet of studies and comparing our result to other SM studies shows that, similar to other fields in software engineering, STCE is moving towards more rigorous validation approaches. (3) A good mixture of STCE activities has been presented in the primary studies. Among them, the two leading activities are quality assessment and co-maintenance of test-code with production code. The highest growth rate for co-maintenance activities in recent years shows the importance and challenges involved in this activity. (4) There are two main categories of quality assessment activity: detection of test smells and oracle assertion adequacy. (5) JUnit is the leading test framework which has been used in about 50% of the studies. (6) There is a good mixture of SUT types used in the studies: academic experimental systems (or simple code examples), real open-source and commercial systems. (7) Among 41 tools that are proposed for STCE, less than half of the tools (45%) were available for download. It is good to have this percentile of tools to be available, although not perfect, since the availability of tools can lead to higher impact on research community and industry. Conclusion We discuss the emerging trends in STCE, and discuss the implications for researchers and practitioners in this area. The results of our systematic mapping can help researchers to obtain an overview of existing STCE approaches and spot areas in the field that require more attention from the research community. Systematic mapping, Survey, Study repository, Software test-code engineering, Development of test code, Quality assessment of test code",software test code engineering a systematic mapping context as a result of automated software testing large amounts of software test code script are usually developed by software teams automated test scripts provide many benefits such as repeatable predictable and efficient test executions however just like any software development activity development of test scripts is tedious and error prone we refer in this study to all activities that should be conducted during the entire lifecycle of test code as software test code engineering stce objective as the stce research area has matured and the number of related studies has increased it is important to systematically categorize the current state of the art and to provide an overview of the trends in this field such summarized and categorized results provide many benefits to the broader community for example they are valuable resources for new researchers e g phd students aiming to conduct additional secondary studies method in this work we systematically classify the body of knowledge related to stce through a systematic mapping sm study as part of this study we pose a set of research questions define selection and exclusion criteria and systematically develop and refine a systematic map results our study pool includes a set of 60 studies published in the area of stce between 1999 and 2012 our mapping data is available through an online publicly accessible repository we derive the trends for various aspects of stce among our results are the following 1 there is an acceptable mix of papers with respect to different contribution facets in the field of stce and the top two leading facets are tool 68 and method 65 the studies that presented new processes however had a low rate 3 which denotes the need for more process related studies in this area 2 results of investigation about research facet of studies and comparing our result to other sm studies shows that similar to other fields in software engineering stce is moving towards more rigorous validation approaches 3 a good mixture of stce activities has been presented in the primary studies among them the two leading activities are quality assessment and co maintenance of test code with production code the highest growth rate for co maintenance activities in recent years shows the importance and challenges involved in this activity 4 there are two main categories of quality assessment activity detection of test smells and oracle assertion adequacy 5 junit is the leading test framework which has been used in about 50 of the studies 6 there is a good mixture of sut types used in the studies academic experimental systems or simple code examples real open source and commercial systems 7 among 41 tools that are proposed for stce less than half of the tools 45 were available for download it is good to have this percentile of tools to be available although not perfect since the availability of tools can lead to higher impact on research community and industry conclusion we discuss the emerging trends in stce and discuss the implications for researchers and practitioners in this area the results of our systematic mapping can help researchers to obtain an overview of existing stce approaches and spot areas in the field that require more attention from the research community systematic mapping survey study repository software test code engineering development of test code quality assessment of test code,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
273,0,"Influence of food odorant names on the verbal measurement of emotions The aim of this study was to investigate the influence of food odorant names on feelings through the verbal measurement of emotions. Two experiments were conducted. In the first experiment, 88 participants were asked to report their feelings about 17 food odorants, randomly presented in six sensory booth sessions and in three conditions. In two conditions, an actual odorant was presented blind or in association with its name. In a third condition, only the odorant name was presented. Feeling measurements were conducted by using the ScentMoveTM questionnaire (Porcherot et al., 2010). Participants also rated the familiarity, acceptability, and typicality of the odorants. Results indicated that the odorant name information may influence the reported feelings, as already observed by several authors for traditional liking assessments, with differences among feeling dimensions and odorants. The odorants could be gathered into four groups, with either matches between expected feelings from the odorant name and experienced feelings from the smell evaluation for eight odorants (e.g., caramel, citrus, and mint), or discrepancies between expected and experience feelings for nine odorants, and with no effect of the odorant name information (e.g., strawberry, vanilla), few, or high positive effects of the odorant name information (e.g., cola, chicken). Typicality scores did not differ between the different groups, showing that higher odorant typicality would not systematically result in a match between expectation and experience, or in a positive effect of the name information. It was therefore investigated in a second experiment if the group constitution could be explained by the odorant recognition scores that were measured from a free recognition task for the 17 odorants presented in the blind condition. The results of the two experiments are discussed in relation to dissimilarities between smell and food experiences and to lack of context. Emotion, Hedonic response, Feelings, Expectation, Quality, Food odor",influence of food odorant names on the verbal measurement of emotions the aim of this study was to investigate the influence of food odorant names on feelings through the verbal measurement of emotions two experiments were conducted in the first experiment 88 participants were asked to report their feelings about 17 food odorants randomly presented in six sensory booth sessions and in three conditions in two conditions an actual odorant was presented blind or in association with its name in a third condition only the odorant name was presented feeling measurements were conducted by using the scentmovetm questionnaire porcherot et al 2010 participants also rated the familiarity acceptability and typicality of the odorants results indicated that the odorant name information may influence the reported feelings as already observed by several authors for traditional liking assessments with differences among feeling dimensions and odorants the odorants could be gathered into four groups with either matches between expected feelings from the odorant name and experienced feelings from the smell evaluation for eight odorants e g caramel citrus and mint or discrepancies between expected and experience feelings for nine odorants and with no effect of the odorant name information e g strawberry vanilla few or high positive effects of the odorant name information e g cola chicken typicality scores did not differ between the different groups showing that higher odorant typicality would not systematically result in a match between expectation and experience or in a positive effect of the name information it was therefore investigated in a second experiment if the group constitution could be explained by the odorant recognition scores that were measured from a free recognition task for the 17 odorants presented in the blind condition the results of the two experiments are discussed in relation to dissimilarities between smell and food experiences and to lack of context emotion hedonic response feelings expectation quality food odor,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
274,0,"Revisiting the limits of language: The odor lexicon of Maniq It is widely believed that human languages cannot encode odors. While this is true for English, and other related languages, data from some non-Western languages challenge this view. Maniq, a language spoken by a small population of nomadic hunter--gatherers in southern Thailand, is such a language. It has a lexicon of over a dozen terms dedicated to smell. We examined the semantics of these smell terms in 3 experiments (exemplar listing, similarity judgment and off-line rating). The exemplar listing task confirmed that Maniq smell terms have complex meanings encoding smell qualities. Analyses of the similarity data revealed that the odor lexicon is coherently structured by two dimensions. The underlying dimensions are pleasantness and dangerousness, as verified by the off-line rating study. Ethnographic data illustrate that smell terms have detailed semantics tapping into broader cultural constructs. Contrary to the widespread view that languages cannot encode odors, the Maniq data show odor can be a coherent semantic domain, thus shedding new light on the limits of language. Olfaction, Olfactory naming, Perceptual language, Cross-cultural, Maniq, Aslian",revisiting the limits of language the odor lexicon of maniq it is widely believed that human languages cannot encode odors while this is true for english and other related languages data from some non western languages challenge this view maniq a language spoken by a small population of nomadic hunter gatherers in southern thailand is such a language it has a lexicon of over a dozen terms dedicated to smell we examined the semantics of these smell terms in 3 experiments exemplar listing similarity judgment and off line rating the exemplar listing task confirmed that maniq smell terms have complex meanings encoding smell qualities analyses of the similarity data revealed that the odor lexicon is coherently structured by two dimensions the underlying dimensions are pleasantness and dangerousness as verified by the off line rating study ethnographic data illustrate that smell terms have detailed semantics tapping into broader cultural constructs contrary to the widespread view that languages cannot encode odors the maniq data show odor can be a coherent semantic domain thus shedding new light on the limits of language olfaction olfactory naming perceptual language cross cultural maniq aslian,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
275,0,"Scent Presentation Technique of Pulse Ejection Synchronized with Breathing Trials on the transmission of olfactory information together with audio/visual information are currently being conducted in the field of multimedia. However, continuous emission of odor creates problems of human adaptation to the lingering olfactory stimuli. To overcome such a problem we developed an olfactory display. This display has high emission control so that it can provide stable pulse emission of scents. We previously proposed two scent presentation methods synchronized with the userpsilas breathing pattern.The first method presents smell using a breath sensor. The second method presents smell using the ejection interval Deltat,determined by the olfactory characteristics. The results of evaluation experiments and a questionnaire survey of users revealed the proposed methods provide a continuous sense of smell to the user, avoiding adaptation. chemioception, display instrumentation, haptic interfaces, sensors, scent presentation technique, pulse ejection, olfactory information transmission, audio-visual information transmission, multimedia, olfactory display, emission control, stable pulse emission, user breathing pattern, breath sensor, ejection interval, Olfactory, Humans, Auditory displays, Flat panel displays, Sensor phenomena and characterization, Nose, Timing, Internet, Pattern matching, Wind speed, Olfactory information, Olfactory display, Inkjet, Pulse ejection, Breath synchronization",scent presentation technique of pulse ejection synchronized with breathing trials on the transmission of olfactory information together with audio visual information are currently being conducted in the field of multimedia however continuous emission of odor creates problems of human adaptation to the lingering olfactory stimuli to overcome such a problem we developed an olfactory display this display has high emission control so that it can provide stable pulse emission of scents we previously proposed two scent presentation methods synchronized with the userpsilas breathing pattern the first method presents smell using a breath sensor the second method presents smell using the ejection interval deltat determined by the olfactory characteristics the results of evaluation experiments and a questionnaire survey of users revealed the proposed methods provide a continuous sense of smell to the user avoiding adaptation chemioception display instrumentation haptic interfaces sensors scent presentation technique pulse ejection olfactory information transmission audio visual information transmission multimedia olfactory display emission control stable pulse emission user breathing pattern breath sensor ejection interval olfactory humans auditory displays flat panel displays sensor phenomena and characterization nose timing internet pattern matching wind speed olfactory information olfactory display inkjet pulse ejection breath synchronization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
276,0,"The Effect of Lexicon Bad Smells on Concept Location in Source Code Experienced programmers choose identifier names carefully, in the attempt to convey information about the role and behavior of the labeled code entity in a concise and expressive way. In fact, during program understanding the names given to code entities represent one of the major sources of information used by developers. We conjecture that lexicon bad smells, such as, extreme contractions, inconsistent term use, odd grammatical structure, etc., can hinder the execution of maintenance tasks which rely on program understanding. We propose an approach to determine the extent of this impact and instantiate it on the task of concept location. In particular, we conducted a study on two open source software systems where we investigated how lexicon bad smells affect Information Retrieval-based concept location. In this study, the classes changed in response to past modification requests are located before and after lexicon bad smells are identified and removed from the source code. The results indicate that lexicon bad smells impact concept location when using IR-based techniques. grammars, object-oriented programming, public domain software, reverse engineering, software maintenance, lexicon bad smell, source code concept location, identifier name, labeled code entity, program understanding, extreme contraction, inconsistent term use, odd grammatical structure, maintenance task execution, open source software system, information retrieval, modification request, object-oriented software system, Software systems, Maintenance engineering, Computer bugs, Filtering, Containers, Terminology, lexicon bad smells, program comprehension, concept location, text retrieval, software lexicon, code smells",the effect of lexicon bad smells on concept location in source code experienced programmers choose identifier names carefully in the attempt to convey information about the role and behavior of the labeled code entity in a concise and expressive way in fact during program understanding the names given to code entities represent one of the major sources of information used by developers we conjecture that lexicon bad smells such as extreme contractions inconsistent term use odd grammatical structure etc can hinder the execution of maintenance tasks which rely on program understanding we propose an approach to determine the extent of this impact and instantiate it on the task of concept location in particular we conducted a study on two open source software systems where we investigated how lexicon bad smells affect information retrieval based concept location in this study the classes changed in response to past modification requests are located before and after lexicon bad smells are identified and removed from the source code the results indicate that lexicon bad smells impact concept location when using ir based techniques grammars object oriented programming public domain software reverse engineering software maintenance lexicon bad smell source code concept location identifier name labeled code entity program understanding extreme contraction inconsistent term use odd grammatical structure maintenance task execution open source software system information retrieval modification request object oriented software system software systems maintenance engineering computer bugs filtering containers terminology lexicon bad smells program comprehension concept location text retrieval software lexicon code smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
277,0,"Advances in assessing the elemental composition of distilled spirits using atomic spectrometry Elements that affect the taste, the smell and the color of distilled spirits can originate from raw materials and utensils used for processing and reach levels from several to hundreds of thousands of µg L−1. Determinations of certain elements in distilled spirits are required to assess their quality and safety and can be used to judge their nutritional value or to verify if finished products conform to specific safety regulations. This review is dedicated to spectrochemical techniques and sample-preparation procedures used in elemental analysis of distilled spirits and covers studies published in the past 20 years. We pay particular attention to sample-treatment procedures and calibration strategies prior to measurements by different atomic spectrometry methods. We also discuss possible sources of elements in distilled spirits and the suitability of the information about elemental contents for identifying and classifying distilled spirits. Atomic absorption spectrometry, Calibration, Distilled spirits, Elemental analysis, Mass spectrometry, Optical emission spectrometry, Quality assurance, Quality control, Sample preparation, Spectrochemical technique",advances in assessing the elemental composition of distilled spirits using atomic spectrometry elements that affect the taste the smell and the color of distilled spirits can originate from raw materials and utensils used for processing and reach levels from several to hundreds of thousands of g l 1 determinations of certain elements in distilled spirits are required to assess their quality and safety and can be used to judge their nutritional value or to verify if finished products conform to specific safety regulations this review is dedicated to spectrochemical techniques and sample preparation procedures used in elemental analysis of distilled spirits and covers studies published in the past 20 years we pay particular attention to sample treatment procedures and calibration strategies prior to measurements by different atomic spectrometry methods we also discuss possible sources of elements in distilled spirits and the suitability of the information about elemental contents for identifying and classifying distilled spirits atomic absorption spectrometry calibration distilled spirits elemental analysis mass spectrometry optical emission spectrometry quality assurance quality control sample preparation spectrochemical technique,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
278,0,"Pseudo-gustatory display system based on cross-modal integration of vision, olfaction and gustation In this paper, we propose a pseudo-gustatory display based on the cross-modal interactions that underlie the perception of flavor. Although several studies on visual, auditory, haptic, and olfactory displays have been conducted, gustatory displays have seldom been studied. This scarcity has been attributed to the fact that synthesizing arbitrary taste from basic tastants is difficult. On the other hand, it has been noted that the perception of taste is influenced by visual cues, auditory cues, smell, the trigeminal system, and touch. In our research, we aim at utilizing this influence between modalities for realizing a ""pseudo-gustatory"" system that enables the user to experience various tastes without changing the chemical composition of foods. Based on this concept, we built a ""Meta Cookie"" system to change the perceived taste of a cookie by overlaying visual and olfactory information onto a real cookie which an AR marker pattern. We performed an experiment that investigates how people experience the flavor of a plain cookie by using our system. The result suggests that our system can change the perceived taste based on the effect of the cross-modal interaction of vision, olfaction and gustation. augmented reality, chemioception, display instrumentation, food technology, haptic interfaces, pseudogustatory display system, crossmodal integration, olfactory display, haptic display, auditory display, visual display, trigeminal system, food chemical composition, Meta Cookie system, AR marker pattern, Olfactory, Cameras, Visualization, Chemicals, Mouth, Virtual reality, Gustatory Display, Pseudo-gustation, Olfactory Display, Cross-modal Integration, Augmented Reality",pseudo gustatory display system based on cross modal integration of vision olfaction and gustation in this paper we propose a pseudo gustatory display based on the cross modal interactions that underlie the perception of flavor although several studies on visual auditory haptic and olfactory displays have been conducted gustatory displays have seldom been studied this scarcity has been attributed to the fact that synthesizing arbitrary taste from basic tastants is difficult on the other hand it has been noted that the perception of taste is influenced by visual cues auditory cues smell the trigeminal system and touch in our research we aim at utilizing this influence between modalities for realizing a pseudo gustatory system that enables the user to experience various tastes without changing the chemical composition of foods based on this concept we built a meta cookie system to change the perceived taste of a cookie by overlaying visual and olfactory information onto a real cookie which an ar marker pattern we performed an experiment that investigates how people experience the flavor of a plain cookie by using our system the result suggests that our system can change the perceived taste based on the effect of the cross modal interaction of vision olfaction and gustation augmented reality chemioception display instrumentation food technology haptic interfaces pseudogustatory display system crossmodal integration olfactory display haptic display auditory display visual display trigeminal system food chemical composition meta cookie system ar marker pattern olfactory cameras visualization chemicals mouth virtual reality gustatory display pseudo gustation olfactory display cross modal integration augmented reality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
279,0,"Oestrus odours from rats and mares: Behavioural responses of sexually naive and experienced rats to natural odours and odorants Three experiments were conducted to investigate if sexual experience affects the behavioural response of male rats to natural oestrus odours and constituent odorants. In the first experiment, 16 male Brown Norway rats were exposed before and after sexual training to four odours (1-hexanol (herb odour), a ketone mixture, and faeces from mares and rats in oestrus) presented one at a time to individual rats during a 30-min test. More penile erections were observed during tests when rats were exposed to the two types of faeces as well as the ketone mixture compared to 1-hexanol, both when sexually naïve (P=0.032) and experienced (P=0.002). In the second experiment, 30 male rats were tested using a habituation/dishabituation protocol. The rats were able to distinguish the ketone mixture used in Experiment 1 from another single-molecule ketone (P<0.001), which has previously been found to elicit erections in male rats. Finally in the third experiment, five faeces samples each from male, oestrus and di-oestrus rats and horses (N=30) were analysed using gas chromatography--mass spectrometry (GC--MS) for the presence of three ketones and 1-hexanol using menthol as an added calibrating compound. Although significant intra-species differences in ketone composition were found between faeces from males and females in oestrus and di-oestrus, these differences were dissimilar across species. Also, 1-hexanol was present in all six faeces types. The results indicate that the ketones used may not be specific oestrus odorants, but may share volatile characteristics with natural oestrus odours. These findings are discussed in relation to oestrus odours and their potential commonality across mammalian species. Brown Norway rat, Horse, Allelochemics, Olfaction, Penile erection, Ketones",oestrus odours from rats and mares behavioural responses of sexually naive and experienced rats to natural odours and odorants three experiments were conducted to investigate if sexual experience affects the behavioural response of male rats to natural oestrus odours and constituent odorants in the first experiment 16 male brown norway rats were exposed before and after sexual training to four odours 1 hexanol herb odour a ketone mixture and faeces from mares and rats in oestrus presented one at a time to individual rats during a 30 min test more penile erections were observed during tests when rats were exposed to the two types of faeces as well as the ketone mixture compared to 1 hexanol both when sexually na ve p 0 032 and experienced p 0 002 in the second experiment 30 male rats were tested using a habituation dishabituation protocol the rats were able to distinguish the ketone mixture used in experiment 1 from another single molecule ketone p 0 001 which has previously been found to elicit erections in male rats finally in the third experiment five faeces samples each from male oestrus and di oestrus rats and horses n 30 were analysed using gas chromatography mass spectrometry gc ms for the presence of three ketones and 1 hexanol using menthol as an added calibrating compound although significant intra species differences in ketone composition were found between faeces from males and females in oestrus and di oestrus these differences were dissimilar across species also 1 hexanol was present in all six faeces types the results indicate that the ketones used may not be specific oestrus odorants but may share volatile characteristics with natural oestrus odours these findings are discussed in relation to oestrus odours and their potential commonality across mammalian species brown norway rat horse allelochemics olfaction penile erection ketones,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
280,0,"Self-heating of dried wastewater sludge We experimentally studied the occurrence of spontaneous self-heating of sludge after drying, to understand its nature, course and remediation. The sludge originates from primary and biological treatment of both municipal and industrial wastewater, the latter largely dominant (approx. 90% total organic carbon, mainly from local tanneries). Dried sludge is collected into big--bags (approx. 1.5m3) and landfilled in a dedicated site. After several years of regular operation of the landfill, without any management or environmental issue, indications of local warming emerged, together with smoke and smelling emissions, and local subsidence. During a two year monitoring activity, temperatures locally as high as 80$ ^\circ$C have been detected, 6--10m deep. Experiments were carried out on large quantities of dried sludge (∼1t), monitoring the temperature of the samples over long periods of time (months), aiming to reproduce the spontaneous self-heating, under different conditions, to spot enhancing and damping factors. Results demonstrate that air is a key factor to trigger and modulate the self-heating. Water, in addition to air, supports and emphasizes the heating. Unusual drying operation was found to affect dramatically the self-heating activity, up to spontaneous combustion, while ordinary drying conditions yield a sludge with a moderate self-heating inclination. Temperature values as well as heating time scales suggest that the exothermic process nature is mainly chemical and physical, while microbiological activity might be a co-factor. Self-heating, Self-combustion, Thermal runaway, Wetting heat, Tannery sludge",self heating of dried wastewater sludge we experimentally studied the occurrence of spontaneous self heating of sludge after drying to understand its nature course and remediation the sludge originates from primary and biological treatment of both municipal and industrial wastewater the latter largely dominant approx 90 total organic carbon mainly from local tanneries dried sludge is collected into big bags approx 1 5m3 and landfilled in a dedicated site after several years of regular operation of the landfill without any management or environmental issue indications of local warming emerged together with smoke and smelling emissions and local subsidence during a two year monitoring activity temperatures locally as high as 80 circ c have been detected 6 10m deep experiments were carried out on large quantities of dried sludge 1t monitoring the temperature of the samples over long periods of time months aiming to reproduce the spontaneous self heating under different conditions to spot enhancing and damping factors results demonstrate that air is a key factor to trigger and modulate the self heating water in addition to air supports and emphasizes the heating unusual drying operation was found to affect dramatically the self heating activity up to spontaneous combustion while ordinary drying conditions yield a sludge with a moderate self heating inclination temperature values as well as heating time scales suggest that the exothermic process nature is mainly chemical and physical while microbiological activity might be a co factor self heating self combustion thermal runaway wetting heat tannery sludge,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
281,0,"Automatic detection of usability smells in web applications Usability assessment of web applications continues to be an expensive and often neglected practice. While large companies are able to spare resources for studying and improving usability in their products, smaller businesses often divert theirs in other aspects. To help these cases, researches have devised automatic approaches for user interaction analysis, and there are commercial services that offer automated usability statistics at relatively low fees. However, most existing approaches still fall short in specifying the usability problems concretely enough to identify and suggest solutions. In this work we describe usability smells of user interaction, i.e., hints of usability problems on running web applications, and the process in which they can be identified by analyzing user interaction events. We also describe USF, the tool that implements the process in a fully automated way with minimum setup effort. USF analyses user interaction events on-the-fly, discovers usability smells and reports them together with a concrete solution in terms of a usability refactoring, providing usability advice for deployed web applications. Usability testing, Web-based interaction, Refactoring, Log analysis",automatic detection of usability smells in web applications usability assessment of web applications continues to be an expensive and often neglected practice while large companies are able to spare resources for studying and improving usability in their products smaller businesses often divert theirs in other aspects to help these cases researches have devised automatic approaches for user interaction analysis and there are commercial services that offer automated usability statistics at relatively low fees however most existing approaches still fall short in specifying the usability problems concretely enough to identify and suggest solutions in this work we describe usability smells of user interaction i e hints of usability problems on running web applications and the process in which they can be identified by analyzing user interaction events we also describe usf the tool that implements the process in a fully automated way with minimum setup effort usf analyses user interaction events on the fly discovers usability smells and reports them together with a concrete solution in terms of a usability refactoring providing usability advice for deployed web applications usability testing web based interaction refactoring log analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
282,0,"inScent: A Wearable Olfactory Display As an Amplification for Mobile Notifications We introduce inScent, a wearable olfactory display that can be worn in mobile everyday situations and allows the user to receive personal scented notifications, i.e. scentifications. Olfaction, i.e. the sense of smell, is used by humans as a sensorial information channel as an element for experiencing the environment. Olfactory sensations are closely linked to emotions and memories, but also notify about personal dangers such as fire or foulness. We want to utilize the properties of smell as a notification channel by amplifying received mobile notifications with artificially emitted scents. We built a wearable olfactory display that can be worn as a pendant around the neck and contains up to eight different scent aromas that can be inserted and quickly exchanged via small scent cartridges. Upon emission, scent aroma is vaporized and blown towards the user. A hardware - and software framework is presented that allows developers to add scents to their mobile applications. In a qualitative user study, participants wore the inScent wearable in public. We used subsequent semi-structured interviews and grounded theory to build a common understanding of the experience and derived lessons learned for the use of scentifications in mobile situations. olfaction, olfactory display, scent-based notification, wearable device",inscent a wearable olfactory display as an amplification for mobile notifications we introduce inscent a wearable olfactory display that can be worn in mobile everyday situations and allows the user to receive personal scented notifications i e scentifications olfaction i e the sense of smell is used by humans as a sensorial information channel as an element for experiencing the environment olfactory sensations are closely linked to emotions and memories but also notify about personal dangers such as fire or foulness we want to utilize the properties of smell as a notification channel by amplifying received mobile notifications with artificially emitted scents we built a wearable olfactory display that can be worn as a pendant around the neck and contains up to eight different scent aromas that can be inserted and quickly exchanged via small scent cartridges upon emission scent aroma is vaporized and blown towards the user a hardware and software framework is presented that allows developers to add scents to their mobile applications in a qualitative user study participants wore the inscent wearable in public we used subsequent semi structured interviews and grounded theory to build a common understanding of the experience and derived lessons learned for the use of scentifications in mobile situations olfaction olfactory display scent based notification wearable device,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
283,0,"A Multidimensional Empirical Study on Refactoring Activity In this paper we present an empirical study on the refactoring activity in three well-known projects. We have studied five research questions that explore the different types of refactorings applied to different types of sources, the individual contribution of team members on refactoring activities, the alignment of refactoring activity with release dates and testing periods, and the motivation behind the applied refactorings. The studied projects have a history of 12, 7, and 6 years, respectively. We have found that there is very little variation in the types of refactorings applied on test code, since the majority of the refactorings focus on the reorganization and renaming of classes. Additionally, we have identified that the refactoring decision making and application is often performed by individual refactoring ""managers"". We have found a strong alignment between refactoring activity and release dates. Moreover, we found that the development teams apply a considerable amount of refactorings during testing periods. Finally, we have also found that in addition to code smell resolution the main drivers for applying refactorings are the introduction of extension points, and the resolution of backward compatibility issues. []",a multidimensional empirical study on refactoring activity in this paper we present an empirical study on the refactoring activity in three well known projects we have studied five research questions that explore the different types of refactorings applied to different types of sources the individual contribution of team members on refactoring activities the alignment of refactoring activity with release dates and testing periods and the motivation behind the applied refactorings the studied projects have a history of 12 7 and 6 years respectively we have found that there is very little variation in the types of refactorings applied on test code since the majority of the refactorings focus on the reorganization and renaming of classes additionally we have identified that the refactoring decision making and application is often performed by individual refactoring managers we have found a strong alignment between refactoring activity and release dates moreover we found that the development teams apply a considerable amount of refactorings during testing periods finally we have also found that in addition to code smell resolution the main drivers for applying refactorings are the introduction of extension points and the resolution of backward compatibility issues,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
284,0,"Effects of nasal occlusion and oral contact on perception of metallic taste from metal salts Iron and copper salts have complex olfactory and gustatory properties including a metallic flavor component that is decreased by nasal occlusion. To examine the sensory properties of ferrous sulfate and copper sulfate, a trained descriptive panel evaluated these compounds at equal molarity and perceived equal intensity with and without nasal occlusion. Ferrous sulfate exhibited a metallic taste and metallic aftertaste and copper sulfate exhibited a more pronounced metallic aftertaste. Metallic sensations were decreased by nasal occlusion, which in the absence of any orthonasal metallic smell, implies that the sensations were retronasally perceived volatiles in the nose open condition. Ferrous sulfate showed a larger effect of nasal occlusion. A second experiment isolated ferrous sulfate solutions from oral contact via a plastic barrier. In comparison to a condition in which oral contact was allowed, intensity ratings were decreased. This result is consistent with the hypothesis that rinses with solutions of metal salts, particularly ferrous sulfate, generate volatile lipid oxidation products in the mouth that are perceived retronasally as metallic flavors. Descriptive analysis, Nasal occlusion, Retronasal smell, Metallic taste",effects of nasal occlusion and oral contact on perception of metallic taste from metal salts iron and copper salts have complex olfactory and gustatory properties including a metallic flavor component that is decreased by nasal occlusion to examine the sensory properties of ferrous sulfate and copper sulfate a trained descriptive panel evaluated these compounds at equal molarity and perceived equal intensity with and without nasal occlusion ferrous sulfate exhibited a metallic taste and metallic aftertaste and copper sulfate exhibited a more pronounced metallic aftertaste metallic sensations were decreased by nasal occlusion which in the absence of any orthonasal metallic smell implies that the sensations were retronasally perceived volatiles in the nose open condition ferrous sulfate showed a larger effect of nasal occlusion a second experiment isolated ferrous sulfate solutions from oral contact via a plastic barrier in comparison to a condition in which oral contact was allowed intensity ratings were decreased this result is consistent with the hypothesis that rinses with solutions of metal salts particularly ferrous sulfate generate volatile lipid oxidation products in the mouth that are perceived retronasally as metallic flavors descriptive analysis nasal occlusion retronasal smell metallic taste,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
285,0,"Sensing game play. Exploring computer game play in a game café and a mass LAN party In this article we discuss the sensory experiences of playing computer games by exploring the sight, the sound, the taste, smell, and touch of games. We reflect on how senses and the social atmosphere gives meaning to players' experiences of playing computer games in two co-located public settings, a game café and a mass LAN party. This discussion is related to a more general discussion concerning what it means to participate and play online and network games in a game café and a mass LAN party. The discussion is based on a field study in Sweden. We conclude by highlighting the different experiences of playing computer games and participating in those co-located game settings. In the game café playing computer games is a rather ordinary and mundane activity while playing games in the mass LAN party is to a large extent a sensational and extra ordinary event. computer games, local area networks, sensing game, computer game play, game cafe, mass LAN party, network games, online games, Sweden, Games, Computers, Local area networks, Atmosphere, Face, Legged locomotion, Internet, Sensory experiences of GAME PLAY, CO-LOCATED public GAME SETTINGS, Game café, public game play",sensing game play exploring computer game play in a game caf and a mass lan party in this article we discuss the sensory experiences of playing computer games by exploring the sight the sound the taste smell and touch of games we reflect on how senses and the social atmosphere gives meaning to players experiences of playing computer games in two co located public settings a game caf and a mass lan party this discussion is related to a more general discussion concerning what it means to participate and play online and network games in a game caf and a mass lan party the discussion is based on a field study in sweden we conclude by highlighting the different experiences of playing computer games and participating in those co located game settings in the game caf playing computer games is a rather ordinary and mundane activity while playing games in the mass lan party is to a large extent a sensational and extra ordinary event computer games local area networks sensing game computer game play game cafe mass lan party network games online games sweden games computers local area networks atmosphere face legged locomotion internet sensory experiences of game play co located public game settings game caf public game play,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
286,0,"Chirurgie d'augmentation pénienne : lipopénosculpture d'épaississement et d'allongement [] Greffe adipocytaire, Allongement de verge, Lipopénosculture, Adipose tissue transplantation, Penile elongation lipopenisculpture",chirurgie d augmentation p nienne lipop nosculpture d paississement et d allongement greffe adipocytaire allongement de verge lipop nosculture adipose tissue transplantation penile elongation lipopenisculpture,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
287,0,"Will free-ranging predators stop depredating untreated eggs in pulegone-scented gull nests after exposure to pulegone-injected eggs? Pulegone is a chemical derived from plants of the mint family (Mentha spp.) that irritates the trigeminal nerve of mammals when inhaled and causes gastric distress when consumed. We examined whether free-ranging mammalian predators would stop depredating untreated eggs in gulls' nests that smelled of pulegone. Prior to the nesting period, we distributed pulegone-injected eggs around a gull colony so that local mammalian predators could learn that opening such eggs was painful. We then selected 165 ring-billed gull (Larus delawarensis) and 165 California gull (Larus californicus) nests in the colony and randomly assigned them to one of the three treatments: (1) nests treated by placing two drops of pulegone (each 1ml) on the ground on opposite sides of the nest, (2) nests treated by spraying 2ml of pulegone around the nest's periphery, or (3) nests left untreated as a control. For both gull species, there were no differences among treatments in proportion of nests that were depredated. In a second experiment, which was also preceded by an exposure period when pulegone-injected eggs were distributed, 400 ring-billed and 150 California gull nests located in three colonies were selected to receive one of the two treatments. Half were treated by placing 2ml of pulegone in a cup and burying it beneath the nest and half were left untreated as a control. Although 30--40% of the control and treated nests were depredated, differences between treated and control nests were not detected. Application of pulegone to nests did not decrease viability of those eggs that escaped depredation. Nevertheless, these results failed to support the hypothesis that egg survival of colonial birds could be increased by training free-ranging predators not to open untreated eggs in pulegone-scented nests. Aversive conditioning, Conditioned food aversions, Nest predation, Pulegone, Wildlife damage management",will free ranging predators stop depredating untreated eggs in pulegone scented gull nests after exposure to pulegone injected eggs pulegone is a chemical derived from plants of the mint family mentha spp that irritates the trigeminal nerve of mammals when inhaled and causes gastric distress when consumed we examined whether free ranging mammalian predators would stop depredating untreated eggs in gulls nests that smelled of pulegone prior to the nesting period we distributed pulegone injected eggs around a gull colony so that local mammalian predators could learn that opening such eggs was painful we then selected 165 ring billed gull larus delawarensis and 165 california gull larus californicus nests in the colony and randomly assigned them to one of the three treatments 1 nests treated by placing two drops of pulegone each 1ml on the ground on opposite sides of the nest 2 nests treated by spraying 2ml of pulegone around the nest s periphery or 3 nests left untreated as a control for both gull species there were no differences among treatments in proportion of nests that were depredated in a second experiment which was also preceded by an exposure period when pulegone injected eggs were distributed 400 ring billed and 150 california gull nests located in three colonies were selected to receive one of the two treatments half were treated by placing 2ml of pulegone in a cup and burying it beneath the nest and half were left untreated as a control although 30 40 of the control and treated nests were depredated differences between treated and control nests were not detected application of pulegone to nests did not decrease viability of those eggs that escaped depredation nevertheless these results failed to support the hypothesis that egg survival of colonial birds could be increased by training free ranging predators not to open untreated eggs in pulegone scented nests aversive conditioning conditioned food aversions nest predation pulegone wildlife damage management,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
288,0,"Development and evaluation of vibrotactile stimuli presentation device to investigate tactile working memory Human have five senses which are visual, auditory, smell, touch and taste. The sense of touch is occurring when the skin contact with any object and human can percept the shape, temperature, vibration of the object. As well known, the spatial density of receptors located in the human skin differed of different parts such as index finger. Therefore, the sensitivity of each finger were differed from each other. In the present study, we developed a novel automatic vibrotactile patterns delivery device that is capable of perform the tactile cognitive experiment. It can serve to determining the sensitivity of each finger that contributes to tactile spatial discrimination. The primary device consists of eight piezo-electric units, slider, hand support and a controller. The device is controlled by a computer. To evaluate the performance of the device, we conducted a basic function test. The results indicated that the device can record reliable data and control the tactile pattern position precisely. Finally, ten young subjects consented to participate in the position discrimination tasks. The subjects were asked to detect the tactile stimuli and report the location. We found that index finger has higher accuracy of vibrotactile discrimination than the other fingers. Moreover, the sensitivity of distal phalanx part is higher than middle phalanx. haptic interfaces, piezoelectric devices, position control, touch (physiological), vibrations, vibrotactile stimuli presentation device, tactile working memory, automatic vibrotactile patterns delivery device, tactile cognitive experiment, finger sensitivity, piezo-electric units, basic function test, tactile pattern position control, position discrimination tasks, distal phalanx part sensitivity, middle phalanx sensitivity, Vibrations, Piezoelectric transducers, Thumb, Accuracy, Indexes, Educational institutions, Vibrotactile stimuli, Position report task, Measurement",development and evaluation of vibrotactile stimuli presentation device to investigate tactile working memory human have five senses which are visual auditory smell touch and taste the sense of touch is occurring when the skin contact with any object and human can percept the shape temperature vibration of the object as well known the spatial density of receptors located in the human skin differed of different parts such as index finger therefore the sensitivity of each finger were differed from each other in the present study we developed a novel automatic vibrotactile patterns delivery device that is capable of perform the tactile cognitive experiment it can serve to determining the sensitivity of each finger that contributes to tactile spatial discrimination the primary device consists of eight piezo electric units slider hand support and a controller the device is controlled by a computer to evaluate the performance of the device we conducted a basic function test the results indicated that the device can record reliable data and control the tactile pattern position precisely finally ten young subjects consented to participate in the position discrimination tasks the subjects were asked to detect the tactile stimuli and report the location we found that index finger has higher accuracy of vibrotactile discrimination than the other fingers moreover the sensitivity of distal phalanx part is higher than middle phalanx haptic interfaces piezoelectric devices position control touch physiological vibrations vibrotactile stimuli presentation device tactile working memory automatic vibrotactile patterns delivery device tactile cognitive experiment finger sensitivity piezo electric units basic function test tactile pattern position control position discrimination tasks distal phalanx part sensitivity middle phalanx sensitivity vibrations piezoelectric transducers thumb accuracy indexes educational institutions vibrotactile stimuli position report task measurement,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
289,0,"Possible regulatory mechanism of DHA-induced anti-stress reaction in rats To determine whether docosahexaenoic acid (DHA) affects stress responses in rats, we investigated its influence on several behavioral tests. Female rats were fed a diet deficient in (n-3) fatty acid from mating through pregnancy and lactation. Male pups fed the same diet as their dams were used for experiments. The effects of dietary (n-3) fatty acid deficiency and supplementation with DHA on psychological stress and conditioned-fear stress were investigated. The effect of DHA on psychological stress was examined by an elevated plus-maze test. The (n-3) deficient rats spent significantly (P<0.05) less time in the open arms; after 1 week of supplementation with DHA, they showed a significant (P<0.01) improvement. We then examined the paired effects of DHA and CRH on stress manifestations by an intracerebroventricular (i.c.v.) cannulation and behavior testing. An i.c.v. infusion of CRH (500 pmol) under resting conditions was shown to have stress-inducing effects on behavior such as decreases of rearing, smelling and feeding, and increases of face washing; the supplementation of DHA significantly improved these distress behaviors. Finally, conditioned fear was induced by 40 min forced exposure to a cage in which the rat had experienced footshocks (30×1 mA×1 s) 1 day before. Freezing behavior was dramatically suppressed by the supplementation of DHA, even 48 h after the conditioning treatment. Furthermore, the effect of DHA on the conditioned fear stress response is maintained over a long-term period. The i.c.v. pre-treatment of rats with bicuculline, a GABAA receptor antagonist, enhanced the conditioned-fear-induced freezing time in a dose-dependent fashion in the (n-3) fatty acid deficient animals. Significantly, the DHA supplemented group was not affected by the pre-treatment with bicuculline. From these findings, it is concluded that the involvement of DHA in stress responses may act via a GABAA receptor-mediated mechanism. Anti-stress, Conditioned-fear stress, Docosahexaenoic acid, Elevated plus-maze, GABA receptors, (n-3) Fatty acid deficiency",possible regulatory mechanism of dha induced anti stress reaction in rats to determine whether docosahexaenoic acid dha affects stress responses in rats we investigated its influence on several behavioral tests female rats were fed a diet deficient in n 3 fatty acid from mating through pregnancy and lactation male pups fed the same diet as their dams were used for experiments the effects of dietary n 3 fatty acid deficiency and supplementation with dha on psychological stress and conditioned fear stress were investigated the effect of dha on psychological stress was examined by an elevated plus maze test the n 3 deficient rats spent significantly p 0 05 less time in the open arms after 1 week of supplementation with dha they showed a significant p 0 01 improvement we then examined the paired effects of dha and crh on stress manifestations by an intracerebroventricular i c v cannulation and behavior testing an i c v infusion of crh 500 pmol under resting conditions was shown to have stress inducing effects on behavior such as decreases of rearing smelling and feeding and increases of face washing the supplementation of dha significantly improved these distress behaviors finally conditioned fear was induced by 40 min forced exposure to a cage in which the rat had experienced footshocks 30 1 ma 1 s 1 day before freezing behavior was dramatically suppressed by the supplementation of dha even 48 h after the conditioning treatment furthermore the effect of dha on the conditioned fear stress response is maintained over a long term period the i c v pre treatment of rats with bicuculline a gabaa receptor antagonist enhanced the conditioned fear induced freezing time in a dose dependent fashion in the n 3 fatty acid deficient animals significantly the dha supplemented group was not affected by the pre treatment with bicuculline from these findings it is concluded that the involvement of dha in stress responses may act via a gabaa receptor mediated mechanism anti stress conditioned fear stress docosahexaenoic acid elevated plus maze gaba receptors n 3 fatty acid deficiency,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
290,0,"Brucella spp. lumazine synthase as a bovine rotavirus antigen delivery system Brucella spp. lumazine synthase (BLS) is a highly immunogenic decameric protein. It has been previously evaluated as a carrier to increase the immunogenicity of peptides fused to its N-termini. VP8 is a sialic acid binding domain of rotavirus external capsid protein VP4, which is involved in virus adhesion to host cells. In this work, the C486 bovine rotavirus (BRV) VP8 core protein (VP8d) was fused to the structure of BLS with the aim to produce an enhancement of the immune response against BRV VP8 and to evaluate the possible use of this antigen for vaccine development. The feasibility of using BLS as an antigen delivery system of polypeptides larger in size than those previously tested was also evaluated. Groups of female mice were immunized with BLS-VP8d fusion protein, VP8d or an equimolar mixture of purified VP8d and BLS (BLS+VP8d). Dams immunized with BLS-VP8 induced 97.5--100% protection against homologous challenge with C486 BRV; while pups born to dams immunized either with VP8d or BLS+VP8d presented a significant lower level of protection. The neutralizing antibody pattern was also significantly different among these experimental groups, and in concordance with challenge experiment. Overall, these results demonstrate that the BLS-VP8d chimeric protein is properly folded and stable, and that the BLS scaffold is a potent antigen delivery system that enhances the antibody response against BRV and elicits complete homotypic passive protection in a suckling mouse model. BLS, Rotavirus, Subunit vaccine",brucella spp lumazine synthase as a bovine rotavirus antigen delivery system brucella spp lumazine synthase bls is a highly immunogenic decameric protein it has been previously evaluated as a carrier to increase the immunogenicity of peptides fused to its n termini vp8 is a sialic acid binding domain of rotavirus external capsid protein vp4 which is involved in virus adhesion to host cells in this work the c486 bovine rotavirus brv vp8 core protein vp8d was fused to the structure of bls with the aim to produce an enhancement of the immune response against brv vp8 and to evaluate the possible use of this antigen for vaccine development the feasibility of using bls as an antigen delivery system of polypeptides larger in size than those previously tested was also evaluated groups of female mice were immunized with bls vp8d fusion protein vp8d or an equimolar mixture of purified vp8d and bls bls vp8d dams immunized with bls vp8 induced 97 5 100 protection against homologous challenge with c486 brv while pups born to dams immunized either with vp8d or bls vp8d presented a significant lower level of protection the neutralizing antibody pattern was also significantly different among these experimental groups and in concordance with challenge experiment overall these results demonstrate that the bls vp8d chimeric protein is properly folded and stable and that the bls scaffold is a potent antigen delivery system that enhances the antibody response against brv and elicits complete homotypic passive protection in a suckling mouse model bls rotavirus subunit vaccine,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
291,0,"Predator odour per se does not frighten domestic horses Horses frequently react nervously when passing animal production farms and other places with distinctive smells, leading riders to believe that horses are innately frightened by certain odours. In three experiments, we investigated how horses respond to (1) urine from wolves and lions, (2) blood from slaughtered conspecifics and fur-derived wolf odour, and (3) a sudden auditory stimulus in either presence or absence of fur-derived wolf odour. The experiments were carried out under standardised conditions using a total of 45 naïve, 2-year-old horses. In the first two experiments we found that horses showed significant changes in behaviour (Experiments 1 and 2: increased sniffing; Experiment 2 only: increased vigilance, decreased eating, and more behavioural shifts), but no increase in heart rate compared to controls when exposed to predator odours and conspecific blood in a known test environment. However, the third experiment showed that exposure to a combination of wolf odour and a sudden stimulus (sound of a moving plastic bag) caused significantly increased heart rate responses and a tendency to a longer latency to resume feeding, compared to control horses exposed to the sudden stimulus without the wolf odour. The results indicate that predator odour per se does not frighten horses but it may cause an increased level of vigilance. The presence of predator odour may, however, cause an increased heart rate response if horses are presented to an additional fear-eliciting stimulus. This strategy may be adaptive in the wild where equids share habitats with their predators, and have to trade-off time and energy spent on anti-predation responses against time allocated to essential non-defensive activities. Horse, Predator odour, Behaviour, Heart rate, Fear",predator odour per se does not frighten domestic horses horses frequently react nervously when passing animal production farms and other places with distinctive smells leading riders to believe that horses are innately frightened by certain odours in three experiments we investigated how horses respond to 1 urine from wolves and lions 2 blood from slaughtered conspecifics and fur derived wolf odour and 3 a sudden auditory stimulus in either presence or absence of fur derived wolf odour the experiments were carried out under standardised conditions using a total of 45 na ve 2 year old horses in the first two experiments we found that horses showed significant changes in behaviour experiments 1 and 2 increased sniffing experiment 2 only increased vigilance decreased eating and more behavioural shifts but no increase in heart rate compared to controls when exposed to predator odours and conspecific blood in a known test environment however the third experiment showed that exposure to a combination of wolf odour and a sudden stimulus sound of a moving plastic bag caused significantly increased heart rate responses and a tendency to a longer latency to resume feeding compared to control horses exposed to the sudden stimulus without the wolf odour the results indicate that predator odour per se does not frighten horses but it may cause an increased level of vigilance the presence of predator odour may however cause an increased heart rate response if horses are presented to an additional fear eliciting stimulus this strategy may be adaptive in the wild where equids share habitats with their predators and have to trade off time and energy spent on anti predation responses against time allocated to essential non defensive activities horse predator odour behaviour heart rate fear,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
292,0,"Are Code Smell Detection Tools Suitable for Detecting Architecture Degradation? Context: Several studies suggest that there is a relation between code smells and architecture degradation. They claim that classes, which have degraded architecture-wise, can be detected on the basis of code smells, at least if these are manually identified in the source code. Objective: To evaluate the suitability of contemporary code smell detection tools by combining different smell categories for finding classes that show symptoms of architecture degradation. Method: A case study is performed in which architectural inconsistencies in an open source system are detected via reflexion modeling and code smell metrics are collected through several tools. Using data mining techniques, we investigate if it is possible to automatically and accurately classify classes connected to architectural inconsistencies based on the gathered code smell data. Results: Results suggest that existing code smell detection techniques, as implemented in contemporary tools, are not sufficiently accurate for classifying whether a class contains architectural inconsistencies, even when combining categories of code smells. Conclusion: It seems that current automated code smell detection techniques require fine-tuning for a specific system if they are to be used for finding classes with architectural inconsistencies. More research on architecture violation causes is needed to build more accurate detection techniques that work out-of-the-box. architecture erosion, case study, code smells, data mining",are code smell detection tools suitable for detecting architecture degradation context several studies suggest that there is a relation between code smells and architecture degradation they claim that classes which have degraded architecture wise can be detected on the basis of code smells at least if these are manually identified in the source code objective to evaluate the suitability of contemporary code smell detection tools by combining different smell categories for finding classes that show symptoms of architecture degradation method a case study is performed in which architectural inconsistencies in an open source system are detected via reflexion modeling and code smell metrics are collected through several tools using data mining techniques we investigate if it is possible to automatically and accurately classify classes connected to architectural inconsistencies based on the gathered code smell data results results suggest that existing code smell detection techniques as implemented in contemporary tools are not sufficiently accurate for classifying whether a class contains architectural inconsistencies even when combining categories of code smells conclusion it seems that current automated code smell detection techniques require fine tuning for a specific system if they are to be used for finding classes with architectural inconsistencies more research on architecture violation causes is needed to build more accurate detection techniques that work out of the box architecture erosion case study code smells data mining,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
293,0,"Digital Flavor: Towards Digitally Simulating Virtual Flavors Flavor is often a pleasurable sensory perception we experience daily while eating and drinking. However, the sensation of flavor is rarely considered in the age of digital communication mainly due to the unavailability of flavors as a digitally controllable media. This paper introduces a digital instrument (Digital Flavor Synthesizing device), which actuates taste (electrical and thermal stimulation) and smell sensations (controlled scent emitting) together to simulate different flavors digitally. A preliminary user experiment is conducted to study the effectiveness of this method with predefined five different flavor stimuli. Experimental results show that the users were effectively able to identify different flavors such as minty, spicy, and lemony. Moreover, we outline several challenges ahead along with future possibilities of this technology. In summary, our work demonstrates a novel controllable instrument for flavor simulation, which will be valuable in multimodal interactive systems for rendering virtual flavors digitally. artificial flavor, flavor, multimodal interaction, smell, taste, user interfaces, virtual reality",digital flavor towards digitally simulating virtual flavors flavor is often a pleasurable sensory perception we experience daily while eating and drinking however the sensation of flavor is rarely considered in the age of digital communication mainly due to the unavailability of flavors as a digitally controllable media this paper introduces a digital instrument digital flavor synthesizing device which actuates taste electrical and thermal stimulation and smell sensations controlled scent emitting together to simulate different flavors digitally a preliminary user experiment is conducted to study the effectiveness of this method with predefined five different flavor stimuli experimental results show that the users were effectively able to identify different flavors such as minty spicy and lemony moreover we outline several challenges ahead along with future possibilities of this technology in summary our work demonstrates a novel controllable instrument for flavor simulation which will be valuable in multimodal interactive systems for rendering virtual flavors digitally artificial flavor flavor multimodal interaction smell taste user interfaces virtual reality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
294,0,"Development of feeding selectivity and consistency in food choice over 5 years in fallow deer In order to better understand the development and maintenance of feeding selectivity, several feeding experiments were performed with fallow deer (Dama dama L.). In experiments performed when the fawns were between ten and 27 days old, it was found that all fawns showed preferences for sucrose but aversions towards tannic acid and ascorbic acid. However, differences in selectivity towards tannic acid were present already before the fawns became functional ruminants and these individual differences lasted 5 years. Moreover, individuals that ingested overall less tannic acid, searched more thoroughly between food sources. When the foraging behaviour was compared with age (11--41 days old and 65--97 days old), it was found that the time a fawn spent eating, increased with age, and the time spent on exploration, smelling and tasting plants decreased with age. Furthermore, the fawns increased their intake of grass and herbs, while the intake of soil and dead plant material decreased with age. Fallow deer, Feeding selectivity, Foraging, Tannic acid",development of feeding selectivity and consistency in food choice over 5 years in fallow deer in order to better understand the development and maintenance of feeding selectivity several feeding experiments were performed with fallow deer dama dama l in experiments performed when the fawns were between ten and 27 days old it was found that all fawns showed preferences for sucrose but aversions towards tannic acid and ascorbic acid however differences in selectivity towards tannic acid were present already before the fawns became functional ruminants and these individual differences lasted 5 years moreover individuals that ingested overall less tannic acid searched more thoroughly between food sources when the foraging behaviour was compared with age 11 41 days old and 65 97 days old it was found that the time a fawn spent eating increased with age and the time spent on exploration smelling and tasting plants decreased with age furthermore the fawns increased their intake of grass and herbs while the intake of soil and dead plant material decreased with age fallow deer feeding selectivity foraging tannic acid,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
295,0,"The Scent of Digital Art: Yesterday, Today, and Tomorrow Scent has a long history of being treated as the medium for art. Its aesthetic, affective and evocative aspects enrich the art experience. Yet when it comes to the digital era, it seems to become the minority among the artworks. As digital olfaction is getting advanced in recent years, could it open up the opportunity to consider scent as the interface of tomorrow for digital art? This paper reviews how scent was treated as art in the past, examines its recent role in digital media, and discusses the possibilities it lays ahead for digital art in the future. digital olfaction, interactive art, odor, olfactory art, smell",the scent of digital art yesterday today and tomorrow scent has a long history of being treated as the medium for art its aesthetic affective and evocative aspects enrich the art experience yet when it comes to the digital era it seems to become the minority among the artworks as digital olfaction is getting advanced in recent years could it open up the opportunity to consider scent as the interface of tomorrow for digital art this paper reviews how scent was treated as art in the past examines its recent role in digital media and discusses the possibilities it lays ahead for digital art in the future digital olfaction interactive art odor olfactory art smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
296,0,"Choice chamber experiments to test the attraction of postflexion Rhabdosargus holubi larvae to water of estuarine and riverine origin Although the recruitment of larvae and juveniles of marine fishes into estuaries has been well documented, little is known about the factors governing the immigration of estuary-associated marine fishes into estuaries. Fishes have a well-developed sense of smell and it has been suggested by several workers that olfactory cues of freshwater or estuarine origin serve as stimuli, attracting larvae and juveniles of estuary-associated species into estuaries. Attraction of postflexion Rhabdosargus holubi larvae to estuary and river water from the Kowie estuarine system, South Africa, was measured using a rectangular choice chamber. In experiments, conducted during peak recruitment periods, larvae selected estuary and river water with a significantly higher frequency than sea water. This study, the first to assess the possible role of olfaction in the recruitment process of an estuary-associated marine fish species, demonstrates that larvae are able to recognise water from different origins, probably based on odour. , postlarval recruitment, estuaries, olfactory cues",choice chamber experiments to test the attraction of postflexion rhabdosargus holubi larvae to water of estuarine and riverine origin although the recruitment of larvae and juveniles of marine fishes into estuaries has been well documented little is known about the factors governing the immigration of estuary associated marine fishes into estuaries fishes have a well developed sense of smell and it has been suggested by several workers that olfactory cues of freshwater or estuarine origin serve as stimuli attracting larvae and juveniles of estuary associated species into estuaries attraction of postflexion rhabdosargus holubi larvae to estuary and river water from the kowie estuarine system south africa was measured using a rectangular choice chamber in experiments conducted during peak recruitment periods larvae selected estuary and river water with a significantly higher frequency than sea water this study the first to assess the possible role of olfaction in the recruitment process of an estuary associated marine fish species demonstrates that larvae are able to recognise water from different origins probably based on odour postlarval recruitment estuaries olfactory cues,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
297,0,"Analytical investigations on elastomeric shells of new Poly Implant Prothèse (PIP) breast and from sixteen cases of surgical explantation In this study we have analysed the chemical composition of the extractable components from the elastomeric shells from n=27 explanted implants (n=16 patients), n=2 new PIP implants, and from explanted Eurosilicone and McGhan implants (n=2 for each brand). Empty elastomeric PIP shells (n=2) were also available for analysis. Prostheses were explanted between 2011 and 2012, after 3--11 years of implantation. Patients presented pre- and post-operation complications of different degrees. First we evaluated the micro-structural features of the shells by phase contrast microscopy, and compared the results with those obtained using attenuated total reflectance infrared spectroscopy (ATR-FT-IR), head space gas chromatography coupled to mass spectrometry (HS-GC--MS) and GC--MS in direct injection mode. The results of these studies confirm and explain the conclusion of previous international investigations that evidenced a linear decrease of rupture rate for prostheses implanted after 2006. The analytical identification of a series of UV sensitive radical photo-initiators (0.1%--0.2% w/w), belonging to the benzophenone family, in the shells of new and explanted prostheses produced after 2006 (associated with a strong smell absent in those produced earlier), in parallel to (ii) the removal of the anti bleed barrier from their manufacturing procedure (introduced after 2001), strongly suggested that from 2007, the PIP company used a polymerisation process different from that declared, probably as a consequence of the first reports of rupture problems. In addition, the HS-GC--MS experiments demonstrated that at body temperature the diffusivity of low molecular weight (LMW) silicones present in the PIP filler silicone is significantly higher than that of LMW silicones in an approved implant. Poly Implant Prothèse, PIP implants, Elastomeric shell, Toxicology, Analysis",analytical investigations on elastomeric shells of new poly implant proth se pip breast and from sixteen cases of surgical explantation in this study we have analysed the chemical composition of the extractable components from the elastomeric shells from n 27 explanted implants n 16 patients n 2 new pip implants and from explanted eurosilicone and mcghan implants n 2 for each brand empty elastomeric pip shells n 2 were also available for analysis prostheses were explanted between 2011 and 2012 after 3 11 years of implantation patients presented pre and post operation complications of different degrees first we evaluated the micro structural features of the shells by phase contrast microscopy and compared the results with those obtained using attenuated total reflectance infrared spectroscopy atr ft ir head space gas chromatography coupled to mass spectrometry hs gc ms and gc ms in direct injection mode the results of these studies confirm and explain the conclusion of previous international investigations that evidenced a linear decrease of rupture rate for prostheses implanted after 2006 the analytical identification of a series of uv sensitive radical photo initiators 0 1 0 2 w w belonging to the benzophenone family in the shells of new and explanted prostheses produced after 2006 associated with a strong smell absent in those produced earlier in parallel to ii the removal of the anti bleed barrier from their manufacturing procedure introduced after 2001 strongly suggested that from 2007 the pip company used a polymerisation process different from that declared probably as a consequence of the first reports of rupture problems in addition the hs gc ms experiments demonstrated that at body temperature the diffusivity of low molecular weight lmw silicones present in the pip filler silicone is significantly higher than that of lmw silicones in an approved implant poly implant proth se pip implants elastomeric shell toxicology analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
298,0,"Apperception As a Multisensory Process in Material Experience Visual perspective has dominated experience research in human-technology interaction for decades now. The neglect of other sensory modalities is gradually being addressed by scholars and designers, who investigate user experience based on touch, smell, taste, sound and even expressive bodily interactions. In cognitive and affective processes, user experience is always multi-modal, not just regarding perceived multi-sensory information, but also while perceiving through one modality we mentally construct information relevant to the other senses. This article reports the results of an experiment, where participants (N = 52) appraised materials either only by touching them or only by seeing. The results indicate that with certain affects, the logic of the appraisal depends on the modality. These results are discussed within the theoretical framework of mental content, apperception, and appraisal. Further, we discuss the relevance of the findings for material design, especially in the context of multimodal interaction. apperception, context, design materials, multi-sensory experience, product design",apperception as a multisensory process in material experience visual perspective has dominated experience research in human technology interaction for decades now the neglect of other sensory modalities is gradually being addressed by scholars and designers who investigate user experience based on touch smell taste sound and even expressive bodily interactions in cognitive and affective processes user experience is always multi modal not just regarding perceived multi sensory information but also while perceiving through one modality we mentally construct information relevant to the other senses this article reports the results of an experiment where participants n 52 appraised materials either only by touching them or only by seeing the results indicate that with certain affects the logic of the appraisal depends on the modality these results are discussed within the theoretical framework of mental content apperception and appraisal further we discuss the relevance of the findings for material design especially in the context of multimodal interaction apperception context design materials multi sensory experience product design,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
299,0,"Embedded neural network for fire classification using an array of gas sensors Fire is one of the most common hazards in US households. In 2006 alone, 2705 people were killed due to fire in building structures. 74% of the deaths result from fires in homes with no smoke alarms or no working smoke alarms while surveys report that 96% of all homes have at least one smoke alarm. This study discusses the development of a fire sensing system that is not only capable of detecting fire in its early stage but also of classifying the fire based on the smell of the smoke in the environment. By using an array of sensors along with a neural network for sensor pattern recognition, an impressive result is obtained. Instead of confining the ANN to a PC based application, this work extends the implementation of the neural network fire classifier in a general purpose microcontroller. The result is a low cost intelligent embedded fire classifier that can be used in real life situations for fire hazards minimization, for example this intelligent fire classifier can be used for the development of a smart extinguisher that detects the fire, classifies it and then uses appropriate extinguishing material required for extinguishing the particular class of fire. fires, gas sensors, hazards, microcontrollers, neural nets, pattern recognition, embedded neural network, fire classification, gas sensor array, fire sensing system, sensor pattern recognition, artificial neural network, neural network fire classifier, general purpose microcontroller, fire hazards minimization, intelligent fire classifier, smart extinguisher, Sensor arrays, Neural networks, Fires, Gas detectors, Intelligent sensors, Hazards, Buildings, Smoke detectors, Pattern recognition, Artificial neural networks",embedded neural network for fire classification using an array of gas sensors fire is one of the most common hazards in us households in 2006 alone 2705 people were killed due to fire in building structures 74 of the deaths result from fires in homes with no smoke alarms or no working smoke alarms while surveys report that 96 of all homes have at least one smoke alarm this study discusses the development of a fire sensing system that is not only capable of detecting fire in its early stage but also of classifying the fire based on the smell of the smoke in the environment by using an array of sensors along with a neural network for sensor pattern recognition an impressive result is obtained instead of confining the ann to a pc based application this work extends the implementation of the neural network fire classifier in a general purpose microcontroller the result is a low cost intelligent embedded fire classifier that can be used in real life situations for fire hazards minimization for example this intelligent fire classifier can be used for the development of a smart extinguisher that detects the fire classifies it and then uses appropriate extinguishing material required for extinguishing the particular class of fire fires gas sensors hazards microcontrollers neural nets pattern recognition embedded neural network fire classification gas sensor array fire sensing system sensor pattern recognition artificial neural network neural network fire classifier general purpose microcontroller fire hazards minimization intelligent fire classifier smart extinguisher sensor arrays neural networks fires gas detectors intelligent sensors hazards buildings smoke detectors pattern recognition artificial neural networks,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
300,0,"Software Analytics in Practice: A Defect Prediction Model Using Code Smells In software engineering, maintainability is related to investigating the defects and their causes, correcting the defects and modifying the system to meet customer requirements. Maintenance is a time consuming activity within the software life cycle. Therefore, there is a need for efficiently organizing the software resources in terms of time, cost and personnel for maintenance activity. One way of efficiently managing maintenance resources is to predict defects that may occur after the deployment. Many researchers so far have built defect prediction models using different sets of metrics such as churn and static code metrics. However, hidden causes of defects such as code smells have not been investigated thoroughly. In this study we propose using data science and analytics techniques on software data to build defect prediction models. In order to build the prediction model we used code smells metrics, churn metrics and combination of churn and code smells metrics. The results of our experiments on two different software companies show that code smells is a good indicator of defect proneness of the software product. Therefore, we recommend that code smells metrics should be used to train a defect prediction model to guide the software maintenance team. Code Smells, Defect Prediction Model, Mining software repositories",software analytics in practice a defect prediction model using code smells in software engineering maintainability is related to investigating the defects and their causes correcting the defects and modifying the system to meet customer requirements maintenance is a time consuming activity within the software life cycle therefore there is a need for efficiently organizing the software resources in terms of time cost and personnel for maintenance activity one way of efficiently managing maintenance resources is to predict defects that may occur after the deployment many researchers so far have built defect prediction models using different sets of metrics such as churn and static code metrics however hidden causes of defects such as code smells have not been investigated thoroughly in this study we propose using data science and analytics techniques on software data to build defect prediction models in order to build the prediction model we used code smells metrics churn metrics and combination of churn and code smells metrics the results of our experiments on two different software companies show that code smells is a good indicator of defect proneness of the software product therefore we recommend that code smells metrics should be used to train a defect prediction model to guide the software maintenance team code smells defect prediction model mining software repositories,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
301,0,"Prevalence and location of tobacco smoke exposure outside the home in adults and children in the United States Objectives Tobacco smoke exposure (TSE) is associated with many adverse health outcomes. The goal of this study was to provide insight into the prevalence and location of self-reported TSE outside the home for US adults and children. Study design Cross-sectional survey. Methods Data from a nationally representative sample of US adults from 2014 were included. Participants who responded that they smelled smoke during the past seven days in various settings were considered to have been exposed to TSE. Parents were asked about TSE exposure of their children. Results Sixty-nine percent of all adults reported TSE outside their home in the past seven days. The most common exposure location among adults was on a public sidewalk and outside the doorway of a building (both 33%). Thirty-three percent of parents reported outside the home TSE for their children in the past seven days. Most commonly, the reported exposure was `In some other place(s)' (16%), followed by at a relative's house (10%). Conclusions This study reports on TSE outside the home in a wide variety of settings and a broad range of ages in a nationally representative US sample. A high proportion of US adults and children are exposed to TSE outside the home in indoor, outdoor, public, and private settings. Smoke-free laws, clinical interventions, education, and a change in social norms are required to stop TSE. Tobacco smoke exposure, Prevention, Children, Adults",prevalence and location of tobacco smoke exposure outside the home in adults and children in the united states objectives tobacco smoke exposure tse is associated with many adverse health outcomes the goal of this study was to provide insight into the prevalence and location of self reported tse outside the home for us adults and children study design cross sectional survey methods data from a nationally representative sample of us adults from 2014 were included participants who responded that they smelled smoke during the past seven days in various settings were considered to have been exposed to tse parents were asked about tse exposure of their children results sixty nine percent of all adults reported tse outside their home in the past seven days the most common exposure location among adults was on a public sidewalk and outside the doorway of a building both 33 thirty three percent of parents reported outside the home tse for their children in the past seven days most commonly the reported exposure was in some other place s 16 followed by at a relative s house 10 conclusions this study reports on tse outside the home in a wide variety of settings and a broad range of ages in a nationally representative us sample a high proportion of us adults and children are exposed to tse outside the home in indoor outdoor public and private settings smoke free laws clinical interventions education and a change in social norms are required to stop tse tobacco smoke exposure prevention children adults,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
302,0,"Putting the green into corrections: Improving energy conservation, building function, safety and occupant well-being in an American correctional facility Correctional facilities are some of the most energy intensive buildings and therefore offer a great opportunity for savings from high performance design. We ask the question, can integrative design positively affect building energy consumption, function, safety, and occupant well-being in a corrections building? From 2011--2015, we utilized mixed methods including: document analysis, social network analysis, interviews, focus groups, and surveys to study one correctional facility through the process of design, construction, and operations. We found that adhering to the principles of integrative design resulted in the design of a high performance building that reduced energy consumption, improved building function, increased staff productivity, increased safety and occupant well-being for both staff and offenders. We also found that the design flaws in the building were the direct result of excluding a key building occupant group, offenders. This case illustrates the potential and necessity of integrative design processes to achieve aggressive performance standards. Integrative design, Energy conservation, Green corrections, High performance buildings",putting the green into corrections improving energy conservation building function safety and occupant well being in an american correctional facility correctional facilities are some of the most energy intensive buildings and therefore offer a great opportunity for savings from high performance design we ask the question can integrative design positively affect building energy consumption function safety and occupant well being in a corrections building from 2011 2015 we utilized mixed methods including document analysis social network analysis interviews focus groups and surveys to study one correctional facility through the process of design construction and operations we found that adhering to the principles of integrative design resulted in the design of a high performance building that reduced energy consumption improved building function increased staff productivity increased safety and occupant well being for both staff and offenders we also found that the design flaws in the building were the direct result of excluding a key building occupant group offenders this case illustrates the potential and necessity of integrative design processes to achieve aggressive performance standards integrative design energy conservation green corrections high performance buildings,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
303,0,"Hedonic mediation of the crossmodal correspondence between taste and shape Crossmodal correspondences between gustatory (taste), olfactory (smell), and flavour stimuli on the one hand and visual attributes on the other have been extensively documented in recent years. For instance, people have been shown to consistently match specific tastes and flavours to particular visual shapes. That said, further research is still needed in order to clarify how and why such correspondences exist. Here, we report a series of four experiments designed to assess what drives people's matching of visual roundness/angularity to both `basic' taste names and actual tastants. In Experiment 1, crossmodal correspondences between taste names and abstract shapes were assessed. Next, the results were replicated in a larger online study (Experiment 2). Experiment 3 assessed the role of liking in the association between taste words and morphed shapes along the roundness/angularity dimension. In Experiment 4, basic tastants were mapped to the roundness/angularity dimension, while the mediating role of liking for each taste was assessed. Across the 4 experiments, participants consistently matched sweetness to roundness. What is more, people's liking for a taste (but not their liking for imagined tastes) appeared to influence their shape matching responses. These results are discussed in terms of crossmodal correspondences, and a potential role for hedonics is outlined. Taste, Shape, Hedonics, Crossmodal correspondences",hedonic mediation of the crossmodal correspondence between taste and shape crossmodal correspondences between gustatory taste olfactory smell and flavour stimuli on the one hand and visual attributes on the other have been extensively documented in recent years for instance people have been shown to consistently match specific tastes and flavours to particular visual shapes that said further research is still needed in order to clarify how and why such correspondences exist here we report a series of four experiments designed to assess what drives people s matching of visual roundness angularity to both basic taste names and actual tastants in experiment 1 crossmodal correspondences between taste names and abstract shapes were assessed next the results were replicated in a larger online study experiment 2 experiment 3 assessed the role of liking in the association between taste words and morphed shapes along the roundness angularity dimension in experiment 4 basic tastants were mapped to the roundness angularity dimension while the mediating role of liking for each taste was assessed across the 4 experiments participants consistently matched sweetness to roundness what is more people s liking for a taste but not their liking for imagined tastes appeared to influence their shape matching responses these results are discussed in terms of crossmodal correspondences and a potential role for hedonics is outlined taste shape hedonics crossmodal correspondences,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
304,0,"On the Actual Use of Inheritance and Interface in Java Projects: Evolution and Implications Background: Inheritance is one of the main features in the object-oriented paradigm (OOP). Nonetheless, previous work recommend carefully using it, suggesting alternatives such as the adoption of composition with implementation of interfaces. Despite of being a well-studied theme, there is still little knowledge if such recommendations have been widely adopted by developers in general. Aims: This work aims at evaluating how the inheritance and composition with interfaces have been used in Java, comparing new projects with older ones (transversal), and also the different releases of the same projects (longitudinal). Method: A total of 1, 656 open-source projects built between 1997 and 2013, hosted in the repositories GitHub and SourceForge, were analyzed. The likelihood of more recent projects using inheritance and interfaces differently from older ones was analyzed considering indicators, such as, the prevalence of corrective changes, instanceof operations, and code smells. Regression analysis, chi-squared test of proportions and descriptive statistics were used to analyze the data. In addition, a thematic analysis based method was used to verify how often and why inheritance and interface are added or removed from classes. Results: We observed that developers still use inheritance primarily for code reuse, motivated by the need to avoid duplicity of source code. In newer projects, classes in inheritance had fewer corrective changes and subclasses had fewer use of the instance of operator. However, as they evolve, classes in inheritance tend to become complex as changes occur. Classes implementing interfaces have shown little relation to the interfaces, and there is indication that interfaces are still underutilized. Conclusion: These results show there is still some lack of knowledge about the use of recommended object-oriented practices, suggesting the need of training developers on how to design better classes. GitHub, code smells, cohesion, inheritance, interfaces, sourceforge",on the actual use of inheritance and interface in java projects evolution and implications background inheritance is one of the main features in the object oriented paradigm oop nonetheless previous work recommend carefully using it suggesting alternatives such as the adoption of composition with implementation of interfaces despite of being a well studied theme there is still little knowledge if such recommendations have been widely adopted by developers in general aims this work aims at evaluating how the inheritance and composition with interfaces have been used in java comparing new projects with older ones transversal and also the different releases of the same projects longitudinal method a total of 1 656 open source projects built between 1997 and 2013 hosted in the repositories github and sourceforge were analyzed the likelihood of more recent projects using inheritance and interfaces differently from older ones was analyzed considering indicators such as the prevalence of corrective changes instanceof operations and code smells regression analysis chi squared test of proportions and descriptive statistics were used to analyze the data in addition a thematic analysis based method was used to verify how often and why inheritance and interface are added or removed from classes results we observed that developers still use inheritance primarily for code reuse motivated by the need to avoid duplicity of source code in newer projects classes in inheritance had fewer corrective changes and subclasses had fewer use of the instance of operator however as they evolve classes in inheritance tend to become complex as changes occur classes implementing interfaces have shown little relation to the interfaces and there is indication that interfaces are still underutilized conclusion these results show there is still some lack of knowledge about the use of recommended object oriented practices suggesting the need of training developers on how to design better classes github code smells cohesion inheritance interfaces sourceforge,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
305,0,"Understanding the Characteristics of Android Wear OS Interactive wearable devices bring dramatic changes to apps and hardware, leaving operating system (OS) design in the mist. To this end, we thoroughly examine the execution efficiency of Android Wear, a popular wearable OS. By running a suite of fifteen benchmarks, we profile four system aspects: CPU usage, idle episodes, thread-level parallelism, and microarchitectural behaviors. We present the discovered inefficiencies and their root causes, together with a series of widespread, yet unknown OS design flaws. Towards designing future wearable OSes, our study has yielded a generic lesson, key insights, and specific action items. android wear, mobile systems, operating systems, wearables",understanding the characteristics of android wear os interactive wearable devices bring dramatic changes to apps and hardware leaving operating system os design in the mist to this end we thoroughly examine the execution efficiency of android wear a popular wearable os by running a suite of fifteen benchmarks we profile four system aspects cpu usage idle episodes thread level parallelism and microarchitectural behaviors we present the discovered inefficiencies and their root causes together with a series of widespread yet unknown os design flaws towards designing future wearable oses our study has yielded a generic lesson key insights and specific action items android wear mobile systems operating systems wearables,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
306,0,"Feature of nozzle for manufacturing flexbile tactile sensor skin Recently, robot technologies are applying to the multidisciplinary fields of study due to the development of robot technology. To operate like a human being, many robot technologies need devices that can receive exterior stimulus, temperature, visual data, and the sense of smell, etc. The robot's hand needs the sensor devices that can receive exterior stimulus to operate like a human skin. The flexible tactile sensor for the robot has to be manufactured alike to a shape of human skin. This research studied characteristics of synthesis of photopolymer resin which has an electric conductivity and nozzle for the development of the sensor. nozzles, robots, tactile sensors, manufacturing flexbile tactile sensor skin, robot technologies, exterior stimulus, visual data, sensor devices, human skin, photopolymer resin, electric conductivity, electric nozzle, sensor development, Robot sensing systems, Skin, Visualization, Mechanical variables measurement, Resins, Pumps, tactile sensor, nozzle feature, CNT(cabon nanotube)",feature of nozzle for manufacturing flexbile tactile sensor skin recently robot technologies are applying to the multidisciplinary fields of study due to the development of robot technology to operate like a human being many robot technologies need devices that can receive exterior stimulus temperature visual data and the sense of smell etc the robot s hand needs the sensor devices that can receive exterior stimulus to operate like a human skin the flexible tactile sensor for the robot has to be manufactured alike to a shape of human skin this research studied characteristics of synthesis of photopolymer resin which has an electric conductivity and nozzle for the development of the sensor nozzles robots tactile sensors manufacturing flexbile tactile sensor skin robot technologies exterior stimulus visual data sensor devices human skin photopolymer resin electric conductivity electric nozzle sensor development robot sensing systems skin visualization mechanical variables measurement resins pumps tactile sensor nozzle feature cnt cabon nanotube,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
307,0,"Smells like evolution: the role of chemoreceptor evolution in behavioral change In contrast to physiology and morphology, our understanding of how behaviors evolve is limited. This is a challenging task, as it involves the identification of both the underlying genetic basis and the resultant physiological changes that lead to behavioral divergence. In this review, we focus on chemosensory systems, mostly in Drosophila, as they are one of the best-characterized components of the nervous system in model organisms, and evolve rapidly between species. We examine the hypothesis that changes at the level of chemosensory systems contribute to the diversification of behaviors. In particular, we review recent progress in understanding how genetic changes between species affect chemosensory systems and translate into divergent behaviors. A major evolutionary trend is the rapid diversification of the chemoreceptor repertoire among species. We focus mostly on functional comparative studies involving model species, highlighting examples where changes in chemoreceptor identity and expression are sufficient to provoke changes in neural circuit activity and thus behavior. We conclude that while we are beginning to understand the role that the peripheral nervous system (PNS) plays in behavioral evolution, how the central nervous system (CNS) evolves to produce behavioral changes is largely unknown, and we advocate the need to expand functional comparative studies to address these questions. []",smells like evolution the role of chemoreceptor evolution in behavioral change in contrast to physiology and morphology our understanding of how behaviors evolve is limited this is a challenging task as it involves the identification of both the underlying genetic basis and the resultant physiological changes that lead to behavioral divergence in this review we focus on chemosensory systems mostly in drosophila as they are one of the best characterized components of the nervous system in model organisms and evolve rapidly between species we examine the hypothesis that changes at the level of chemosensory systems contribute to the diversification of behaviors in particular we review recent progress in understanding how genetic changes between species affect chemosensory systems and translate into divergent behaviors a major evolutionary trend is the rapid diversification of the chemoreceptor repertoire among species we focus mostly on functional comparative studies involving model species highlighting examples where changes in chemoreceptor identity and expression are sufficient to provoke changes in neural circuit activity and thus behavior we conclude that while we are beginning to understand the role that the peripheral nervous system pns plays in behavioral evolution how the central nervous system cns evolves to produce behavioral changes is largely unknown and we advocate the need to expand functional comparative studies to address these questions,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
308,0,"Elements, characteristics and character -- Information functions of landscapes in terms of indicators When monitoring landscape changes, the visual landscape should also be considered. This pertains to the information function of ecosystems and landscapes that refers to environmental structure and its function for satisfying needs. These needs of human perception include a certain equipment of landscape with stimuli, spatial orientation, as well as aesthetical-emotional needs. However, previous approaches of environmental monitoring and registration of landscape changes exclusively focus on the ecosystem; aesthetic and structural characteristics are evaluated, if at all, only via easily quantifiable variables in a data oriented manner that illustrates the diversity of individual landscape elements without theoretically grounding them based on general hypotheses and a theoretical concept. Based on results from perception research and information theory, therefore, a method for registering the visual landscape on different complexity levels is developed. This includes:-``elements'' (i.e. ``element level''), that is the description of the different types of land use and structure elements within a landscape unit. Furthermore, under these elements a variety of manifestations are also subsumed, such as small spatial dimensional relations, as well as individual synesthetic perceptions (noise and smells);-``characteristics'' (i.e. ``shape level''), that is the typical combinations of elements, design shapes and proportions;-and the overall area perception, that is the ``character'' (i.e. the space level) of a landscape as the result of a characterization process that classifies, illustrates and describes areas that are similar in appearance. One possible application of this approach can be demonstrated by the impacts of streets on the visual landscape. This example makes it evident that indicators for landscape diversity are only able to illustrate changes of individual elements but not of the character of landscapes themselves. This fact makes it necessary to additionally integrate aspects aside from quantitative ones when evaluating the visual landscape. Furthermore, it is necessary to empirically verify aspects that are significant for the perception of landscapes in order to make them more accessible than has been thus far for evaluations in the sense of indicators. Visual landscape, Environmental monitoring, Indicators, Landscape character, Impact regulation",elements characteristics and character information functions of landscapes in terms of indicators when monitoring landscape changes the visual landscape should also be considered this pertains to the information function of ecosystems and landscapes that refers to environmental structure and its function for satisfying needs these needs of human perception include a certain equipment of landscape with stimuli spatial orientation as well as aesthetical emotional needs however previous approaches of environmental monitoring and registration of landscape changes exclusively focus on the ecosystem aesthetic and structural characteristics are evaluated if at all only via easily quantifiable variables in a data oriented manner that illustrates the diversity of individual landscape elements without theoretically grounding them based on general hypotheses and a theoretical concept based on results from perception research and information theory therefore a method for registering the visual landscape on different complexity levels is developed this includes elements i e element level that is the description of the different types of land use and structure elements within a landscape unit furthermore under these elements a variety of manifestations are also subsumed such as small spatial dimensional relations as well as individual synesthetic perceptions noise and smells characteristics i e shape level that is the typical combinations of elements design shapes and proportions and the overall area perception that is the character i e the space level of a landscape as the result of a characterization process that classifies illustrates and describes areas that are similar in appearance one possible application of this approach can be demonstrated by the impacts of streets on the visual landscape this example makes it evident that indicators for landscape diversity are only able to illustrate changes of individual elements but not of the character of landscapes themselves this fact makes it necessary to additionally integrate aspects aside from quantitative ones when evaluating the visual landscape furthermore it is necessary to empirically verify aspects that are significant for the perception of landscapes in order to make them more accessible than has been thus far for evaluations in the sense of indicators visual landscape environmental monitoring indicators landscape character impact regulation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
309,0,"What Did I Sniff?: Mapping Scents Onto Driving-Related Messages The sense of smell is well known to provide very vivid experiences and to mediate a strong activation of crossmodal semantic representations. Despite a growing number of olfactory HCI prototypes, there have been only a few attempts to study the sense of smell as an interaction modality. Here, we focus on the exploration of olfaction for in-car interaction design by establishing a mapping between three different driving-related messages (""Slow down"", ""Fill gas"", ""Passing by a point of interest"") and four scents (lemon, lavender, peppermint, rose). The results of our first study demonstrate strong associations between, for instance, the ""Slow down"" message and the scent of lemon, the ""Fill gas"" message and the scent of peppermint, the ""Passing by a point of interest"" message and the scent of rose. These findings have been confirmed in our second study, where participants expressed their mapping preferences while performing a simulated driving task. Automotive User Interfaces, Car-Driver Interaction, In-Car Interaction, Mapping, Multimodal Interfaces, Odour Stimulation, Olfaction, Semantic Information Layer, Smell",what did i sniff mapping scents onto driving related messages the sense of smell is well known to provide very vivid experiences and to mediate a strong activation of crossmodal semantic representations despite a growing number of olfactory hci prototypes there have been only a few attempts to study the sense of smell as an interaction modality here we focus on the exploration of olfaction for in car interaction design by establishing a mapping between three different driving related messages slow down fill gas passing by a point of interest and four scents lemon lavender peppermint rose the results of our first study demonstrate strong associations between for instance the slow down message and the scent of lemon the fill gas message and the scent of peppermint the passing by a point of interest message and the scent of rose these findings have been confirmed in our second study where participants expressed their mapping preferences while performing a simulated driving task automotive user interfaces car driver interaction in car interaction mapping multimodal interfaces odour stimulation olfaction semantic information layer smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
310,0,"Smell-driven performance analysis for end-user programmers End-user programmers such as scientists and engineers often adopt a visual domain-specific language due to its easy learnability, but then they later encounter problems when trying to create high-performance programs. In response, they typically have had to resort to learning and using general textual languages such as C or Fortran as a supplement or replacement for the visual language. This paper proposes a technique, called Smell-driven performance analysis, for helping end-user programmers to overcome performance problems without leaving the visual dataflow paradigm. The technique involves statically analyzing programs to heuristically detect areas with potential performance problems (``bad smells''), alerting enduser programmers about problems, and advising on how to fix those problems. We have implemented a prototype for applying this technique and conducted a user study in which end-user programmers diagnosed performance problems. The experiment showed our technique increased participants' success rates at finding problems and decreased the time required for finding solutions. Qualitatively, 92% of participants said our technique was helpful, and they listed numerous specific benefits provided. program diagnostics, specification languages, visual languages, smell-driven performance analysis, end-user programmers, visual domain-specific language, high-performance programs, textual languages, Fortran, visual dataflow paradigm, program analysis, Prototypes, Arrays, Visualization, Instruments, Performance analysis, Detectors, end-user programming, performance, visual language",smell driven performance analysis for end user programmers end user programmers such as scientists and engineers often adopt a visual domain specific language due to its easy learnability but then they later encounter problems when trying to create high performance programs in response they typically have had to resort to learning and using general textual languages such as c or fortran as a supplement or replacement for the visual language this paper proposes a technique called smell driven performance analysis for helping end user programmers to overcome performance problems without leaving the visual dataflow paradigm the technique involves statically analyzing programs to heuristically detect areas with potential performance problems bad smells alerting enduser programmers about problems and advising on how to fix those problems we have implemented a prototype for applying this technique and conducted a user study in which end user programmers diagnosed performance problems the experiment showed our technique increased participants success rates at finding problems and decreased the time required for finding solutions qualitatively 92 of participants said our technique was helpful and they listed numerous specific benefits provided program diagnostics specification languages visual languages smell driven performance analysis end user programmers visual domain specific language high performance programs textual languages fortran visual dataflow paradigm program analysis prototypes arrays visualization instruments performance analysis detectors end user programming performance visual language,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
311,0,"A Metric-Based Heuristic Framework to Detect Object-Oriented Design Flaws One of the important activities in re-engineering process is detecting design flaws. Such design flaws prevent an efficient maintenance, and further development of a system. This research proposes a novel metric-based heuristic framework to detect and locate object-oriented design flaws from the source code. It is accomplished by evaluating design quality of an object-oriented system through quantifying deviations from good design heuristics and principles. While design flaws can occur at any level, the proposed approach assesses the design quality of internal and external structure of a system at the class level which is the most fundamental level of a system. In a nutshell, design flaws are detected and located systematically in two phases using a generic OO design knowledge-base. In the first phase, hotspots are detected by primitive classifiers via measuring metrics indicating a design feature (e.g. complexity). In the second phase, individual design flaws are detected by composite classifiers using a proper set of metrics. We have chosen JBoss application server as the case study, due to its pure OO large size structure, and its success as an open source J2EE platform among developers object-oriented programming, program debugging, software maintenance, software metrics, software quality, systems re-engineering, software re-engineering, software maintenance, metric-based heuristic framework, object-oriented design flaw detection, source code, design quality, knowledge-base, JBoss application server, open source J2EE platform, Phase detection, Software systems, Process design, Phase measurement, Application software, Open source software, Software design, Medical diagnosis, Medical expert systems, Diagnostic expert systems",a metric based heuristic framework to detect object oriented design flaws one of the important activities in re engineering process is detecting design flaws such design flaws prevent an efficient maintenance and further development of a system this research proposes a novel metric based heuristic framework to detect and locate object oriented design flaws from the source code it is accomplished by evaluating design quality of an object oriented system through quantifying deviations from good design heuristics and principles while design flaws can occur at any level the proposed approach assesses the design quality of internal and external structure of a system at the class level which is the most fundamental level of a system in a nutshell design flaws are detected and located systematically in two phases using a generic oo design knowledge base in the first phase hotspots are detected by primitive classifiers via measuring metrics indicating a design feature e g complexity in the second phase individual design flaws are detected by composite classifiers using a proper set of metrics we have chosen jboss application server as the case study due to its pure oo large size structure and its success as an open source j2ee platform among developers object oriented programming program debugging software maintenance software metrics software quality systems re engineering software re engineering software maintenance metric based heuristic framework object oriented design flaw detection source code design quality knowledge base jboss application server open source j2ee platform phase detection software systems process design phase measurement application software open source software software design medical diagnosis medical expert systems diagnostic expert systems,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
312,0,"Seeing, smelling, feeling! Is there an influence of color on subjective affective responses to perfumed fabric softeners? Visual cues are likely to convey early sensory impressions and to generate strong expectations about product characteristics, which in turn could influence the final assessment of a product. The aim of this study was to investigate the influence of color on the verbal measurement of emotions in response to different perfumes in fabric softeners, the hypothesis being that color-perfume congruent pairs will induce enhanced positive emotional responses. In a first experiment, 102 participants were asked to report their feelings for nine perfumed fabric softeners, which were perfumed with one of three perfume variants and presented as one of three color variants. Verbal measurements of emotions were performed by using the ScentMove\texttrademark questionnaire. Results indicated that the subjective affective responses varied as a function of perfumes and were influenced by colors. A second experiment was conducted to verify whether the color-perfume congruency could be optimized. A group of 70 respondents participated in a color-matching exercise with the same three perfume variants and 10 possible colors, including the three original color variants. Results confirmed that other color-perfume associations could be more than or equally congruent to those presented in the first experiment. A third experiment was carried out to investigate whether increasing the color-perfume congruency would result in a significant increase of the subjective affective response. A group of 95 respondents were asked to report their feelings for nine perfumed fabric softeners, which were perfumed with the same three perfume variants and presented as one of three optimal color variants. The optimization of color-perfume pairing did not result in a significant increase of the subjective affective response. More generally, this study underlines the predominant role of perfume in the emotional response and a more limited influence of color. Emotion, Hedonic response, Feelings, Color, Expectation, Perfume",seeing smelling feeling is there an influence of color on subjective affective responses to perfumed fabric softeners visual cues are likely to convey early sensory impressions and to generate strong expectations about product characteristics which in turn could influence the final assessment of a product the aim of this study was to investigate the influence of color on the verbal measurement of emotions in response to different perfumes in fabric softeners the hypothesis being that color perfume congruent pairs will induce enhanced positive emotional responses in a first experiment 102 participants were asked to report their feelings for nine perfumed fabric softeners which were perfumed with one of three perfume variants and presented as one of three color variants verbal measurements of emotions were performed by using the scentmove texttrademark questionnaire results indicated that the subjective affective responses varied as a function of perfumes and were influenced by colors a second experiment was conducted to verify whether the color perfume congruency could be optimized a group of 70 respondents participated in a color matching exercise with the same three perfume variants and 10 possible colors including the three original color variants results confirmed that other color perfume associations could be more than or equally congruent to those presented in the first experiment a third experiment was carried out to investigate whether increasing the color perfume congruency would result in a significant increase of the subjective affective response a group of 95 respondents were asked to report their feelings for nine perfumed fabric softeners which were perfumed with the same three perfume variants and presented as one of three optimal color variants the optimization of color perfume pairing did not result in a significant increase of the subjective affective response more generally this study underlines the predominant role of perfume in the emotional response and a more limited influence of color emotion hedonic response feelings color expectation perfume,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
313,0,"Quantum neurophysics: From non-living matter to quantum neurobiology and psychopathology The concepts of quantum brain, quantum mind and quantum consciousness have been increasingly gaining currency in recent years, both in scientific papers and in the popular press. In fact, the concept of the quantum brain is a general framework. Included in it are basically four main sub-headings. These are often incorrectly used interchangeably. The first of these and the one which started the quantum mind/consciousness debate was the place of consciousness in the problem of measurement in quantum mechanics. Debate on the problem of quantum measurement and about the place of the conscious observer has lasted almost a century. One solution to this problem is that the participation of a conscious observer in the experiment will radically change our understanding of the universe and our relationship with the outside world. The second topic is that of quantum biology. This topic has become a popular field of research, especially in the last decade. It concerns whether or not the rules of quantum physics operate in biological structures. It has been shown in the latest research on photosynthesis, the sense of smell and magnetic direction finding in animals that the laws of quantum physics may operate in warm-wet-noisy biological structures. The third sub-heading is quantum neurobiology. This topic has not yet gained wide acceptance and is still in its early stages. Its primary purpose is directed to understand whether the laws of quantum physics are effective in the biology of the nervous system or not. A further step in brain neurobiology, toward the understanding of consciousness formation, is the research of quantum laws effects upon neural network functions. The fourth and final topic is quantum psychopathology. This topic takes its basis and its support from quantum neurobiology. It comes from the idea that if quantum physics is involved in the normal working of the brain, diseased conditions of the brain such as depression, anxiety, dementia, schizophrenia and hallucinations can be explained by quantum physical pathology. In this article, these topics will be reviewed in a general framework, and for the first time a general classification will be made for the quantum brain theory. Quantum physics, Measurement problem, Consciousness, Quantum biology, Quantum neurobiology, Psychopathology",quantum neurophysics from non living matter to quantum neurobiology and psychopathology the concepts of quantum brain quantum mind and quantum consciousness have been increasingly gaining currency in recent years both in scientific papers and in the popular press in fact the concept of the quantum brain is a general framework included in it are basically four main sub headings these are often incorrectly used interchangeably the first of these and the one which started the quantum mind consciousness debate was the place of consciousness in the problem of measurement in quantum mechanics debate on the problem of quantum measurement and about the place of the conscious observer has lasted almost a century one solution to this problem is that the participation of a conscious observer in the experiment will radically change our understanding of the universe and our relationship with the outside world the second topic is that of quantum biology this topic has become a popular field of research especially in the last decade it concerns whether or not the rules of quantum physics operate in biological structures it has been shown in the latest research on photosynthesis the sense of smell and magnetic direction finding in animals that the laws of quantum physics may operate in warm wet noisy biological structures the third sub heading is quantum neurobiology this topic has not yet gained wide acceptance and is still in its early stages its primary purpose is directed to understand whether the laws of quantum physics are effective in the biology of the nervous system or not a further step in brain neurobiology toward the understanding of consciousness formation is the research of quantum laws effects upon neural network functions the fourth and final topic is quantum psychopathology this topic takes its basis and its support from quantum neurobiology it comes from the idea that if quantum physics is involved in the normal working of the brain diseased conditions of the brain such as depression anxiety dementia schizophrenia and hallucinations can be explained by quantum physical pathology in this article these topics will be reviewed in a general framework and for the first time a general classification will be made for the quantum brain theory quantum physics measurement problem consciousness quantum biology quantum neurobiology psychopathology,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
314,0,"Improving the Precision of Fowler's Definitions of Bad Smells Current approaches to detecting bad smells in code are mainly based on software metrics. We suggest that these methods lack precision in detecting bad smells, and we propose a code pattern-based approach to detecting bad smells. However before such a pattern-based approach can be implemented, Fowler's original definitions of bad smells need to be made more precise. Currently Fowler's definitions are too informal to implement in a pattern-searching tool. In this paper we use an expert panel to evaluate our enhanced definitions for five of Fowler's bad smells. We use a questionnaire to survey four experts' opinions of our bad smell definitions. Our results show that the experts basically agree with our enhanced definitions of the message chains, middle man and speculative generality bad smells. However, there are strong disagreements on our definitions of the data clumps and switch statements bad smells. We present enhanced definitions on the basis of these expert opinions. object-oriented programming, reverse engineering, software maintenance, software metrics, systems re-engineering, Fowler's definition, code bad smell detection, software metrics, code pattern-based approach, pattern-searching tool, questionnaire survey, message chain, middle man, speculative generality bad smell, data clump, switch statement bad smell, software refactoring, software reengineering, reverse engineering, Switches, Software metrics, Conferences, Computer science, Programming environments, Reverse engineering, Information systems, Mathematics, Software measurement, Logic programming, Coding tools and technique, programming environments construction tools, restructuring, reverse engineering, reengineering",improving the precision of fowler s definitions of bad smells current approaches to detecting bad smells in code are mainly based on software metrics we suggest that these methods lack precision in detecting bad smells and we propose a code pattern based approach to detecting bad smells however before such a pattern based approach can be implemented fowler s original definitions of bad smells need to be made more precise currently fowler s definitions are too informal to implement in a pattern searching tool in this paper we use an expert panel to evaluate our enhanced definitions for five of fowler s bad smells we use a questionnaire to survey four experts opinions of our bad smell definitions our results show that the experts basically agree with our enhanced definitions of the message chains middle man and speculative generality bad smells however there are strong disagreements on our definitions of the data clumps and switch statements bad smells we present enhanced definitions on the basis of these expert opinions object oriented programming reverse engineering software maintenance software metrics systems re engineering fowler s definition code bad smell detection software metrics code pattern based approach pattern searching tool questionnaire survey message chain middle man speculative generality bad smell data clump switch statement bad smell software refactoring software reengineering reverse engineering switches software metrics conferences computer science programming environments reverse engineering information systems mathematics software measurement logic programming coding tools and technique programming environments construction tools restructuring reverse engineering reengineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
315,0,"Technical Debt in MDE: A Case Study on GMF/EMF-based Projects Technical Debt (TD) is a metaphor referring to immature software artifacts that can hurt the long-term maintenance of a system. Model-Driven Engineering (MDE) is a model-centric software development approach, which promises better maintainability. However, there is a lack of empirical evidence on the existence and influence of TD in the context of MDE. This paper investigates the code-level TD in MDE projects, which is incurred during code generation. We evaluated 16 open-source and non-trivial GMF/EMF-based MDE projects using bad smells, which are widely-accepted TD indicators. The results demonstrate that MDE is not TD-free, and code generators also incur TD, similarly to developers. In fact, the generated code usually contains more TD than handwritten code, which influences significantly the maintenance of MDE projects. []",technical debt in mde a case study on gmf emf based projects technical debt td is a metaphor referring to immature software artifacts that can hurt the long term maintenance of a system model driven engineering mde is a model centric software development approach which promises better maintainability however there is a lack of empirical evidence on the existence and influence of td in the context of mde this paper investigates the code level td in mde projects which is incurred during code generation we evaluated 16 open source and non trivial gmf emf based mde projects using bad smells which are widely accepted td indicators the results demonstrate that mde is not td free and code generators also incur td similarly to developers in fact the generated code usually contains more td than handwritten code which influences significantly the maintenance of mde projects,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
316,0,"Olfactory Display The last twenty years have seen enormous leaps forward in computers' abilities to generate sound and video. What happens when computers can produce scents on demand? In this talk, I present three approaches to this question. I first look at human olfactory processing: what is our olfactory bandwidth, and what are the limitations of our sense of smell? I then explore the use of scent to accompany other media, from historical examples like Sense-o-Rama and Aromarama, to more recent work including firefighter training systems, augmented gaming, and food and beverage applications. Finally, I look at the possibilities of olfactory output as an ambient display medium. I conclude with an overview of current computer-controlled olfactory output devices: off the shelf solutions for incorporating scent into user interface applications. []",olfactory display the last twenty years have seen enormous leaps forward in computers abilities to generate sound and video what happens when computers can produce scents on demand in this talk i present three approaches to this question i first look at human olfactory processing what is our olfactory bandwidth and what are the limitations of our sense of smell i then explore the use of scent to accompany other media from historical examples like sense o rama and aromarama to more recent work including firefighter training systems augmented gaming and food and beverage applications finally i look at the possibilities of olfactory output as an ambient display medium i conclude with an overview of current computer controlled olfactory output devices off the shelf solutions for incorporating scent into user interface applications,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
317,0,"Design Smell Detection with Similarity Scoring and Fingerprinting: Preliminary Study Design smells in software models reduce the software quality. Smells identification supports the refactoring, which is a way to improve the quality of models and subsequently increasing software readability, maintainability and extensibility. We propose a preliminary study of using Similarity Scoring Algorithm and Fingerprinting Algorithm for design smells detection. In the future, we plan to do extensive verification on several large projects, integrate these methods to the smells detection framework and compare effectiveness with other approaches. program diagnostics, software maintenance, software quality, design smell detection, similarity scoring algorithm, fingerprinting algorithm, software model, software quality, software refactoring, software readability, software maintainability, software extensibility, Europe, Computers, design smells, anti-patterns, refactoring, algorithms, fingerprinting, similarity scoring",design smell detection with similarity scoring and fingerprinting preliminary study design smells in software models reduce the software quality smells identification supports the refactoring which is a way to improve the quality of models and subsequently increasing software readability maintainability and extensibility we propose a preliminary study of using similarity scoring algorithm and fingerprinting algorithm for design smells detection in the future we plan to do extensive verification on several large projects integrate these methods to the smells detection framework and compare effectiveness with other approaches program diagnostics software maintenance software quality design smell detection similarity scoring algorithm fingerprinting algorithm software model software quality software refactoring software readability software maintainability software extensibility europe computers design smells anti patterns refactoring algorithms fingerprinting similarity scoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
318,0,"Domain-specific tailoring of code smells: an empirical study Code smells refer to commonly occurring patterns in source code that indicate poor programming practices or code decay. Detecting code smells helps developers find design problems that can cause trouble in future maintenance. Detection rules for code smells, based on software metrics, have been proposed, but they do not take domain-specific characteristics into consideration. In this study we investigate whether such generic heuristics can be tailored to include domain-specific factors. Input into these domain-specific heuristics comes from an iterative empirical field study in a software maintenance project. The results yield valuable insight into code smell detection. software maintenance, software metrics, domain-specific tailoring, code smells, source code, poor programming practices, code decay, software metrics, domain-specific heuristics, software maintenance project, Software, Measurement, Programming, Graphical user interfaces, Encoding, Couplings, Semantics, code smells, domain-specific, empirical study",domain specific tailoring of code smells an empirical study code smells refer to commonly occurring patterns in source code that indicate poor programming practices or code decay detecting code smells helps developers find design problems that can cause trouble in future maintenance detection rules for code smells based on software metrics have been proposed but they do not take domain specific characteristics into consideration in this study we investigate whether such generic heuristics can be tailored to include domain specific factors input into these domain specific heuristics comes from an iterative empirical field study in a software maintenance project the results yield valuable insight into code smell detection software maintenance software metrics domain specific tailoring code smells source code poor programming practices code decay software metrics domain specific heuristics software maintenance project software measurement programming graphical user interfaces encoding couplings semantics code smells domain specific empirical study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
319,0,"Portuguese consumers' attitudes and perceptions of bivalve molluscs Bivalves have been promoted as healthy food in many countries. Yet, little information is available about bivalve consumers' purchasing behaviour and attitudes. The aim of this study was to investigate the marketing and quality aspects of several bivalve species with economical value in Portugal and to examine the relationship between each respondent's demographic and socio-economic status with bivalve consumption attitudes and preferences. A randomly selected sample of 1778 people answered a web-based questionnaire. The majority of respondents claimed to consume clams (pullet carpet shell clam and Japanese carpet shell clam) and usually prefer bivalves from national production. Smell, size and cleaned shells were considered as the most important criteria when choosing live bivalves. Most consumers buy clams in supermarkets and revealed good knowledge about the risks associated with its consumption. Trust in the selling establishment and product's label information was the main perceived quality criteria associated to bivalve purchasing. Nonetheless, consumers' attitudes and preferences differed considerably according to their demographic and socio-economic characteristics. The current findings provide a useful tool for producers and stakeholders involved in the trade chain of bivalves to understand the consumption profile and the most important quality criteria involved in bivalve purchase. Additionally, it is an important tool to predict the risks of bivalve consumption as well as to understand the different scenarios of contamination occurring in harvesting areas by national competent authorities. Consumer survey, Bivalves, Clams, Preferences, Attitudes",portuguese consumers attitudes and perceptions of bivalve molluscs bivalves have been promoted as healthy food in many countries yet little information is available about bivalve consumers purchasing behaviour and attitudes the aim of this study was to investigate the marketing and quality aspects of several bivalve species with economical value in portugal and to examine the relationship between each respondent s demographic and socio economic status with bivalve consumption attitudes and preferences a randomly selected sample of 1778 people answered a web based questionnaire the majority of respondents claimed to consume clams pullet carpet shell clam and japanese carpet shell clam and usually prefer bivalves from national production smell size and cleaned shells were considered as the most important criteria when choosing live bivalves most consumers buy clams in supermarkets and revealed good knowledge about the risks associated with its consumption trust in the selling establishment and product s label information was the main perceived quality criteria associated to bivalve purchasing nonetheless consumers attitudes and preferences differed considerably according to their demographic and socio economic characteristics the current findings provide a useful tool for producers and stakeholders involved in the trade chain of bivalves to understand the consumption profile and the most important quality criteria involved in bivalve purchase additionally it is an important tool to predict the risks of bivalve consumption as well as to understand the different scenarios of contamination occurring in harvesting areas by national competent authorities consumer survey bivalves clams preferences attitudes,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
320,0,"Clone Detection and Removal for Erlang/OTP Within a Refactoring Environment A well-known bad code smell in refactoring and software maintenance is duplicated code, or code clones. A code clone is a code fragment that is identical or similar to another. Unjustified code clones increase code size, make maintenance and comprehension more difficult, and also indicate design problems such as lack of encapsulation or abstraction. This paper proposes a token and AST based hybrid approach to automatically detecting code clones in Erlang/OTP programs, underlying a collection of refactorings to support user-controlled automatic clone removal, and examines their application in substantial case studies. Both the clone detector and the refactorings are integrated within Wrangler, the refactoring tool developed at Kent for Erlang/OTP. duplicated code, erlang, program analysis, program transformation, refactoring, wrangler",clone detection and removal for erlang otp within a refactoring environment a well known bad code smell in refactoring and software maintenance is duplicated code or code clones a code clone is a code fragment that is identical or similar to another unjustified code clones increase code size make maintenance and comprehension more difficult and also indicate design problems such as lack of encapsulation or abstraction this paper proposes a token and ast based hybrid approach to automatically detecting code clones in erlang otp programs underlying a collection of refactorings to support user controlled automatic clone removal and examines their application in substantial case studies both the clone detector and the refactorings are integrated within wrangler the refactoring tool developed at kent for erlang otp duplicated code erlang program analysis program transformation refactoring wrangler,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
321,0,"(Un)Awareness of Allergy Background Allergy is associated with considerable morbidity. Objective The aim of this multicenter study was to provide insight into allergy knowledge and perceptions among the population. Methods During the World Allergy Day, several allergy clinics conducted public meetings to encourage the awareness of and education in allergy. At the beginning, participants filled out a questionnaire to assess their knowledge about what is allergy and to determine by whom those symptoms are cared. Results A total of 256 participants (187 women/69 men, mean age, 31.2 $\pm$ 12.5 years) completed the survey. Of the 202 participants with symptoms, 58.9% had physician-diagnosed allergic disease. Among the 19 symptoms evaluated, 56.5% of the symptoms were recognized as related with allergy, and this increased in compliance with education level (r = +0.427; P < 0.001) but not with diagnosed allergy (P = 0.34). Sneezing was the most common symptom thought to be related with allergy-related symptom (77.5%), whereas loss of smell was the least one (37.9%). Participants were more likely to be cared by an allergologist (72.9%) followed by other specialties, when experiencing allergy. Conclusions Increasing the awareness for allergic symptoms is the key not only for the diagnosis but also for the optimal treatment. Therefore, education is an important component of prevention and control of allergic diseases. allergy, asthma, awareness, diagnosis, symptom, treatment",un awareness of allergy background allergy is associated with considerable morbidity objective the aim of this multicenter study was to provide insight into allergy knowledge and perceptions among the population methods during the world allergy day several allergy clinics conducted public meetings to encourage the awareness of and education in allergy at the beginning participants filled out a questionnaire to assess their knowledge about what is allergy and to determine by whom those symptoms are cared results a total of 256 participants 187 women 69 men mean age 31 2 pm 12 5 years completed the survey of the 202 participants with symptoms 58 9 had physician diagnosed allergic disease among the 19 symptoms evaluated 56 5 of the symptoms were recognized as related with allergy and this increased in compliance with education level r 0 427 p 0 001 but not with diagnosed allergy p 0 34 sneezing was the most common symptom thought to be related with allergy related symptom 77 5 whereas loss of smell was the least one 37 9 participants were more likely to be cared by an allergologist 72 9 followed by other specialties when experiencing allergy conclusions increasing the awareness for allergic symptoms is the key not only for the diagnosis but also for the optimal treatment therefore education is an important component of prevention and control of allergic diseases allergy asthma awareness diagnosis symptom treatment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
322,0,"On the anonymity of some authentication schemes for wireless communications In 2004, Zhu and Ma proposed a new and efficient authentication scheme claiming to provide anonymity for wireless environments. Two years later, Lee et al. revealed several previously unpublished flaws in Zhu-Ma's authentication scheme and proposed a fix. More recently in 2008, Wu et al. pointed out that Lee et al.'s proposed fix fails to preserve anonymity as claimed and then proposed yet another fix to address the problem. In this paper, we use Wu et al.'s scheme as a case study and demonstrate that due to an inherent design flaw in Zhu-Ma's scheme, the latter and its successors are unlikely to provide anonymity. We hope that by identifying this design flaw, similar structural mistakes can be avoided in future designs. mobile communication, telecommunication security, authentication schemes, wireless communications, anonymity, Zhu-Ma scheme design flaw, Authentication, Wireless communication, Australia, Communications technology, Identity-based encryption, Military communication, History, Privacy, Cryptography, Computer science, Anonymity, authentication, wireless communications",on the anonymity of some authentication schemes for wireless communications in 2004 zhu and ma proposed a new and efficient authentication scheme claiming to provide anonymity for wireless environments two years later lee et al revealed several previously unpublished flaws in zhu ma s authentication scheme and proposed a fix more recently in 2008 wu et al pointed out that lee et al s proposed fix fails to preserve anonymity as claimed and then proposed yet another fix to address the problem in this paper we use wu et al s scheme as a case study and demonstrate that due to an inherent design flaw in zhu ma s scheme the latter and its successors are unlikely to provide anonymity we hope that by identifying this design flaw similar structural mistakes can be avoided in future designs mobile communication telecommunication security authentication schemes wireless communications anonymity zhu ma scheme design flaw authentication wireless communication australia communications technology identity based encryption military communication history privacy cryptography computer science anonymity authentication wireless communications,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
323,0,"OSpace: Towards a Systematic Exploration of Olfactory Interaction Spaces When designing olfactory interfaces, HCI researchers and practitioners have to carefully consider a number of issues related to the scent delivery, detection, and lingering. These are just a few of the problems to deal with. We present OSpace - an approach for designing, building, and exploring an olfactory interaction space. Our paper is the first to explore in detail not only the scent-delivery parameters but also the air extraction issues. We conducted a user study to demonstrate how the scent detection/lingering times can be acquired under different air extraction conditions, and how the impact of scent type, dilution, and intensity can be investigated. Results show that with our setup, the scents can be perceived by the user within ten seconds and it takes less than nine seconds for the scents to disappear, both when the extraction is on and off. We discuss the practical application of these results for HCI. Multimodal Interfaces, Odour Stimulation, Olfaction, Olfactory Interaction Space, Scent-Delivery, Smell",ospace towards a systematic exploration of olfactory interaction spaces when designing olfactory interfaces hci researchers and practitioners have to carefully consider a number of issues related to the scent delivery detection and lingering these are just a few of the problems to deal with we present ospace an approach for designing building and exploring an olfactory interaction space our paper is the first to explore in detail not only the scent delivery parameters but also the air extraction issues we conducted a user study to demonstrate how the scent detection lingering times can be acquired under different air extraction conditions and how the impact of scent type dilution and intensity can be investigated results show that with our setup the scents can be perceived by the user within ten seconds and it takes less than nine seconds for the scents to disappear both when the extraction is on and off we discuss the practical application of these results for hci multimodal interfaces odour stimulation olfaction olfactory interaction space scent delivery smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
324,0,"Traffic and Congestion Control in a Publish/Subscribe Network Despite its success the current Internet is suffering from several key design flaws, most notably an imbalance of powers in favour of the sender of information who is overly trusted. To remedy the problems a publish/subscribe paradigm (pub/sub) has been proposed. The goal of the PSIRP project is to design a new information-centric internetworking architecture based on the pub/sub paradigm. This paper describes the ongoing development of congestion control algorithms for the PSIRP project at IPP-BAS. computer systems and technologies, internet, network congestion, network traffic control, networks",traffic and congestion control in a publish subscribe network despite its success the current internet is suffering from several key design flaws most notably an imbalance of powers in favour of the sender of information who is overly trusted to remedy the problems a publish subscribe paradigm pub sub has been proposed the goal of the psirp project is to design a new information centric internetworking architecture based on the pub sub paradigm this paper describes the ongoing development of congestion control algorithms for the psirp project at ipp bas computer systems and technologies internet network congestion network traffic control networks,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
325,0,"Hippocampal CA1 local field potential oscillations induced by olfactory cue of liked food Eating motivation is induced not only by negative energy balance but also food related cues. However, neural processing for acquisition of learned food preference remains to be established. This study aimed to identify hippocampal neural signaling in response to olfactory cue (chocolate scent) after completion of repetitive chocolate sessions. Male Swiss albino mice implanted with intracranial electrode into the hippocampus were used for local field potential (LFP) recording. Animals were given chocolate sessions (a piece of 2g chocolate per each mouse to eat on day 1, 3, 5 and 7). Hippocampal CA1 LFP signals and exploratory behavior of animals receiving chocolate scent were analyzed before and after chocolate sessions. The experiment was performed in a place preference-like apparatus with the zones of normal food pellet and chocolate (both kept in a small perforated cup for smell dispersion) at the opposite ends. Following chocolate sessions, time spent in a chocolate zone and CA1 LFP patterns were analyzed in comparison to control levels. Two-way ANOVA revealed significant increase in time spent seeking for chocolate. Frequency analysis of LFP power spectra revealed significant increases in delta and theta powers. Phase-amplitude analysis showed significant increase in maximal modulation index and decrease in frequency for phase of theta-high gamma coupling. Taken together, neural signaling in the hippocampus was sensitive to chocolate olfactory cue that might underlie learning process in response to repeated chocolate consumptions that primed intense food approaching behavior. Ultimately, these LFP patterns might reflect motivation to eat and predict feeding probability. Local field potential, Hippocampus, Theta-gamma coupling, Scent cue, Chocolate",hippocampal ca1 local field potential oscillations induced by olfactory cue of liked food eating motivation is induced not only by negative energy balance but also food related cues however neural processing for acquisition of learned food preference remains to be established this study aimed to identify hippocampal neural signaling in response to olfactory cue chocolate scent after completion of repetitive chocolate sessions male swiss albino mice implanted with intracranial electrode into the hippocampus were used for local field potential lfp recording animals were given chocolate sessions a piece of 2g chocolate per each mouse to eat on day 1 3 5 and 7 hippocampal ca1 lfp signals and exploratory behavior of animals receiving chocolate scent were analyzed before and after chocolate sessions the experiment was performed in a place preference like apparatus with the zones of normal food pellet and chocolate both kept in a small perforated cup for smell dispersion at the opposite ends following chocolate sessions time spent in a chocolate zone and ca1 lfp patterns were analyzed in comparison to control levels two way anova revealed significant increase in time spent seeking for chocolate frequency analysis of lfp power spectra revealed significant increases in delta and theta powers phase amplitude analysis showed significant increase in maximal modulation index and decrease in frequency for phase of theta high gamma coupling taken together neural signaling in the hippocampus was sensitive to chocolate olfactory cue that might underlie learning process in response to repeated chocolate consumptions that primed intense food approaching behavior ultimately these lfp patterns might reflect motivation to eat and predict feeding probability local field potential hippocampus theta gamma coupling scent cue chocolate,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
326,0,"""Smellization"" of Warnings Against Overuse Power Used to Promote Energy Saving Behavior In Japan, the necessity of saving energy is rising due to the nuclear accident caused by the Great East Japan Earthquake that occurred on March 11, 2011. Reduction of energy usage is required due to rapid increases in electricity consumption due to the scorching summer heat in recent years. The common ways to provide information on energy consumption mainly occur through ""visualization"" of information. On the contrary, olfactory stimulation can be performed while working, and it is effective also when the degree of arousal is low. This study considers applications on the basis of the concept of ""smellization"" of information using olfactive stimulation. In this paper, we introduce the configuration and operation examples of a system developed for evoking public energy conservation behavior using smell. energy saving behavior, information presentation using smell, olfactory display, smellization",smellization of warnings against overuse power used to promote energy saving behavior in japan the necessity of saving energy is rising due to the nuclear accident caused by the great east japan earthquake that occurred on march 11 2011 reduction of energy usage is required due to rapid increases in electricity consumption due to the scorching summer heat in recent years the common ways to provide information on energy consumption mainly occur through visualization of information on the contrary olfactory stimulation can be performed while working and it is effective also when the degree of arousal is low this study considers applications on the basis of the concept of smellization of information using olfactive stimulation in this paper we introduce the configuration and operation examples of a system developed for evoking public energy conservation behavior using smell energy saving behavior information presentation using smell olfactory display smellization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
327,0,"Odor Recorder Using Mass Spectrometry and Large-scale Data Since a variety of smells can be generated by blending multiple odor components, an odor recorder can reproduce smells as well as record them. Although the range of smell to be recorded has been so far limited this work enhances that range using mass spectrometry without GC. We proposed the algorithm to select appropriate odor components among huge number of candidates. In the simulation, the recipe of smell was correctly obtained using odor components selected among 10,000 candidates. In the experiment, the apple flavor was successfully blended using odor components selected among 82 candidates. Furthermore, sensory test revealed that the smell blended according to the estimated recipe was almost the same as the target one. electronic noses, mass spectroscopy, odor recorder, mass spectrometry, large-scale data, odor components, recipe smell, apple flavor, sensory test, Mass spectroscopy, Large-scale systems, Sensor arrays, Databases, Least squares methods, Educational institutions, Testing, Data engineering, Constraint theory, Gas detectors",odor recorder using mass spectrometry and large scale data since a variety of smells can be generated by blending multiple odor components an odor recorder can reproduce smells as well as record them although the range of smell to be recorded has been so far limited this work enhances that range using mass spectrometry without gc we proposed the algorithm to select appropriate odor components among huge number of candidates in the simulation the recipe of smell was correctly obtained using odor components selected among 10 000 candidates in the experiment the apple flavor was successfully blended using odor components selected among 82 candidates furthermore sensory test revealed that the smell blended according to the estimated recipe was almost the same as the target one electronic noses mass spectroscopy odor recorder mass spectrometry large scale data odor components recipe smell apple flavor sensory test mass spectroscopy large scale systems sensor arrays databases least squares methods educational institutions testing data engineering constraint theory gas detectors,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
328,0,"Automated design flaw correction in object-oriented systems Software inevitably changes. As a consequence, we observe the phenomenon referred to as ""software entropy"" or ""software decay"": the software design continually degrades making maintenance and functional extensions overly costly if not impossible. There exist a number of approaches to identify design flaws (problem detection) and to remedy them (refactoring). There is, however, a conceptual gap between these two stages: There is no appropriate support for the automated mapping of design flaws to possible solutions. Here we propose an integrated, quality-driven and tool-supported methodology to support object-oriented software evolution. Our approach is based on the novel concept of ""correction strategies"". Correction strategies serve as reference descriptions that enable a human-assisted tool to plan and perform all necessary steps for the safe removal of detected design flaws, with special concern towards the targeted quality goals of the restructuring process. We briefly sketch our tool chain and illustrate our approach with the help of a medium-sized real-world case-study. object-oriented programming, software prototyping, software maintenance, systems re-engineering, software reusability, automated design flaw correction, object-oriented software evolution, software entropy, software decay, software design, software maintenance, Software tools, Q factor, Software design, Software quality, Degradation, Entropy, Costs, Software systems, Object oriented modeling, Automation",automated design flaw correction in object oriented systems software inevitably changes as a consequence we observe the phenomenon referred to as software entropy or software decay the software design continually degrades making maintenance and functional extensions overly costly if not impossible there exist a number of approaches to identify design flaws problem detection and to remedy them refactoring there is however a conceptual gap between these two stages there is no appropriate support for the automated mapping of design flaws to possible solutions here we propose an integrated quality driven and tool supported methodology to support object oriented software evolution our approach is based on the novel concept of correction strategies correction strategies serve as reference descriptions that enable a human assisted tool to plan and perform all necessary steps for the safe removal of detected design flaws with special concern towards the targeted quality goals of the restructuring process we briefly sketch our tool chain and illustrate our approach with the help of a medium sized real world case study object oriented programming software prototyping software maintenance systems re engineering software reusability automated design flaw correction object oriented software evolution software entropy software decay software design software maintenance software tools q factor software design software quality degradation entropy costs software systems object oriented modeling automation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
329,0,"Towards a Catalog of Usability Smells This paper presents a catalog of smells in the context of interactive applications. These so-called usability smells are indicators of poor design on an application's user interface, with the potential to hinder not only its usability but also its maintenance and evolution. To eliminate such usability smells we discuss a set of program/usability refactorings. In order to validate the presented usability smells catalog, and the associated refactorings, we present a preliminary empirical study with software developers in the context of a real open source hospital management application. Moreover, a tool that computes graphical user interface behavior models, giving the applications' source code, is used to automatically detect usability smells at the model level. code smells, empirical studies, graphical user interfaces",towards a catalog of usability smells this paper presents a catalog of smells in the context of interactive applications these so called usability smells are indicators of poor design on an application s user interface with the potential to hinder not only its usability but also its maintenance and evolution to eliminate such usability smells we discuss a set of program usability refactorings in order to validate the presented usability smells catalog and the associated refactorings we present a preliminary empirical study with software developers in the context of a real open source hospital management application moreover a tool that computes graphical user interface behavior models giving the applications source code is used to automatically detect usability smells at the model level code smells empirical studies graphical user interfaces,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
330,0,"Impact and utility of smell-driven performance tuning for end-user programmers This paper proposes a technique, called Smell-driven performance tuning (SDPT), which semi-automatically assists end-user programmers with fixing performance problems in visual dataflow programming languages. A within-subjects laboratory experiment showed SDPT increased end-user programmers' success rate and decreased the time they required. Another study, based on using SDPT to analyze a corpus of example end-user programs, demonstrated that applying all available SDPT transformations achieved an execution time improvement of 42% and a memory usage improvement of 20%, comparable to improvements that expert programmers historically had manually achieved on the same programs. These results indicate that SDPT is an effective method for helping end-user programmers to fix performance problems. End-user programming, Performance, Visual language",impact and utility of smell driven performance tuning for end user programmers this paper proposes a technique called smell driven performance tuning sdpt which semi automatically assists end user programmers with fixing performance problems in visual dataflow programming languages a within subjects laboratory experiment showed sdpt increased end user programmers success rate and decreased the time they required another study based on using sdpt to analyze a corpus of example end user programs demonstrated that applying all available sdpt transformations achieved an execution time improvement of 42 and a memory usage improvement of 20 comparable to improvements that expert programmers historically had manually achieved on the same programs these results indicate that sdpt is an effective method for helping end user programmers to fix performance problems end user programming performance visual language,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
331,0,"Four Languages and Lots of Macros: Analyzing Autotools Build Systems Build systems are crucial for software system development, however there is a lack of tool support to help with their high maintenance overhead. GNU Autotools are widely used in the open source community, but users face various challenges from its hard to comprehend nature and staging of multiple code generation steps, often leading to low quality and error-prone build code. In this paper, we present a platform, AutoHaven, to provide a foundation for developers to create analysis tools to help them understand, maintain, and migrate their GNU Autotools build systems. Internally it uses approximate parsing and symbolic analysis of the build logic. We illustrate the use of the platform with two tools: ACSense helps developers to better understand their build systems and ACSniff detects build smells to improve build code quality. Our evaluation shows that AutoHaven can support most GNU Autotools build systems and can detect build smells in the wild. Autoconf, GNU Autotool, build maintenance, build-system",four languages and lots of macros analyzing autotools build systems build systems are crucial for software system development however there is a lack of tool support to help with their high maintenance overhead gnu autotools are widely used in the open source community but users face various challenges from its hard to comprehend nature and staging of multiple code generation steps often leading to low quality and error prone build code in this paper we present a platform autohaven to provide a foundation for developers to create analysis tools to help them understand maintain and migrate their gnu autotools build systems internally it uses approximate parsing and symbolic analysis of the build logic we illustrate the use of the platform with two tools acsense helps developers to better understand their build systems and acsniff detects build smells to improve build code quality our evaluation shows that autohaven can support most gnu autotools build systems and can detect build smells in the wild autoconf gnu autotool build maintenance build system,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
332,0,"Reducing or delaying egg depredation by punishing free-ranging predators for opening eggs We tried to deter free-ranging, mammalian predators from opening untreated eggs by first teaching them during a training period that such behavior will cause discomfort. The discomfort was inflicted by injecting eggs with pulegone, a volatile chemical which irritates the trigeminal nerve upon inhalation and produces gastric distress upon digestion. Pulegone-injected eggs were distributed in eight study sites and were followed by an experiment where untreated eggs were placed in either untreated nests or ones sprayed with pulegone. Our objective was to deceive predators into thinking that the eggs in the latter nests contained pulegone. Some nests were clumped together to simulate the nests of a colonial nesting species, and others were dispersed and hidden to simulate the nests of solitary nesters. Among colonial nests, eggs in nests treated with pulegone survived an average of 4 days compared to 3 days for those in untreated nests. Among solitary nests, there were no differences in the survival of treated and control nests. These findings suggest that egg predation in nesting colonies can be reduced or delayed by training local predators to avoid pulegone-injected eggs and then making the nests in the colony smell of pulegone. Aversive conditioning, Colonial birds, Egg predation, Nest predation, Repellent, Wildlife damage management",reducing or delaying egg depredation by punishing free ranging predators for opening eggs we tried to deter free ranging mammalian predators from opening untreated eggs by first teaching them during a training period that such behavior will cause discomfort the discomfort was inflicted by injecting eggs with pulegone a volatile chemical which irritates the trigeminal nerve upon inhalation and produces gastric distress upon digestion pulegone injected eggs were distributed in eight study sites and were followed by an experiment where untreated eggs were placed in either untreated nests or ones sprayed with pulegone our objective was to deceive predators into thinking that the eggs in the latter nests contained pulegone some nests were clumped together to simulate the nests of a colonial nesting species and others were dispersed and hidden to simulate the nests of solitary nesters among colonial nests eggs in nests treated with pulegone survived an average of 4 days compared to 3 days for those in untreated nests among solitary nests there were no differences in the survival of treated and control nests these findings suggest that egg predation in nesting colonies can be reduced or delayed by training local predators to avoid pulegone injected eggs and then making the nests in the colony smell of pulegone aversive conditioning colonial birds egg predation nest predation repellent wildlife damage management,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
333,0,"Classbox/J: Controlling the Scope of Change in Java Unanticipated changes to complex software systems can introduce anomalies such as duplicated code, suboptimal inheritance relationships and a proliferation of run-time downcasts. Refactoring to eliminate these anomalies may not be an option, at least in certain stages of software evolution. Classboxes are modules that restrict the visibility of changes to selected clients only, thereby offering more freedom in the way unanticipated changes may be implemented, and thus reducing the need for convoluted design anomalies. In this paper we demonstrate how classboxes can be implemented in statically-typed languages like Java. We also present an extended case study of Swing, a Java GUI package built on top of AWT, and we document the ensuing anomalies that Swing introduces. We show how Classbox/J, a prototype implementation of classboxes for Java, is used to provide a cleaner implementation of Swing using local refinement rather than subclassing. class extension, module, open-classes, package",classbox j controlling the scope of change in java unanticipated changes to complex software systems can introduce anomalies such as duplicated code suboptimal inheritance relationships and a proliferation of run time downcasts refactoring to eliminate these anomalies may not be an option at least in certain stages of software evolution classboxes are modules that restrict the visibility of changes to selected clients only thereby offering more freedom in the way unanticipated changes may be implemented and thus reducing the need for convoluted design anomalies in this paper we demonstrate how classboxes can be implemented in statically typed languages like java we also present an extended case study of swing a java gui package built on top of awt and we document the ensuing anomalies that swing introduces we show how classbox j a prototype implementation of classboxes for java is used to provide a cleaner implementation of swing using local refinement rather than subclassing class extension module open classes package,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
334,0,"Hugsy: A Comforting Solution for Preterm Neonates Designed to Enhance Parent-Child Bonding Premature neonates frequently need to spend several weeks or months in a Neonatal Intensive Care Unit (NICU). These neonates will experience a significant amount of pain, stress and discomfort during their hospital stay due to various medical interventions they will receive ranging from feeding to surgery. Although pharmacological pain treatments are available, often they are not suited for relieving of day-to-day discomfort and pain. Evidence is accumulating in the effectiveness of non-pharmacological interventions to relieve pain and discomfort for premature neonates, for example: kangaroo care, facilitated tucking, and aromatherapy. This paper describes a new non-pharmacological comforting solution that combines various non-pharmacological interventions in a holistic way to provide comfort to neonates. The proposed solution, Hugsy, facilitates kangaroo care moments, and simulates the kangaroo care experience within the incubator by providing the neonate with a parent's unique smell, heartbeat, and feeling of support. We discuss the design and application of the solution, as well as the clinical study conducted with the first prototypes. Results indicate the Hugsy is a promising solution for comforting premature neonates and enhancing parent-child bonding. paediatrics, patient care, patient treatment, Hugsy, parent-child bonding, premature neonates, Neonatal Intensive Care Unit, NICU, pharmacological pain treatments, aromatherapy, nonpharmacological comforting solution, kangaroo care moments, Pediatrics, Pain, Stress, Hospitals, Heart rate variability, Physiology, Bonding, Preterm neonates, comforting solution, bonding, heartbeat, aromatherapy, positioning, swaddling, user-centered design",hugsy a comforting solution for preterm neonates designed to enhance parent child bonding premature neonates frequently need to spend several weeks or months in a neonatal intensive care unit nicu these neonates will experience a significant amount of pain stress and discomfort during their hospital stay due to various medical interventions they will receive ranging from feeding to surgery although pharmacological pain treatments are available often they are not suited for relieving of day to day discomfort and pain evidence is accumulating in the effectiveness of non pharmacological interventions to relieve pain and discomfort for premature neonates for example kangaroo care facilitated tucking and aromatherapy this paper describes a new non pharmacological comforting solution that combines various non pharmacological interventions in a holistic way to provide comfort to neonates the proposed solution hugsy facilitates kangaroo care moments and simulates the kangaroo care experience within the incubator by providing the neonate with a parent s unique smell heartbeat and feeling of support we discuss the design and application of the solution as well as the clinical study conducted with the first prototypes results indicate the hugsy is a promising solution for comforting premature neonates and enhancing parent child bonding paediatrics patient care patient treatment hugsy parent child bonding premature neonates neonatal intensive care unit nicu pharmacological pain treatments aromatherapy nonpharmacological comforting solution kangaroo care moments pediatrics pain stress hospitals heart rate variability physiology bonding preterm neonates comforting solution bonding heartbeat aromatherapy positioning swaddling user centered design,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
335,0,"Situational liminality: Mis-managed consumer experience in liquid modernity The purpose of the paper is to explore experience economy events from an abductive interpetivist perspective. The empirical part of the study is based on the self-reflective anthropologic inquiry method. This study sets out to propose that the awkwardness and setback experienced by the client, customer or visitor, may generate his/her agency to establish a more clear-cut construction of the experiential framework. However, if attempted the disambiguation demands significant emotional and, sometimes, physical labour, typically not undertaken willingly, and potentially resulting in the subject's avoidance of exposure to similar experiences in future. Introducing the notion of `situational liminality', the paper re-focuses the critical edge of inquiry away from agency-reducing aspects of experience economy, towards reflecting on their enforced, albeit not deliberate, agency-inducing consequences. By exploring the `liquid' underpinnings of situational liminality, this study contributes to the ongoing discussion on liquid modernity in organizational context. Abduction, Disambiguation, Experience economy, Experience mismanagement, Liquid modernity, Overkill of experience, Situational liminality, Self-reflective inquiry",situational liminality mis managed consumer experience in liquid modernity the purpose of the paper is to explore experience economy events from an abductive interpetivist perspective the empirical part of the study is based on the self reflective anthropologic inquiry method this study sets out to propose that the awkwardness and setback experienced by the client customer or visitor may generate his her agency to establish a more clear cut construction of the experiential framework however if attempted the disambiguation demands significant emotional and sometimes physical labour typically not undertaken willingly and potentially resulting in the subject s avoidance of exposure to similar experiences in future introducing the notion of situational liminality the paper re focuses the critical edge of inquiry away from agency reducing aspects of experience economy towards reflecting on their enforced albeit not deliberate agency inducing consequences by exploring the liquid underpinnings of situational liminality this study contributes to the ongoing discussion on liquid modernity in organizational context abduction disambiguation experience economy experience mismanagement liquid modernity overkill of experience situational liminality self reflective inquiry,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
336,0,"Methods for building an inexpensive computer-controlled olfactometer for temporally-precise experiments Many human olfactory experiments call for fast and stable stimulus-rise times as well as exact and stable stimulus-onset times. Due to these temporal demands, an olfactometer is often needed. However, an olfactometer is a piece of equipment that either comes with a high price tag or requires a high degree of technical expertise to build and/or to run. Here, we detail the construction of an olfactometer that is constructed almost exclusively with ``off-the-shelf'' parts, requires little technical knowledge to build, has relatively low price tags, and is controlled by E-Prime, a turnkey-ready and easily-programmable software commonly used in psychological experiments. The olfactometer can present either solid or liquid odor sources, and it exhibits a fast stimulus-rise time and a fast and stable stimulus-onset time. We provide a detailed description of the olfactometer construction, a list of its individual parts and prices, as well as potential modifications to the design. In addition, we present odor onset and concentration curves as measured with a photo-ionization detector, together with corresponding GC/MS analyses of signal-intensity drop (5.9%) over a longer period of use. Finally, we present data from behavioral and psychophysiological recordings demonstrating that the olfactometer is suitable for use during event-related EEG experiments. Olfactometer, Smell, Odor delivery, ERP",methods for building an inexpensive computer controlled olfactometer for temporally precise experiments many human olfactory experiments call for fast and stable stimulus rise times as well as exact and stable stimulus onset times due to these temporal demands an olfactometer is often needed however an olfactometer is a piece of equipment that either comes with a high price tag or requires a high degree of technical expertise to build and or to run here we detail the construction of an olfactometer that is constructed almost exclusively with off the shelf parts requires little technical knowledge to build has relatively low price tags and is controlled by e prime a turnkey ready and easily programmable software commonly used in psychological experiments the olfactometer can present either solid or liquid odor sources and it exhibits a fast stimulus rise time and a fast and stable stimulus onset time we provide a detailed description of the olfactometer construction a list of its individual parts and prices as well as potential modifications to the design in addition we present odor onset and concentration curves as measured with a photo ionization detector together with corresponding gc ms analyses of signal intensity drop 5 9 over a longer period of use finally we present data from behavioral and psychophysiological recordings demonstrating that the olfactometer is suitable for use during event related eeg experiments olfactometer smell odor delivery erp,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
337,0,"A Case Study in Locating the Architectural Roots of Technical Debt Our recent research has shown that, in large-scale software systems, defective files seldom exist alone. They are usually architecturally connected, and their architectural structures exhibit significant design flaws which propagate bugginess among files. We call these flawed structures the architecture roots, a type of technical debt that incurs high maintenance penalties. Removing the architecture roots of bugginess requires refactoring, but the benefits of refactoring have historically been difficult for architects to quantify or justify. In this paper, we present a case study of identifying and quantifying such architecture debts in a large-scale industrial software project. Our approach is to model and analyze software architecture as a set of design rule spaces (DRSpaces). Using data extracted from the project's development artifacts, we were able to identify the files implicated in architecture flaws and suggest refactorings based on removing these flaws. Then we built economic models of the before and (predicted) after states, which gave the organization confidence that doing the refactorings made business sense, in terms of a handsome return on investment. []",a case study in locating the architectural roots of technical debt our recent research has shown that in large scale software systems defective files seldom exist alone they are usually architecturally connected and their architectural structures exhibit significant design flaws which propagate bugginess among files we call these flawed structures the architecture roots a type of technical debt that incurs high maintenance penalties removing the architecture roots of bugginess requires refactoring but the benefits of refactoring have historically been difficult for architects to quantify or justify in this paper we present a case study of identifying and quantifying such architecture debts in a large scale industrial software project our approach is to model and analyze software architecture as a set of design rule spaces drspaces using data extracted from the project s development artifacts we were able to identify the files implicated in architecture flaws and suggest refactorings based on removing these flaws then we built economic models of the before and predicted after states which gave the organization confidence that doing the refactorings made business sense in terms of a handsome return on investment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
338,0,"Usable security of authentication process: New approach and practical assessment Authentication mechanisms are considered the typical method to secure financial websites. Context authentication has become increasingly important in the arena of online banking, which involves sensitive data that belong to users who trust their banks. Multifactor authentication is the most commonly used method of strengthening the log-in process in e-banking. Developing a usable and secure authentication approach and method is the most challenging area for researchers in the fields of security and Human-Computer Interaction (HCI). This paper describes a work-in-progress towards a new approach for authenticating users when access online banking by giving them the opportunity to choose their preferred method to log into e-banking. In our complex experiment with 100 online banking customers, we simulate an original online banking platform based on the proposed approach; then, we evaluate the usability and security of three different methods and assess user awareness of the most visible security design flaws. The initial result shows that the new system model was able to assess the usability and security of different multifactor authentication methods and it is considered a first attempt towards a usable and secure authentication approach. bank data processing, human computer interaction, security of data, Web sites, usable authentication process security, context authentication mechanism, financial Website security, online banking, multifactor authentication mechanism, e-banking, secure authentication approach, human-computer interaction, HCI, assess user awareness, visible security design flaw, multifactor authentication method, Authentication, Usability, Online banking, Human computer interaction, Fingerprint recognition, authentication, security, usability, HCI, E-banking",usable security of authentication process new approach and practical assessment authentication mechanisms are considered the typical method to secure financial websites context authentication has become increasingly important in the arena of online banking which involves sensitive data that belong to users who trust their banks multifactor authentication is the most commonly used method of strengthening the log in process in e banking developing a usable and secure authentication approach and method is the most challenging area for researchers in the fields of security and human computer interaction hci this paper describes a work in progress towards a new approach for authenticating users when access online banking by giving them the opportunity to choose their preferred method to log into e banking in our complex experiment with 100 online banking customers we simulate an original online banking platform based on the proposed approach then we evaluate the usability and security of three different methods and assess user awareness of the most visible security design flaws the initial result shows that the new system model was able to assess the usability and security of different multifactor authentication methods and it is considered a first attempt towards a usable and secure authentication approach bank data processing human computer interaction security of data web sites usable authentication process security context authentication mechanism financial website security online banking multifactor authentication mechanism e banking secure authentication approach human computer interaction hci assess user awareness visible security design flaw multifactor authentication method authentication usability online banking human computer interaction fingerprint recognition authentication security usability hci e banking,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
339,0,"AROMA: Ambient Awareness Through Olfaction in a Messaging Application This work explores the properties of different output modalities as notification mechanisms in the context of messaging. In particular, the olfactory (smell) modality is introduced as a potential alternative to visual and auditory modalities for providing messaging notifications. An experiment was performed to compare these modalities as secondary display mechanisms used to deliver notifications to users working on a cognitively engaging primary task. It was verified that the disruptiveness and effectiveness of notifications varied with the notification modality. The olfactory modality was shown to be less effective in delivering notifications than the other modalities, but produced a less disruptive effect on user engagement in the primary task. Our results serve as a starting point for future research into the use of olfactory notification in messaging systems. HCI, ambient awareness, multi-modal interfaces, notification systems, olfactory display, user study",aroma ambient awareness through olfaction in a messaging application this work explores the properties of different output modalities as notification mechanisms in the context of messaging in particular the olfactory smell modality is introduced as a potential alternative to visual and auditory modalities for providing messaging notifications an experiment was performed to compare these modalities as secondary display mechanisms used to deliver notifications to users working on a cognitively engaging primary task it was verified that the disruptiveness and effectiveness of notifications varied with the notification modality the olfactory modality was shown to be less effective in delivering notifications than the other modalities but produced a less disruptive effect on user engagement in the primary task our results serve as a starting point for future research into the use of olfactory notification in messaging systems hci ambient awareness multi modal interfaces notification systems olfactory display user study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
340,0,"Conversion of emitted dimethyl sulfide into eco-friendly species using low-temperature atmospheric argon micro-plasma system A custom-made atmospheric argon micro-plasma system was employed to dissociate dimethyl sulfide (DMS) into a non-foul-smelling species. The proposed system takes the advantages of low energy requirement and non-thermal process with a constant flow rate at ambient condition. In the experiments, the compositions of DMS/argon plasma, the residual gaseous phases, and solid precipitates were respectively characterized using an optical emission spectrometer, various gas-phase analyzers, and X-ray photoemission spectroscopy. For 400ppm DMS introduced into argon plasma with two pairs of electrodes (90W), a complete decomposition of DMS was achieved; the DMS became converted into excited species such as C*, C2*, H*, and CH*. When gaseous products were taken away from the treatment area, the excited species tended to recombine and form stable compounds or species, which formed as solid particles and gaseous phases. The solid deposition was likely formed by the agglomeration of C-, H-, and S-containing species that became deposited on the quartz inner tube. For the residual gaseous phases, low-molecular-weight segments mostly recombined into relatively thermodynamic stable species, such as hydrogen, hydrogen sulfide, and carbon disulfide. The dissociation mechanism and treatment efficiency are discussed, and a treatment of converting DMS into H2-, CS2-, and H2S-dominant by-products is proposed. Atmospheric argon micro-plasma system, Dimethyl sulfide, Decomposition, Treatment efficiency, Recycling",conversion of emitted dimethyl sulfide into eco friendly species using low temperature atmospheric argon micro plasma system a custom made atmospheric argon micro plasma system was employed to dissociate dimethyl sulfide dms into a non foul smelling species the proposed system takes the advantages of low energy requirement and non thermal process with a constant flow rate at ambient condition in the experiments the compositions of dms argon plasma the residual gaseous phases and solid precipitates were respectively characterized using an optical emission spectrometer various gas phase analyzers and x ray photoemission spectroscopy for 400ppm dms introduced into argon plasma with two pairs of electrodes 90w a complete decomposition of dms was achieved the dms became converted into excited species such as c c2 h and ch when gaseous products were taken away from the treatment area the excited species tended to recombine and form stable compounds or species which formed as solid particles and gaseous phases the solid deposition was likely formed by the agglomeration of c h and s containing species that became deposited on the quartz inner tube for the residual gaseous phases low molecular weight segments mostly recombined into relatively thermodynamic stable species such as hydrogen hydrogen sulfide and carbon disulfide the dissociation mechanism and treatment efficiency are discussed and a treatment of converting dms into h2 cs2 and h2s dominant by products is proposed atmospheric argon micro plasma system dimethyl sulfide decomposition treatment efficiency recycling,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
341,0,"Smelling what was there: Acquired olfactory percepts are resistant to further modification Repeated exposure to a mixture of two odors can increase their perceived similarity to each other when presented separately. Experiment 1 failed to detect any reduction of this effect by an interference treatment consisting of separate exposures to the odors after they had first been presented as a mixture. Exposure to a mixture also results in participants mistakenly rating this mixture and its elements as having occurred with equal frequency (i.e., confusing the mixture and its elements). The interference treatment did not affect this either, whereas it did change judgments about the frequency of a color--odor mixture and its elements. The greater resistance to interference of odor--odor learning compared to color--odor learning may result from configural encoding of odor--odor mixtures. Experiment 2 found that separate exposures to two odors not previously mixed decreased their perceived similarity. This result was inconsistent with the possibility that the interference treatment in Experiment 1 had tended to increase the similarity of the two odors, for example, by a process of sensory adaptation. Rather it suggested a process akin to acquired distinctiveness. []",smelling what was there acquired olfactory percepts are resistant to further modification repeated exposure to a mixture of two odors can increase their perceived similarity to each other when presented separately experiment 1 failed to detect any reduction of this effect by an interference treatment consisting of separate exposures to the odors after they had first been presented as a mixture exposure to a mixture also results in participants mistakenly rating this mixture and its elements as having occurred with equal frequency i e confusing the mixture and its elements the interference treatment did not affect this either whereas it did change judgments about the frequency of a color odor mixture and its elements the greater resistance to interference of odor odor learning compared to color odor learning may result from configural encoding of odor odor mixtures experiment 2 found that separate exposures to two odors not previously mixed decreased their perceived similarity this result was inconsistent with the possibility that the interference treatment in experiment 1 had tended to increase the similarity of the two odors for example by a process of sensory adaptation rather it suggested a process akin to acquired distinctiveness,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
342,0,"Chemosensory danger detection in the human brain: Body odor communicating aggression modulates limbic system activation Although the sense of smell is involved in numerous survival functions, the processing of body odor emitted by dangerous individuals is far from understood. The aim of the study was to explore how human fight chemosignals communicating aggression can alter brain activation related to an attentional bias and danger detection. While the anterior cingulate cortex (ACC) was seen involved in processing threat-related emotional information, danger detection and error evaluation, it still remains unknown whether human chemosignals communicating aggression can potentially modulate this activation. In the fMRI experiment, healthy male and female normosmic odor recipients (n=18) completed a higher-order processing task (emotional Stroop task with the word categories anger, anxiety, happiness and neutral) while exposed to aggression and exercise chemosignals (collected from a different group of healthy male donors; n=16). Our results provide first evidence that aggression chemosignals induce a time-sensitive attentional bias in chemosensory danger detection and modulate limbic system activation. During exposure to aggression chemosignals compared to exercise chemosignals, functional imaging data indicates an enhancement of thalamus, hypothalamus and insula activation (p<.05, FWE-corrected). Together with the thalamus, the ACC was seen activated in response to threat-related words (p<.001). Chemosensory priming and habituation to body odor signals are discussed. Chemosensation, Chemosignal, Olfaction, Anger, Threat",chemosensory danger detection in the human brain body odor communicating aggression modulates limbic system activation although the sense of smell is involved in numerous survival functions the processing of body odor emitted by dangerous individuals is far from understood the aim of the study was to explore how human fight chemosignals communicating aggression can alter brain activation related to an attentional bias and danger detection while the anterior cingulate cortex acc was seen involved in processing threat related emotional information danger detection and error evaluation it still remains unknown whether human chemosignals communicating aggression can potentially modulate this activation in the fmri experiment healthy male and female normosmic odor recipients n 18 completed a higher order processing task emotional stroop task with the word categories anger anxiety happiness and neutral while exposed to aggression and exercise chemosignals collected from a different group of healthy male donors n 16 our results provide first evidence that aggression chemosignals induce a time sensitive attentional bias in chemosensory danger detection and modulate limbic system activation during exposure to aggression chemosignals compared to exercise chemosignals functional imaging data indicates an enhancement of thalamus hypothalamus and insula activation p 05 fwe corrected together with the thalamus the acc was seen activated in response to threat related words p 001 chemosensory priming and habituation to body odor signals are discussed chemosensation chemosignal olfaction anger threat,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
343,0,"Bad bones, absent smell, selfish testes: The pleiotropic consequences of human FGF receptor mutations The discovery in 1994 that highly specific mutations of fibroblast growth factor (FGF) receptor 3 caused the most common form of human short-limbed dwarfism, achondroplasia, heralded a new era in FGF receptor (FGFR) biology. A decade later, the purpose of this review is to survey how the study of humans with FGFR mutations continues to provide insights into FGFR function in health and disease, and the clinical applications of these findings. Amongst the most interesting recent discoveries have been the description of novel phenotypes associated with FGFR1 and FGFR3 mutations; identification of fundamental differences in the cellular mechanisms of mutant FGFR2 and FGFR3 action; and the direct identification of FGFR2 and FGFR3 mutations in sperm. These clinical observations illustrate the pleiotropism of FGFR action and fuel ongoing efforts to understand the rich biology and pathophysiology of the FGF signalling system. FGFR, Genetics, Craniosynostosis, Bone, Sperm",bad bones absent smell selfish testes the pleiotropic consequences of human fgf receptor mutations the discovery in 1994 that highly specific mutations of fibroblast growth factor fgf receptor 3 caused the most common form of human short limbed dwarfism achondroplasia heralded a new era in fgf receptor fgfr biology a decade later the purpose of this review is to survey how the study of humans with fgfr mutations continues to provide insights into fgfr function in health and disease and the clinical applications of these findings amongst the most interesting recent discoveries have been the description of novel phenotypes associated with fgfr1 and fgfr3 mutations identification of fundamental differences in the cellular mechanisms of mutant fgfr2 and fgfr3 action and the direct identification of fgfr2 and fgfr3 mutations in sperm these clinical observations illustrate the pleiotropism of fgfr action and fuel ongoing efforts to understand the rich biology and pathophysiology of the fgf signalling system fgfr genetics craniosynostosis bone sperm,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
344,0,"A New Family of Software Anti-patterns: Linguistic Anti-patterns Recent and past studies have shown that poor source code lexicon negatively affects software understand ability, maintainability, and, overall, quality. Besides a poor usage of lexicon and documentation, sometimes a software artifact description is misleading with respect to its implementation. Consequently, developers will spend more time and effort when understanding these software artifacts, or even make wrong assumptions when they use them. This paper introduces the definition of software linguistic antipatterns, and defines a family of them, i.e., those related to inconsistencies (i) between method signatures, documentation, and behavior and (ii) between attribute names, types, and comments. Whereas ""design"" antipatterns represent recurring, poor design choices, linguistic antipatterns represent recurring, poor naming and commenting choices. The paper provides a first catalogue of one family of linguistic antipatterns, showing real examples of such antipatterns and explaining what kind of misunderstanding they can cause. Also, the paper proposes a detector prototype for Java programs called LAPD (Linguistic Anti-Pattern Detector), and reports a study investigating the presence of linguistic antipatterns in four Java software projects. computational linguistics, Java, software engineering, software management, source code lexicon, software understandability, software maintainability, software quality, software artifact description, software linguistic antipatterns, documentation, attribute names, attribute types, attribute comments, design antipatterns, dectector prototype, Java programs, LAPD, linguistic antipattern detector, Java software projects, Software, Documentation, Pragmatics, Navigation, Java, Gettering, Arrays, Software antipatterns, Source code lexicon, Textual analysis of software artifacts",a new family of software anti patterns linguistic anti patterns recent and past studies have shown that poor source code lexicon negatively affects software understand ability maintainability and overall quality besides a poor usage of lexicon and documentation sometimes a software artifact description is misleading with respect to its implementation consequently developers will spend more time and effort when understanding these software artifacts or even make wrong assumptions when they use them this paper introduces the definition of software linguistic antipatterns and defines a family of them i e those related to inconsistencies i between method signatures documentation and behavior and ii between attribute names types and comments whereas design antipatterns represent recurring poor design choices linguistic antipatterns represent recurring poor naming and commenting choices the paper provides a first catalogue of one family of linguistic antipatterns showing real examples of such antipatterns and explaining what kind of misunderstanding they can cause also the paper proposes a detector prototype for java programs called lapd linguistic anti pattern detector and reports a study investigating the presence of linguistic antipatterns in four java software projects computational linguistics java software engineering software management source code lexicon software understandability software maintainability software quality software artifact description software linguistic antipatterns documentation attribute names attribute types attribute comments design antipatterns dectector prototype java programs lapd linguistic antipattern detector java software projects software documentation pragmatics navigation java gettering arrays software antipatterns source code lexicon textual analysis of software artifacts,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
345,0,"Network Analysis for Core Herbal Combination Knowledge Discovery from Clinical Chinese Medical Formulae Chinese medical formula (CMF) is the main therapies in traditional Chinese medicine (TCM) clinical practices. Discovery of the CMF empirical knowledge of the famous TCM physicians in clincal data is significant. This paper proposes an effective data mining approach to analyze and uncover the clinical CMF empirical knowledge of famous TCM physicians. Complex network is a current hot research topic in complex systems field. We construct the combination network of CMFs by graph method and have a statistical analysis of the network based on large-size CMF data set. As we known, CMF has a number of constituent herbs, which are prescribed by TCM physicians. We consider any CMF with same element herb has correlation to each other. That is, we construct a connected sub-graph with the CMF as node and the edge weight is computed by an appropriate similarity method. With CMF dataset, we can build CMF network with dense connected edges. We implement an algorithm based on the 'hub' node features of the CMF relation network to extract the core CMFs in a large size CMFs. Thereafter, the maximum frequent itemset algorithm is applied to discover the core herbal combinations from the core CMFs. We have utilized the network-based method to discover several core CMFs from the outpatient data of the famous TCM physicians. The clinical CMFs for disharmony between the liver and spleen syndrome are analyzed. The preliminary results show that we propose an effective approach for core herbal combination knowledge discovery in large size CMF data sets. data mining, graph theory, medical computing, statistical analysis, network analysis, core herbal combination knowledge discovery, clinical Chinese medical formulae, traditional Chinese medicine clinical practices, data mining approach, graph method, statistical analysis, large-size CMF data set, maximum frequent itemset algorithm, network-based method, spleen syndrome, Complex networks, Data mining, Computer science, Medical treatment, Liver, Evolution (biology), Cardiac disease, Databases, Application software, Educational institutions, herbal combination knowledge discovery, clinical Chinese medical formula, Chinese medical formula network",network analysis for core herbal combination knowledge discovery from clinical chinese medical formulae chinese medical formula cmf is the main therapies in traditional chinese medicine tcm clinical practices discovery of the cmf empirical knowledge of the famous tcm physicians in clincal data is significant this paper proposes an effective data mining approach to analyze and uncover the clinical cmf empirical knowledge of famous tcm physicians complex network is a current hot research topic in complex systems field we construct the combination network of cmfs by graph method and have a statistical analysis of the network based on large size cmf data set as we known cmf has a number of constituent herbs which are prescribed by tcm physicians we consider any cmf with same element herb has correlation to each other that is we construct a connected sub graph with the cmf as node and the edge weight is computed by an appropriate similarity method with cmf dataset we can build cmf network with dense connected edges we implement an algorithm based on the hub node features of the cmf relation network to extract the core cmfs in a large size cmfs thereafter the maximum frequent itemset algorithm is applied to discover the core herbal combinations from the core cmfs we have utilized the network based method to discover several core cmfs from the outpatient data of the famous tcm physicians the clinical cmfs for disharmony between the liver and spleen syndrome are analyzed the preliminary results show that we propose an effective approach for core herbal combination knowledge discovery in large size cmf data sets data mining graph theory medical computing statistical analysis network analysis core herbal combination knowledge discovery clinical chinese medical formulae traditional chinese medicine clinical practices data mining approach graph method statistical analysis large size cmf data set maximum frequent itemset algorithm network based method spleen syndrome complex networks data mining computer science medical treatment liver evolution biology cardiac disease databases application software educational institutions herbal combination knowledge discovery clinical chinese medical formula chinese medical formula network,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
346,0,"uSmell: Exploring the Potential for Gas Sensors to Classify Odors in Ubicomp Applications Relative to Airflow and Distance Previous research has shown that gas sensors can be used to classify odors when used in highly controlled experimental testing chambers. However, potential ubicomp applications require these sensors to perform an analysis in less controlled environments, particularly at a distance. In this paper, we discuss our design of uSmell---a gas sensor system for sensing smell in ubicomp environments---and an evaluation of its basic efficacy, effects of airflow and distance on classification accuracy, and in an example application. Our system samples an odor fingerprint from eight metal oxide semiconductor (MOS) gas sensors every second. It then processes the time series data to extract three features that highlight how time and distance affect the eight MOS gas sensors' ability to react to the gas molecules released by an odor every 5 s; this generates 24 features in total that are then used to train a decision tree classifier. Using this approach, our system can classify a set of odors with 88 % accuracy when placed both in a small container with the samples and in open air 0.5--2 m from the odor samples. We also demonstrate its ability to classify odors in less controlled environments that might be targets for ubicomp applications by deploying it in a bathroom for a week. These results show the potential for applying this sensing toward the development of context-aware systems, such as lifelogging applications or those geared toward enhancing the sustainability of natural resources (e.g., an automatic dual-flush toilet that always uses an appropriate amount of water based on the user's toileting activities). Activity sensing, Electronic nose, Gas sensors",usmell exploring the potential for gas sensors to classify odors in ubicomp applications relative to airflow and distance previous research has shown that gas sensors can be used to classify odors when used in highly controlled experimental testing chambers however potential ubicomp applications require these sensors to perform an analysis in less controlled environments particularly at a distance in this paper we discuss our design of usmell a gas sensor system for sensing smell in ubicomp environments and an evaluation of its basic efficacy effects of airflow and distance on classification accuracy and in an example application our system samples an odor fingerprint from eight metal oxide semiconductor mos gas sensors every second it then processes the time series data to extract three features that highlight how time and distance affect the eight mos gas sensors ability to react to the gas molecules released by an odor every 5 s this generates 24 features in total that are then used to train a decision tree classifier using this approach our system can classify a set of odors with 88 accuracy when placed both in a small container with the samples and in open air 0 5 2 m from the odor samples we also demonstrate its ability to classify odors in less controlled environments that might be targets for ubicomp applications by deploying it in a bathroom for a week these results show the potential for applying this sensing toward the development of context aware systems such as lifelogging applications or those geared toward enhancing the sustainability of natural resources e g an automatic dual flush toilet that always uses an appropriate amount of water based on the user s toileting activities activity sensing electronic nose gas sensors,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
347,0,"Rapid quality assurance with Requirements Smells Bad requirements quality can cause expensive consequences during the software development lifecycle, especially if iterations are long and feedback comes late. We aim at a light-weight static requirements analysis approach that allows for rapid checks immediately when requirements are written down. We transfer the concept of code smells to requirements engineering as Requirements Smells. To evaluate the benefits and limitations, we define Requirements Smells, realize our concepts for a smell detection in a prototype called Smella and apply Smella in a series of cases provided by three industrial and a university context. The automatic detection yields an average precision of 59% at an average recall of 82% with high variation. The evaluation in practical environments indicates benefits such as an increase of the awareness of quality defects. Yet, some smells were not clearly distinguishable. Lightweight smell detection can uncover many practically relevant requirements defects in a reasonably precise way. Although some smells need to be defined more clearly, smell detection provides a helpful means to support quality assurance in requirements engineering, for instance, as a supplement to reviews. Requirements engineering, Automatic defect detection, Requirements Smells",rapid quality assurance with requirements smells bad requirements quality can cause expensive consequences during the software development lifecycle especially if iterations are long and feedback comes late we aim at a light weight static requirements analysis approach that allows for rapid checks immediately when requirements are written down we transfer the concept of code smells to requirements engineering as requirements smells to evaluate the benefits and limitations we define requirements smells realize our concepts for a smell detection in a prototype called smella and apply smella in a series of cases provided by three industrial and a university context the automatic detection yields an average precision of 59 at an average recall of 82 with high variation the evaluation in practical environments indicates benefits such as an increase of the awareness of quality defects yet some smells were not clearly distinguishable lightweight smell detection can uncover many practically relevant requirements defects in a reasonably precise way although some smells need to be defined more clearly smell detection provides a helpful means to support quality assurance in requirements engineering for instance as a supplement to reviews requirements engineering automatic defect detection requirements smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
348,0,"Contribution to understanding odour--colour associations Whereas odour--colour correspondences seem to be evident in everyday life, little research has attempted to investigate associations between colours and odours over the last decade. Nonetheless, some previous studies have demonstrated the existence of robust associations between specific odours (mainly fragrances) and colours (see Demattè et al., 2006, Gilbert et al., 1996, Schifferstein and Tanudjaja, 2004). Here, we extended these findings to mainly food and drink related odours. Furthermore, testing was conducted with similar odours, which allowed us to better understand the nuances of the association. In the experiment, 155 untrained French subjects were first presented with 16 food and flower natural odorants and asked to select from among 24 colours the one that best matched each given olfactory stimulus. Secondly, they rated each odour according to five descriptors (association difficulty, intensity, familiarity, pleasantness and edibility). Participants matched olfactory stimuli with colours in a non-random manner. Indeed, significant colour characterizations were found for all odours. Significant differences in colour choice were also reported between very similar odours. These results confirm the existence of consistent odour--colour associations; and explore more precisely their subtleties. This underlines the need for a better understanding of the mechanisms underlying these crossmodal correspondences. Odour, Colour, Crossmodal correspondences",contribution to understanding odour colour associations whereas odour colour correspondences seem to be evident in everyday life little research has attempted to investigate associations between colours and odours over the last decade nonetheless some previous studies have demonstrated the existence of robust associations between specific odours mainly fragrances and colours see dematt et al 2006 gilbert et al 1996 schifferstein and tanudjaja 2004 here we extended these findings to mainly food and drink related odours furthermore testing was conducted with similar odours which allowed us to better understand the nuances of the association in the experiment 155 untrained french subjects were first presented with 16 food and flower natural odorants and asked to select from among 24 colours the one that best matched each given olfactory stimulus secondly they rated each odour according to five descriptors association difficulty intensity familiarity pleasantness and edibility participants matched olfactory stimuli with colours in a non random manner indeed significant colour characterizations were found for all odours significant differences in colour choice were also reported between very similar odours these results confirm the existence of consistent odour colour associations and explore more precisely their subtleties this underlines the need for a better understanding of the mechanisms underlying these crossmodal correspondences odour colour crossmodal correspondences,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
349,0,"Exploring ScrumBut---An empirical study of Scrum anti-patterns The wide-spread adoption of the agile movement has rapidly changed the landscape of software industry. In particular, Scrum is an agile process framework that has become extremely popular in industry. However, the practical implementation of Scrum in companies rarely follows the text book ideals, as companies often deviate from the proposed Scrum practices for various reasons. While some deviations may be well motivated and reasonable, companies can also be tempted to adjust Scrum for the company without clearly understanding the consequences of the deviations. In this paper our aim is to identify ways of potentially harmful mishandling of Scrum in industry based on empirical data collected in semi-structured interviews involving 18 teams in 11 companies. The (mal)practices that were identified at least in three different teams are presented in a semi-formal manner as anti-patterns. The study resulted in 14 anti-patterns that express the context of the deviation, the deviation itself, the broken core principles of Scrum, and the possible consequences of the deviation. In addition, where available, we have included company recommendations regarding the deviations. Furthermore, we identify potential risk areas in Scrum based on an analysis of the relationships between anti-patterns and Scrum concepts. Software development, Scrum, Anti-patterns, Empirical study",exploring scrumbut an empirical study of scrum anti patterns the wide spread adoption of the agile movement has rapidly changed the landscape of software industry in particular scrum is an agile process framework that has become extremely popular in industry however the practical implementation of scrum in companies rarely follows the text book ideals as companies often deviate from the proposed scrum practices for various reasons while some deviations may be well motivated and reasonable companies can also be tempted to adjust scrum for the company without clearly understanding the consequences of the deviations in this paper our aim is to identify ways of potentially harmful mishandling of scrum in industry based on empirical data collected in semi structured interviews involving 18 teams in 11 companies the mal practices that were identified at least in three different teams are presented in a semi formal manner as anti patterns the study resulted in 14 anti patterns that express the context of the deviation the deviation itself the broken core principles of scrum and the possible consequences of the deviation in addition where available we have included company recommendations regarding the deviations furthermore we identify potential risk areas in scrum based on an analysis of the relationships between anti patterns and scrum concepts software development scrum anti patterns empirical study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
350,0,"Is a green building really better for building occupants? A longitudinal evaluation Commercial organisations who have invested in ``greening'' their buildings are not only concerned about reducing the negative impact of their buildings on the environment, but also on the potential positive impact green buildings can have on their employees and therefore also on the financial sustainability of the organisation. To date, the research evidence on the effect of green buildings on employees is equivocal. Widely varying research designs and measures, and differing research foci have resulted in a fragmented and contradictory body of knowledge. In this study, we attempt to bring some order to this field by first, providing a framework for reviewing and evaluating the extant research evidence and second, by starting to address some of the research design flaws identified in the previous research through a longitudinal, empirical investigation of the impact of green building on employees. In the empirical study, three green buildings were evaluated using a pre-test, post test design, repeated-measures design with a contrast group for two of the buildings (Total N = 280). Statistical analyses of the data established that there were significant improvements in perceived air quality across all three buildings, significant improvements in self-report productivity in two of the buildings and a significant improvement in physical wellbeing in one building. However, no significant differences were found for psychological wellbeing, job satisfaction, propensity to leave the organisation, and organisational image. We consider these results to be methodologically robust but suggest caution in interpreting the results due to poor response rates and possible volunteer bias. The results are discussed in relation to the design features of each building. Green buildings, Indoor environmental quality, Productivity, Wellbeing, Longitudinal evaluation",is a green building really better for building occupants a longitudinal evaluation commercial organisations who have invested in greening their buildings are not only concerned about reducing the negative impact of their buildings on the environment but also on the potential positive impact green buildings can have on their employees and therefore also on the financial sustainability of the organisation to date the research evidence on the effect of green buildings on employees is equivocal widely varying research designs and measures and differing research foci have resulted in a fragmented and contradictory body of knowledge in this study we attempt to bring some order to this field by first providing a framework for reviewing and evaluating the extant research evidence and second by starting to address some of the research design flaws identified in the previous research through a longitudinal empirical investigation of the impact of green building on employees in the empirical study three green buildings were evaluated using a pre test post test design repeated measures design with a contrast group for two of the buildings total n 280 statistical analyses of the data established that there were significant improvements in perceived air quality across all three buildings significant improvements in self report productivity in two of the buildings and a significant improvement in physical wellbeing in one building however no significant differences were found for psychological wellbeing job satisfaction propensity to leave the organisation and organisational image we consider these results to be methodologically robust but suggest caution in interpreting the results due to poor response rates and possible volunteer bias the results are discussed in relation to the design features of each building green buildings indoor environmental quality productivity wellbeing longitudinal evaluation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
351,0,"Effect of smoking on symptoms of allergic rhinitis Background Tobacco smoking is common in patients with allergic rhinitis. Objective To examine the impact of smoking on allergic rhinitis. Methods Two cross-sectional studies (performed between March 1, 2002, and February 28, 2003) assessed the impact of tobacco smoking on the symptoms and quality of life of untreated patients with diagnosed allergic rhinitis who had consulted with primary care physicians (472 patients) and specialists (672 patients). Both studies used the same methods and were combined. Rhinitis was classified according to the Allergic Rhinitis and its Impact on Asthma initiative. The European Community Respiratory Health Survey questionnaire on smoking and the disease-specific Rhinoconjunctivitis Quality of Life Questionnaire (RQLQ) were used. Results A total of 20.8% of the patients were smokers and 10.9% were ex-smokers. More than 78% of the patients had moderate to severe symptoms of rhinitis. Fewer patients had moderate to severe nasal pruritus or loss of smell. There appeared to be no significant difference in the severity of nasal symptoms, depending on the smoking status. Moderate to severe nasal obstruction was observed in 78.8% of the nonsmokers, 79.0% of the smokers, and 77.4% of the ex-smokers. Overall and individual domain scores in the RQLQ were not altered by the smoking status. The overall median (25th-75th percentiles) RQLQ score was 2.8 (2.1--3.5) in nonsmokers, 2.7 (2.0--3.5) in smokers, and 2.7 (1.9--3.5) in ex-smokers. Conclusions In the present study, which was performed with a large number of untreated patients with a diagnosis of allergic rhinitis, smoking was found not to alter nasal symptoms or nasal-specific quality of life. []",effect of smoking on symptoms of allergic rhinitis background tobacco smoking is common in patients with allergic rhinitis objective to examine the impact of smoking on allergic rhinitis methods two cross sectional studies performed between march 1 2002 and february 28 2003 assessed the impact of tobacco smoking on the symptoms and quality of life of untreated patients with diagnosed allergic rhinitis who had consulted with primary care physicians 472 patients and specialists 672 patients both studies used the same methods and were combined rhinitis was classified according to the allergic rhinitis and its impact on asthma initiative the european community respiratory health survey questionnaire on smoking and the disease specific rhinoconjunctivitis quality of life questionnaire rqlq were used results a total of 20 8 of the patients were smokers and 10 9 were ex smokers more than 78 of the patients had moderate to severe symptoms of rhinitis fewer patients had moderate to severe nasal pruritus or loss of smell there appeared to be no significant difference in the severity of nasal symptoms depending on the smoking status moderate to severe nasal obstruction was observed in 78 8 of the nonsmokers 79 0 of the smokers and 77 4 of the ex smokers overall and individual domain scores in the rqlq were not altered by the smoking status the overall median 25th 75th percentiles rqlq score was 2 8 2 1 3 5 in nonsmokers 2 7 2 0 3 5 in smokers and 2 7 1 9 3 5 in ex smokers conclusions in the present study which was performed with a large number of untreated patients with a diagnosis of allergic rhinitis smoking was found not to alter nasal symptoms or nasal specific quality of life,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
352,0,"Applying Design Principles in Practice It is widely recognized that the systematic application of relevant design principles plays a key role in taming the complexity involved in real-world software development. In our experience as consultant architects and trainers on software architecture and design in a corporate setting, we find that software engineers have a theoretical understanding of design principles but sorely lack knowledge about how to properly apply them to in real-world situations to achieve high-quality design. This half-day tutorial is geared towards bridging this gap. It first introduces fundamental design principles (viz. abstraction, encapsulation, modularization, and hierarchy) and describes how these can be applied using a set of corresponding enabling techniques. Next, it discusses how design smells can be viewed as violations of these enabling techniques, and explains how these design smells can be refactored via the application of relevant design principles. Finally, it highlights useful tools, processes, and practical techniques that support the application of design principles in real-world software projects. Design principles, design smells, design tools, enabling techniques, refactoring, technical debt",applying design principles in practice it is widely recognized that the systematic application of relevant design principles plays a key role in taming the complexity involved in real world software development in our experience as consultant architects and trainers on software architecture and design in a corporate setting we find that software engineers have a theoretical understanding of design principles but sorely lack knowledge about how to properly apply them to in real world situations to achieve high quality design this half day tutorial is geared towards bridging this gap it first introduces fundamental design principles viz abstraction encapsulation modularization and hierarchy and describes how these can be applied using a set of corresponding enabling techniques next it discusses how design smells can be viewed as violations of these enabling techniques and explains how these design smells can be refactored via the application of relevant design principles finally it highlights useful tools processes and practical techniques that support the application of design principles in real world software projects design principles design smells design tools enabling techniques refactoring technical debt,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
353,0,"Finding and Analyzing Compiler Warning Defects Good compiler diagnostic warnings facilitate software development as they indicate likely programming mistakes or code smells. However, due to compiler bugs, the warnings may be erroneous, superfluous or missing, even for mature production compilers like GCC and Clang. In this paper, we (1) propose the first randomized differential testing technique to detect compiler warning defects and (2) describe our extensive evaluation in finding warning defects in widely-used C compilers. At the high level, our technique starts with generating random programs to trigger compilers to emit a variety of compiler warnings, aligns the warnings from different compilers, and identifies inconsistencies as potential bugs. We develop effective techniques to overcome three specific challenges: (1) How to generate random programs, (2) how to align textual warnings, and (3) how to reduce test programs for bug reporting? Our technique is very effective --- we have found and reported 60 bugs for GCC (38 confirmed, assigned or fixed) and 39 for Clang (14 confirmed or fixed). This case study not only demonstrates our technique's effectiveness, but also highlights the need to continue improving compilers' warning support, an essential, but rather neglected aspect of compilers. []",finding and analyzing compiler warning defects good compiler diagnostic warnings facilitate software development as they indicate likely programming mistakes or code smells however due to compiler bugs the warnings may be erroneous superfluous or missing even for mature production compilers like gcc and clang in this paper we 1 propose the first randomized differential testing technique to detect compiler warning defects and 2 describe our extensive evaluation in finding warning defects in widely used c compilers at the high level our technique starts with generating random programs to trigger compilers to emit a variety of compiler warnings aligns the warnings from different compilers and identifies inconsistencies as potential bugs we develop effective techniques to overcome three specific challenges 1 how to generate random programs 2 how to align textual warnings and 3 how to reduce test programs for bug reporting our technique is very effective we have found and reported 60 bugs for gcc 38 confirmed assigned or fixed and 39 for clang 14 confirmed or fixed this case study not only demonstrates our technique s effectiveness but also highlights the need to continue improving compilers warning support an essential but rather neglected aspect of compilers,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
354,0,"An Exploratory Study of Code Smells in Evolving Aspect-oriented Systems Although aspect-oriented programming (AOP) aims to improve software maintainability, developers can unwittingly introduce code smells in their programs. A code smell is any symptom in the source code that possibly indicates a deeper maintainability problem. Even though a few code smells for AOP have been reported in the literature, there is no evidence if and how they occur in evolving software projects. There is also little knowledge on their actual impact on maintenance effort, such as required refactorings or corrective changes in later software releases. This paper presents an exploratory analysis of code smells recurrently observed in a set of evolving aspect-oriented systems. We analyzed instances of code smells previously reported in the literature and newly-revealed ones. Our study involved in total 18 releases of 3 evolving aspect-oriented systems from different domains. The outcome of our evaluation suggests that previously-documented AOP smells might not occur as often as claimed. Our analysis also revealed that: (1) newly-discovered code smells might occur more often than well-known ones, and (2) the former ones seemed to be consistently associated with non-trivial refactorings and corrective changes. aspect-oriented programming, code smells, exploratory study, software maintenance",an exploratory study of code smells in evolving aspect oriented systems although aspect oriented programming aop aims to improve software maintainability developers can unwittingly introduce code smells in their programs a code smell is any symptom in the source code that possibly indicates a deeper maintainability problem even though a few code smells for aop have been reported in the literature there is no evidence if and how they occur in evolving software projects there is also little knowledge on their actual impact on maintenance effort such as required refactorings or corrective changes in later software releases this paper presents an exploratory analysis of code smells recurrently observed in a set of evolving aspect oriented systems we analyzed instances of code smells previously reported in the literature and newly revealed ones our study involved in total 18 releases of 3 evolving aspect oriented systems from different domains the outcome of our evaluation suggests that previously documented aop smells might not occur as often as claimed our analysis also revealed that 1 newly discovered code smells might occur more often than well known ones and 2 the former ones seemed to be consistently associated with non trivial refactorings and corrective changes aspect oriented programming code smells exploratory study software maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
355,0,"Odor mixture alters neural resources during symbolic problem solving The smell of a cup of coffee is produced by many different odor chemicals combined in a mixture, yet the perception of that odor is of a single unified whole. Recent evidence has demonstrated that mixtures of odors share some of the same spatiotemporal features of speech sounds and may use similar brain resources in associating those features with the symbols they represent. This experiment investigated the hypothesis that an odor mixture would interfere with a math task that requires symbolic but not spatial processing. Results indicated the pattern of brain electrical activity was similar for the single odors and the mixture during spatial processing. During solution of the task requiring symbolic processing, the odor mixture produced a pattern of brain electrical activity different from the single odorants. These data suggest that the perception of odor mixtures may use some of the same resources associated with symbolic processing. Olfaction, Event-related potential, Symbolic processing",odor mixture alters neural resources during symbolic problem solving the smell of a cup of coffee is produced by many different odor chemicals combined in a mixture yet the perception of that odor is of a single unified whole recent evidence has demonstrated that mixtures of odors share some of the same spatiotemporal features of speech sounds and may use similar brain resources in associating those features with the symbols they represent this experiment investigated the hypothesis that an odor mixture would interfere with a math task that requires symbolic but not spatial processing results indicated the pattern of brain electrical activity was similar for the single odors and the mixture during spatial processing during solution of the task requiring symbolic processing the odor mixture produced a pattern of brain electrical activity different from the single odorants these data suggest that the perception of odor mixtures may use some of the same resources associated with symbolic processing olfaction event related potential symbolic processing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
356,0,"The Influence of Gender and Internet Experience on the Acceptability of Smell As Interaction Modality Smell simulation technology allows humans to use their sense of smell to enhance or accelerate their interaction with computers. The technology can be categorised as being either perceiving or generating odours. In this paper, the major capabilities and application areas of both these categories are highlighted. Typical application areas include the food industry, multimedia, marketing, chemistry, art, medical and health sciences, etc. Since its first usage in the 1950s, the lack of acceptance and instability of the technology motivated scientists to try to improve the technology and adapt it for human needs. In this study, questionnaires were used to determine whether computer users are ready to accept smell generation as a means of interaction during online shopping. The current social acceptability of the technology as well as the factors which might deter end-user's willingness to use the technology was investigated. It was found that the interest of people in the use of this technology as interaction modality is, to some extent, affected by gender as well as by the amount of Internet experience and that technical difficulties such as cost, potential health risks and lack of accuracy stand in the way of general acceptability. olfactory related technology, smell perception and generation",the influence of gender and internet experience on the acceptability of smell as interaction modality smell simulation technology allows humans to use their sense of smell to enhance or accelerate their interaction with computers the technology can be categorised as being either perceiving or generating odours in this paper the major capabilities and application areas of both these categories are highlighted typical application areas include the food industry multimedia marketing chemistry art medical and health sciences etc since its first usage in the 1950s the lack of acceptance and instability of the technology motivated scientists to try to improve the technology and adapt it for human needs in this study questionnaires were used to determine whether computer users are ready to accept smell generation as a means of interaction during online shopping the current social acceptability of the technology as well as the factors which might deter end user s willingness to use the technology was investigated it was found that the interest of people in the use of this technology as interaction modality is to some extent affected by gender as well as by the amount of internet experience and that technical difficulties such as cost potential health risks and lack of accuracy stand in the way of general acceptability olfactory related technology smell perception and generation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
357,0,"Crossmodal correspondences: Assessing shape symbolism for cheese Several recent studies have demonstrated the existence of robust crossmodal correspondences between food and beverage items and shapes varying on the angular-round continuum. To date, however, the majority of this research has involved relatively simple gustatory, oral-somatosensory, and/or olfactory stimuli. In the present study, therefore, we extended this research in order to investigate whether people also exhibit robust crossmodal correspondences between shapes and cheese. To this end, participants in Experiment 1 (conducted at a Gastronomy event) tasted three aged farmhouse cheeses (Keen's Cheddar, Tunworth, & Berkswell, from Neal's Yard Dairy, UK). Participants rated each cheese using a single response scale anchored at either end by a rounded and an angular shape. Significant differences in shape symbolism were observed across the three cheeses. In Experiments 2 (conducted with cheesemongers and cheese experts) and 3 (conducted with customers in a cheese store), participants separately rated the olfactory, gustatory, and oral-somatosensory attributes of different cheeses (Tunworth, Lancashire, and Stawley) on the angular-round continuum. The results revealed that participants' crossmodal correspondences were based primarily on the taste, rather than the smell or texture of the cheeses. Implications of these findings for the marketing of dairy products are discussed. Practical applications The results of the present study demonstrate that taste is the leading contributor to the systematic associations consumers have between the flavors of cheese and certain angular/sharp or organic/round shapes and speech sounds, with the same pattern of crossmodal correspondences being held across different tasting groups (non-experts, regular consumers, and cheesemongers/experts). These results provide insights regarding the abstract imagery that might best be associated with specific taste attributes in commercial cheeses. These results may also be used to not only develop abstract imagery for product packaging that can capture specific shape/sound symbolic properties, but also to develop descriptors that can provide a common ground on which to talk about cheeses, thereby improving communication between different panels of cheese tasters. Cheese, Shape symbolism, Crossmodal correspondence, Sensory marketing, Gustation, Olfaction",crossmodal correspondences assessing shape symbolism for cheese several recent studies have demonstrated the existence of robust crossmodal correspondences between food and beverage items and shapes varying on the angular round continuum to date however the majority of this research has involved relatively simple gustatory oral somatosensory and or olfactory stimuli in the present study therefore we extended this research in order to investigate whether people also exhibit robust crossmodal correspondences between shapes and cheese to this end participants in experiment 1 conducted at a gastronomy event tasted three aged farmhouse cheeses keen s cheddar tunworth berkswell from neal s yard dairy uk participants rated each cheese using a single response scale anchored at either end by a rounded and an angular shape significant differences in shape symbolism were observed across the three cheeses in experiments 2 conducted with cheesemongers and cheese experts and 3 conducted with customers in a cheese store participants separately rated the olfactory gustatory and oral somatosensory attributes of different cheeses tunworth lancashire and stawley on the angular round continuum the results revealed that participants crossmodal correspondences were based primarily on the taste rather than the smell or texture of the cheeses implications of these findings for the marketing of dairy products are discussed practical applications the results of the present study demonstrate that taste is the leading contributor to the systematic associations consumers have between the flavors of cheese and certain angular sharp or organic round shapes and speech sounds with the same pattern of crossmodal correspondences being held across different tasting groups non experts regular consumers and cheesemongers experts these results provide insights regarding the abstract imagery that might best be associated with specific taste attributes in commercial cheeses these results may also be used to not only develop abstract imagery for product packaging that can capture specific shape sound symbolic properties but also to develop descriptors that can provide a common ground on which to talk about cheeses thereby improving communication between different panels of cheese tasters cheese shape symbolism crossmodal correspondence sensory marketing gustation olfaction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
358,0,"System for Presenting and Creating Smell Effects to Video Olfaction has recently been gaining attention in information and communication technology, as shown by attempts in theaters to screen videos while emitting scents. However, because there is no current infrastructure to communicate and synchronize odor information with visual information, people cannot enjoy this experience at home. Therefore, we have constructed a system of smell videos which could be applied to television (TV), allowing viewers to experience scents while watching their videos. To solve the abovementioned technical problems, we propose using the existing system for broadcasting closed caption. Our system's implementation is mindful of both video viewers and producers, allowing the system on the viewer end to disperse odorants in synchronization with videos, and allowing producers to add odor information to videos. We finally verify the system's feasibility. We expect that this study will make smell videos become common, and people will enjoy ones in daily life in the near future. authoring tool, closed caption, human computer interaction, multimedia, olfactory information",system for presenting and creating smell effects to video olfaction has recently been gaining attention in information and communication technology as shown by attempts in theaters to screen videos while emitting scents however because there is no current infrastructure to communicate and synchronize odor information with visual information people cannot enjoy this experience at home therefore we have constructed a system of smell videos which could be applied to television tv allowing viewers to experience scents while watching their videos to solve the abovementioned technical problems we propose using the existing system for broadcasting closed caption our system s implementation is mindful of both video viewers and producers allowing the system on the viewer end to disperse odorants in synchronization with videos and allowing producers to add odor information to videos we finally verify the system s feasibility we expect that this study will make smell videos become common and people will enjoy ones in daily life in the near future authoring tool closed caption human computer interaction multimedia olfactory information,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
359,0,"Evidence that phenomenal olfactory content exceeds what can later be accessed Visual experience is information rich, but only a small proportion is available for later access. We tested for this distinction in olfaction. In two experiments (E1&2), participants undertook trials rating an odor's features (e.g., how banana-like?), the during-smelling-profile, followed by an after-smelling-profile, upon the odor's removal. On some trials during and after-smelling-profiles were identical and on others they were different. Each trial with a particular odor was repeated. For half the odors both trials were identical (congruent) and for the remainder, one was different and the other identical (incongruent). Crucially, the after-smelling-profile was always the same for each odor, allowing reliability to be measured. E1&2 revealed that incongruent profiles were the least reliable. Attempting to access particular odor features in an odor's absence is harder if those features were not attended during smelling. This suggests more information is available during smelling, than can be accessed after the odors removal. Olfaction, Phenomenal consciousness, Access consciousness",evidence that phenomenal olfactory content exceeds what can later be accessed visual experience is information rich but only a small proportion is available for later access we tested for this distinction in olfaction in two experiments e1 2 participants undertook trials rating an odor s features e g how banana like the during smelling profile followed by an after smelling profile upon the odor s removal on some trials during and after smelling profiles were identical and on others they were different each trial with a particular odor was repeated for half the odors both trials were identical congruent and for the remainder one was different and the other identical incongruent crucially the after smelling profile was always the same for each odor allowing reliability to be measured e1 2 revealed that incongruent profiles were the least reliable attempting to access particular odor features in an odor s absence is harder if those features were not attended during smelling this suggests more information is available during smelling than can be accessed after the odors removal olfaction phenomenal consciousness access consciousness,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
360,0,"Understanding the Exception Handling Strategies of Java Libraries: An Empirical Study This paper presents an empirical study whose goal was to investigate the exception handling strategies adopted by Java libraries and their potential impact on the client applications. In this study, exception flow analysis was used in combination with manual inspections in order: (i) to characterize the exception handling strategies of existing Java libraries from the perspective of their users; and (ii) to identify exception handling anti-patterns. We extended an existing static analysis tool to reason about exception flows and handler actions of 656 Java libraries selected from 145 categories in the Maven Central Repository. The study findings suggest a current trend of a high number of undocumented API runtime exceptions (i.e., @throws in Javadoc) and Unintended Handler problem. Moreover, we could also identify a considerable number of occurrences of exception handling anti-patterns (e.g. Catch and Ignore). Finally, we have also analyzed 647 bug issues of the 7 most popular libraries and identified that 20.71% of the reports are defects related to the problems of the exception strategies and anti-patterns identified in our study. The results of this study point to the need of tools to better understand and document the exception handling behavior of libraries. empirical study, exception flows analysis, exception handling, exception handling anti-patterns, software libraries, static analysis tool",understanding the exception handling strategies of java libraries an empirical study this paper presents an empirical study whose goal was to investigate the exception handling strategies adopted by java libraries and their potential impact on the client applications in this study exception flow analysis was used in combination with manual inspections in order i to characterize the exception handling strategies of existing java libraries from the perspective of their users and ii to identify exception handling anti patterns we extended an existing static analysis tool to reason about exception flows and handler actions of 656 java libraries selected from 145 categories in the maven central repository the study findings suggest a current trend of a high number of undocumented api runtime exceptions i e throws in javadoc and unintended handler problem moreover we could also identify a considerable number of occurrences of exception handling anti patterns e g catch and ignore finally we have also analyzed 647 bug issues of the 7 most popular libraries and identified that 20 71 of the reports are defects related to the problems of the exception strategies and anti patterns identified in our study the results of this study point to the need of tools to better understand and document the exception handling behavior of libraries empirical study exception flows analysis exception handling exception handling anti patterns software libraries static analysis tool,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
361,0,"The lawn as a social and cultural phenomenon in Sweden Lawns have a significant influence on the cityscape as one of the essential elements of green spaces and an important part of people's everyday lives. Most people in the Western world view lawns as a compulsory element of the urban landscape, almost an icon, without questioning their social, symbolic, ecological or aesthetic values. This research is a part of the conceptual framework and methodological approaches that are being used in an ongoing transdisciplinary collaboration project to study lawns in Sweden as a social and ecological phenomenon. The overall aim of this study was to investigate social and cultural perceptions of lawns, as well as motives behind decisions about the establishment and management of lawns in Sweden. Two multi-family housing typologies, the `Million Programme' and `People's Homes', were examined due to their dominance in Swedish cities. We also studied how an alternative vision of conventional lawns can be applied and accepted by urban residents. We estimated lawn cover in multi-family housing areas and links to people's perception and use of lawns. Questionnaires, semi-structured interviews and observational studies were used (N=300). Our results showed that people like lawns even if they do not always directly use them. Lawns cover the most significant amount of outdoor spaces in all multi-family residential areas and accompany people everywhere from the house to the schoolyard or park. The total lawn cover in the study areas was 27.8%. Lawns were particularly valued as important places for different outdoor activities (playing, resting, picnicking, walking, socialising) and enjoying the green colour. However people do not want to use a vast monotonous lawn, but a variety of spaces that provide good conditions for different senses (sound, smell, touch and sight) and activities. Alternative lawns were also appreciated by many citizens, politicians, planners and managers. The implementation of new types of lawns requires special planning and design solutions adjusted for each particular neighbourhood. Conventional lawns, Environmentally friendly and cost-effective lawns, Lawn cover, People's perceptions and use of lawn",the lawn as a social and cultural phenomenon in sweden lawns have a significant influence on the cityscape as one of the essential elements of green spaces and an important part of people s everyday lives most people in the western world view lawns as a compulsory element of the urban landscape almost an icon without questioning their social symbolic ecological or aesthetic values this research is a part of the conceptual framework and methodological approaches that are being used in an ongoing transdisciplinary collaboration project to study lawns in sweden as a social and ecological phenomenon the overall aim of this study was to investigate social and cultural perceptions of lawns as well as motives behind decisions about the establishment and management of lawns in sweden two multi family housing typologies the million programme and people s homes were examined due to their dominance in swedish cities we also studied how an alternative vision of conventional lawns can be applied and accepted by urban residents we estimated lawn cover in multi family housing areas and links to people s perception and use of lawns questionnaires semi structured interviews and observational studies were used n 300 our results showed that people like lawns even if they do not always directly use them lawns cover the most significant amount of outdoor spaces in all multi family residential areas and accompany people everywhere from the house to the schoolyard or park the total lawn cover in the study areas was 27 8 lawns were particularly valued as important places for different outdoor activities playing resting picnicking walking socialising and enjoying the green colour however people do not want to use a vast monotonous lawn but a variety of spaces that provide good conditions for different senses sound smell touch and sight and activities alternative lawns were also appreciated by many citizens politicians planners and managers the implementation of new types of lawns requires special planning and design solutions adjusted for each particular neighbourhood conventional lawns environmentally friendly and cost effective lawns lawn cover people s perceptions and use of lawn,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
362,0,"Supercritical fluid extraction of the omega-3 rich oil contained in hake (Merluccius capensis--Merluccius paradoxus) by-products: Study of the influence of process parameters on the extraction yield and oil quality The supercritical fluid extraction (SFE) of the omega-3 rich oil contained in by-products of the fish industry has been studied in this work. Specifically, the offcuts obtained from peeling hake (Merluccius capensis--Merluccius paradoxus) to obtain hake fillets have been used as raw material. This raw material was grounded to different sizes and freeze-dried to different moisture contents. Extraction experiments were carried out at different pressure, flow rate and flow sense in order to study the influence of such process parameters on the extraction rate and oil quality. The influence of continuous or intermittent contact solvent--subtract was also evaluated. The extraction temperature was maintained at 40$ ^\circ$C in all cases in order to avoid thermal degradation of the polyunsaturated fatty acids contained in hake oil. The results obtained indicate that internal mass transfer controlled the rate of the process under the conditions studied in this work. The optimum extraction conditions were found to be 25MPa, 10kgCO2/h and upflow sense over freeze-dried and grounded hake. Under those conditions, more than 96% of the total oil contained in the raw material was extracted after 3h. The oil extracted presented a high omega-3/omega-6 ratio (around 7) and a high EPA and DHA content (about 6% and 14%, respectively, of the total fatty acids contained in the hake by-product used in this work). Quality and stability of the hake oil were evaluated along 14 days of storage under different conditions. The acidity of hake oil obtained by SFE was high, but it was similar or even lower than the acidity of the oil obtained by conventional solvent extraction. Acidity suffered little further increment along storage. Hake oil was very prone to oxidative modification, enhanced by increasing temperature and light. The oil oxidation process is complex affecting the concentration of parameters related both with primary and secondary steps of oxidation and to sensory properties as smell and colour. Supercritical fluid extraction, Omega-3 fatty acids, Fish oil, Hake by-product, Carbon dioxide",supercritical fluid extraction of the omega 3 rich oil contained in hake merluccius capensis merluccius paradoxus by products study of the influence of process parameters on the extraction yield and oil quality the supercritical fluid extraction sfe of the omega 3 rich oil contained in by products of the fish industry has been studied in this work specifically the offcuts obtained from peeling hake merluccius capensis merluccius paradoxus to obtain hake fillets have been used as raw material this raw material was grounded to different sizes and freeze dried to different moisture contents extraction experiments were carried out at different pressure flow rate and flow sense in order to study the influence of such process parameters on the extraction rate and oil quality the influence of continuous or intermittent contact solvent subtract was also evaluated the extraction temperature was maintained at 40 circ c in all cases in order to avoid thermal degradation of the polyunsaturated fatty acids contained in hake oil the results obtained indicate that internal mass transfer controlled the rate of the process under the conditions studied in this work the optimum extraction conditions were found to be 25mpa 10kgco2 h and upflow sense over freeze dried and grounded hake under those conditions more than 96 of the total oil contained in the raw material was extracted after 3h the oil extracted presented a high omega 3 omega 6 ratio around 7 and a high epa and dha content about 6 and 14 respectively of the total fatty acids contained in the hake by product used in this work quality and stability of the hake oil were evaluated along 14 days of storage under different conditions the acidity of hake oil obtained by sfe was high but it was similar or even lower than the acidity of the oil obtained by conventional solvent extraction acidity suffered little further increment along storage hake oil was very prone to oxidative modification enhanced by increasing temperature and light the oil oxidation process is complex affecting the concentration of parameters related both with primary and secondary steps of oxidation and to sensory properties as smell and colour supercritical fluid extraction omega 3 fatty acids fish oil hake by product carbon dioxide,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
363,0,"Smelling on the fly: sensory cues and strategies for olfactory navigation in Drosophila Navigating toward (or away from) a remote odor source is a challenging problem that requires integrating olfactory information with visual and mechanosensory cues. Drosophila melanogaster is a useful organism for studying the neural mechanisms of these navigation behaviors. There are a wealth of genetic tools in this organism, as well as a history of inventive behavioral experiments. There is also a large and growing literature in Drosophila on the neural coding of olfactory, visual, and mechanosensory stimuli. Here we review recent progress in understanding how these stimulus modalities are encoded in the Drosophila nervous system. We also discuss what strategies a fly might use to navigate in a natural olfactory landscape while making use of all these sources of sensory information. We emphasize that Drosophila are likely to switch between multiple strategies for olfactory navigation, depending on the availability of various sensory cues. Finally, we highlight future research directions that will be important in understanding the neural circuits that underlie these behaviors. []",smelling on the fly sensory cues and strategies for olfactory navigation in drosophila navigating toward or away from a remote odor source is a challenging problem that requires integrating olfactory information with visual and mechanosensory cues drosophila melanogaster is a useful organism for studying the neural mechanisms of these navigation behaviors there are a wealth of genetic tools in this organism as well as a history of inventive behavioral experiments there is also a large and growing literature in drosophila on the neural coding of olfactory visual and mechanosensory stimuli here we review recent progress in understanding how these stimulus modalities are encoded in the drosophila nervous system we also discuss what strategies a fly might use to navigate in a natural olfactory landscape while making use of all these sources of sensory information we emphasize that drosophila are likely to switch between multiple strategies for olfactory navigation depending on the availability of various sensory cues finally we highlight future research directions that will be important in understanding the neural circuits that underlie these behaviors,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
364,0,"Limonene ethers from tire pyrolysis oil: Part 1: Batch experiments Tire pyrolysis oil was produced by EnerVision Inc., Halifax, Canada using the continuous ablative reactor (CAR) system. The tire oil was separated by distillation into several fractions. Naphtha and limonene enriched naphtha were reacted with methanol over different catalysts. Batch experiments were carried out to separate limonene as methyl limonene ethers. Whole tire pyrolysis oil was distilled and the resulting distillates were redistilled to separate the limonene (bp about 176$ ^\circ$C). Vacuum distillation yielded on average 25.5wt% naphtha containing 16.3wt% limonene (average). Redistillation increased the limonene concentration to approximately 32--37wt%. The conversion of limonene (mono-terpene) to limonene ethers (terpenoides) shifted the boiling point of the limonene derivatives out of the naphtha boiling range (IBP −190$ ^\circ$C). This allowed the separation of fragrant limonene ethers from foul smelling naphtha. Alkoxylation reactions were performed mostly using methanol and acidic catalysts. The methyl ether [1-methyl-4-(α-methoxy-isopropyl)-1-cyclohexene] has a boiling point of about 198$ ^\circ$C which is higher than the end boiling point of the naphtha cut. Five heterogeneous catalysts (four zeolites and one ion exchange resin) were tested in a batch reactor. β-Zeolite produced excellent results. The reaction of R-(+)-limonene with methanol in the presence of activated β-zeolite yielded methyl ether, 87.5% at selectivity 89.7% with a maximum of 2h reaction time. Limonene conversion from whole naphtha to ethers was also high. Used tires, Tire oil, Distillation, Limonene, Methyl limonene ethers, Etherification, Alkoxylation, Zeolite, Amberlyst",limonene ethers from tire pyrolysis oil part 1 batch experiments tire pyrolysis oil was produced by enervision inc halifax canada using the continuous ablative reactor car system the tire oil was separated by distillation into several fractions naphtha and limonene enriched naphtha were reacted with methanol over different catalysts batch experiments were carried out to separate limonene as methyl limonene ethers whole tire pyrolysis oil was distilled and the resulting distillates were redistilled to separate the limonene bp about 176 circ c vacuum distillation yielded on average 25 5wt naphtha containing 16 3wt limonene average redistillation increased the limonene concentration to approximately 32 37wt the conversion of limonene mono terpene to limonene ethers terpenoides shifted the boiling point of the limonene derivatives out of the naphtha boiling range ibp 190 circ c this allowed the separation of fragrant limonene ethers from foul smelling naphtha alkoxylation reactions were performed mostly using methanol and acidic catalysts the methyl ether 1 methyl 4 methoxy isopropyl 1 cyclohexene has a boiling point of about 198 circ c which is higher than the end boiling point of the naphtha cut five heterogeneous catalysts four zeolites and one ion exchange resin were tested in a batch reactor zeolite produced excellent results the reaction of r limonene with methanol in the presence of activated zeolite yielded methyl ether 87 5 at selectivity 89 7 with a maximum of 2h reaction time limonene conversion from whole naphtha to ethers was also high used tires tire oil distillation limonene methyl limonene ethers etherification alkoxylation zeolite amberlyst,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
365,0,"Different sensory modalities are required for successful courtship in two species of the Drosophila willistoni group During courtship, specific signals are transmitted and received between the male and the female. To understand the evolution and function of courtship behaviours, these signals must be tested individually to determine their relative effects. Drosophila species have a variety of courtship patterns that use different sensory modalities, including chemosensory, tactile, visual and auditory cues, and thus provide an opportunity for exploring different sensory modalities. In most species of the Drosophila willistoni group, males produce an auditory cue (courtship song) through wing vibration. One species, Drosophila nebulosa, does not produce an auditory signal in courtship, although both sexes perform wing-lifting movements and males fan an anal droplet towards the female. We compared the sensory modalities important for mating success in D. nebulosa and D. willistoni through a series of phenotypic manipulation experiments in which individuals had disrupted transmission or reception of signals. In D. nebulosa, females had to be able to smell, presumably to detect the anal droplet, for successful mating to occur, whereas for males of the same species, vision was essential. In contrast, no single sensory modality was absolutely necessary for D. willistoni mating success, although hearing greatly increased mating success for females and courtship song greatly increased mating success for males. Thus, these species are divergent in the sensory modalities necessary for courtship success, indicating that courtship behaviour may change rapidly within species groups. anal droplet, antennal removal, chemosensory cue, courtship song, , , mate choice, phenotypic manipulation, visual cue, wing display",different sensory modalities are required for successful courtship in two species of the drosophila willistoni group during courtship specific signals are transmitted and received between the male and the female to understand the evolution and function of courtship behaviours these signals must be tested individually to determine their relative effects drosophila species have a variety of courtship patterns that use different sensory modalities including chemosensory tactile visual and auditory cues and thus provide an opportunity for exploring different sensory modalities in most species of the drosophila willistoni group males produce an auditory cue courtship song through wing vibration one species drosophila nebulosa does not produce an auditory signal in courtship although both sexes perform wing lifting movements and males fan an anal droplet towards the female we compared the sensory modalities important for mating success in d nebulosa and d willistoni through a series of phenotypic manipulation experiments in which individuals had disrupted transmission or reception of signals in d nebulosa females had to be able to smell presumably to detect the anal droplet for successful mating to occur whereas for males of the same species vision was essential in contrast no single sensory modality was absolutely necessary for d willistoni mating success although hearing greatly increased mating success for females and courtship song greatly increased mating success for males thus these species are divergent in the sensory modalities necessary for courtship success indicating that courtship behaviour may change rapidly within species groups anal droplet antennal removal chemosensory cue courtship song mate choice phenotypic manipulation visual cue wing display,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
366,0,"Bitterness enhancement induced by cut grass odorant (cis-3-hexen-1-ol) in a model olive oil In the present study the taste--smell interaction between bitterness and cut grass odour was studied in a model olive oil. Investigating the extent to which the green aroma affects the perception of bitterness in virgin olive oil may affect the identification of new strategies for optimising the sensory properties of the product. The study was organised in four stages: a pre-testing stage verified the suitability of the tastant (quinine dihydrochloride) and the odorant (cis-3-hexen-1-ol) and to select a moderate concentration of the cut grass odour and a spread of different concentrations of the bitter compound ranging from weak to strong. A second stage studied the effect of the cut grass odour on the intensity of bitterness perceived in the oil and on the oil's pleasantness (experiment 1). A third stage studied the influence of the cut grass odour on the dynamic process of the perception of bitterness (experiment 2). A fourth stage, to stimulate a nose-occlusion control condition, verified the sensory nature of the interaction between the odorant and tastant (experiment 3). The results show that the green odour note has a positive significant effect on the perception of bitterness. The presence of cut grass odour enhances the bitterness perception. New strategies in controlling the perceived intensity of bitterness in virgin olive oil may be defined. Bitterness, Taste--odour interaction, Olive oil",bitterness enhancement induced by cut grass odorant cis 3 hexen 1 ol in a model olive oil in the present study the taste smell interaction between bitterness and cut grass odour was studied in a model olive oil investigating the extent to which the green aroma affects the perception of bitterness in virgin olive oil may affect the identification of new strategies for optimising the sensory properties of the product the study was organised in four stages a pre testing stage verified the suitability of the tastant quinine dihydrochloride and the odorant cis 3 hexen 1 ol and to select a moderate concentration of the cut grass odour and a spread of different concentrations of the bitter compound ranging from weak to strong a second stage studied the effect of the cut grass odour on the intensity of bitterness perceived in the oil and on the oil s pleasantness experiment 1 a third stage studied the influence of the cut grass odour on the dynamic process of the perception of bitterness experiment 2 a fourth stage to stimulate a nose occlusion control condition verified the sensory nature of the interaction between the odorant and tastant experiment 3 the results show that the green odour note has a positive significant effect on the perception of bitterness the presence of cut grass odour enhances the bitterness perception new strategies in controlling the perceived intensity of bitterness in virgin olive oil may be defined bitterness taste odour interaction olive oil,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
367,0,"P-Lint: A Permission Smell Detector for Android Applications Android is built upon a permission-based structure, where apps require access to specific permissions in order to carry out specific functionality. While Android has provided a set of best practices intended to aid the developer in properly defining and manipulating these permissions on their source code, developers do not always adhere to these guidelines. Although some of the resulting issues may be minor and lead to slight user confusion, other mistakes may create more serious privacy and security related issues. We've defined improper usage of these permission best practices to be 'permission smells' to indicate possible permissions related syntactic issues and have created a tool P-Lint to assist in the identification of these smells on the source code. P-Lint's goal is to not only help developers create better, more secure apps by providing guidance on properly using permissions, but also in allowing researchers to better understand the common permission smells through empirical analysis on existing apps. P-Lint is available on our project website: https://p-lint.github.io. Android (operating system), authorisation, data privacy, mobile computing, source code (software), P-Lint, permission smell detector, Android applications, permission-based structure, source code, privacy issues, security issues, permissions related syntactic issues, smells identification, apps security, Androids, Humanoid robots, Best practices, Tools, Security, Standards, Guidelines",p lint a permission smell detector for android applications android is built upon a permission based structure where apps require access to specific permissions in order to carry out specific functionality while android has provided a set of best practices intended to aid the developer in properly defining and manipulating these permissions on their source code developers do not always adhere to these guidelines although some of the resulting issues may be minor and lead to slight user confusion other mistakes may create more serious privacy and security related issues we ve defined improper usage of these permission best practices to be permission smells to indicate possible permissions related syntactic issues and have created a tool p lint to assist in the identification of these smells on the source code p lint s goal is to not only help developers create better more secure apps by providing guidance on properly using permissions but also in allowing researchers to better understand the common permission smells through empirical analysis on existing apps p lint is available on our project website https p lint github io android operating system authorisation data privacy mobile computing source code software p lint permission smell detector android applications permission based structure source code privacy issues security issues permissions related syntactic issues smells identification apps security androids humanoid robots best practices tools security standards guidelines,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
368,0,"Normalizing XML Schemas Through Relational Databases The theory of normal forms is one of the most widely studied subjects in databases. It provides the basis for designing anomaly-free relational schemas (see [3] for an introduction). Recently, Wu et. al. [6] and Arenas and Libkin [1] extended the theory to XML and semistructured data by appropriately generalizing the notions of normal forms. They then developed algorithms for checking and transforming DTDs with respect to these definitions. []",normalizing xml schemas through relational databases the theory of normal forms is one of the most widely studied subjects in databases it provides the basis for designing anomaly free relational schemas see 3 for an introduction recently wu et al 6 and arenas and libkin 1 extended the theory to xml and semistructured data by appropriately generalizing the notions of normal forms they then developed algorithms for checking and transforming dtds with respect to these definitions,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
369,0,"Multi-Sensory Media Experiences The way we experience the world is based on our five senses, which allow us unique and often surprising sensations of our environment. Interactive technologies are mainly stimulating our senses of vision and hearing, partly our sense of touch, and the sense of taste and smell are widely under-exploited. There is however a growing international interest of the film, video, and game industries in more immersive viewing and gaming experiences. In the 20th century there was a demand for a controllable way to describe colours that initiated intense research on the descriptions of colours and substantially contributed to advances in computer graphics, image processing, photography and cinematography. Similarly, the 21st century now demands an investigation of touch, taste, and smell as sensory interaction modalities to enhance media experiences. Interaction design, Media experiences, Multi-sensory interaction, Sensory integration, TV, User experience",multi sensory media experiences the way we experience the world is based on our five senses which allow us unique and often surprising sensations of our environment interactive technologies are mainly stimulating our senses of vision and hearing partly our sense of touch and the sense of taste and smell are widely under exploited there is however a growing international interest of the film video and game industries in more immersive viewing and gaming experiences in the 20th century there was a demand for a controllable way to describe colours that initiated intense research on the descriptions of colours and substantially contributed to advances in computer graphics image processing photography and cinematography similarly the 21st century now demands an investigation of touch taste and smell as sensory interaction modalities to enhance media experiences interaction design media experiences multi sensory interaction sensory integration tv user experience,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
370,0,"Towards an Architecture-Centric Approach to Security Analysis Recently there has been increased attention to the consequences of architecture design decisions and their impact on security. Architectural design decisions have been identified as being critical for achieving high levels of software system security. However the majority of this research has been anecdotal and there are few tools or methods for understanding the architectural relations among files, and their impact on security. In this paper we employ a DRSpace-based analysis approach to identify architectural design flaws and we show, via an empirical study of 10 open source projects, that areas of a software architecture that suffer from greater numbers of design flaws are highly correlated with security bugs, and high levels of churn associated with those security bugs. Finally, we show that a specific type of design flaw -- unstable interface -- is correlated with the greatest increase in software security bugs. program diagnostics, security of data, software architecture, architecture-centric approach, security analysis, software system security, architectural relations, DRSpace-based analysis approach, architectural design flaw identification, open source projects, software architecture, churn, unstable interface, software security bugs, Security, Computer architecture, Computer bugs, Software, Concrete, Microprocessors, Observers, software architecture, software security, design flaw",towards an architecture centric approach to security analysis recently there has been increased attention to the consequences of architecture design decisions and their impact on security architectural design decisions have been identified as being critical for achieving high levels of software system security however the majority of this research has been anecdotal and there are few tools or methods for understanding the architectural relations among files and their impact on security in this paper we employ a drspace based analysis approach to identify architectural design flaws and we show via an empirical study of 10 open source projects that areas of a software architecture that suffer from greater numbers of design flaws are highly correlated with security bugs and high levels of churn associated with those security bugs finally we show that a specific type of design flaw unstable interface is correlated with the greatest increase in software security bugs program diagnostics security of data software architecture architecture centric approach security analysis software system security architectural relations drspace based analysis approach architectural design flaw identification open source projects software architecture churn unstable interface software security bugs security computer architecture computer bugs software concrete microprocessors observers software architecture software security design flaw,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
371,0,"Suitability of Sterillium Gel\texttrademark for surgical hand disinfection In some countries, alcohol-based hand gels are used for hygienic hand disinfection but their efficacy and suitability for surgical hand disinfection has never been investigated. The efficacy of Sterillium Gel\texttrademark was investigated according to prEN 12791 in two separate experiments. Finger tips of 20 volunteers per experiment were sampled for resident skin bacteria before surgical hand disinfection. In a cross-over design, each volunteer carried out a surgical hand disinfection with the reference alcohol [n-propanol 60%, (v/v)] or Sterillium Gel\texttrademark [ethanol 85% (v/v)] for 3 min. After the product application, one hand was sampled for the immediate effect, the other hand was gloved for 3 h and then sampled for the sustained effect. Samples were analysed for remaining resident bacteria. The mean of the pre-value, the 0 h and 3 h values of the reference disinfection and the test product were calculated. With the reference alcohol, respective mean immediate log10-reduction factors of 2.06$\pm$0.76 and 2.23$\pm$1.13 were found in both experiments. The mean sustained effects with the reference alcohol were 2.03$\pm$1.14 and 1.44$\pm$0.81. Sterillium Gel\texttrademark achieved respective mean immediate effects of 2.48$\pm$1.06 and 2.13$\pm$0.81, the mean sustained effects were 2.77$\pm$0.95 and 2.18$\pm$0.72. They proved significantly larger than those obtained with the reference alcohol (P0.05). Alcohol-based hand gel, Surgical hand disinfection, Sterillium Gel\texttrademark, prEN 12791",suitability of sterillium gel texttrademark for surgical hand disinfection in some countries alcohol based hand gels are used for hygienic hand disinfection but their efficacy and suitability for surgical hand disinfection has never been investigated the efficacy of sterillium gel texttrademark was investigated according to pren 12791 in two separate experiments finger tips of 20 volunteers per experiment were sampled for resident skin bacteria before surgical hand disinfection in a cross over design each volunteer carried out a surgical hand disinfection with the reference alcohol n propanol 60 v v or sterillium gel texttrademark ethanol 85 v v for 3 min after the product application one hand was sampled for the immediate effect the other hand was gloved for 3 h and then sampled for the sustained effect samples were analysed for remaining resident bacteria the mean of the pre value the 0 h and 3 h values of the reference disinfection and the test product were calculated with the reference alcohol respective mean immediate log10 reduction factors of 2 06 pm 0 76 and 2 23 pm 1 13 were found in both experiments the mean sustained effects with the reference alcohol were 2 03 pm 1 14 and 1 44 pm 0 81 sterillium gel texttrademark achieved respective mean immediate effects of 2 48 pm 1 06 and 2 13 pm 0 81 the mean sustained effects were 2 77 pm 0 95 and 2 18 pm 0 72 they proved significantly larger than those obtained with the reference alcohol p0 05 alcohol based hand gel surgical hand disinfection sterillium gel texttrademark pren 12791,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
372,0,"EXTRACTOR: An extensible framework for identifying Aspect-Oriented refactoring opportunities Automatic refactoring techniques guarantee the correctness and effectiveness for the transformation of legacy software systems. Existing techniques are not effective to identify refactoring opportunities because of the complexity of composite refactoring and the behavior preservation for Aspect-Oriented refactoring. To address these challenges, we design EXTRACTOR, which is an extensible framework to identify Aspect-Oriented refactoring opportunities. In the framework, the bad smell detector provides significant query ability to detect bad smells, while the template manager enables the customization of bad smell and composite refactoring. Then refactoring opportunities are identified using logic transformation managed by EXTRACTOR Constructor. All these functionalities are based on the logic query engine, which manages the logic representation of programs. Finally we illustrate the effectiveness of the framework using case study. aspect-oriented programming, software maintenance, EXTRACTOR, extensible framework, aspect-oriented refactoring opportunities, automatic refactoring techniques, legacy software systems, template manager, composite refactoring, logic transformation, logic query engine, logic representation, TV, Welding, software engineering, automatic software refactoring, aspect-oriented program, logic transformation",extractor an extensible framework for identifying aspect oriented refactoring opportunities automatic refactoring techniques guarantee the correctness and effectiveness for the transformation of legacy software systems existing techniques are not effective to identify refactoring opportunities because of the complexity of composite refactoring and the behavior preservation for aspect oriented refactoring to address these challenges we design extractor which is an extensible framework to identify aspect oriented refactoring opportunities in the framework the bad smell detector provides significant query ability to detect bad smells while the template manager enables the customization of bad smell and composite refactoring then refactoring opportunities are identified using logic transformation managed by extractor constructor all these functionalities are based on the logic query engine which manages the logic representation of programs finally we illustrate the effectiveness of the framework using case study aspect oriented programming software maintenance extractor extensible framework aspect oriented refactoring opportunities automatic refactoring techniques legacy software systems template manager composite refactoring logic transformation logic query engine logic representation tv welding software engineering automatic software refactoring aspect oriented program logic transformation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
373,0,"The sensory dimension of tourist experiences: Capturing meaningful sensory-informed themes in Southwest Portugal Sensory aspects of destinations have recently been in focus as an important dimension in the process of facilitating positive tourist experiences. The countryside embraces local resources rich in multi-sensory stimuli that could be utilized in the planning and marketing of appealing tourist experiences addressed to segments of tourists, while fitting sustainable local development. This study follows a holistic approach to the five external human senses, aiming to capture meaningful sensory-informed themes adequate for segmenting rural tourists. A self-administered survey in four languages was collected from 181 tourists in Southwest Portugal. A multiple correspondence analysis suggests four sensory-informed themes, tentatively named generic beach-related experience, nature-based experience, balanced experience, and rural experience. The proposed themes correspond to a four-solution cluster of tourists presenting different profiles. The largest segment (73 tourists) corresponds to the rural experience, regarding which tourists mainly refer to the taste of local food and the smell of fresh air. Theme, Sensory tourist experience, Multiple correspondence analysis, Segmentation",the sensory dimension of tourist experiences capturing meaningful sensory informed themes in southwest portugal sensory aspects of destinations have recently been in focus as an important dimension in the process of facilitating positive tourist experiences the countryside embraces local resources rich in multi sensory stimuli that could be utilized in the planning and marketing of appealing tourist experiences addressed to segments of tourists while fitting sustainable local development this study follows a holistic approach to the five external human senses aiming to capture meaningful sensory informed themes adequate for segmenting rural tourists a self administered survey in four languages was collected from 181 tourists in southwest portugal a multiple correspondence analysis suggests four sensory informed themes tentatively named generic beach related experience nature based experience balanced experience and rural experience the proposed themes correspond to a four solution cluster of tourists presenting different profiles the largest segment 73 tourists corresponds to the rural experience regarding which tourists mainly refer to the taste of local food and the smell of fresh air theme sensory tourist experience multiple correspondence analysis segmentation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
374,0,"Industry-academia Collaborations in Software Engineering: An Empirical Analysis of Challenges, Patterns and Anti-patterns in Research Projects Research collaboration between industry and academia supports improvement and innovation in industry and helps to ensure industrial relevance in academic research. However, many researchers and practitioners believe that the level of joint industry-academia collaboration (IAC) in software engineering (SE) research is still relatively low, compared to the amount of activity in each of the two communities. The goal of the empirical study reported in this paper is to exploratory characterize the state of IAC with respect to a set of challenges, patterns and anti-patterns identified by a recent Systematic Literature Review study. To address the above goal, we gathered the opinions of researchers and practitioners w.r.t. their experiences in IAC projects. Our dataset includes 47 opinion data points related to a large set of projects conducted in 10 different countries. We aim to contribute to the body of evidence in the area of IAC, for the benefit of researchers and practitioners in conducting future successful IAC projects in SE. As an output, the study presents a set of empirical findings and evidence-based recommendations to increase the success of IAC projects. anti-patterns, challenges, empirical study, industry-academia collaborations, patterns, research, software engineering, success factors",industry academia collaborations in software engineering an empirical analysis of challenges patterns and anti patterns in research projects research collaboration between industry and academia supports improvement and innovation in industry and helps to ensure industrial relevance in academic research however many researchers and practitioners believe that the level of joint industry academia collaboration iac in software engineering se research is still relatively low compared to the amount of activity in each of the two communities the goal of the empirical study reported in this paper is to exploratory characterize the state of iac with respect to a set of challenges patterns and anti patterns identified by a recent systematic literature review study to address the above goal we gathered the opinions of researchers and practitioners w r t their experiences in iac projects our dataset includes 47 opinion data points related to a large set of projects conducted in 10 different countries we aim to contribute to the body of evidence in the area of iac for the benefit of researchers and practitioners in conducting future successful iac projects in se as an output the study presents a set of empirical findings and evidence based recommendations to increase the success of iac projects anti patterns challenges empirical study industry academia collaborations patterns research software engineering success factors,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
375,0,"Let's Have Dinner Together: Evaluate the Mediated Co-dining Experience Having dinner together is undoubtedly a kind of pleasurable experience, which involves various channels for mutual interactions, not only audio, vision and touch, but also smell and taste. With the aim to extend this rich experience to remote situations, we developed the Co-dining system to support a range of mealtime interactions to enhance the feeling of social togetherness. This paper describes the preliminary study with this interactive multisensory system. It aims to investigate the actual effectiveness of the working prototype on enhancing the social presence and engagement during telepresent dining, and also to get a comprehensive understanding about users' perception. This evaluation focused on three main aspects: the overall Co-dining feeling, cultural awareness, and engagement. The study results revealed that this system positively achieved the sense of ""being together"" among users, through the interactive activities touching upon tableware, tablecloth and real edible food, and each interaction module contributed differently to the overall experience. In this paper, we report the evaluation process, present and interpret the data, and discuss the initial insights to enhance the sense of co-presence through multi-channel interactions. co-dining experience, mediated co-presence, multimodal interaction, multisensory communication, user study",let s have dinner together evaluate the mediated co dining experience having dinner together is undoubtedly a kind of pleasurable experience which involves various channels for mutual interactions not only audio vision and touch but also smell and taste with the aim to extend this rich experience to remote situations we developed the co dining system to support a range of mealtime interactions to enhance the feeling of social togetherness this paper describes the preliminary study with this interactive multisensory system it aims to investigate the actual effectiveness of the working prototype on enhancing the social presence and engagement during telepresent dining and also to get a comprehensive understanding about users perception this evaluation focused on three main aspects the overall co dining feeling cultural awareness and engagement the study results revealed that this system positively achieved the sense of being together among users through the interactive activities touching upon tableware tablecloth and real edible food and each interaction module contributed differently to the overall experience in this paper we report the evaluation process present and interpret the data and discuss the initial insights to enhance the sense of co presence through multi channel interactions co dining experience mediated co presence multimodal interaction multisensory communication user study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
376,0,"Evaluation of the sense of smell by using near-infrared spectroscopy Olfactory impairment is a characteristic of early stage of Parkinson's disease (PD). Over 95% of PD patients present with severe olfactory loss. Almost all olfactory tests are subjective. Therefore, olfactometry cannot be performed unless the patient himself/herself notices olfactory impairment. When the condition of the patients was diagnosed as a PD, they had completely lost their sense of olfaction. Thus, an objective olfactory test is required to measure the olfactory function of patients with PD. In this study, we examined the subjective olfactory test (T&T olfactometry) and the objective olfactory test (cerebral blood volume changes under odor stimulation by using near-infrared spectroscopy [NIRS]) in PD patients and age-matched elder normosmic volunteers. The results of the subjective and objective olfactory tests of PD patients were significantly worse than those of the normal volunteers. These results suggested that most of the PD patients had olfactory impairment and half of the PD patients did not notice their olfactory impairment. In case of the latter group of patients, subjective olfactometry is not useful. The objective olfactory test is required to measure the olfactory function of patients with PD. Multi-channel NIRS is expected to be widely used in the future for clinical objective olfactometry. Olfactometry may be an early screening test for the diagnosis of PD. chemioception, diseases, haemodynamics, infrared spectroscopy, patient diagnosis, sense of smell evaluation, near infrared spectroscopy, olfactory impairment, Parkinson disease, severe olfactory loss, objective olfactory test, cerebral blood volume changes, odor stimulation, NIRS, clinical objective olfactometry, Olfactory, Spectroscopy, Optical fiber devices, Educational institutions, Materials, Biomedical optical imaging, Optical variables measurement, Olfactory Impairment, Parkinson's disease, T&T olfactometry, near-infrared spectroscopy (NIRS)",evaluation of the sense of smell by using near infrared spectroscopy olfactory impairment is a characteristic of early stage of parkinson s disease pd over 95 of pd patients present with severe olfactory loss almost all olfactory tests are subjective therefore olfactometry cannot be performed unless the patient himself herself notices olfactory impairment when the condition of the patients was diagnosed as a pd they had completely lost their sense of olfaction thus an objective olfactory test is required to measure the olfactory function of patients with pd in this study we examined the subjective olfactory test t t olfactometry and the objective olfactory test cerebral blood volume changes under odor stimulation by using near infrared spectroscopy nirs in pd patients and age matched elder normosmic volunteers the results of the subjective and objective olfactory tests of pd patients were significantly worse than those of the normal volunteers these results suggested that most of the pd patients had olfactory impairment and half of the pd patients did not notice their olfactory impairment in case of the latter group of patients subjective olfactometry is not useful the objective olfactory test is required to measure the olfactory function of patients with pd multi channel nirs is expected to be widely used in the future for clinical objective olfactometry olfactometry may be an early screening test for the diagnosis of pd chemioception diseases haemodynamics infrared spectroscopy patient diagnosis sense of smell evaluation near infrared spectroscopy olfactory impairment parkinson disease severe olfactory loss objective olfactory test cerebral blood volume changes odor stimulation nirs clinical objective olfactometry olfactory spectroscopy optical fiber devices educational institutions materials biomedical optical imaging optical variables measurement olfactory impairment parkinson s disease t t olfactometry near infrared spectroscopy nirs,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
377,0,"Understanding Code Smells in Android Applications Code smells are associated with poor coding practices that cause long-term maintainability problems and mask bugs. Despite mobile being a fast growing software sector, code smells in mobile applications have been understudied. We do not know how code smells in mobile applications compare to those in desktop applications, and how code smells are affecting the design of mobile applications. Without such knowledge, application developers, tool builders, and researchers cannot improve the practice and state of the art of mobile development.We first reviewed the literature on code smells in Android applications and found that there is a significant gap between the most studied code smells in literature and most frequently occurring code smells in real world applications. Inspired by this finding, we conducted a large scale empirical study to compare the type, density, and distribution of code smells in mobile vs. desktop applications. We analyze an open-source corpus of 500 Android applications (total of 6.7M LOC) and 750 desktop Java applications (total of 16M LOC), and compare 14,553 instances of code smells in Android applications to 117,557 instances of code smells in desktop applications. We find that, despite mobile applications having different structure and workflow than desktop applications, the variety and density of code smells is similar. However, the distribution of code smells is different - some code smells occur more frequently in mobile applications. We also found that different categories of Android applications have different code smell distributions. We highlight several implications of our study for application developers, tool builders, and researchers. Android (operating system), mobile computing, program debugging, public domain software, software maintenance, source code (software), code smells, Android applications, maintainability problems, mask bugs, software sector, mobile applications, desktop applications, mobile development, open-source corpus, Androids, Humanoid robots, Mobile applications, Mobile communication, Smart phones, Java, Software engineering, Code Smell, Android, Java, literature review",understanding code smells in android applications code smells are associated with poor coding practices that cause long term maintainability problems and mask bugs despite mobile being a fast growing software sector code smells in mobile applications have been understudied we do not know how code smells in mobile applications compare to those in desktop applications and how code smells are affecting the design of mobile applications without such knowledge application developers tool builders and researchers cannot improve the practice and state of the art of mobile development we first reviewed the literature on code smells in android applications and found that there is a significant gap between the most studied code smells in literature and most frequently occurring code smells in real world applications inspired by this finding we conducted a large scale empirical study to compare the type density and distribution of code smells in mobile vs desktop applications we analyze an open source corpus of 500 android applications total of 6 7m loc and 750 desktop java applications total of 16m loc and compare 14 553 instances of code smells in android applications to 117 557 instances of code smells in desktop applications we find that despite mobile applications having different structure and workflow than desktop applications the variety and density of code smells is similar however the distribution of code smells is different some code smells occur more frequently in mobile applications we also found that different categories of android applications have different code smell distributions we highlight several implications of our study for application developers tool builders and researchers android operating system mobile computing program debugging public domain software software maintenance source code software code smells android applications maintainability problems mask bugs software sector mobile applications desktop applications mobile development open source corpus androids humanoid robots mobile applications mobile communication smart phones java software engineering code smell android java literature review,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
378,0,"CACheck: Detecting and Repairing Cell Arrays in Spreadsheets Spreadsheets are widely used by end users for numerical computation in their business. Spreadsheet cells whose computation is subject to the same semantics are often clustered in a row or column as a cell array. When a spreadsheet evolves, the cells in a cell array can degenerate due to ad hoc modifications. Such degenerated cell arrays no longer keep cells prescribing the same computational semantics, and are said to exhibit ambiguous computation smells. We propose CACheck, a novel technique that automatically detects and repairs smelly cell arrays by recovering their intended computational semantics. Our empirical study on the EUSES and Enron corpora finds that such smelly cell arrays are common. Our study also suggests that CACheck is useful for detecting and repairing real spreadsheet problems caused by smelly cell arrays. Compared with our previous work AmCheck, CACheck detects smelly cell arrays with higher precision and recall rate. software engineering, spreadsheet programs, spreadsheets, CACheck, numerical computation, ad hoc modifications, EUSES corpora, Enron corpora, smelly cell arrays, Semantics, Maintenance engineering, Software, Computer science, Nonhomogeneous media, Electronic mail, Business, Spreadsheet, cell array, ambiguous computation smell",cacheck detecting and repairing cell arrays in spreadsheets spreadsheets are widely used by end users for numerical computation in their business spreadsheet cells whose computation is subject to the same semantics are often clustered in a row or column as a cell array when a spreadsheet evolves the cells in a cell array can degenerate due to ad hoc modifications such degenerated cell arrays no longer keep cells prescribing the same computational semantics and are said to exhibit ambiguous computation smells we propose cacheck a novel technique that automatically detects and repairs smelly cell arrays by recovering their intended computational semantics our empirical study on the euses and enron corpora finds that such smelly cell arrays are common our study also suggests that cacheck is useful for detecting and repairing real spreadsheet problems caused by smelly cell arrays compared with our previous work amcheck cacheck detects smelly cell arrays with higher precision and recall rate software engineering spreadsheet programs spreadsheets cacheck numerical computation ad hoc modifications euses corpora enron corpora smelly cell arrays semantics maintenance engineering software computer science nonhomogeneous media electronic mail business spreadsheet cell array ambiguous computation smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
379,0,"POSTER: Security Design Patterns With Good Usability This poster presents work-in-progress in the field of usable security. The usability of security mechanisms is crucial to avoid unintended misuse of security mechanisms which lowers the security level of a system. It is the goal of the work presented in this poster to identify security design patterns with good usability. Requirements for security design patterns with good usability stem from existing usable security design guidelines. A collection of security usability failures is presented as well as examples of how misuse anti-patterns can be derived from these failures. Misuse cases will be used in future work to identify security design patterns with good usability. design patterns, security design patterns, usability, usable security",poster security design patterns with good usability this poster presents work in progress in the field of usable security the usability of security mechanisms is crucial to avoid unintended misuse of security mechanisms which lowers the security level of a system it is the goal of the work presented in this poster to identify security design patterns with good usability requirements for security design patterns with good usability stem from existing usable security design guidelines a collection of security usability failures is presented as well as examples of how misuse anti patterns can be derived from these failures misuse cases will be used in future work to identify security design patterns with good usability design patterns security design patterns usability usable security,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
380,0,"Manipulating subjective realism and its impact on presence: Preliminary results on feasibility and neuroanatomical correlates✩ The feeling of presence has been shown to be an important concept in several clinical applications of virtual reality. Among the factors influencing presence, realism factors have been examined extensively from the angle of objective realism. Objective realism has been manipulated by altering numerous technological characteristics such as pictorial quality, texture and shading, or by adding more sensory information (i.e., smell, touch). Much less studied is the subjective (or perceived) realism, the focus of the two pilot studies reported in this article. In Study 1, subjective realism was manipulated in order to assess the impact on the feeling of presence. Method: Presence was measured in 31 adults after two immersions in virtual reality. Participants were immersed in a neutral/irrelevant virtual environment and subsequently subjected to the experimental manipulation. Participants in the experimental condition were falsely led to believe that they were immersed live in real time in a ``real'' room with a ``real'' mouse in a cage. In the control condition, participants believed they were immersed in a replica of the nearby room. All participants were actually immersed in the exact same virtual environment. Results: A manipulation check revealed that 80% of the participants believed in the deception. A 2 Times by 2 Conditions repeated measure ANOVA revealed that leading people to believe they were seeing a real environment digitized live in virtual reality increased their feeling of presence compared to the control condition. In Study 2, the same experimental design was used but with simultaneous functional magnetic resonance imaging (fMRI) in order to assess brain areas potentially related to the feeling of presence. fMRI data from five participants were subjected to a within subject fixed effect analysis to verify differences between the experimental immersion (higher presence) and the control immersion (lower presence). Results revealed a statistically significant difference in left and right parahippocampus areas. Conclusion: Results are discussed according to layers of presence and consciousness and the meaning given to experiences occurring in virtual reality. Some suggestions are formulated to target core presence and extended presence. Feeling of presence, Virtual reality, Subjective realism, fMRI, Parahippocampus",manipulating subjective realism and its impact on presence preliminary results on feasibility and neuroanatomical correlates the feeling of presence has been shown to be an important concept in several clinical applications of virtual reality among the factors influencing presence realism factors have been examined extensively from the angle of objective realism objective realism has been manipulated by altering numerous technological characteristics such as pictorial quality texture and shading or by adding more sensory information i e smell touch much less studied is the subjective or perceived realism the focus of the two pilot studies reported in this article in study 1 subjective realism was manipulated in order to assess the impact on the feeling of presence method presence was measured in 31 adults after two immersions in virtual reality participants were immersed in a neutral irrelevant virtual environment and subsequently subjected to the experimental manipulation participants in the experimental condition were falsely led to believe that they were immersed live in real time in a real room with a real mouse in a cage in the control condition participants believed they were immersed in a replica of the nearby room all participants were actually immersed in the exact same virtual environment results a manipulation check revealed that 80 of the participants believed in the deception a 2 times by 2 conditions repeated measure anova revealed that leading people to believe they were seeing a real environment digitized live in virtual reality increased their feeling of presence compared to the control condition in study 2 the same experimental design was used but with simultaneous functional magnetic resonance imaging fmri in order to assess brain areas potentially related to the feeling of presence fmri data from five participants were subjected to a within subject fixed effect analysis to verify differences between the experimental immersion higher presence and the control immersion lower presence results revealed a statistically significant difference in left and right parahippocampus areas conclusion results are discussed according to layers of presence and consciousness and the meaning given to experiences occurring in virtual reality some suggestions are formulated to target core presence and extended presence feeling of presence virtual reality subjective realism fmri parahippocampus,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
381,0,"Prioritization of Classes for Refactoring: A Step Towards Improvement in Software Quality Bad Smells are certain structures in the software which violates the design principles and ruin the software quality. In order to deals with the bad smells, often refactoring treatment is provided in the code which further improves the software quality. However, it's not possible to refactor each and every class of the software in maintenance phase due to certain deadlines. Prioritization of classes helps the developer to identify the software portions requiring urgent refactoring. In the current study, we propose a framework to identify the potential classes which immediately require refactoring based on the bad smells as well as design characteristics. We evaluate our approach on medium sized open-source systems ORDrumbox. Four types of code-smells Feature Envy, Long Method, God Class and Type Checking were identified and well known Chidamber and Kemerer metric suite is used to evaluate the object oriented characteristics. Both are combined in certain ratio to calculate new proposed metric Quality Depreciation Index Rule (QDIR) for each class. Classes are further arranged as per their QDIR values to identify the severely affected classes requiring immediate refactoring treatment. This study works on 80:20 principles conveying 80% of the code quality can be improved by just providing refactoring treatment to 20% of the severely affected classes. Results reflects that the bad smells and design metrics can be used as an important source of information to quantify the flaws in the classes, thus helpful to maintainers in performing their task under strict time constraints while maintaining the overall software quality. Bad Smell, Object Oriented Metrics, Refactoring, Software Maintenance, Software Quality",prioritization of classes for refactoring a step towards improvement in software quality bad smells are certain structures in the software which violates the design principles and ruin the software quality in order to deals with the bad smells often refactoring treatment is provided in the code which further improves the software quality however it s not possible to refactor each and every class of the software in maintenance phase due to certain deadlines prioritization of classes helps the developer to identify the software portions requiring urgent refactoring in the current study we propose a framework to identify the potential classes which immediately require refactoring based on the bad smells as well as design characteristics we evaluate our approach on medium sized open source systems ordrumbox four types of code smells feature envy long method god class and type checking were identified and well known chidamber and kemerer metric suite is used to evaluate the object oriented characteristics both are combined in certain ratio to calculate new proposed metric quality depreciation index rule qdir for each class classes are further arranged as per their qdir values to identify the severely affected classes requiring immediate refactoring treatment this study works on 80 20 principles conveying 80 of the code quality can be improved by just providing refactoring treatment to 20 of the severely affected classes results reflects that the bad smells and design metrics can be used as an important source of information to quantify the flaws in the classes thus helpful to maintainers in performing their task under strict time constraints while maintaining the overall software quality bad smell object oriented metrics refactoring software maintenance software quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
382,0,"Genetic predisposition to anxiety-related behavior predicts predator odor response While rodents have a keen sense of smell and largely depend on olfactory cues for operating in their environment, most of the widely used tests to assess anxiety-related behavior largely ignore the olfactory system, being primarily based on fear of brightly lit, novel and open spaces. Here, we aimed at testing whether the genetic predisposition to anxiety predicts the predator odor response in mice. In the first experiment, using the 3-chamber avoidance test in CD-1 mice, trimethylthiazoline (TMT), a synthetic fox fecal odor, was shown to induce stronger behavioral and neuroendocrine effects than cat odor and butyric acid, respectively, and was therefore chosen as aversive odor for the following series of experiments. In this series, bidirectionally, selectively inbred CD-1 mice with either high (HAB), intermediate (NAB) or low (LAB) anxiety-related behavior responded differently to TMT, with HABs spending significantly less time than both NABs and LABs in the chamber harbouring the predator odor. Importantly, this result is not confounded by any deficit of the olfactory system, as LAB and NAB mice, while not or only moderately responding to TMT, responded to both the pleasant odor of female urine and the repugnant odor of butyric acid. Probably due to the strength of TMT, a similar increase in corticosterone levels upon predator odor exposure was observed in all three groups. Together, the results suggest that, dependent on the genetic predisposition to extremes in anxiety-related behavior, mice differentially interpret the odor of a potential predator, making this type of avoidance behavior highly predictable. Anxiety, Animal model, TMT, Cat odor, Corticosterone, HAB",genetic predisposition to anxiety related behavior predicts predator odor response while rodents have a keen sense of smell and largely depend on olfactory cues for operating in their environment most of the widely used tests to assess anxiety related behavior largely ignore the olfactory system being primarily based on fear of brightly lit novel and open spaces here we aimed at testing whether the genetic predisposition to anxiety predicts the predator odor response in mice in the first experiment using the 3 chamber avoidance test in cd 1 mice trimethylthiazoline tmt a synthetic fox fecal odor was shown to induce stronger behavioral and neuroendocrine effects than cat odor and butyric acid respectively and was therefore chosen as aversive odor for the following series of experiments in this series bidirectionally selectively inbred cd 1 mice with either high hab intermediate nab or low lab anxiety related behavior responded differently to tmt with habs spending significantly less time than both nabs and labs in the chamber harbouring the predator odor importantly this result is not confounded by any deficit of the olfactory system as lab and nab mice while not or only moderately responding to tmt responded to both the pleasant odor of female urine and the repugnant odor of butyric acid probably due to the strength of tmt a similar increase in corticosterone levels upon predator odor exposure was observed in all three groups together the results suggest that dependent on the genetic predisposition to extremes in anxiety related behavior mice differentially interpret the odor of a potential predator making this type of avoidance behavior highly predictable anxiety animal model tmt cat odor corticosterone hab,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
383,0,"Computational Color Harmony Based on Coloroid System This paper presents experimentally based rules and methods for the creation of harmonic color sets. First, dichromatic rules are presented which concern the harmony relationships of two hues. For an arbitrarily given hue pair, we define the just harmonic saturation values, resulting in minimally harmonic color pairs. These values express the fuzzy border between harmony and disharmony regions using a single scalar. Second, the value of harmony is defined corresponding to the contrast of lightness, i.e. the difference of perceptual lightness values. Third, we formulate the harmony value of the saturation contrast, depending on hue and lightness. The results of these investigations form a basis for a unified, coherent dichromatic harmony formula as well as for analysis of polychromatic color harmony. Introduced color harmony rules are based on Coloroid, which is one of the 5 - 6 main color-order systems and furthermore it is an aesthetically uniform continuous color space. Coloroid has simple closed forward and backward transformation formulas with the color space of CIE XYZ. It relies on a huge number of observations and experiments, and it is a very suitable tool of color dynamics for describing aesthetical relationships. It has been used in numerous architectural projects. The experimental data that may be retrieved from them are only partly processed and published so far. Our article utilizes a 'slice' of this database, together with additional complementary observations. This paper is the first of a planned series of articles, dealing with rules and coherences of color harmony based on the Coloroid system. color dynamics, coloroid color-order system, computational color harmony, environmental color design, human vision",computational color harmony based on coloroid system this paper presents experimentally based rules and methods for the creation of harmonic color sets first dichromatic rules are presented which concern the harmony relationships of two hues for an arbitrarily given hue pair we define the just harmonic saturation values resulting in minimally harmonic color pairs these values express the fuzzy border between harmony and disharmony regions using a single scalar second the value of harmony is defined corresponding to the contrast of lightness i e the difference of perceptual lightness values third we formulate the harmony value of the saturation contrast depending on hue and lightness the results of these investigations form a basis for a unified coherent dichromatic harmony formula as well as for analysis of polychromatic color harmony introduced color harmony rules are based on coloroid which is one of the 5 6 main color order systems and furthermore it is an aesthetically uniform continuous color space coloroid has simple closed forward and backward transformation formulas with the color space of cie xyz it relies on a huge number of observations and experiments and it is a very suitable tool of color dynamics for describing aesthetical relationships it has been used in numerous architectural projects the experimental data that may be retrieved from them are only partly processed and published so far our article utilizes a slice of this database together with additional complementary observations this paper is the first of a planned series of articles dealing with rules and coherences of color harmony based on the coloroid system color dynamics coloroid color order system computational color harmony environmental color design human vision,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
384,0,"Characteristics of a patient population seeking medical advice for nasal symptoms in Bulgaria Background The proportion of patients visiting general practitioners (GPs), otorhinolaryngologists (ORLs), and allergologists (ALRGs) for nasal complaints is unknown but important in estimating the number of subjects with nasal symptoms bothersome enough to warrant physician consultations and assessing nasal pathological conditions' burden on a national health care system. Objective The Symptoms of Nasal Inconvenience Fact Finding (SNIFF) survey was developed to (1) assess incidence of physician visits attributable to nasal complaints; (2) characterize patients' nasal conditions; and (3) outline differences across physician categories. Methods The SNIFF survey was completed over 20 days by Bulgarian GPs, ORLs, and ALRGs whom patients consulted for nasal symptoms. Survey forms differentiated type and severity of patients' conditions according to Allergic Rhinitis and its Impact on Asthma (ARIA) guidelines and ranked bothersome symptoms. Smell impairment, comorbidities, and prescription practices were documented. Results Sixty-nine physicians (30 GPs, 8 ORLs, 31 ALRGs) completed 1,685 surveys. The proportion of patients with nasal symptoms over the total patients seen was 15.7%: ALRGs, 18.0%; GPs, 14.6%; ORLs, 13.1%. Patients were classified as having intermittent (38.8%) or persistent (61.2%) rhinitis, with most having moderate/severe symptoms (94.4%). Congestion was the leading symptom in 59.1%. Smell was impaired in 69.8% of patients, asthma was present in 21.4%, and cough in 62.9%. ALRGs were more likely to diagnose and manage patients per ARIA guidelines than were ORLs or GPs. Conclusion The SNIFF survey results demonstrate congestion's role as a leading symptom motivating patients to seek medical advice. SNIFF also uncovered differences in practices among different categories of health care providers. []",characteristics of a patient population seeking medical advice for nasal symptoms in bulgaria background the proportion of patients visiting general practitioners gps otorhinolaryngologists orls and allergologists alrgs for nasal complaints is unknown but important in estimating the number of subjects with nasal symptoms bothersome enough to warrant physician consultations and assessing nasal pathological conditions burden on a national health care system objective the symptoms of nasal inconvenience fact finding sniff survey was developed to 1 assess incidence of physician visits attributable to nasal complaints 2 characterize patients nasal conditions and 3 outline differences across physician categories methods the sniff survey was completed over 20 days by bulgarian gps orls and alrgs whom patients consulted for nasal symptoms survey forms differentiated type and severity of patients conditions according to allergic rhinitis and its impact on asthma aria guidelines and ranked bothersome symptoms smell impairment comorbidities and prescription practices were documented results sixty nine physicians 30 gps 8 orls 31 alrgs completed 1 685 surveys the proportion of patients with nasal symptoms over the total patients seen was 15 7 alrgs 18 0 gps 14 6 orls 13 1 patients were classified as having intermittent 38 8 or persistent 61 2 rhinitis with most having moderate severe symptoms 94 4 congestion was the leading symptom in 59 1 smell was impaired in 69 8 of patients asthma was present in 21 4 and cough in 62 9 alrgs were more likely to diagnose and manage patients per aria guidelines than were orls or gps conclusion the sniff survey results demonstrate congestion s role as a leading symptom motivating patients to seek medical advice sniff also uncovered differences in practices among different categories of health care providers,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
385,0,"A longitudinal study of changing characteristics of self-reported taste and smell alterations in patients treated for lung cancer Purpose Taste and smell alterations (TSAs) are common symptoms in patients with cancer that may interfere with nutritional intake and quality of life. In this study, we explore and describe how characteristics of self-reported TSAs change in individuals with lung cancer over time using a multiple case study approach to present longitudinal data from individuals. Methods Patients under investigation for lung cancer were recruited from one university hospital in Sweden. The 52 patients providing data eligible for the analyses presented here were those treated for primary lung cancer with three measurement time-points, of which one was prior to treatment and two after treatment start. Four self-report instruments were used for data collection. These included the Taste and Smell Survey, used to characterize TSAs for each individual at the three time-points and instruments measuring nutritional status, symptom burden and well-being. Three patient cases are described in detail to illustrate variation in individual experiences of TSAs. Results The characteristics of the TSAs experienced changed over time for many of the individuals in this study, including those undergoing surgery or stereotactic radiotherapy. The case descriptions show how the individual experiences of TSAs and the impact on daily life of these symptoms not only depend on TSA characteristics, but may be influenced by contextual factors, e.g. other symptoms and life situation. Conclusions Our results suggest that healthcare professionals need to consider the variation in characteristics of TSAs among and within patients over time, and be attentive to individual experiences of TSAs. Longitudinal studies, Neoplasms, Olfaction disorders, Signs and symptoms, Taste disorders",a longitudinal study of changing characteristics of self reported taste and smell alterations in patients treated for lung cancer purpose taste and smell alterations tsas are common symptoms in patients with cancer that may interfere with nutritional intake and quality of life in this study we explore and describe how characteristics of self reported tsas change in individuals with lung cancer over time using a multiple case study approach to present longitudinal data from individuals methods patients under investigation for lung cancer were recruited from one university hospital in sweden the 52 patients providing data eligible for the analyses presented here were those treated for primary lung cancer with three measurement time points of which one was prior to treatment and two after treatment start four self report instruments were used for data collection these included the taste and smell survey used to characterize tsas for each individual at the three time points and instruments measuring nutritional status symptom burden and well being three patient cases are described in detail to illustrate variation in individual experiences of tsas results the characteristics of the tsas experienced changed over time for many of the individuals in this study including those undergoing surgery or stereotactic radiotherapy the case descriptions show how the individual experiences of tsas and the impact on daily life of these symptoms not only depend on tsa characteristics but may be influenced by contextual factors e g other symptoms and life situation conclusions our results suggest that healthcare professionals need to consider the variation in characteristics of tsas among and within patients over time and be attentive to individual experiences of tsas longitudinal studies neoplasms olfaction disorders signs and symptoms taste disorders,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
386,0,"Bacterial protein grown on natural gas as protein source in diets for Atlantic salmon, Salmo salar, in saltwater Bacterial protein meal (BPM) produced on natural gas was evaluated with respect to growth, nutrient digestibilities, feed conversion ratios, sensory quality, and histopathological indices in Atlantic salmon in saltwater. In the extruded diets, experimentally produced BPM accounted for 0, 10, or 20% of the ingredients or 0, 17.2, or 33.1% of dietary nitrogen, replacing high-quality fish meal. Each diet was fed to two groups of salmon with a mean initial weight of 1.4 kg for 5 months. The pens were organized in two randomized blocks. One block was located with one side of the pens exposed to the open sea. The other block was completely surrounded by other pens. During the experiment, the salmon increased to approximately 3.6--3.9 kg in weight. Analysis of variance revealed no significant (P>0.05) differences in growth, but regression analysis showed that fish weights at 2 and 5 months and growth rates for the whole experiment were slightly reduced with increasing content of BPM. No significant effects of diet were seen on dressed-out carcass, liver, or intestine to body weight percentages. Carcass and visceral fat and dry matter contents decreased with increasing dietary BPM. There was a trend (0.10≤P<0.05) that apparent digestibilities of nitrogen, fat, and energy were reduced when substituting fish meal with BPM, while the nitrogen retention was not significantly affected. Flesh carotenoid concentration and colour were not significantly affected by dietary composition, nor were any differences seen for sensory characteristics related to taste, smell or texture. Histological examination did not reveal abnormalities, or signs of allergic reaction against BPM components, and hematocrit values were within normal ranges. Significant block effects were seen for chemical composition of viscera, and digestibilities of nitrogen, fat, and energy. Single-cell protein (SCP), Bacterial protein meal, Atlantic salmon (), Digestibility, Histopathology, Sensory quality",bacterial protein grown on natural gas as protein source in diets for atlantic salmon salmo salar in saltwater bacterial protein meal bpm produced on natural gas was evaluated with respect to growth nutrient digestibilities feed conversion ratios sensory quality and histopathological indices in atlantic salmon in saltwater in the extruded diets experimentally produced bpm accounted for 0 10 or 20 of the ingredients or 0 17 2 or 33 1 of dietary nitrogen replacing high quality fish meal each diet was fed to two groups of salmon with a mean initial weight of 1 4 kg for 5 months the pens were organized in two randomized blocks one block was located with one side of the pens exposed to the open sea the other block was completely surrounded by other pens during the experiment the salmon increased to approximately 3 6 3 9 kg in weight analysis of variance revealed no significant p 0 05 differences in growth but regression analysis showed that fish weights at 2 and 5 months and growth rates for the whole experiment were slightly reduced with increasing content of bpm no significant effects of diet were seen on dressed out carcass liver or intestine to body weight percentages carcass and visceral fat and dry matter contents decreased with increasing dietary bpm there was a trend 0 10 p 0 05 that apparent digestibilities of nitrogen fat and energy were reduced when substituting fish meal with bpm while the nitrogen retention was not significantly affected flesh carotenoid concentration and colour were not significantly affected by dietary composition nor were any differences seen for sensory characteristics related to taste smell or texture histological examination did not reveal abnormalities or signs of allergic reaction against bpm components and hematocrit values were within normal ranges significant block effects were seen for chemical composition of viscera and digestibilities of nitrogen fat and energy single cell protein scp bacterial protein meal atlantic salmon digestibility histopathology sensory quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
387,0,"Empirical Research on Long-run Equilibrium Between Social Harmony and Social Security Incidents Disharmony in China primarily reflected in the income, education, employment. The research object of this paper was crime in social security incidents. Income inequality and education has been viewed as having important impact on crime. Many literatures reported that higher income inequality is associated with higher crime rates. Some literatures concluded education development can raise the residents' income level and reduce income inequality, thereby result in slower crime growth. In China, residents' income has increased largely. But at the same time, GINI coefficient has continued to improve in recent years, and the crime rate has continually increased. This paper analyzed the long-run and short-run relationships between property crime rate and income inequality, education, unemployment, based on vector error correction model. Variables in the model included per capita annual disposable income of Chinese urban households, GINI coefficient, and enrolment rate of junior secondary graduates entering senior secondary schools and unemployment rate. Data used are time series data from 1978 to 2007 in China. The result confirms the existence of long-run equilibrium relationship between income inequality, education and crime. And income and income inequality effect change in crime rate in short-run significantly. social security incidents, income inequality, education, vector error correction model, granger causality test",empirical research on long run equilibrium between social harmony and social security incidents disharmony in china primarily reflected in the income education employment the research object of this paper was crime in social security incidents income inequality and education has been viewed as having important impact on crime many literatures reported that higher income inequality is associated with higher crime rates some literatures concluded education development can raise the residents income level and reduce income inequality thereby result in slower crime growth in china residents income has increased largely but at the same time gini coefficient has continued to improve in recent years and the crime rate has continually increased this paper analyzed the long run and short run relationships between property crime rate and income inequality education unemployment based on vector error correction model variables in the model included per capita annual disposable income of chinese urban households gini coefficient and enrolment rate of junior secondary graduates entering senior secondary schools and unemployment rate data used are time series data from 1978 to 2007 in china the result confirms the existence of long run equilibrium relationship between income inequality education and crime and income and income inequality effect change in crime rate in short run significantly social security incidents income inequality education vector error correction model granger causality test,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
388,0,"Effect of thermal and photochemical degradation strategies on the deterioration of cellulose diacetate In this study, the effect of thermal and photochemical accelerated degradation on the deterioration pathways of cellulose diacetate was evaluated. The degradation induced under controlled experimental conditions was carefully monitored in order to investigate the correlation between specific degradation mechanisms and the visible signs of deterioration that are often encountered on cellulose acetate museum objects. In the time interval studied, thermally degraded samples did not show visible discoloration or noticeable vinegar smell, but appeared severely distorted. Samples degraded under UVA radiation did not show any significant sign of deterioration, while samples degraded under UVB and UVC radiations appeared discolored and released the typical vinegar odor. Samples degraded under UVB radiation were also brittle and prone to crazing. By monitoring the samples as they deteriorated over time, new insights into the degradation mechanisms were obtained. During thermal degradation, the experimental results showed that plasticizer diffusion through the polymer matrix is affected by the progressive loss of plasticizer that occurred during the degradation experiment. During photo-degradation experiments, yellowness induced by UVC and UVB radiations was found to be reversible by subsequent exposure to UVA radiation, while the depth of the degradation appeared to be one of the key factors that led to brittleness and the appearance of crazing. Cellulose diacetate, Accelerated degradation, Plasticizer loss, Deacetylation, Yellowing, Depth of degradation",effect of thermal and photochemical degradation strategies on the deterioration of cellulose diacetate in this study the effect of thermal and photochemical accelerated degradation on the deterioration pathways of cellulose diacetate was evaluated the degradation induced under controlled experimental conditions was carefully monitored in order to investigate the correlation between specific degradation mechanisms and the visible signs of deterioration that are often encountered on cellulose acetate museum objects in the time interval studied thermally degraded samples did not show visible discoloration or noticeable vinegar smell but appeared severely distorted samples degraded under uva radiation did not show any significant sign of deterioration while samples degraded under uvb and uvc radiations appeared discolored and released the typical vinegar odor samples degraded under uvb radiation were also brittle and prone to crazing by monitoring the samples as they deteriorated over time new insights into the degradation mechanisms were obtained during thermal degradation the experimental results showed that plasticizer diffusion through the polymer matrix is affected by the progressive loss of plasticizer that occurred during the degradation experiment during photo degradation experiments yellowness induced by uvc and uvb radiations was found to be reversible by subsequent exposure to uva radiation while the depth of the degradation appeared to be one of the key factors that led to brittleness and the appearance of crazing cellulose diacetate accelerated degradation plasticizer loss deacetylation yellowing depth of degradation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
389,0,"Identifying Improvement Potential in Evolving Product Line Infrastructures: 3 Case Studies Successful software products evolve continuously to meet the changing stakeholder requirements. For software product lines, an additional challenge is that variabilities, characteristics that vary among products, change as well over time. That challenge must be carefully tackled during the evolution of the product line infrastructure. This is a significant problem for many software development organizations, as practical guidelines on how to evolve core assets, and especially source code, are missing. This paper investigates how to achieve ""good enough"" variability management during the evolution of variation in software design and implementation assets. As a first contribution, we present a customizable goal-based approach which helps to identify improvement potential in existing core assets to ease evolution. To find concrete ways to improve the product line infrastructure, we list the typical symptoms of variability ""code smells"" and show how to refine them to root causes, questions, and finally to metrics that can be extracted from large code bases. As a second main contribution, we show how this method was applied to evaluate the reuse quality of three industrial embedded systems. These systems are implemented in C or C++ and use Conditional Compilation as the main variability mechanism. We also introduce the analysis and refactoring tool set that was used in the case studies and discuss the lessons learnt. PuLSE-E, goal-based product line measurement, industrial case study, product line code evolution, variability code smells",identifying improvement potential in evolving product line infrastructures 3 case studies successful software products evolve continuously to meet the changing stakeholder requirements for software product lines an additional challenge is that variabilities characteristics that vary among products change as well over time that challenge must be carefully tackled during the evolution of the product line infrastructure this is a significant problem for many software development organizations as practical guidelines on how to evolve core assets and especially source code are missing this paper investigates how to achieve good enough variability management during the evolution of variation in software design and implementation assets as a first contribution we present a customizable goal based approach which helps to identify improvement potential in existing core assets to ease evolution to find concrete ways to improve the product line infrastructure we list the typical symptoms of variability code smells and show how to refine them to root causes questions and finally to metrics that can be extracted from large code bases as a second main contribution we show how this method was applied to evaluate the reuse quality of three industrial embedded systems these systems are implemented in c or c and use conditional compilation as the main variability mechanism we also introduce the analysis and refactoring tool set that was used in the case studies and discuss the lessons learnt pulse e goal based product line measurement industrial case study product line code evolution variability code smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
390,0,"Improving Object-oriented Design Quality: A Portfolio- and Measurement-based Approach Current software development trends have shortened release cycles and forced developers to implement short-term solutions that cannot cope with increasing product complexity. This phenomenon of introducing hasty design choices or applying bad design practices becomes something known as technical debt, in particular design debt. To pay off this debt, the literature offers approaches for identifying these design flaws; however, few methods for properly prioritizing investment efforts are available. In this paper, we propose an approach that supports the decision-making process regarding design improvements. It identifies violations of design best practices that are then arranged within a two-dimensional portfolio matrix. This matrix combines the importance of practices of design quality with actual achievement relative to a benchmark suite. To show the application of the approach in a quality-improvement process, we performed a feasibility study on three open-source projects and a benchmark suite containing 50 projects. This study clearly shows that the importance of the design best practices greatly impacts the improvement decisions and must be aligned with the strategic quality goals of the product. design debt, design quality, software quality, technical debt",improving object oriented design quality a portfolio and measurement based approach current software development trends have shortened release cycles and forced developers to implement short term solutions that cannot cope with increasing product complexity this phenomenon of introducing hasty design choices or applying bad design practices becomes something known as technical debt in particular design debt to pay off this debt the literature offers approaches for identifying these design flaws however few methods for properly prioritizing investment efforts are available in this paper we propose an approach that supports the decision making process regarding design improvements it identifies violations of design best practices that are then arranged within a two dimensional portfolio matrix this matrix combines the importance of practices of design quality with actual achievement relative to a benchmark suite to show the application of the approach in a quality improvement process we performed a feasibility study on three open source projects and a benchmark suite containing 50 projects this study clearly shows that the importance of the design best practices greatly impacts the improvement decisions and must be aligned with the strategic quality goals of the product design debt design quality software quality technical debt,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
391,0,"Differential electronic nose of two chemo sensor arrays for odor discrimination The paper reports an improved method for electronic nose that combines two identical or very similar sensor arrays mounted into two packages, each containing one array. The distance between the measured sensor signals of the odor samples is then analyzed by two independent but identical sensor arrays. The difference of the appropriate sensor signals generated by both arrays is subject to 2-dimensional convolution, greatly enhancing the sensitivity of the nose. The presented system is called the ``differential electronic nose'' (DEN-nose). The experiments of the recognition of the cigarette smells have proved that the proposed nose system based on the difference of data, generated by two different sensor arrays have significantly enhanced the ability of E-nose for recognition of the close odors. Electronic nose, Differential system, Odor recognition, Control of forgery of products",differential electronic nose of two chemo sensor arrays for odor discrimination the paper reports an improved method for electronic nose that combines two identical or very similar sensor arrays mounted into two packages each containing one array the distance between the measured sensor signals of the odor samples is then analyzed by two independent but identical sensor arrays the difference of the appropriate sensor signals generated by both arrays is subject to 2 dimensional convolution greatly enhancing the sensitivity of the nose the presented system is called the differential electronic nose den nose the experiments of the recognition of the cigarette smells have proved that the proposed nose system based on the difference of data generated by two different sensor arrays have significantly enhanced the ability of e nose for recognition of the close odors electronic nose differential system odor recognition control of forgery of products,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
392,0,"Study on Vaginitis Among Intrauterine Contraceptive Device Users in Ibadan, South-western Nigeria Objective To investigate IUD-related vaginitis in IUD users at the University College Hospital Ibadan, South-western Nigeria. Methods A prospective cohort study in IUD users present with abnormal vaginal discharge at the family planning clinic of the University College Hospital, Ibadan was conducted between 10th of October, 2008 and 31st of May 2009. High Vaginal Swabs were taken from the clients for microbiology, culture and drug sensitivity test. Diagnosis of bacterial vaginosis was made based on gram stained vaginal smear using the standard Nugents criteria. Other aetiological agents were identified either on wet preparation or culture using standard techniques. Treatment given was by the family planning nurse, as was the protocol at the family planning clinic. Results Twenty-four IUD users present at the family planning clinic with vaginal discharge were studied. Their ages ranged 28--51 years(38.14 $\pm$ 5.9 years). Mean parity was 4.4 $\pm$ 1.4. All the women were married and all used CuT 380A. The mean duration of IUCD use was 2.5 years only. Majority (46%) had used it for more than 3 years and most (75%) of the visits were unscheduled. All the clients complained of abnormal vaginal discharge which was copious, watery and foul smelling, or clumpy. Nine users (37.5%) complained of pruritus vulvae, 3 users (12.5%) lower abdominal pain, 1 user (4.2%) dyspareunia and 1 (4.2%) dysuria. The diagnosis of bacterial vaginosis was made in 16 (66.7%) and vaginal candidiasis in 8 (33.3%). Age less than 40 years, Christianity and IUD use more than 3 years were associated with a higher risk of bacterial vaginosis (OR=1.29, 1.67 and 6.6, respectively), while women above 40 years, Muslims and women with lower educational status had a higher risk of candida-related vaginitis (OR=1.67 and 4.2, respectively). Eight clients (33.3%) were treated for candidiasis with antifungals (3 empirically, and 5 after obtaining results of vaginal swab), 9 (37.5%) were given oral metronidazole, 3 patients were referred to the gynaecological emergency unit on account of abdominal pain and 4 did not return for follow up. Conclusion IUD associated vaginitis is a disturbing condition causing unscheduled visits among IUD users. Bacterial vaginosis and Candidia albicans are major aetiologies in south western Nigeria Ibadan. Persistent discharge is a documented reason for discontinuation of IUD use. Periodic empirical treatment for candidiasis and bacterial vaginosis with antifungals and oral metronidazole is advocated. This may reduce the discomfort caused by IUD-related vaginitis, the risk of PID and other risks exposed to the IUD users and ensure continued use of the IUD. intrauterine devices, vaginitis, contraception, Ibadan, Nigeria",study on vaginitis among intrauterine contraceptive device users in ibadan south western nigeria objective to investigate iud related vaginitis in iud users at the university college hospital ibadan south western nigeria methods a prospective cohort study in iud users present with abnormal vaginal discharge at the family planning clinic of the university college hospital ibadan was conducted between 10th of october 2008 and 31st of may 2009 high vaginal swabs were taken from the clients for microbiology culture and drug sensitivity test diagnosis of bacterial vaginosis was made based on gram stained vaginal smear using the standard nugents criteria other aetiological agents were identified either on wet preparation or culture using standard techniques treatment given was by the family planning nurse as was the protocol at the family planning clinic results twenty four iud users present at the family planning clinic with vaginal discharge were studied their ages ranged 28 51 years 38 14 pm 5 9 years mean parity was 4 4 pm 1 4 all the women were married and all used cut 380a the mean duration of iucd use was 2 5 years only majority 46 had used it for more than 3 years and most 75 of the visits were unscheduled all the clients complained of abnormal vaginal discharge which was copious watery and foul smelling or clumpy nine users 37 5 complained of pruritus vulvae 3 users 12 5 lower abdominal pain 1 user 4 2 dyspareunia and 1 4 2 dysuria the diagnosis of bacterial vaginosis was made in 16 66 7 and vaginal candidiasis in 8 33 3 age less than 40 years christianity and iud use more than 3 years were associated with a higher risk of bacterial vaginosis or 1 29 1 67 and 6 6 respectively while women above 40 years muslims and women with lower educational status had a higher risk of candida related vaginitis or 1 67 and 4 2 respectively eight clients 33 3 were treated for candidiasis with antifungals 3 empirically and 5 after obtaining results of vaginal swab 9 37 5 were given oral metronidazole 3 patients were referred to the gynaecological emergency unit on account of abdominal pain and 4 did not return for follow up conclusion iud associated vaginitis is a disturbing condition causing unscheduled visits among iud users bacterial vaginosis and candidia albicans are major aetiologies in south western nigeria ibadan persistent discharge is a documented reason for discontinuation of iud use periodic empirical treatment for candidiasis and bacterial vaginosis with antifungals and oral metronidazole is advocated this may reduce the discomfort caused by iud related vaginitis the risk of pid and other risks exposed to the iud users and ensure continued use of the iud intrauterine devices vaginitis contraception ibadan nigeria,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
393,0,"Sensory QFD: Matching Sensation with Measurement The development of attractive and competitive products is not a question of unique features but of best quality for money. However, defining `quality' from the customers' perspective and controlling it throughout the product development process is a fuzzy and arduous task. Especially for producers of exchangeable consumer durables, which are, simultaneously, fighting cost pressure and shortening product and technology life cycles. To solve this dilemma of speed and focus, a proper methodology is needed to enhance customer orientation and systematically integrate customer requirements into the product development process. Quality Function Deployment (QFD) and its derivates represent trailblazers for this kind of systematic, quality focused and customer oriented product development. Nevertheless they are largely dependent on the quality of their input. The ``resolution'' of requirements is crucial for the outcome. In case of single sensual perceptions as haptics or optics this challenge becomes obvious. An appropriate survey method to identify requirements regarding those sensations can be found with food science. Sensory studies for the description and discrimination of single-sense impressions are used to evaluate and improve new products, usually regarding taste and smell. The paper presents the integration of Descriptive Analysis (DA) and QFD for the case of surface haptics. Next to the fact that DA is rather new to the investigation of haptics, the integration demands a matching of steps and a combination of quantitative (DA) and qualitative (QFD) approaches. Nevertheless, this traceable and repeatable proceeding allows for an impact driven resource deployment and, for this reason, a more effective product development process, as well as a sustainable improvement in perceived product quality. A case of leather surfaces serves as an example for this matter. Perceived Quality, Product Design, Quality Function Deployment",sensory qfd matching sensation with measurement the development of attractive and competitive products is not a question of unique features but of best quality for money however defining quality from the customers perspective and controlling it throughout the product development process is a fuzzy and arduous task especially for producers of exchangeable consumer durables which are simultaneously fighting cost pressure and shortening product and technology life cycles to solve this dilemma of speed and focus a proper methodology is needed to enhance customer orientation and systematically integrate customer requirements into the product development process quality function deployment qfd and its derivates represent trailblazers for this kind of systematic quality focused and customer oriented product development nevertheless they are largely dependent on the quality of their input the resolution of requirements is crucial for the outcome in case of single sensual perceptions as haptics or optics this challenge becomes obvious an appropriate survey method to identify requirements regarding those sensations can be found with food science sensory studies for the description and discrimination of single sense impressions are used to evaluate and improve new products usually regarding taste and smell the paper presents the integration of descriptive analysis da and qfd for the case of surface haptics next to the fact that da is rather new to the investigation of haptics the integration demands a matching of steps and a combination of quantitative da and qualitative qfd approaches nevertheless this traceable and repeatable proceeding allows for an impact driven resource deployment and for this reason a more effective product development process as well as a sustainable improvement in perceived product quality a case of leather surfaces serves as an example for this matter perceived quality product design quality function deployment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
394,0,"Consumer perception of boar meat as affected by labelling information, malodorous compounds and sensitivity to androstenone This study aimed to assess the influence of two label conditions on the acceptance of boar meat. A central location test was conducted with 145 consumers each assessing 4 pieces of pork loin. Samples varied with respect to two factors: actual meat type (boar vs. standard pork) and label information (young boar meat vs. pork). Androstenone and skatole levels in the tested boar meat ranged from 0.51 to 2.72μg/g and 0.01 to 0.23μg/g melted fat, respectively. Consumers' sensitivity to and appreciation of androstenone and skatole odour was determined through a smell experiment. The acceptance of taste, tenderness, juiciness, and overall liking was neither influenced by the label information nor by the meat type. Twenty-seven % of all participants were classified as insensitive to androstenone odour, whereas 52% perceived it as positive and 21% as negative. Consumers who disliked the androstenone odour indicated a higher disliking of boar meat. Meat quality, Boar taint, Consumer acceptance, Label information, Androstenone sensitivity, Sensory evaluation",consumer perception of boar meat as affected by labelling information malodorous compounds and sensitivity to androstenone this study aimed to assess the influence of two label conditions on the acceptance of boar meat a central location test was conducted with 145 consumers each assessing 4 pieces of pork loin samples varied with respect to two factors actual meat type boar vs standard pork and label information young boar meat vs pork androstenone and skatole levels in the tested boar meat ranged from 0 51 to 2 72 g g and 0 01 to 0 23 g g melted fat respectively consumers sensitivity to and appreciation of androstenone and skatole odour was determined through a smell experiment the acceptance of taste tenderness juiciness and overall liking was neither influenced by the label information nor by the meat type twenty seven of all participants were classified as insensitive to androstenone odour whereas 52 perceived it as positive and 21 as negative consumers who disliked the androstenone odour indicated a higher disliking of boar meat meat quality boar taint consumer acceptance label information androstenone sensitivity sensory evaluation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
395,0,"Creative Foresight Space and the Futures Window: Using visual weak signals to enhance anticipation and innovation This paper presents a new method, the Futures Window (FW), where visual weak signals are used to trigger futures thinking and innovation in organisations [1]. Weak signals are signs anticipating or pointing to possibly emerging new issues. Weak signals can be perceived through all five human senses: they can be seen, heard, smelled, felt or even tasted. Visual weak signals are weak signals shown in a visual form. They can be represented as images: photos, paintings, drawings, video clips, etc. [2]. The method used by the Futures Window is to display weak signals in a visual form as a slide show on a large screen with the aim of encouraging people to anticipate and innovate futures. The Futures Window could be a central tool to be used in Creative Foresight Spaces (CFS).11The idea for the concept of Creative Foresight Space originated during two research projects ``Technology Futures Forum'' and ``SOMED'' (Social media at the crossroads of physical, virtual and digital worlds), initiated by Dr. Sirkka Heinonen, and first described in the conference presentation by Toni Ahlqvist, Minna Halonen and Sirkka Heinonen ``Social Media Applications for Innovative Working Environments'' 9th International Conference of Finland Futures Research Centre and Finland Futures Academy Culture and Innovation -- The search for Creative Power in Economics and Societies. Session on Social Media and Technology I. 6--8 June 2007, Turku, Finland. See also p. 68 of the report ``Making Sense of Social media -- Interviews and Narratives'' by Sirkka Heinonen and Minna Halonen Somed Foresight Report 2. Research report VTT-R-04539-07. http://owela.vtt.fi/owela/uploads/2007/11/making-sense-of-social-media-vtt-r-04539-07.pdf. The concept of CFS is offered as one way of responding to the growing demand for innovation in corporations and work organisations. The FW method was tested at VTT Technical Research Centre (http://www.vtt.fi/) in Finland in two pilots in 2006--2007. A survey was conducted to gather employee's opinions of the FW experiments. The results show that employees considered the FW positively and they confirmed that it stimulated futures thinking. The results of this study are encouraging for further developing the Futures Window as a key element of CFS. This article will present the concept of Creative Foresight Spaces in detail together with its possible applications. []",creative foresight space and the futures window using visual weak signals to enhance anticipation and innovation this paper presents a new method the futures window fw where visual weak signals are used to trigger futures thinking and innovation in organisations 1 weak signals are signs anticipating or pointing to possibly emerging new issues weak signals can be perceived through all five human senses they can be seen heard smelled felt or even tasted visual weak signals are weak signals shown in a visual form they can be represented as images photos paintings drawings video clips etc 2 the method used by the futures window is to display weak signals in a visual form as a slide show on a large screen with the aim of encouraging people to anticipate and innovate futures the futures window could be a central tool to be used in creative foresight spaces cfs 11the idea for the concept of creative foresight space originated during two research projects technology futures forum and somed social media at the crossroads of physical virtual and digital worlds initiated by dr sirkka heinonen and first described in the conference presentation by toni ahlqvist minna halonen and sirkka heinonen social media applications for innovative working environments 9th international conference of finland futures research centre and finland futures academy culture and innovation the search for creative power in economics and societies session on social media and technology i 6 8 june 2007 turku finland see also p 68 of the report making sense of social media interviews and narratives by sirkka heinonen and minna halonen somed foresight report 2 research report vtt r 04539 07 http owela vtt fi owela uploads 2007 11 making sense of social media vtt r 04539 07 pdf the concept of cfs is offered as one way of responding to the growing demand for innovation in corporations and work organisations the fw method was tested at vtt technical research centre http www vtt fi in finland in two pilots in 2006 2007 a survey was conducted to gather employee s opinions of the fw experiments the results show that employees considered the fw positively and they confirmed that it stimulated futures thinking the results of this study are encouraging for further developing the futures window as a key element of cfs this article will present the concept of creative foresight spaces in detail together with its possible applications,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
396,0,"Mints, smells and traditional uses in Thessaloniki (Greece) and other Mediterranean countries The herbs of the ``mint'' group traded in the herbal market of Thessaloniki include eight taxa, members of two genera, Acinos (two species) and Mentha (four species and two hybrids). The essential oil content of 72 samples examined ranged from traces up to 1.69ml/100g of dry weight. Besides three almost scentless samples, the different ``mints'' are distinguished according to their prominent smell differences, i.e. samples with a pungent, musty and sweet type of smell. As a result, the commercial names attributed to them correspond to a particular type of smell and not to a particular taxon. A number of 29 medicinal uses were recorded in total. In most cases uses were not associated with particular taxa but were rather determined by plant smells. A literature survey has shown that the ``mints'' traded in Thessaloniki are also used as herbal medicines all over the Mediterranean area, with 67 different therapeutic uses. Among them the 22 uses, already mentioned by Dioscurides, show that the utilization of ``mints'' as herbal medicines in the Mediterranean countries has a long tradition. Mint, Smell, Herbal market, Traditional medicinal uses, Greece, Thessaloniki, Mediterranean, Dioscurides",mints smells and traditional uses in thessaloniki greece and other mediterranean countries the herbs of the mint group traded in the herbal market of thessaloniki include eight taxa members of two genera acinos two species and mentha four species and two hybrids the essential oil content of 72 samples examined ranged from traces up to 1 69ml 100g of dry weight besides three almost scentless samples the different mints are distinguished according to their prominent smell differences i e samples with a pungent musty and sweet type of smell as a result the commercial names attributed to them correspond to a particular type of smell and not to a particular taxon a number of 29 medicinal uses were recorded in total in most cases uses were not associated with particular taxa but were rather determined by plant smells a literature survey has shown that the mints traded in thessaloniki are also used as herbal medicines all over the mediterranean area with 67 different therapeutic uses among them the 22 uses already mentioned by dioscurides show that the utilization of mints as herbal medicines in the mediterranean countries has a long tradition mint smell herbal market traditional medicinal uses greece thessaloniki mediterranean dioscurides,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
397,0,"Image display system using bamboo-blind type screen that can discharge smell In order to promote the realistic sensations of visuals, a display system, in which smell along with air was discharged through screen to a viewer, was invented. A bamboo-blind screen where thin rods and spaces were arranged in the vertical direction was used. For the alley type screen, the visuals were displayed using projectors. Both airflow and scent generators were attached on the back of the screen. This work insinuated the following details; the direction of airflow was controlled by installing blades functions and smell was able to be directed and oozed toward expected locations. Also, if the screen was large enough and an animated series of visuals was presented, the alley type of display enabled to remain the high quality of visuals. Applications to digital signage and large-screen virtual game etc. can be expected. image processing, image display system, bamboo blind type screen, discharge smell, vertical direction, airflow, scent generators, installing blades functions, digital signage, large-screen virtual game, Blades, Visualization, Wind speed, Velocity measurement, Discharges (electric), Psychology, Image quality, Image Display, Smell, Current of Air, Sense of Touch, Realistic Sensation, Virtual Reality",image display system using bamboo blind type screen that can discharge smell in order to promote the realistic sensations of visuals a display system in which smell along with air was discharged through screen to a viewer was invented a bamboo blind screen where thin rods and spaces were arranged in the vertical direction was used for the alley type screen the visuals were displayed using projectors both airflow and scent generators were attached on the back of the screen this work insinuated the following details the direction of airflow was controlled by installing blades functions and smell was able to be directed and oozed toward expected locations also if the screen was large enough and an animated series of visuals was presented the alley type of display enabled to remain the high quality of visuals applications to digital signage and large screen virtual game etc can be expected image processing image display system bamboo blind type screen discharge smell vertical direction airflow scent generators installing blades functions digital signage large screen virtual game blades visualization wind speed velocity measurement discharges electric psychology image quality image display smell current of air sense of touch realistic sensation virtual reality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
398,0,"A Research on the Interactive Landscape Design of the Brownfields Based on Multi-Dimensional Perception With the rapid development of urbanization, a lot of industrial land has become the Brownfield that ``Nobody cares about''. At present, in the regeneration process of Brownfield, there is a lack of consideration of interactive landscape. On the basis of fieldwork, this paper analyzes representative reconstruction cases for Brownfield at home and abroad to study the types, characteristics and functions of interactive landscape in the regeneration of Brownfield. From five aspects of vision, hearing, smell, touch, comprehensive perception, put forward the interactive landscape construction manner of change of light and color, melodious voice, brown texture, smell and memory, and integrated sensory. These are intended to to improve interestingness and participation of Brownfield landscape. architecture, interactive systems, land use planning, structural engineering computing, interactive landscape design, multidimensional perception, Brownfield landscape, representative reconstruction, urbanization, industrial land, Brownfield regeneration, vacant lands, abandoned lands, Visualization, Color, History, Auditory system, Olfactory, Conferences, Urban areas, multi-dimensional perception, regeneration of the brownfield, landscape design, interactive landscape",a research on the interactive landscape design of the brownfields based on multi dimensional perception with the rapid development of urbanization a lot of industrial land has become the brownfield that nobody cares about at present in the regeneration process of brownfield there is a lack of consideration of interactive landscape on the basis of fieldwork this paper analyzes representative reconstruction cases for brownfield at home and abroad to study the types characteristics and functions of interactive landscape in the regeneration of brownfield from five aspects of vision hearing smell touch comprehensive perception put forward the interactive landscape construction manner of change of light and color melodious voice brown texture smell and memory and integrated sensory these are intended to to improve interestingness and participation of brownfield landscape architecture interactive systems land use planning structural engineering computing interactive landscape design multidimensional perception brownfield landscape representative reconstruction urbanization industrial land brownfield regeneration vacant lands abandoned lands visualization color history auditory system olfactory conferences urban areas multi dimensional perception regeneration of the brownfield landscape design interactive landscape,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
399,0,"Fruit fly optimization algorithm based on differential evolution and its application on gasification process operation optimization The expression of the smell concentration judgment value is significantly important in the application of the fruit fly optimization algorithm (FOA). The original FOA can only solve problems that have optimal solutions in zero vicinity. To make FOA more universal for the continuous optimization problems, especially for those problems with optimal solutions that are not zero. This paper proposes an improved fruit fly optimization algorithm based on differential evolution (DFOA) by modifying the expression of the smell concentration judgment value and by introducing a differential vector to replace the stochastic search. Through numerical experiments based on 12 benchmark instances, experimental results show that the improved DFOA has a stronger global search ability, faster convergence, and convergence stability in high-dimensional functions than the original FOA and evolutionary algorithms from literature. The DFOA is also applied to optimize the operation of the Texaco gasification process by maximizing the syngas yield using two decision variables, i.e., oxygen--coal ratio and coal concentration. The results show that DFOA can quickly get the optimal output, demonstrating the effectiveness of DFOA. Fruit fly optimization algorithm, Smell concentration judgment, Differential evolution, Coal gasification",fruit fly optimization algorithm based on differential evolution and its application on gasification process operation optimization the expression of the smell concentration judgment value is significantly important in the application of the fruit fly optimization algorithm foa the original foa can only solve problems that have optimal solutions in zero vicinity to make foa more universal for the continuous optimization problems especially for those problems with optimal solutions that are not zero this paper proposes an improved fruit fly optimization algorithm based on differential evolution dfoa by modifying the expression of the smell concentration judgment value and by introducing a differential vector to replace the stochastic search through numerical experiments based on 12 benchmark instances experimental results show that the improved dfoa has a stronger global search ability faster convergence and convergence stability in high dimensional functions than the original foa and evolutionary algorithms from literature the dfoa is also applied to optimize the operation of the texaco gasification process by maximizing the syngas yield using two decision variables i e oxygen coal ratio and coal concentration the results show that dfoa can quickly get the optimal output demonstrating the effectiveness of dfoa fruit fly optimization algorithm smell concentration judgment differential evolution coal gasification,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
400,0,"Smell Peak Prediction During Black Tea Fermentation Process Using Time-Delay Neural Network on Electronic Nose Data Fermentation process in black tea manufacturing plays the key role in determining the quality of finished tea. During this process, a complex chain of biochemical changes occurs and the process should be terminated once the optimum fermentation point is reached. Present day practice for detection of optimum fermentation point is purely subjective, and is carried out by experienced industry personnel. Even though chemical methods are available, but they are expensive, time-consuming and offline. A study has been made on real time smell monitoring of black tea during fermentation process using electronic nose and is reported in this paper. Time-delay neural network (TDNN) architecture has been used on time series data obtained from electronic nose for smell peak prediction during the fermentation process. The online predicted result using TDNN seems very promising to detect the optimum fermentation time for black tea manufacturing process beverages, electronic noses, fermentation, manufacturing processes, neural net architecture, time series, smell peak prediction, black tea fermentation process, time-delay neural network, electronic nose data, black tea manufacturing, biochemical changes, optimum fermentation point detection, TDNN architecture, time series data, Neural networks, Electronic noses, Sensor arrays, Manufacturing processes, Gas detectors, Monitoring, Instruments, Data acquisition, Glass, Personnel",smell peak prediction during black tea fermentation process using time delay neural network on electronic nose data fermentation process in black tea manufacturing plays the key role in determining the quality of finished tea during this process a complex chain of biochemical changes occurs and the process should be terminated once the optimum fermentation point is reached present day practice for detection of optimum fermentation point is purely subjective and is carried out by experienced industry personnel even though chemical methods are available but they are expensive time consuming and offline a study has been made on real time smell monitoring of black tea during fermentation process using electronic nose and is reported in this paper time delay neural network tdnn architecture has been used on time series data obtained from electronic nose for smell peak prediction during the fermentation process the online predicted result using tdnn seems very promising to detect the optimum fermentation time for black tea manufacturing process beverages electronic noses fermentation manufacturing processes neural net architecture time series smell peak prediction black tea fermentation process time delay neural network electronic nose data black tea manufacturing biochemical changes optimum fermentation point detection tdnn architecture time series data neural networks electronic noses sensor arrays manufacturing processes gas detectors monitoring instruments data acquisition glass personnel,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
401,0,"Food image presentation system that discharge smell through screen and psychological effect The author et al. are currently engaged in a project for an image displaying system with a screen from which smells are discharged for users, together with images, aiming at applying it to digital signage and for other purposes in order to enhance the realistic sensation of the food images. The author et al. conducted experiments in presenting food images and discharging smells from the same position, and analyzed the users' psychological impact. A subject questionnaire and a cerebral blood-flow meter were used for the analysis. In the first experiment, it was clarified that when an airflow and a smell were discharged in conformity with the image of cooking with a steaming hot pot, an inhaling action occurred and smell perception rate was enhanced. In the second experiment, when a smell fit with a food image was discharged, the realistic sensation and the oxyhemoglobin rose in the vicinity of the temple because the salivation central nerves became active. image processing, food image presentation system, image displaying system, cerebral blood-flow meter, oxyhemoglobin rose, salivation central nerves, digital signage, Discharges (electric), Psychology, Blood flow, Visualization, Face, Communications technology, Cameras, Food Image, Smell, Presence, Saliva Central Nerves, Blood Flow, Virtual Reality",food image presentation system that discharge smell through screen and psychological effect the author et al are currently engaged in a project for an image displaying system with a screen from which smells are discharged for users together with images aiming at applying it to digital signage and for other purposes in order to enhance the realistic sensation of the food images the author et al conducted experiments in presenting food images and discharging smells from the same position and analyzed the users psychological impact a subject questionnaire and a cerebral blood flow meter were used for the analysis in the first experiment it was clarified that when an airflow and a smell were discharged in conformity with the image of cooking with a steaming hot pot an inhaling action occurred and smell perception rate was enhanced in the second experiment when a smell fit with a food image was discharged the realistic sensation and the oxyhemoglobin rose in the vicinity of the temple because the salivation central nerves became active image processing food image presentation system image displaying system cerebral blood flow meter oxyhemoglobin rose salivation central nerves digital signage discharges electric psychology blood flow visualization face communications technology cameras food image smell presence saliva central nerves blood flow virtual reality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
402,0,"Experience report: Evaluating the effectiveness of decision trees for detecting code smells Developers continuously maintain software systems to adapt to new requirements and to fix bugs. Due to the complexity of maintenance tasks and the time-to-market, developers make poor implementation choices, also known as code smells. Studies indicate that code smells hinder comprehensibility, and possibly increase change- and fault-proneness. Therefore, they must be identified to enable the application of corrections. The challenge is that the inaccurate definitions of code smells make developers disagree whether a piece of code is a smell or not, consequently, making difficult creation of a universal detection solution able to recognize smells in different software projects. Several works have been proposed to identify code smells but they still report inaccurate results and use techniques that do not present to developers a comprehensive explanation how these results have been obtained. In this experimental report we study the effectiveness of the Decision Tree algorithm to recognize code smells. For this, it was applied in a dataset containing 4 open source projects and the results were compared with the manual oracle, with existing detection approaches and with other machine learning algorithms. The results showed that the approach was able to effectively learn rules for the detection of the code smells studied. The results were even better when genetic algorithms are used to pre-select the metrics to use. decision trees, genetic algorithms, learning (artificial intelligence), program debugging, software maintenance, software quality, decision trees, code smells, software systems, bugs, maintenance tasks, universal detection solution, software projects, decision tree algorithm, manual oracle, machine learning algorithms, genetic algorithms, Decision trees, Measurement, Machine learning algorithms, Software algorithms, Algorithm design and analysis, Software, Genetic algorithms, Software Quality, Code Smells, Decision Tree, Genetic Algorithm",experience report evaluating the effectiveness of decision trees for detecting code smells developers continuously maintain software systems to adapt to new requirements and to fix bugs due to the complexity of maintenance tasks and the time to market developers make poor implementation choices also known as code smells studies indicate that code smells hinder comprehensibility and possibly increase change and fault proneness therefore they must be identified to enable the application of corrections the challenge is that the inaccurate definitions of code smells make developers disagree whether a piece of code is a smell or not consequently making difficult creation of a universal detection solution able to recognize smells in different software projects several works have been proposed to identify code smells but they still report inaccurate results and use techniques that do not present to developers a comprehensive explanation how these results have been obtained in this experimental report we study the effectiveness of the decision tree algorithm to recognize code smells for this it was applied in a dataset containing 4 open source projects and the results were compared with the manual oracle with existing detection approaches and with other machine learning algorithms the results showed that the approach was able to effectively learn rules for the detection of the code smells studied the results were even better when genetic algorithms are used to pre select the metrics to use decision trees genetic algorithms learning artificial intelligence program debugging software maintenance software quality decision trees code smells software systems bugs maintenance tasks universal detection solution software projects decision tree algorithm manual oracle machine learning algorithms genetic algorithms decision trees measurement machine learning algorithms software algorithms algorithm design and analysis software genetic algorithms software quality code smells decision tree genetic algorithm,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
403,0,"Detection of cigarettes and other tobacco products by giant African pouched rats (Cricetomys gambianus) If the illicit tobacco trade were eliminated, governments could gain at least $31.3 billion a year, and more than 164,000 premature deaths a year could be avoided after 2030 (Joossens, Merriman, Ross, and Raw, 2009). Dogs have been used successfully in tobacco control programs, and there is a good chance that rats could also play an important role. In the present experiment, giant African pouched rats were trained to respond to filters that had been stored together with cigarettes (i.e., soaked) and to not respond to filters that had been soaked with noncigarette items. Generalization to untrained types of tobacco was then tested. The sensitivity of 4 rats trained on filters soaked with 1 of 7 types of cigarettes ranged from 86% to 100% (mean, 95%). There was very little evidence of generalization when the rats were tested on tobacco leaves and snuff but good evidence of generalization when the rats were tested on cigarettes that had been soaked with strong-smelling additives. These findings suggest that rats may be a valuable asset in the global effort to control illicit cigarette trade. tobacco smuggling, scent detection, generalization, work animals, pouched rats, hit positive indication rate",detection of cigarettes and other tobacco products by giant african pouched rats cricetomys gambianus if the illicit tobacco trade were eliminated governments could gain at least 31 3 billion a year and more than 164 000 premature deaths a year could be avoided after 2030 joossens merriman ross and raw 2009 dogs have been used successfully in tobacco control programs and there is a good chance that rats could also play an important role in the present experiment giant african pouched rats were trained to respond to filters that had been stored together with cigarettes i e soaked and to not respond to filters that had been soaked with noncigarette items generalization to untrained types of tobacco was then tested the sensitivity of 4 rats trained on filters soaked with 1 of 7 types of cigarettes ranged from 86 to 100 mean 95 there was very little evidence of generalization when the rats were tested on tobacco leaves and snuff but good evidence of generalization when the rats were tested on cigarettes that had been soaked with strong smelling additives these findings suggest that rats may be a valuable asset in the global effort to control illicit cigarette trade tobacco smuggling scent detection generalization work animals pouched rats hit positive indication rate,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
404,0,"Control of Escherichia coli and Listeria monocytogenes in suckling-lamb meat evaluated using microbial challenge tests Escherichia coli and Listeria monocytogenes microbial challenge tests were performed on fresh suckling-lamb meat. Hind leg slices were chilly stored under two modified atmosphere packaging (MAP) environments (A: 15%O2/60%CO2/25%N2, B: 15%O2/30%CO2/55%N2) and vacuum packaging (V). Only E. coli was reduced between 0.72--1.25logcfu/g from day 1 to day 4 by the combined use of MAP/V, chilling storage and the growth of native lactic acid bacteria. However, L. monocytogenes was not inhibited by the application of V or MAP. Even do, in inoculated samples, this pathogen increased between 1.2--2.7logcfu/g throughout the study. Consequently, a second experiment that combined the effects of MAP/V and a protective culture (Leuconostoc pseudomesenteroides PCK 18) against L. monocytogenes was designed. Two different levels of protective cultures were assayed (4 and 6logcfu/g). Lc. pseudomesenteroides PCK 18 was able to control the growth of L. monocytogenes when the differences between them are higher than 2logcfu/g. Moreover, when high level of protective culture was used a significant reduction of L. monocytogenes counts were noticed in samples packaged in 60% of CO2 along the storage period, although sensory properties were also affected. Suckling-lamb, Lechazo de Castilla y León, Microbial challenge test, MAP, Protective cultures, ,",control of escherichia coli and listeria monocytogenes in suckling lamb meat evaluated using microbial challenge tests escherichia coli and listeria monocytogenes microbial challenge tests were performed on fresh suckling lamb meat hind leg slices were chilly stored under two modified atmosphere packaging map environments a 15 o2 60 co2 25 n2 b 15 o2 30 co2 55 n2 and vacuum packaging v only e coli was reduced between 0 72 1 25logcfu g from day 1 to day 4 by the combined use of map v chilling storage and the growth of native lactic acid bacteria however l monocytogenes was not inhibited by the application of v or map even do in inoculated samples this pathogen increased between 1 2 2 7logcfu g throughout the study consequently a second experiment that combined the effects of map v and a protective culture leuconostoc pseudomesenteroides pck 18 against l monocytogenes was designed two different levels of protective cultures were assayed 4 and 6logcfu g lc pseudomesenteroides pck 18 was able to control the growth of l monocytogenes when the differences between them are higher than 2logcfu g moreover when high level of protective culture was used a significant reduction of l monocytogenes counts were noticed in samples packaged in 60 of co2 along the storage period although sensory properties were also affected suckling lamb lechazo de castilla y le n microbial challenge test map protective cultures,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
405,0,"Automatic Detection of GUI Design Smells: The Case of Blob Listener Graphical User Interfaces (GUIs) intensively rely on event-driven programming: widgets send GUI events, which capture users' interactions, to dedicated objects called controllers. Controllers implement several GUI listeners that handle these events to produce GUI commands. In this work, we conducted an empirical study on 13 large Java Swing open-source software systems. We study to what extent the number of GUI commands that a GUI listener can produce has an impact on the change- and fault-proneness of the GUI listener code. We identify a new type of design smell, called Blob listener that characterizes GUI listeners that can produce more than two GUI commands. We show that 21% of the analyzed GUI controllers are Blob listeners. We propose a systematic static code analysis procedure that searches for Blob listener that we implement in InspectorGuidget. We conducted experiments on six software systems for which we manually identified 37 instances of Blob listener. InspectorGuidget successfully detected 36 Blob listeners out of 37. The results exhibit a precision of 97.37% and a recall of 97.59%. Finally, we propose coding practices to avoid the use of Blob listeners. code quality, design smell, software validation, user interface",automatic detection of gui design smells the case of blob listener graphical user interfaces guis intensively rely on event driven programming widgets send gui events which capture users interactions to dedicated objects called controllers controllers implement several gui listeners that handle these events to produce gui commands in this work we conducted an empirical study on 13 large java swing open source software systems we study to what extent the number of gui commands that a gui listener can produce has an impact on the change and fault proneness of the gui listener code we identify a new type of design smell called blob listener that characterizes gui listeners that can produce more than two gui commands we show that 21 of the analyzed gui controllers are blob listeners we propose a systematic static code analysis procedure that searches for blob listener that we implement in inspectorguidget we conducted experiments on six software systems for which we manually identified 37 instances of blob listener inspectorguidget successfully detected 36 blob listeners out of 37 the results exhibit a precision of 97 37 and a recall of 97 59 finally we propose coding practices to avoid the use of blob listeners code quality design smell software validation user interface,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
406,0,"Influencing the Train Experience: Using a Successful Measurement Instrument If Transport Operating Companies (TOCs) wish to have a right to exist in the future, then they must not only offer a trustworthy and accessible service but also ensure that the service is perceived as appealing. The train journey must be an experience, not just a trip from A to B. To purposely upgrade the service provision to a higher perception of quality (see ETC paper Van Hagen & De Bruyn, 2012) an instrument is required that specifically addresses this experience. After all, it is pointless to have a vision and to outline policy if the effects thereof can neither be measured nor influenced. This calls for an instrument which measures both the dissatisfaction (the basic service provision) and the satisfaction (extras that make the journey more pleasant). The current customer satisfaction measurements, such as KTO (KlantTevredenheidsOnderzoek) in the Netherlands or NPS (National Passenger Survey) in the UK, focus primarily on the dissatisfiers. These measurements fail to meet any necessity to regulate or influence the satisfiers, such as comfort and experiential aspects. Following the successfully implemented Station Experience Monitor (SEM, see ETC paper of Van Hagen & Heiligers, 2011), NS has now developed a Train Experience Monitor (TEM). The TEM measures those quality experiences of customers which can be monitored with an aim to influencing the main themes and underlying aspects. The TEM is a scientifically underpinned questionnaire which can ask passengers about all kinds of aspects of the train and the train journey. On the one hand these concern functional questions (aimed at dissatisfiers), such as safety, cleanliness and information provision, and on the other hand more emotional questions (aimed at satisfiers) regarding the atmosphere and comfort on the train, i.e. whether passengers find the train atmospherically pleasing, colourful, quiet and sweet-smelling. The ultimate aim of the Train Experience Monitor is to make train journeys more pleasant, thus improving the image of the TOCs and increasing the number of journeys undertaken. The TEM questionnaire was filled in by passengers on each of the nine different types of carrier running in the Netherlands and on the international high speed train to Germany, the ICE. Moreover, the enquiry was carried out on various routes throughout the country, both during the week and at the weekend, during peak and off-peak hours. The questionnaire was filled in by 5157 passengers and assessed items focusing on dissatisfiers and satisfiers within six themes: Scheduling, Staff, Atmosphere, Comfort, Functionality and Safety & Cleanliness, whereby the last four only refer to the train itself and the first two predominantly concern the train journey. The most important finding was that experience indeed plays a crucial role -- as can be seen in the appraisal of the different types of trains. The experiential aspects significantly influence the appraisal of the train and train journey. Furthermore, it appeared that a higher quality of experiential aspects results in higher appraisals of train and train journey. The differences between types of train with regard to the appraisals per theme are particularly poignant with the theme Atmosphere: the difference between new and old trains is almost one whole mark. What is striking here is that also the theme Safety & Cleanliness show a considerable difference. The measurement results of the TEM demonstrate that the train experience is a significant part of the appraisal of a train service and that this can be measured reliably thus enabling the actual regulation of experience. Train Experience, Monitoring method, satisfier vs. dissatisfier, questionnaire, customer needs",influencing the train experience using a successful measurement instrument if transport operating companies tocs wish to have a right to exist in the future then they must not only offer a trustworthy and accessible service but also ensure that the service is perceived as appealing the train journey must be an experience not just a trip from a to b to purposely upgrade the service provision to a higher perception of quality see etc paper van hagen de bruyn 2012 an instrument is required that specifically addresses this experience after all it is pointless to have a vision and to outline policy if the effects thereof can neither be measured nor influenced this calls for an instrument which measures both the dissatisfaction the basic service provision and the satisfaction extras that make the journey more pleasant the current customer satisfaction measurements such as kto klanttevredenheidsonderzoek in the netherlands or nps national passenger survey in the uk focus primarily on the dissatisfiers these measurements fail to meet any necessity to regulate or influence the satisfiers such as comfort and experiential aspects following the successfully implemented station experience monitor sem see etc paper of van hagen heiligers 2011 ns has now developed a train experience monitor tem the tem measures those quality experiences of customers which can be monitored with an aim to influencing the main themes and underlying aspects the tem is a scientifically underpinned questionnaire which can ask passengers about all kinds of aspects of the train and the train journey on the one hand these concern functional questions aimed at dissatisfiers such as safety cleanliness and information provision and on the other hand more emotional questions aimed at satisfiers regarding the atmosphere and comfort on the train i e whether passengers find the train atmospherically pleasing colourful quiet and sweet smelling the ultimate aim of the train experience monitor is to make train journeys more pleasant thus improving the image of the tocs and increasing the number of journeys undertaken the tem questionnaire was filled in by passengers on each of the nine different types of carrier running in the netherlands and on the international high speed train to germany the ice moreover the enquiry was carried out on various routes throughout the country both during the week and at the weekend during peak and off peak hours the questionnaire was filled in by 5157 passengers and assessed items focusing on dissatisfiers and satisfiers within six themes scheduling staff atmosphere comfort functionality and safety cleanliness whereby the last four only refer to the train itself and the first two predominantly concern the train journey the most important finding was that experience indeed plays a crucial role as can be seen in the appraisal of the different types of trains the experiential aspects significantly influence the appraisal of the train and train journey furthermore it appeared that a higher quality of experiential aspects results in higher appraisals of train and train journey the differences between types of train with regard to the appraisals per theme are particularly poignant with the theme atmosphere the difference between new and old trains is almost one whole mark what is striking here is that also the theme safety cleanliness show a considerable difference the measurement results of the tem demonstrate that the train experience is a significant part of the appraisal of a train service and that this can be measured reliably thus enabling the actual regulation of experience train experience monitoring method satisfier vs dissatisfier questionnaire customer needs,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
407,0,"Tainted: Smell the Virtual Ghost This demonstration presents ``Tainted', a first-person 3D adventure game that enables players to experience a traditional horror folklore using visual-auditory-olfactory interactions. The system consists of a computer to play the game and a smell-emitting module that contains jasmine, pineapple, mango, and banana scents. The information provided by the additional smell stimuli delivers an immersive gaming experience by providing game narrative and signaling predefined game conditions (e.g. imminent threat). Smell stimuli may also help to enhance player's cognition and memory, as well as to invoke emotional responses such as fear and curiosity. games, multimodal cognition, olfaction, smell",tainted smell the virtual ghost this demonstration presents tainted a first person 3d adventure game that enables players to experience a traditional horror folklore using visual auditory olfactory interactions the system consists of a computer to play the game and a smell emitting module that contains jasmine pineapple mango and banana scents the information provided by the additional smell stimuli delivers an immersive gaming experience by providing game narrative and signaling predefined game conditions e g imminent threat smell stimuli may also help to enhance player s cognition and memory as well as to invoke emotional responses such as fear and curiosity games multimodal cognition olfaction smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
408,0,"Preliminary Study on Haptic Information Representation of Tactile Map Elements for Spatial Cognition Visual information has a strong influence on spatial cognitions. We perceive a world through multi-sensory integration of touch, sound and smell not just by sight. This study stems from the basic question how other senses except vision affect spatial cognition. To this end, we focused on perception of visually impaired people. We pursued empirical research based on field studies and interviews to observe the way that the visually impaired use tactile map. From this process we could find key elements of spatial information that represent space for the blind. We analyzed tactile perception of the visually impaired into five different types and developed tactile map test model. In this paper, we illustrated five types of tactile maps based on the haptic representation. For the future study, we will challenge for improvement of current tactile map and fundamental tactile information of space. In a long term goal, this research aims to develop assistive technology not just for the people who visually impaired but for enriching our senses in space. []",preliminary study on haptic information representation of tactile map elements for spatial cognition visual information has a strong influence on spatial cognitions we perceive a world through multi sensory integration of touch sound and smell not just by sight this study stems from the basic question how other senses except vision affect spatial cognition to this end we focused on perception of visually impaired people we pursued empirical research based on field studies and interviews to observe the way that the visually impaired use tactile map from this process we could find key elements of spatial information that represent space for the blind we analyzed tactile perception of the visually impaired into five different types and developed tactile map test model in this paper we illustrated five types of tactile maps based on the haptic representation for the future study we will challenge for improvement of current tactile map and fundamental tactile information of space in a long term goal this research aims to develop assistive technology not just for the people who visually impaired but for enriching our senses in space,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
409,0,"Effects of anesthetic agents on socially transmitted olfactory memories in mice Mice can learn a food preference from odor cues transmitted on the breath of a conspecific, even if the ``demonstrator'' is anesthetized. To our knowledge there are no studies examining the effect of anesthetizing the ``observer'' on development of memory for socially transmitted food preferences (STFP). In Experiment 1 we found that 2--4month-old F2 C57Bl/6x129sv male and female mice demonstrated a STFP after a 5min exposure to an anesthetized demonstrator mouse when tested 24h later. In Experiment 2, observer mice anesthetized with Sagatal (60mg/kg) prior to the ``social interaction'' preferentially avoided the cued food when tested 24h later. This aversion was not due to any overt aversive effects of this dose of Sagatal because mice that ate the food and were then anesthetized, or could only smell the food for 5min while anesthetized, showed no preference or aversion. In a third experiment we found that the Sagatal-induced aversion was not a general property of anesthesia because there were varied results produced by observer mice treated with anesthetic drugs with different mechanisms of action. Vetalar (200mg/kg) and Rompun (10mg/kg) treated animals ate similar amounts of cued and non-cued food at test, indicating an absence of learning. Hypnorm (0.5ml/kg) treated animals showed a preference for the cued food whereas those treated with Hypnovel (2.5ml/kg) showed an aversion to the cued food. These results show that the food aversion observed with Sagatal is not a general property of anesthetic agents, but appears to be restricted to those acting primarily on the GABAergic system. Thus, we have shown that under certain conditions it is possible for an anesthetized observer mouse to learn a preference or aversion of a socially-linked olfactory cue. Olfactory learning, Food neophobia, Non-spatial relational memory",effects of anesthetic agents on socially transmitted olfactory memories in mice mice can learn a food preference from odor cues transmitted on the breath of a conspecific even if the demonstrator is anesthetized to our knowledge there are no studies examining the effect of anesthetizing the observer on development of memory for socially transmitted food preferences stfp in experiment 1 we found that 2 4month old f2 c57bl 6x129sv male and female mice demonstrated a stfp after a 5min exposure to an anesthetized demonstrator mouse when tested 24h later in experiment 2 observer mice anesthetized with sagatal 60mg kg prior to the social interaction preferentially avoided the cued food when tested 24h later this aversion was not due to any overt aversive effects of this dose of sagatal because mice that ate the food and were then anesthetized or could only smell the food for 5min while anesthetized showed no preference or aversion in a third experiment we found that the sagatal induced aversion was not a general property of anesthesia because there were varied results produced by observer mice treated with anesthetic drugs with different mechanisms of action vetalar 200mg kg and rompun 10mg kg treated animals ate similar amounts of cued and non cued food at test indicating an absence of learning hypnorm 0 5ml kg treated animals showed a preference for the cued food whereas those treated with hypnovel 2 5ml kg showed an aversion to the cued food these results show that the food aversion observed with sagatal is not a general property of anesthetic agents but appears to be restricted to those acting primarily on the gabaergic system thus we have shown that under certain conditions it is possible for an anesthetized observer mouse to learn a preference or aversion of a socially linked olfactory cue olfactory learning food neophobia non spatial relational memory,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
410,0,"Detecting Bad Smells in Source Code Using Change History Information Code smells represent symptoms of poor implementation choices. Previous studies found that these smells make source code more difficult to maintain, possibly also increasing its fault-proneness. There are several approaches that identify smells based on code analysis techniques. However, we observe that many code smells are intrinsically characterized by how code elements change over time. Thus, relying solely on structural information may not be sufficient to detect all the smells accurately. We propose an approach to detect five different code smells, namely Divergent Change, Shotgun Surgery, Parallel Inheritance, Blob, and Feature Envy, by exploiting change history information mined from versioning systems. We applied approach, coined as HIST (Historical Information for Smell deTection), to eight software projects written in Java, and wherever possible compared with existing state-of-the-art smell detectors based on source code analysis. The results indicate that HIST's precision ranges between 61% and 80%, and its recall ranges between 61% and 100%. More importantly, the results confirm that HIST is able to identify code smells that cannot be identified through approaches solely based on code analysis. change history information, code smells",detecting bad smells in source code using change history information code smells represent symptoms of poor implementation choices previous studies found that these smells make source code more difficult to maintain possibly also increasing its fault proneness there are several approaches that identify smells based on code analysis techniques however we observe that many code smells are intrinsically characterized by how code elements change over time thus relying solely on structural information may not be sufficient to detect all the smells accurately we propose an approach to detect five different code smells namely divergent change shotgun surgery parallel inheritance blob and feature envy by exploiting change history information mined from versioning systems we applied approach coined as hist historical information for smell detection to eight software projects written in java and wherever possible compared with existing state of the art smell detectors based on source code analysis the results indicate that hist s precision ranges between 61 and 80 and its recall ranges between 61 and 100 more importantly the results confirm that hist is able to identify code smells that cannot be identified through approaches solely based on code analysis change history information code smells,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
411,0,"Study on the detection and correction of software based on UML We have proposed an approach to the correction of anti-patterns; we believe that before attempting such corrections it is important to have confirmation from the developer. Assumptions are made when identifying or correcting certain anti-patterns; however, these assumptions that we recognize as the causes of the anti-pattern may be the behavior the developer actually intended with the design, or may not be the most optimal correction for the anti pattern. We propose these transformations as a guide for the improvement of the design; nevertheless the decision of applying the changes should be left to the user. formal specification, object-oriented programming, Unified Modeling Language, software detection, software correction, Unified Modeling Language, antipattern correction, Unified modeling language, Object oriented modeling, Ecosystems, Computer science, Pattern recognition, Software systems, Concrete, Software design, Writing, Documentation, Detection, Anti-patterns, UML, Correction",study on the detection and correction of software based on uml we have proposed an approach to the correction of anti patterns we believe that before attempting such corrections it is important to have confirmation from the developer assumptions are made when identifying or correcting certain anti patterns however these assumptions that we recognize as the causes of the anti pattern may be the behavior the developer actually intended with the design or may not be the most optimal correction for the anti pattern we propose these transformations as a guide for the improvement of the design nevertheless the decision of applying the changes should be left to the user formal specification object oriented programming unified modeling language software detection software correction unified modeling language antipattern correction unified modeling language object oriented modeling ecosystems computer science pattern recognition software systems concrete software design writing documentation detection anti patterns uml correction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
412,0,"The smell to repel: The effect of odors on the feeding behavior of female rodents Rodents can cause extensive damage in agricultural systems. This results in considerable harvest loss as well as damage to agricultural infrastructure. To prevent this, the use of rodenticides has increased worldwide. Rodenticides not only affect rodent pest species but also harm non-target species such as predators and other small mammals. In this paper we show how the odor of plant secondary metabolites (PSMs) can affect the feeding behavior of two rodent species: the common vole (Microtus arvalis, Pallas) and house mouse (Mus musculus, L.). Common voles are a major vertebrate pest species in agriculture whereas house mice are commensal pests. Both species are well-known to cause severe damage to diverse agricultural enterprises in Europe. We conducted laboratory feeding experiments initially with females because their fitness depends more on their foraging behavior than it does in males. We tested a range of volatile PSMs on voles initially and those compounds that proved effective were later tested on the house mice. Out of 13 PSMs or combinations of PSMs, nine reduced the amount of food eaten and one (bucco oil) increased feeding by voles. In house mice we identified six deterrent PSMs which reduced the food intake including bucco oil and there were two compounds that had no effect on feeding. Those metabolites that were repellent should be tested in field trials for their efficacy and may be suitable alternatives to rodenticides. Rodents, Odor, Agriculture damage, Feeding experiments, Plant secondary metabolites, Repellents",the smell to repel the effect of odors on the feeding behavior of female rodents rodents can cause extensive damage in agricultural systems this results in considerable harvest loss as well as damage to agricultural infrastructure to prevent this the use of rodenticides has increased worldwide rodenticides not only affect rodent pest species but also harm non target species such as predators and other small mammals in this paper we show how the odor of plant secondary metabolites psms can affect the feeding behavior of two rodent species the common vole microtus arvalis pallas and house mouse mus musculus l common voles are a major vertebrate pest species in agriculture whereas house mice are commensal pests both species are well known to cause severe damage to diverse agricultural enterprises in europe we conducted laboratory feeding experiments initially with females because their fitness depends more on their foraging behavior than it does in males we tested a range of volatile psms on voles initially and those compounds that proved effective were later tested on the house mice out of 13 psms or combinations of psms nine reduced the amount of food eaten and one bucco oil increased feeding by voles in house mice we identified six deterrent psms which reduced the food intake including bucco oil and there were two compounds that had no effect on feeding those metabolites that were repellent should be tested in field trials for their efficacy and may be suitable alternatives to rodenticides rodents odor agriculture damage feeding experiments plant secondary metabolites repellents,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
413,0,"Object recognition: A new application for smelling robots Olfaction is a challenging new sensing modality for intelligent systems. With the emergence of electronic noses, it is now possible to detect and recognize a range of different odours for a variety of applications. In this work, we introduce a new application where electronic olfaction is used in cooperation with other types of sensors on a mobile robot in order to acquire the odour property of objects. We examine the problem of deciding when, how and where the electronic nose (e-nose) should be activated by planning for active perception and we consider the problem of integrating the information provided by the e-nose with both prior information and information from other sensors (e.g., vision). Experiments performed on a mobile robot equipped with an e-nose are presented. Electronic olfaction, Planning for perceptional actions, Anchoring, Sensing with multiple modalities",object recognition a new application for smelling robots olfaction is a challenging new sensing modality for intelligent systems with the emergence of electronic noses it is now possible to detect and recognize a range of different odours for a variety of applications in this work we introduce a new application where electronic olfaction is used in cooperation with other types of sensors on a mobile robot in order to acquire the odour property of objects we examine the problem of deciding when how and where the electronic nose e nose should be activated by planning for active perception and we consider the problem of integrating the information provided by the e nose with both prior information and information from other sensors e g vision experiments performed on a mobile robot equipped with an e nose are presented electronic olfaction planning for perceptional actions anchoring sensing with multiple modalities,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
414,0,"Validity of building characteristics and dorm dampness obtained in a self-administrated questionnaire A self-administrated questionnaire used in a cross-sectional study on associations between environmental factors and allergies was validated by building inspections and physical measurements. The agreement was good between the reports from occupants and inspectors regarding technical characteristics, such as type of surface materials etc., but a poor to slight agreement (kappa<0.2) regarding on assessments of moisture damages, such as mould or damp spots, and a mouldy smell, between occupants and inspectors. Dampness problems reported by occupants were associated with health effects (case status), while such problems observed by inspectors were not. The air relative humidity was slightly higher, during winter time, in rooms with condensation on windowpanes. The results indicate that questionnaire surveys give valid data regarding most technical characteristics. With regard to moisture damages, occupants reports seem more relevant than inspector reports, in a study of health. Self-administrated questionnaire, Validity, Dampness, Building characteristics",validity of building characteristics and dorm dampness obtained in a self administrated questionnaire a self administrated questionnaire used in a cross sectional study on associations between environmental factors and allergies was validated by building inspections and physical measurements the agreement was good between the reports from occupants and inspectors regarding technical characteristics such as type of surface materials etc but a poor to slight agreement kappa 0 2 regarding on assessments of moisture damages such as mould or damp spots and a mouldy smell between occupants and inspectors dampness problems reported by occupants were associated with health effects case status while such problems observed by inspectors were not the air relative humidity was slightly higher during winter time in rooms with condensation on windowpanes the results indicate that questionnaire surveys give valid data regarding most technical characteristics with regard to moisture damages occupants reports seem more relevant than inspector reports in a study of health self administrated questionnaire validity dampness building characteristics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
415,0,"A User Perspective of Olfaction-enhanced Mulsemedia The focus of this paper is on olfaction-enhanced multimedia applications, that is, combining computer generated smell with other media to enrich the users' experience and perception of a multimedia application. Within the general context of mulsemedia -- multiple sensorial media applications -- we review the literature and highlight challenges of enhancing (multi/mulse)media with olfaction. mulsemedia, multimedia, olfaction, user perspective",a user perspective of olfaction enhanced mulsemedia the focus of this paper is on olfaction enhanced multimedia applications that is combining computer generated smell with other media to enrich the users experience and perception of a multimedia application within the general context of mulsemedia multiple sensorial media applications we review the literature and highlight challenges of enhancing multi mulse media with olfaction mulsemedia multimedia olfaction user perspective,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
416,0,"Study on microcapsulation of embedding deer placenta polypeptide with porous starch The deer placenta polypeptide has dense fishy smell and it is easy to be oxidized. The fishy smell of the deer placenta polypeptide was shielded and it was prevented from be oxidized through embedding the porous starch-deer placenta polypeptid with two kinds of wall material(glutin and β-cyclodextrin).The experimental result shows: the deer placenta polypeptide was absorbed by porous starch, which can be completed within 100 minute. The adsorbance is 24.8mg. Among the microcapsulation that the porous starch-deer placenta polypeptid acts as core material, the glutin embedding rate is above β-cyclodextrin embedding rate. The maximum embedding rate attain to 55.33%. The microcapsulation which core material is the porous starch-deer placenta polypeptid and wall material is β-cyclodextrin keeps maximum activity. food processing industry, microcapsulation, deer placenta polypeptide, porous starch, dense fishy smell, wall material, glutin, β-cyclodextrin, Peptides, Materials, Moisture, Charge carrier processes, Educational institutions, Temperature measurement, Weight measurement, deer placenta polypeptid, formatting, porous starch",study on microcapsulation of embedding deer placenta polypeptide with porous starch the deer placenta polypeptide has dense fishy smell and it is easy to be oxidized the fishy smell of the deer placenta polypeptide was shielded and it was prevented from be oxidized through embedding the porous starch deer placenta polypeptid with two kinds of wall material glutin and cyclodextrin the experimental result shows the deer placenta polypeptide was absorbed by porous starch which can be completed within 100 minute the adsorbance is 24 8mg among the microcapsulation that the porous starch deer placenta polypeptid acts as core material the glutin embedding rate is above cyclodextrin embedding rate the maximum embedding rate attain to 55 33 the microcapsulation which core material is the porous starch deer placenta polypeptid and wall material is cyclodextrin keeps maximum activity food processing industry microcapsulation deer placenta polypeptide porous starch dense fishy smell wall material glutin cyclodextrin peptides materials moisture charge carrier processes educational institutions temperature measurement weight measurement deer placenta polypeptid formatting porous starch,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
417,0,"Support vector machines for anti-pattern detection Developers may introduce anti-patterns in their software systems because of time pressure, lack of understanding, communication, and--or skills. Anti-patterns impede development and maintenance activities by making the source code more difficult to understand. Detecting anti-patterns in a whole software system may be infeasible because of the required parsing time and of the subsequent needed manual validation. Detecting anti-patterns on subsets of a system could reduce costs, effort, and resources. Researchers have proposed approaches to detect occurrences of anti-patterns but these approaches have currently some limitations: they require extensive knowledge of anti-patterns, they have limited precision and recall, and they cannot be applied on subsets of systems. To overcome these limitations, we introduce SVMDetect, a novel approach to detect anti-patterns, based on a machine learning technique---support vector machines. Indeed, through an empirical study involving three subject systems and four anti-patterns, we showed that the accuracy of SVMDetect is greater than of DETEX when detecting anti-patterns occurrences on a set of classes. Concerning, the whole system, SVMDetect is able to find more anti-patterns occurrences than DETEX. learning (artificial intelligence), software maintenance, support vector machines, support vector machines, antipattern detection, software systems, source code, parsing time, manual validation, SVMDetect, machine learning technique, DETEX, Anti-pattern, empirical software engineering, program comprehension, program maintenance",support vector machines for anti pattern detection developers may introduce anti patterns in their software systems because of time pressure lack of understanding communication and or skills anti patterns impede development and maintenance activities by making the source code more difficult to understand detecting anti patterns in a whole software system may be infeasible because of the required parsing time and of the subsequent needed manual validation detecting anti patterns on subsets of a system could reduce costs effort and resources researchers have proposed approaches to detect occurrences of anti patterns but these approaches have currently some limitations they require extensive knowledge of anti patterns they have limited precision and recall and they cannot be applied on subsets of systems to overcome these limitations we introduce svmdetect a novel approach to detect anti patterns based on a machine learning technique support vector machines indeed through an empirical study involving three subject systems and four anti patterns we showed that the accuracy of svmdetect is greater than of detex when detecting anti patterns occurrences on a set of classes concerning the whole system svmdetect is able to find more anti patterns occurrences than detex learning artificial intelligence software maintenance support vector machines support vector machines antipattern detection software systems source code parsing time manual validation svmdetect machine learning technique detex anti pattern empirical software engineering program comprehension program maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
418,0,"Visual Detection of Design Anomalies Design anomalies, introduced during software evolution, are frequent causes of low maintainability and low flexibility to future changes. Because of the required knowledge, an important subset of design anomalies is difficult to detect automatically, and therefore, the code of anomaly candidates must be inspected manually to validate them. However, this task is time- and resource-consuming. We propose a visualization-based approach to detect design anomalies for cases where the detection effort already includes the validation of candidates. We introduce a general detection strategy that we apply to three types of design anomaly. These strategies are illustrated on concrete examples. Finally we evaluate our approach through a case study. It shows that performance variability against manual detection is reduced and that our semi-automatic detection has good recall for some anomaly types. program visualisation, software metrics, software quality, design anomalies, visual detection, software evolution, anomaly candidates code, visualization-based approach, candidates validation, detection strategy, semi-automatic detection, Software quality, Filters, Software maintenance, Concrete, Computer architecture, Data visualization, Data mining, Software metrics, Application software, Software design, Software quality, Software metrics, Visualization",visual detection of design anomalies design anomalies introduced during software evolution are frequent causes of low maintainability and low flexibility to future changes because of the required knowledge an important subset of design anomalies is difficult to detect automatically and therefore the code of anomaly candidates must be inspected manually to validate them however this task is time and resource consuming we propose a visualization based approach to detect design anomalies for cases where the detection effort already includes the validation of candidates we introduce a general detection strategy that we apply to three types of design anomaly these strategies are illustrated on concrete examples finally we evaluate our approach through a case study it shows that performance variability against manual detection is reduced and that our semi automatic detection has good recall for some anomaly types program visualisation software metrics software quality design anomalies visual detection software evolution anomaly candidates code visualization based approach candidates validation detection strategy semi automatic detection software quality filters software maintenance concrete computer architecture data visualization data mining software metrics application software software design software quality software metrics visualization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
419,0,"Detection of embedded code smells in dynamic web applications In dynamic Web applications, there often exists a type of code smells, called embedded code smells, that violate important principles in software development such as software modularity and separation of concerns, resulting in much maintenance effort. Detecting and fixing those code smells is crucial yet challenging since the code with smells is embedded and generated from the server-side code. We introduce WebScent, a tool to detect such embedded code smells. WebScent first detects the smells in the generated code, and then locates them in the server-side code using the mapping between client-side code fragments and their embedding locations in the server program, which is captured during the generation of those fragments. Our empirical evaluation on real-world Web applications shows that 34%-81% of the tested server files contain embedded code smells. We also found that the source files with more embedded code smells are likely to have more defects and scattered changes, thus potentially require more maintenance effort. Internet, software maintenance, maintenance effort, client-side code fragments, WebScent, server-side code, software development, dynamic Web applications, embedded code smell detection, Code Smells, Dynamic Web Applications, Embedded Code",detection of embedded code smells in dynamic web applications in dynamic web applications there often exists a type of code smells called embedded code smells that violate important principles in software development such as software modularity and separation of concerns resulting in much maintenance effort detecting and fixing those code smells is crucial yet challenging since the code with smells is embedded and generated from the server side code we introduce webscent a tool to detect such embedded code smells webscent first detects the smells in the generated code and then locates them in the server side code using the mapping between client side code fragments and their embedding locations in the server program which is captured during the generation of those fragments our empirical evaluation on real world web applications shows that 34 81 of the tested server files contain embedded code smells we also found that the source files with more embedded code smells are likely to have more defects and scattered changes thus potentially require more maintenance effort internet software maintenance maintenance effort client side code fragments webscent server side code software development dynamic web applications embedded code smell detection code smells dynamic web applications embedded code,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
420,0,"The Effect of 1-Methylcyclopropene on Postharvest Life of Sessile Joyweed (Alternanthera Sessilis) Sessile Joyweed (Alteranthera sessilis) which is commonly known as Mukunuvenna in Sri Lanka, is the most widely produced and most popular of nine leafy vegetables cultivated and sold on a commercial scale in Sri Lanka. This is primarily consumed locally, while only a small quantity is exported. However, the shelf life of Mukunuvenna is as low about 3-4 days due to leaf yellowing and wilting. Consumers prefer green and turgid leafy vegetables and thus the loss is considerably high after wilting and yellowing. Ethylene is a critical problem in leaf senescence. Minute concentrations such as 1μL/L ethylene can affect leaf yellowing significantly. Thus, an ethylene blocker, 1-Methylcyclopropene (1-MCP), which is now commonly being used in the fruit industry, can be considered as an effective solution for extending the postharvest life of A. sessilis. It is not toxic and environmentally friendly thus safe with edible produce. The present study was done, with the objective of investigating effects of 1-MCP on postharvest life and sensory qualities. Two experiments were conducted for several dosages (concentration × time) to investigate the shelf-life performances and processed A. sessilis samples were used to check sensory qualities such as taste, smell, texture and colour. Samples treated with 1-MCP showed high levels of chlorophyll, lower yellowing and higher overall quality. Postharvest life of treated samples increased by 1 full-day (25% increase) under the room temperature. 1-MCP, 5ppm for 8 hour duration showed promising results. However, the obtained results did not show a specific treatment combination as the best treatment and 1-MCP did not alter the sensory qualities of the processed product. Methylcyclopropene, , Postharvest life, Chlorophyll content",the effect of 1 methylcyclopropene on postharvest life of sessile joyweed alternanthera sessilis sessile joyweed alteranthera sessilis which is commonly known as mukunuvenna in sri lanka is the most widely produced and most popular of nine leafy vegetables cultivated and sold on a commercial scale in sri lanka this is primarily consumed locally while only a small quantity is exported however the shelf life of mukunuvenna is as low about 3 4 days due to leaf yellowing and wilting consumers prefer green and turgid leafy vegetables and thus the loss is considerably high after wilting and yellowing ethylene is a critical problem in leaf senescence minute concentrations such as 1 l l ethylene can affect leaf yellowing significantly thus an ethylene blocker 1 methylcyclopropene 1 mcp which is now commonly being used in the fruit industry can be considered as an effective solution for extending the postharvest life of a sessilis it is not toxic and environmentally friendly thus safe with edible produce the present study was done with the objective of investigating effects of 1 mcp on postharvest life and sensory qualities two experiments were conducted for several dosages concentration time to investigate the shelf life performances and processed a sessilis samples were used to check sensory qualities such as taste smell texture and colour samples treated with 1 mcp showed high levels of chlorophyll lower yellowing and higher overall quality postharvest life of treated samples increased by 1 full day 25 increase under the room temperature 1 mcp 5ppm for 8 hour duration showed promising results however the obtained results did not show a specific treatment combination as the best treatment and 1 mcp did not alter the sensory qualities of the processed product methylcyclopropene postharvest life chlorophyll content,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
421,0,"Application of immersive technologies for education: State of the art Existing multimedia systems used in education mostly address only two senses by using two communication channels (visual and audio) of the five human senses (sight, hearing, taste, smell, and touch), limiting the potential efficiency of learning. This paper presents a survey on existing technical opportunities for the development of an immersive learning environment. Four components of the immersive environment - visual, audio, olfactory, and haptic are described and discussed in the paper. In particular 3D displays, head mounted devices, 3D sound systems, olfactory displays, haptic devices, and interaction devices are presented. computer aided instruction, haptic interfaces, helmet mounted displays, multimedia systems, three-dimensional displays, visual communication, education, multimedia systems, communication channels, visual channels, audio channels, human senses, immersive learning environment, 3D displays, head mounted devices, 3D sound systems, olfactory displays, haptic devices, interaction devices, Three-dimensional displays, Olfactory, Education, Audio systems, Stereo image processing, Ear, immersive technology, mulsemedia, 3D display, 3D sound system, olfactory display, haptic device",application of immersive technologies for education state of the art existing multimedia systems used in education mostly address only two senses by using two communication channels visual and audio of the five human senses sight hearing taste smell and touch limiting the potential efficiency of learning this paper presents a survey on existing technical opportunities for the development of an immersive learning environment four components of the immersive environment visual audio olfactory and haptic are described and discussed in the paper in particular 3d displays head mounted devices 3d sound systems olfactory displays haptic devices and interaction devices are presented computer aided instruction haptic interfaces helmet mounted displays multimedia systems three dimensional displays visual communication education multimedia systems communication channels visual channels audio channels human senses immersive learning environment 3d displays head mounted devices 3d sound systems olfactory displays haptic devices interaction devices three dimensional displays olfactory education audio systems stereo image processing ear immersive technology mulsemedia 3d display 3d sound system olfactory display haptic device,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
422,0,"The Effect of Delocalized Plans on Spreadsheet Comprehension: A Controlled Experiment Spreadsheets are widely used in industry. Spreadsheets also suffer from typical software engineering issues. Previous research shows that they contain code smells, lack documentation and tests, and have a long live span during which they are transferred multiple times among users. These transfers highlight the importance of spreadsheet comprehension. Therefore, in this paper, we analyze the effect of the organization of formulas on spreadsheet comprehension. To that end, we conduct a controlled experiment with 107 spreadsheet users, divided into two groups. One group receives a model where the formulas are organized such that all related components are grouped closely together, while the other group receives a model where the components are spread far and wide across the spreadsheet. All subjects perform the same set of comprehension tasks on their spreadsheet. The results indicate that the way formulas are located relative to each other in a spreadsheet, influences the performance of the subjects in their ability to comprehend and adapt the spreadsheet. Especially for the comprehension tasks, the subjects perform better on the model where the formulas were grouped closely together. For the adaptation tasks, we found that the length of the calculation chain influences the performance of the subjects more than the location of the formulas itself. end user programming,  spreadsheets,  comprehension,  maintenance,  controlled experiment,  delocalized plans,  locality,  Feature Envy",the effect of delocalized plans on spreadsheet comprehension a controlled experiment spreadsheets are widely used in industry spreadsheets also suffer from typical software engineering issues previous research shows that they contain code smells lack documentation and tests and have a long live span during which they are transferred multiple times among users these transfers highlight the importance of spreadsheet comprehension therefore in this paper we analyze the effect of the organization of formulas on spreadsheet comprehension to that end we conduct a controlled experiment with 107 spreadsheet users divided into two groups one group receives a model where the formulas are organized such that all related components are grouped closely together while the other group receives a model where the components are spread far and wide across the spreadsheet all subjects perform the same set of comprehension tasks on their spreadsheet the results indicate that the way formulas are located relative to each other in a spreadsheet influences the performance of the subjects in their ability to comprehend and adapt the spreadsheet especially for the comprehension tasks the subjects perform better on the model where the formulas were grouped closely together for the adaptation tasks we found that the length of the calculation chain influences the performance of the subjects more than the location of the formulas itself end user programming spreadsheets comprehension maintenance controlled experiment delocalized plans locality feature envy,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
423,0,"On the scent of human olfactory orbitofrontal cortex: Meta-analysis and comparison to non-human primates It is widely accepted that the orbitofrontal cortex (OFC) represents the main neocortical target of primary olfactory cortex. In non-human primates, the olfactory neocortex is situated along the basal surface of the caudal frontal lobes, encompassing agranular and dysgranular OFC medially and agranular insula laterally, where this latter structure wraps onto the posterior orbital surface. Direct afferent inputs arrive from most primary olfactory areas, including piriform cortex, amygdala, and entorhinal cortex, in the absence of an obligatory thalamic relay. While such findings are almost exclusively derived from animal data, recent cytoarchitectonic studies indicate a close anatomical correspondence between non-human primate and human OFC. Given this cross-species conservation of structure, it has generally been presumed that the olfactory projection area in human OFC occupies the same posterior portions of OFC as seen in non-human primates. This review questions this assumption by providing a critical survey of the localization of primate and human olfactory neocortex. Based on a meta-analysis of human functional neuroimaging studies, the region of human OFC showing the greatest olfactory responsivity appears substantially rostral and in a different cytoarchitectural area than the orbital olfactory regions as defined in the monkey. While this anatomical discrepancy may principally arise from methodological differences across species, these results have implications for the interpretation of prior human lesion and neuroimaging studies and suggest constraints upon functional extrapolations from animal data. Olfaction, Smell, Orbitofrontal cortex, Comparative neuroanatomy, Functional neuroimaging, Meta-analysis",on the scent of human olfactory orbitofrontal cortex meta analysis and comparison to non human primates it is widely accepted that the orbitofrontal cortex ofc represents the main neocortical target of primary olfactory cortex in non human primates the olfactory neocortex is situated along the basal surface of the caudal frontal lobes encompassing agranular and dysgranular ofc medially and agranular insula laterally where this latter structure wraps onto the posterior orbital surface direct afferent inputs arrive from most primary olfactory areas including piriform cortex amygdala and entorhinal cortex in the absence of an obligatory thalamic relay while such findings are almost exclusively derived from animal data recent cytoarchitectonic studies indicate a close anatomical correspondence between non human primate and human ofc given this cross species conservation of structure it has generally been presumed that the olfactory projection area in human ofc occupies the same posterior portions of ofc as seen in non human primates this review questions this assumption by providing a critical survey of the localization of primate and human olfactory neocortex based on a meta analysis of human functional neuroimaging studies the region of human ofc showing the greatest olfactory responsivity appears substantially rostral and in a different cytoarchitectural area than the orbital olfactory regions as defined in the monkey while this anatomical discrepancy may principally arise from methodological differences across species these results have implications for the interpretation of prior human lesion and neuroimaging studies and suggest constraints upon functional extrapolations from animal data olfaction smell orbitofrontal cortex comparative neuroanatomy functional neuroimaging meta analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
424,0,"Common Refactorings, a Dependency Graph and Some Code Smells: An Empirical Study of Java OSS Refactoring, as a software engineering discipline has emerged over recent years to become an important aspect of maintaining software. Refactoring refers to the restructuring of software according to specific mechanics and principles. In this paper, we describe an analysis of the results from a tool whose purpose was to identify and extract refactorings from seven open-source Java systems. In particular, we analyzed the mechanics of the most commonly and least commonly applied refactorings to try and account for their frequency. Results showed the most common refactorings of the fifteen coined a 'Gang of Six', to be generally those with a high in-degree and low out-degree when mapped on a dependency graph; the same refactorings also featured strongly in the remedying of bad code smells. Remarkably and surprisingly, inheritance and encapsulationbased refactorings were found to have been applied relatively infrequently - we offer explanations for why this may be the case. The paper thus identifies 'core' refactorings central to many of the changes made by developers on open-source systems. While we can not guarantee that developers consciously undertake refactoring in any sense, the empirical results demonstrate that simple renaming and moving fields/methods between classes are common components of open-source system re-engineering. From a wider software engineering perspective, knowledge of what a modification will incur in likely sub-tasks is of value to developers whether working on open-source or other forms of software. code smells, refactoring, taxonomy, testing",common refactorings a dependency graph and some code smells an empirical study of java oss refactoring as a software engineering discipline has emerged over recent years to become an important aspect of maintaining software refactoring refers to the restructuring of software according to specific mechanics and principles in this paper we describe an analysis of the results from a tool whose purpose was to identify and extract refactorings from seven open source java systems in particular we analyzed the mechanics of the most commonly and least commonly applied refactorings to try and account for their frequency results showed the most common refactorings of the fifteen coined a gang of six to be generally those with a high in degree and low out degree when mapped on a dependency graph the same refactorings also featured strongly in the remedying of bad code smells remarkably and surprisingly inheritance and encapsulationbased refactorings were found to have been applied relatively infrequently we offer explanations for why this may be the case the paper thus identifies core refactorings central to many of the changes made by developers on open source systems while we can not guarantee that developers consciously undertake refactoring in any sense the empirical results demonstrate that simple renaming and moving fields methods between classes are common components of open source system re engineering from a wider software engineering perspective knowledge of what a modification will incur in likely sub tasks is of value to developers whether working on open source or other forms of software code smells refactoring taxonomy testing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
425,0,"Cattle manure quality in Maragua District, Central Kenya: effect of management practices and development of simple methods of assessment Three hundred mixed, smallholder farms in Kariti location, Kandara Division, Maragua District, Central Kenya, were surveyed. Dairy cattle management practices, including type of animal enclosure, roofing, floor type, drainage, use of bedding, feeding of concentrates; and manure management practices, including methods of manure handling and storage prior to utilization, and the addition of urine and organic materials to manure were documented. The concentrations of C, N, P, K, Ca, and Mg, and the C:N ratio of manure--composts prepared on-farm were analysed. The P concentration of manure was higher from zero-grazing units than from improved or traditional housing, higher from housing with roofs than from that without, higher when animals were fed concentrates than when not, and higher when manure was stored in a heap or pit rather than in a deep littering system. Use of bedding in the livestock housing resulted in manure with lower mineral N concentration and higher C:N ratio. Turning manure during composting resulted in manure with a higher mineral N concentration and lower C:N ratio. Results suggest that modification of traditional livestock housing (boma) to the zero-grazing system may have beneficial effects on some aspects of manure quality. Data on manure texture, colour, smell and biological activity were collected in an attempt to relate manure nutrient concentration and C:N ratio to easily discernible characteristics of manure--composts on-farm. Significant relationships were found between manure texture and the concentrations of P and mineral N, and C:N ratio. Significant relationships were also found between manure colour and N concentration and between manure age and mineral N concentration. Thus, there is scope for the development of decision tools to predict manure--compost quality from at least some manure characteristics. Dichotomous keys were prepared to determine mean manure C:N ratio and mineral N concentration on the basis of manure age and texture. Kenya, Manure assessment, Manure management, Manure quality, Nutrient concentration",cattle manure quality in maragua district central kenya effect of management practices and development of simple methods of assessment three hundred mixed smallholder farms in kariti location kandara division maragua district central kenya were surveyed dairy cattle management practices including type of animal enclosure roofing floor type drainage use of bedding feeding of concentrates and manure management practices including methods of manure handling and storage prior to utilization and the addition of urine and organic materials to manure were documented the concentrations of c n p k ca and mg and the c n ratio of manure composts prepared on farm were analysed the p concentration of manure was higher from zero grazing units than from improved or traditional housing higher from housing with roofs than from that without higher when animals were fed concentrates than when not and higher when manure was stored in a heap or pit rather than in a deep littering system use of bedding in the livestock housing resulted in manure with lower mineral n concentration and higher c n ratio turning manure during composting resulted in manure with a higher mineral n concentration and lower c n ratio results suggest that modification of traditional livestock housing boma to the zero grazing system may have beneficial effects on some aspects of manure quality data on manure texture colour smell and biological activity were collected in an attempt to relate manure nutrient concentration and c n ratio to easily discernible characteristics of manure composts on farm significant relationships were found between manure texture and the concentrations of p and mineral n and c n ratio significant relationships were also found between manure colour and n concentration and between manure age and mineral n concentration thus there is scope for the development of decision tools to predict manure compost quality from at least some manure characteristics dichotomous keys were prepared to determine mean manure c n ratio and mineral n concentration on the basis of manure age and texture kenya manure assessment manure management manure quality nutrient concentration,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
426,0,"Critically reappraising the literature-driven practice of analgesia administration for acute abdominal pain in the emergency room prior to surgical evaluation Background Classic teaching is that narcotic analgesia in the setting of an acute abdomen can alter physical examination findings and should therefore be withheld until after a surgeon's examination. Methods A telephone survey of emergency medicine physicians representing 60 US hospitals was conducted to assess the current practices and opinions regarding the early administration of narcotic analgesia in this setting. Relevant literature was also reviewed for methodological errors. Results Fifty-nine of 60 (98.3%) respondents reported that it is their practice to administer analgesia prior to surgical evaluation. Of these, only 9 of 59 (15.3%) reported always informing the surgeon prior to dosing the patient. The two most common motivations cited were that patient discomfort takes precedence (52 of 59; 88.1%) and that the literature supports the practice to be safe (51 of 59; 86.4%). Conclusions It is common for emergency medicine physicians to medicate acute abdomen patients prior to surgical evaluation. Numerous significant study limitations and design flaws were found that question the validity of the four clinical trials supporting this practice. Because many physicians base their clinical decisions on these trials, a careful analysis of their shortcomings, as well as our own personal experiences and practice recommendations, is discussed. Abdominal pain, Analgesics, Acute abdomen, Emergency department, Opioids",critically reappraising the literature driven practice of analgesia administration for acute abdominal pain in the emergency room prior to surgical evaluation background classic teaching is that narcotic analgesia in the setting of an acute abdomen can alter physical examination findings and should therefore be withheld until after a surgeon s examination methods a telephone survey of emergency medicine physicians representing 60 us hospitals was conducted to assess the current practices and opinions regarding the early administration of narcotic analgesia in this setting relevant literature was also reviewed for methodological errors results fifty nine of 60 98 3 respondents reported that it is their practice to administer analgesia prior to surgical evaluation of these only 9 of 59 15 3 reported always informing the surgeon prior to dosing the patient the two most common motivations cited were that patient discomfort takes precedence 52 of 59 88 1 and that the literature supports the practice to be safe 51 of 59 86 4 conclusions it is common for emergency medicine physicians to medicate acute abdomen patients prior to surgical evaluation numerous significant study limitations and design flaws were found that question the validity of the four clinical trials supporting this practice because many physicians base their clinical decisions on these trials a careful analysis of their shortcomings as well as our own personal experiences and practice recommendations is discussed abdominal pain analgesics acute abdomen emergency department opioids,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
427,0,"Validation of a Dictyocaulus viviparus MSP-ELISA and cut-off adjustment in a one-year longitudinal field study in dairy cattle herds A one-year field study analysing lungworm seropositivity by use of the MSP-ELISA was performed (1) to investigate the antibody dynamics in individual milk samples following field (re-)infections of dairy cows with the bovine lungworm Dictyocaulus viviparus, (2) to investigate the correlation between individual and bulk tank milk (BTM) antibody titres and (3) to review the current individual as well as BTM cut-off value, which was extrapolated from dilution experiments (Fiedor et al., 2009). Over a one-year period individual and BTM samples were collected monthly on 15 dairy farms. Following a critical review of previous cut-off values, individual and BTM samples were subjected to different cut-off thresholds. Following Receiver-Operating-Characteristics (ROC) analysis, individual milk samples were assessed with the cut-off value 0.573, previously shown to be associated with each 100% sensitivity and specificity. In addition, the present study enabled BTM cut-off adjustment based on field data. To ensure reliable detection of herds with an in-herd prevalence of ≥20% the BTM cut-off was lowered from 0.493 to 0.410, corresponding to 100% sensitivity and 97.32% specificity. Regression analysis showed that the percentage of seropositive animals related to the corresponding BTM ODR correlated moderately (r=0.581, P<0.001), whereas a strong correlation (r=0.764, P<0.001) was found between mean individual and BTM ODR per herd and sampling month. Seasonal antibody pattern became obvious in a single-peaked antibody curve in late summer/early autumn for individual milk whilst BTM showed a two-peaked distribution with an additional spring peak besides the late summer/early autumn peak. This leads to the conclusion that the BTM-ELISA could be a useful tool to detect and control pasture contamination in the spring, following sexual maturation of hypobiotic lungworm larvae harboured by clinically asymptomatic carrier animals. In addition to the knowledge gained on antibody patterns in dairy herds and the relationship of individual and BTM, the present study enabled sensitivity and specificity calculations for the obsolete BTM cut-off value 0.493 to be performed. Bovine lungworm, Milk ELISA, Bulk tank milk, Antibody titre, Cut-off, Seroprevalence, In-herd prevalence",validation of a dictyocaulus viviparus msp elisa and cut off adjustment in a one year longitudinal field study in dairy cattle herds a one year field study analysing lungworm seropositivity by use of the msp elisa was performed 1 to investigate the antibody dynamics in individual milk samples following field re infections of dairy cows with the bovine lungworm dictyocaulus viviparus 2 to investigate the correlation between individual and bulk tank milk btm antibody titres and 3 to review the current individual as well as btm cut off value which was extrapolated from dilution experiments fiedor et al 2009 over a one year period individual and btm samples were collected monthly on 15 dairy farms following a critical review of previous cut off values individual and btm samples were subjected to different cut off thresholds following receiver operating characteristics roc analysis individual milk samples were assessed with the cut off value 0 573 previously shown to be associated with each 100 sensitivity and specificity in addition the present study enabled btm cut off adjustment based on field data to ensure reliable detection of herds with an in herd prevalence of 20 the btm cut off was lowered from 0 493 to 0 410 corresponding to 100 sensitivity and 97 32 specificity regression analysis showed that the percentage of seropositive animals related to the corresponding btm odr correlated moderately r 0 581 p 0 001 whereas a strong correlation r 0 764 p 0 001 was found between mean individual and btm odr per herd and sampling month seasonal antibody pattern became obvious in a single peaked antibody curve in late summer early autumn for individual milk whilst btm showed a two peaked distribution with an additional spring peak besides the late summer early autumn peak this leads to the conclusion that the btm elisa could be a useful tool to detect and control pasture contamination in the spring following sexual maturation of hypobiotic lungworm larvae harboured by clinically asymptomatic carrier animals in addition to the knowledge gained on antibody patterns in dairy herds and the relationship of individual and btm the present study enabled sensitivity and specificity calculations for the obsolete btm cut off value 0 493 to be performed bovine lungworm milk elisa bulk tank milk antibody titre cut off seroprevalence in herd prevalence,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
428,0,"Movie with Scents Generated by Olfactory Display Using Solenoid Valves We developed the olfactory display to blend 8 component odors at any composition. The solenoid valVes controled by the algorithm of of the delta sigma modulation showed the sufficient capability. Then,we developed the system for presenting a movie together with scents. We actually made the content of the movie with scents and evaluated it using questionnaire survey. It was found that the scene with smell attracted the people's attention and, moreover, the contrast of the pleasant smell with the offensive one emphasized their attention. Furthermore, we established several guidelines to make the contents of the movies with scents. Motion pictures, Olfactory, Displays, Solenoids, Valves, Electronic mail, Virtual reality, USA Councils",movie with scents generated by olfactory display using solenoid valves we developed the olfactory display to blend 8 component odors at any composition the solenoid valves controled by the algorithm of of the delta sigma modulation showed the sufficient capability then we developed the system for presenting a movie together with scents we actually made the content of the movie with scents and evaluated it using questionnaire survey it was found that the scene with smell attracted the people s attention and moreover the contrast of the pleasant smell with the offensive one emphasized their attention furthermore we established several guidelines to make the contents of the movies with scents motion pictures olfactory displays solenoids valves electronic mail virtual reality usa councils,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
429,0,"An empirical study of code smells in JavaScript projects JavaScript is a powerful scripting programming language that has gained a lot of attention this past decade. Initially used exclusively for client-side web development, it has evolved to become one of the most popular programming languages, with developers now using it for both client-side and server-side application development. Similar to applications written in other programming languages, JavaScript applications contain code smells, which are poor design choices that can negatively impact the quality of an application. In this paper, we investigate code smells in JavaScript server-side applications with the aim to understand how they impact the fault-proneness of applications. We detect 12 types of code smells in 537 releases of five popular JavaScript applications (i.e., express, grunt, bower, less.js, and request) and perform survival analysis, comparing the time until a fault occurrence, in files containing code smells and files without code smells. Results show that (1) on average, files without code smells have hazard rates 65% lower than files with code smells. (2) Among the studied smells, ``Variable Re-assign'' and ``Assignment In Conditional statements'' code smells have the highest hazard rates. Additionally, we conduct a survey with 1,484 JavaScript developers, to understand the perception of developers towards our studied code smells. We found that developers consider ``Nested Callbacks'', ``Variable Re-assign'' and ``Long Parameter List'' code smells to be serious design problems that hinder the maintainability and reliability of applications. This assessment is in line with the findings of our quantitative analysis. Overall, code smells affect negatively the quality of JavaScript applications and developers should consider tracking and removing them early on before the release of applications to the public. Internet, Java, programming languages, source code (software), code smell empirical study, JavaScript projects, scripting programming language, client-side Web development, server-side application development, JavaScript server-side applications, application fault-proneness, survival analysis, fault occurrence, variable reassign code smells, assignment in conditional statements code smells, nested callback code smells, long parameter list code smells, Reactive power, Computer languages, Hazards, Context, Object oriented programming, Fault diagnosis",an empirical study of code smells in javascript projects javascript is a powerful scripting programming language that has gained a lot of attention this past decade initially used exclusively for client side web development it has evolved to become one of the most popular programming languages with developers now using it for both client side and server side application development similar to applications written in other programming languages javascript applications contain code smells which are poor design choices that can negatively impact the quality of an application in this paper we investigate code smells in javascript server side applications with the aim to understand how they impact the fault proneness of applications we detect 12 types of code smells in 537 releases of five popular javascript applications i e express grunt bower less js and request and perform survival analysis comparing the time until a fault occurrence in files containing code smells and files without code smells results show that 1 on average files without code smells have hazard rates 65 lower than files with code smells 2 among the studied smells variable re assign and assignment in conditional statements code smells have the highest hazard rates additionally we conduct a survey with 1 484 javascript developers to understand the perception of developers towards our studied code smells we found that developers consider nested callbacks variable re assign and long parameter list code smells to be serious design problems that hinder the maintainability and reliability of applications this assessment is in line with the findings of our quantitative analysis overall code smells affect negatively the quality of javascript applications and developers should consider tracking and removing them early on before the release of applications to the public internet java programming languages source code software code smell empirical study javascript projects scripting programming language client side web development server side application development javascript server side applications application fault proneness survival analysis fault occurrence variable reassign code smells assignment in conditional statements code smells nested callback code smells long parameter list code smells reactive power computer languages hazards context object oriented programming fault diagnosis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
430,0,"Existential Consistency: Measuring and Understanding Consistency at Facebook Replicated storage for large Web services faces a trade-off between stronger forms of consistency and higher performance properties. Stronger consistency prevents anomalies, i.e., unexpected behavior visible to users, and reduces programming complexity. There is much recent work on improving the performance properties of systems with stronger consistency, yet the flip-side of this trade-off remains elusively hard to quantify. To the best of our knowledge, no prior work does so for a large, production Web service. We use measurement and analysis of requests to Facebook's TAO system to quantify how often anomalies happen in practice, i.e., when results returned by eventually consistent TAO differ from what is allowed by stronger consistency models. For instance, our analysis shows that 0.0004% of reads to vertices would return different results in a linearizable system. This in turn gives insight into the benefits of stronger consistency; 0.0004% of reads are potential anomalies that a linearizable system would prevent. We directly study local consistency models---i.e., those we can analyze using requests to a sample of objects---and use the relationships between models to infer bounds on the others. We also describe a practical consistency monitoring system that tracks φ-consistency, a new consistency metric ideally suited for health monitoring. In addition, we give insight into the increased programming complexity of weaker consistency by discussing bugs our monitoring uncovered, and anti-patterns we teach developers to avoid. []",existential consistency measuring and understanding consistency at facebook replicated storage for large web services faces a trade off between stronger forms of consistency and higher performance properties stronger consistency prevents anomalies i e unexpected behavior visible to users and reduces programming complexity there is much recent work on improving the performance properties of systems with stronger consistency yet the flip side of this trade off remains elusively hard to quantify to the best of our knowledge no prior work does so for a large production web service we use measurement and analysis of requests to facebook s tao system to quantify how often anomalies happen in practice i e when results returned by eventually consistent tao differ from what is allowed by stronger consistency models for instance our analysis shows that 0 0004 of reads to vertices would return different results in a linearizable system this in turn gives insight into the benefits of stronger consistency 0 0004 of reads are potential anomalies that a linearizable system would prevent we directly study local consistency models i e those we can analyze using requests to a sample of objects and use the relationships between models to infer bounds on the others we also describe a practical consistency monitoring system that tracks consistency a new consistency metric ideally suited for health monitoring in addition we give insight into the increased programming complexity of weaker consistency by discussing bugs our monitoring uncovered and anti patterns we teach developers to avoid,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
431,0,"Olfactory media impact on task performance: The case of a word search game Innovation in regards to olfaction, specifically multimedia, pales in comparison to audio and visual stimuli, further dominated by recent advances such as HD and Super AMOLED displays and HD and Surround Sound audio offering an improved multimedia experience for the consumer. With the popularity of 3D multimedia, specifically movies, television and smart phone technology, this reaffirms the desire for multimedia consumers to increase the reality and realism of the environment they are within. The introduction of olfaction could further enhance the experience of the viewer, as they are able to be engrossed within even more authentic situational conditions. Olfaction - ``Smell'', however, is notoriously considered to be distracting or annoying. In this paper, we look at the impact of olfactory media on users' performance of a task, specifically completing a word search game. Findings from the study showed that users' performance of the task was significantly better in the presence of olfaction. chemioception, computer games, multimedia computing, smart phones, olfactory media impact, task performance, word search game, multimedia experience, smart phone technology, television, Olfactory, Multimedia communication, Media, Visualization, Technological innovation, Conferences, Olfaction, Smell, Multimedia, Task performance",olfactory media impact on task performance the case of a word search game innovation in regards to olfaction specifically multimedia pales in comparison to audio and visual stimuli further dominated by recent advances such as hd and super amoled displays and hd and surround sound audio offering an improved multimedia experience for the consumer with the popularity of 3d multimedia specifically movies television and smart phone technology this reaffirms the desire for multimedia consumers to increase the reality and realism of the environment they are within the introduction of olfaction could further enhance the experience of the viewer as they are able to be engrossed within even more authentic situational conditions olfaction smell however is notoriously considered to be distracting or annoying in this paper we look at the impact of olfactory media on users performance of a task specifically completing a word search game findings from the study showed that users performance of the task was significantly better in the presence of olfaction chemioception computer games multimedia computing smart phones olfactory media impact task performance word search game multimedia experience smart phone technology television olfactory multimedia communication media visualization technological innovation conferences olfaction smell multimedia task performance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
432,0,"Predicting Bugs in Software Code Changes Using Isolation Forest Identifying bug immediately when it is introduced can help improve the validity and effectiveness of bug fixing. Predicting bugs in software code changes makes such identification possible. Buggy changes, changes that introduce bugs into source code, can be viewed as anomalies relative to clean changes for that they are rare and irregular. Thus, anomaly detection techniques can be applied to buggy change prediction. Isolation Forest, which detects anomalies based on the hypothesis that the anomalies have the shortest average path length on the constructed random forest, has exhibited its good performance on anomaly detection compared to other anomaly detection methods. In this paper, we adopt it in predicting bugs in software code changes. Empirical study with eight practical open source projects are conducted to validate the effective of Isolation Forest in bug prediction in software code changes. Results of the empirical study show that compared to traditional classification methods used in literature, Isolation Forest can achieve better clean precision, buggy recall, buggy F-measure, AUC and Gmean. pattern classification, program debugging, public domain software, source code (software), software code changes, isolation forest, bug fixing, source code, anomaly detection techniques, buggy change prediction, random forest, open source projects, classification methods, Computer bugs, Feature extraction, Software, Complexity theory, Training, Predictive models",predicting bugs in software code changes using isolation forest identifying bug immediately when it is introduced can help improve the validity and effectiveness of bug fixing predicting bugs in software code changes makes such identification possible buggy changes changes that introduce bugs into source code can be viewed as anomalies relative to clean changes for that they are rare and irregular thus anomaly detection techniques can be applied to buggy change prediction isolation forest which detects anomalies based on the hypothesis that the anomalies have the shortest average path length on the constructed random forest has exhibited its good performance on anomaly detection compared to other anomaly detection methods in this paper we adopt it in predicting bugs in software code changes empirical study with eight practical open source projects are conducted to validate the effective of isolation forest in bug prediction in software code changes results of the empirical study show that compared to traditional classification methods used in literature isolation forest can achieve better clean precision buggy recall buggy f measure auc and gmean pattern classification program debugging public domain software source code software software code changes isolation forest bug fixing source code anomaly detection techniques buggy change prediction random forest open source projects classification methods computer bugs feature extraction software complexity theory training predictive models,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
433,0,"Directional tracking in the domestic dog, Canis familiaris The ability of dogs to determine the direction of a track has been subject to little study. We conducted two experiments to examine the ability of dogs to identify the direction of human-laid trails and explore the mechanisms by which dogs determine directionality. Experiment 1 investigated the influence of canine sex and age on the ability of 22 police dogs to determine the correct direction of 10 human-laid trails. The direction in which the trail was laid on the dogs' ability to determine directionality was also explored. Eight (36.3%) dogs were consistently able to determine the correct direction of the trails. Male dogs identified the correct direction of the trails more frequently than females. Younger dogs were better at identifying the correct direction of the trails than older animals. Dogs identified the correct direction of those trails laid from left to right more frequently than those laid from right to left. Experiment 2 explored whether dogs use olfactory or visual cues to determine the correct direction of a human-laid trail. Eight dogs that were capable of following human trails in the correct direction were employed to track 10 trails that had been laid by a handler walking backwards, thereby rendering the trails devoid of accurate directional visual information. All of the dogs were consistently able to identify the correct direction of the trails. Overall, findings suggest that relatively few of the dogs in this study were accurately able to track in the correct direction, and that the dogs' ability to determine directionality was related to the animals' age and sex. Findings also suggest that the dogs employed olfactory cues to correctly elucidate direction. Dog, Direction, Odour, Olfaction, Scent, Smell, Tracking",directional tracking in the domestic dog canis familiaris the ability of dogs to determine the direction of a track has been subject to little study we conducted two experiments to examine the ability of dogs to identify the direction of human laid trails and explore the mechanisms by which dogs determine directionality experiment 1 investigated the influence of canine sex and age on the ability of 22 police dogs to determine the correct direction of 10 human laid trails the direction in which the trail was laid on the dogs ability to determine directionality was also explored eight 36 3 dogs were consistently able to determine the correct direction of the trails male dogs identified the correct direction of the trails more frequently than females younger dogs were better at identifying the correct direction of the trails than older animals dogs identified the correct direction of those trails laid from left to right more frequently than those laid from right to left experiment 2 explored whether dogs use olfactory or visual cues to determine the correct direction of a human laid trail eight dogs that were capable of following human trails in the correct direction were employed to track 10 trails that had been laid by a handler walking backwards thereby rendering the trails devoid of accurate directional visual information all of the dogs were consistently able to identify the correct direction of the trails overall findings suggest that relatively few of the dogs in this study were accurately able to track in the correct direction and that the dogs ability to determine directionality was related to the animals age and sex findings also suggest that the dogs employed olfactory cues to correctly elucidate direction dog direction odour olfaction scent smell tracking,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
434,0,"Drivers for Software Refactoring Decisions This paper presents an empirical study of drivers for software refactoring decisions. We studied the refactoring decisions made by 37 students evaluating ten methods of a purposefully constructed Java program. The decision rationales reported by the evaluators were coded to identify the drivers behind the decisions. The identified drivers were categorized into Structure, Documentation, Visual Representation, and General drivers. The evaluators had conflicting opinions both regarding the internal quality of the methods and refactoring decisions. Complex code problems were detected only by experienced evaluators. Using regression analysis, we looked at the predictive value of drivers explaining the refactoring decisions. The most salient driver leading to a favourable refactoring decision was method size. This study provides information of the refactoring decisions and helps form a basis for creating code problem detectors. By comparing automatic detection and the identified drivers we gained understanding of code problems that are difficult or impossible to detect automatically, for example Poor Algorithm. Issues detected only by experienced developers, and code problems for which the human eye surpasses automatic detection indicate good areas for developer education. code smells, evolvability, maintainability, qualitative analysis, refactoring",drivers for software refactoring decisions this paper presents an empirical study of drivers for software refactoring decisions we studied the refactoring decisions made by 37 students evaluating ten methods of a purposefully constructed java program the decision rationales reported by the evaluators were coded to identify the drivers behind the decisions the identified drivers were categorized into structure documentation visual representation and general drivers the evaluators had conflicting opinions both regarding the internal quality of the methods and refactoring decisions complex code problems were detected only by experienced evaluators using regression analysis we looked at the predictive value of drivers explaining the refactoring decisions the most salient driver leading to a favourable refactoring decision was method size this study provides information of the refactoring decisions and helps form a basis for creating code problem detectors by comparing automatic detection and the identified drivers we gained understanding of code problems that are difficult or impossible to detect automatically for example poor algorithm issues detected only by experienced developers and code problems for which the human eye surpasses automatic detection indicate good areas for developer education code smells evolvability maintainability qualitative analysis refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
435,0,"Colors and Kansei In this paper human Kansei to colors is studied investigating the relation between colors of food and feelings of tastiness of food. This study aims at an approach to Kansei marketing perceiving the meal market. It is important for meal marketing to take consumer's Kansei into consideration since consumer's choice of foodstuff is much influenced by human Kansei. What we feel tasty to food is not related to only the sense of eating but also the sense of smell, sight, touch, hearing, etc., and especially the sense of sight is the most delicate sense organ compared with other sense organs of human body. Here the colors of the surface of food are perceived and it is studied how we feel tasty to food depending on the colors of the surface of food colour, consumer behaviour, food products, human Kansei, food color, food taste, Kansei marketing, meal market, Humans, Testing, Asia, Sense organs, Auditory system, Color, Marketing management, Statistics, Relays, Statistical distributions",colors and kansei in this paper human kansei to colors is studied investigating the relation between colors of food and feelings of tastiness of food this study aims at an approach to kansei marketing perceiving the meal market it is important for meal marketing to take consumer s kansei into consideration since consumer s choice of foodstuff is much influenced by human kansei what we feel tasty to food is not related to only the sense of eating but also the sense of smell sight touch hearing etc and especially the sense of sight is the most delicate sense organ compared with other sense organs of human body here the colors of the surface of food are perceived and it is studied how we feel tasty to food depending on the colors of the surface of food colour consumer behaviour food products human kansei food color food taste kansei marketing meal market humans testing asia sense organs auditory system color marketing management statistics relays statistical distributions,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
436,0,"Hand washing and disgust response to handling different food stimuli between two different cultures Increasing compliance with proper hand washing among consumers and foodservice workers during food handling and preparation is an effective strategy to minimize the spread of bacteria and disease. At home and in the food industry contributing factors and barriers exist that lead to low rates of compliance with proper hand hygiene. Recently, researchers have begun to emphasize the importance of internal motivational factors such as the emotion of disgust and how it affects hygiene behaviors. This study was designed to determine the influence of disgust and other motives on hand washing among participants when handling common foods in the foodservice industry, and if these responses are culturally dependent. A preliminary survey that showed differing levels of consumers' disgust among 21 foods commonly handled in the food industry was conducted. In the main part of the study, representatives from two cultures, Caucasian and Hispanic, were observed while they handled four common foods; apple, bread, chicken and fish. Results from this study showed that hand washing behavior was affected by the type of food being handled and the intensity of the emotion of disgust. Individuals tended to wash their hands more frequently for foods they perceived as more hazardous, and their motives to wash varied among variables of gender (self-protection for men, carryover effects for women), culture (self-protection for Caucasians, texture for Hispanics) and the type of food (self-protection for chicken, smell for fish). Additionally, as the feeling of disgust increased among individuals their probability to wash their hands also increased. Factors that did not show an influence on hand washing included the culture and gender of the participant, and whether they had past foodservice experience. These findings, in combination other studies, should be considered when designing motivation and training strategies to increase consumer or foodservice employee hand washing behaviors. Hand washing, Disgust, Foodborne illness, Demographics",hand washing and disgust response to handling different food stimuli between two different cultures increasing compliance with proper hand washing among consumers and foodservice workers during food handling and preparation is an effective strategy to minimize the spread of bacteria and disease at home and in the food industry contributing factors and barriers exist that lead to low rates of compliance with proper hand hygiene recently researchers have begun to emphasize the importance of internal motivational factors such as the emotion of disgust and how it affects hygiene behaviors this study was designed to determine the influence of disgust and other motives on hand washing among participants when handling common foods in the foodservice industry and if these responses are culturally dependent a preliminary survey that showed differing levels of consumers disgust among 21 foods commonly handled in the food industry was conducted in the main part of the study representatives from two cultures caucasian and hispanic were observed while they handled four common foods apple bread chicken and fish results from this study showed that hand washing behavior was affected by the type of food being handled and the intensity of the emotion of disgust individuals tended to wash their hands more frequently for foods they perceived as more hazardous and their motives to wash varied among variables of gender self protection for men carryover effects for women culture self protection for caucasians texture for hispanics and the type of food self protection for chicken smell for fish additionally as the feeling of disgust increased among individuals their probability to wash their hands also increased factors that did not show an influence on hand washing included the culture and gender of the participant and whether they had past foodservice experience these findings in combination other studies should be considered when designing motivation and training strategies to increase consumer or foodservice employee hand washing behaviors hand washing disgust foodborne illness demographics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
437,0,"Demonstration of Improved Olfactory Display using Rapidly-Switching Solenoid Valves This article shows our research efforts toward the development of an olfactory display system for presenting odors with a vivid sense of reality. A multi-component olfactory display is developed, which enables generation of a variety of odors by blending multiple odor vapors with arbitrary ratios. In this research demo, the two contents using the olfactory display will be demonstrated. The first one is the experiment on odor approximation using odor components extracted from a mass spectrum database. The second one is the reproduction of video with smell. The temporal changes of odor kind and its concentration can be recorded and can be presented together with movie obtained from a Web camera. People can enjoy the recorded video with scents. chemioception, interactive devices, user interfaces, virtual reality, rapidly-switching solenoid valves, odors, multicomponent olfactory display, mass spectrum database, Olfactory, Displays, Solenoids, Valves, Pulse width modulation, Virtual reality, Surface acoustic wave devices, Acoustic waves, Frequency, Nose, olfactory display, odor blender, solenoid valve, odor approximation, video with scents, H.5.1 [Information Interfaces and Presentation]: Multimedia Information Systems¿Artificial, Augmented, Virtual Realities",demonstration of improved olfactory display using rapidly switching solenoid valves this article shows our research efforts toward the development of an olfactory display system for presenting odors with a vivid sense of reality a multi component olfactory display is developed which enables generation of a variety of odors by blending multiple odor vapors with arbitrary ratios in this research demo the two contents using the olfactory display will be demonstrated the first one is the experiment on odor approximation using odor components extracted from a mass spectrum database the second one is the reproduction of video with smell the temporal changes of odor kind and its concentration can be recorded and can be presented together with movie obtained from a web camera people can enjoy the recorded video with scents chemioception interactive devices user interfaces virtual reality rapidly switching solenoid valves odors multicomponent olfactory display mass spectrum database olfactory displays solenoids valves pulse width modulation virtual reality surface acoustic wave devices acoustic waves frequency nose olfactory display odor blender solenoid valve odor approximation video with scents h 5 1 information interfaces and presentation multimedia information systems artificial augmented virtual realities,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
438,0,"A Study of the Definition and Identification of Bad Smells in Aspect Oriented Programming AOP (aspect oriented programming) is a programming paradigm for enhancing the degree of modularity in a system and it helps developers to maintain and manage the system easier. A bad smell means that a bad design that may lead to negative effects while developing a software system. Bad smells may also appear in the system that is developed using AOP paradigm. Therefore, it is important that bad smells can be detected in an AOP-implemented system. In this paper, various types of AOP bad smells are described with its definition and discovering patterns. A two-stage analysis method is proposed for identifying these AOP bad smells in a software system. Furthermore, we provided flow charts that aim to identify these AOP bad smells for helping developers to understand how to extract AOP bad smells. aspect-oriented programming, software engineering, bad smells, aspect oriented programming, AOP, programming paradigm, software system development, Cloning, Measurement, Data mining, Graphical user interfaces, Programming profession, Software systems, Bad smells, aspect, identify",a study of the definition and identification of bad smells in aspect oriented programming aop aspect oriented programming is a programming paradigm for enhancing the degree of modularity in a system and it helps developers to maintain and manage the system easier a bad smell means that a bad design that may lead to negative effects while developing a software system bad smells may also appear in the system that is developed using aop paradigm therefore it is important that bad smells can be detected in an aop implemented system in this paper various types of aop bad smells are described with its definition and discovering patterns a two stage analysis method is proposed for identifying these aop bad smells in a software system furthermore we provided flow charts that aim to identify these aop bad smells for helping developers to understand how to extract aop bad smells aspect oriented programming software engineering bad smells aspect oriented programming aop programming paradigm software system development cloning measurement data mining graphical user interfaces programming profession software systems bad smells aspect identify,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
439,0,"Analyzing software evolution and quality by extracting Asynchrony change patterns Change patterns describe two or more files were often changed together during the development or the maintenance of software systems. Several studies have been presented to detect change patterns and to analyze their types and their impact on software quality. In this context, we introduced the Asynchrony change pattern to describes a set of files that always change together in the same change periods, regardless developers who maintained them. In this paper, we investigate the impact of Asynchrony change pattern on design and code smells such as anti-patterns and code clones. Concretely, we conduct an empirical study by detecting Asynchrony change patterns, anti-patterns and code clones occurrences on 22 versions of four software systems and analyzing their fault-proneness. Results show that cloned files that follow the same Asynchrony change patterns have significantly increased fault-proneness with respect to other clones, and that anti-patterns following the same Asynchrony change pattern can be up to five times more risky in terms of fault-proneness as compared to other anti-patterns. Asynchrony change patterns thus seem to be strong indicators of fault-proneness for clones and anti-patterns. Change patterns, Anti-patterns, Clones, Fault-proneness, Software quality",analyzing software evolution and quality by extracting asynchrony change patterns change patterns describe two or more files were often changed together during the development or the maintenance of software systems several studies have been presented to detect change patterns and to analyze their types and their impact on software quality in this context we introduced the asynchrony change pattern to describes a set of files that always change together in the same change periods regardless developers who maintained them in this paper we investigate the impact of asynchrony change pattern on design and code smells such as anti patterns and code clones concretely we conduct an empirical study by detecting asynchrony change patterns anti patterns and code clones occurrences on 22 versions of four software systems and analyzing their fault proneness results show that cloned files that follow the same asynchrony change patterns have significantly increased fault proneness with respect to other clones and that anti patterns following the same asynchrony change pattern can be up to five times more risky in terms of fault proneness as compared to other anti patterns asynchrony change patterns thus seem to be strong indicators of fault proneness for clones and anti patterns change patterns anti patterns clones fault proneness software quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
440,0,"How Surveys, Tutors, and Software Help to Assess Scrum Adoption in a Classroom Software Engineering Project Agile methods are best taught in a hands-on fashion in realistic projects. The main challenge in doing so is to assess whether students apply the methods correctly without requiring complete supervision throughout the entire project. This paper presents experiences from a classroom project where 38 students developed a single system using a scaled version of Scrum. Surveys helped us to identify which elements of Scrum correlated most with student satisfaction or posed the biggest challenges. These insights were augmented by a team of tutors, which accompanied main meetings throughout the project to provide feedback to the teams, and captured impressions of method application in practice. Finally, we performed a post-hoc, tool-supported analysis of collaboration artifacts to detect concrete indicators for anti-patterns in Scrum adoption. Through the combination of these techniques we were able to understand how students implemented Scrum in this course and which elements require further lecturing and tutoring in future iterations. Automated analysis of collaboration artifacts proved to be a promising addition to the development process that could potentially reduce manual efforts in future courses and allow for more concrete and targeted feedback, as well as more objective assessment. Scrum, classroom project, collaboration analysis, multi-level assessment",how surveys tutors and software help to assess scrum adoption in a classroom software engineering project agile methods are best taught in a hands on fashion in realistic projects the main challenge in doing so is to assess whether students apply the methods correctly without requiring complete supervision throughout the entire project this paper presents experiences from a classroom project where 38 students developed a single system using a scaled version of scrum surveys helped us to identify which elements of scrum correlated most with student satisfaction or posed the biggest challenges these insights were augmented by a team of tutors which accompanied main meetings throughout the project to provide feedback to the teams and captured impressions of method application in practice finally we performed a post hoc tool supported analysis of collaboration artifacts to detect concrete indicators for anti patterns in scrum adoption through the combination of these techniques we were able to understand how students implemented scrum in this course and which elements require further lecturing and tutoring in future iterations automated analysis of collaboration artifacts proved to be a promising addition to the development process that could potentially reduce manual efforts in future courses and allow for more concrete and targeted feedback as well as more objective assessment scrum classroom project collaboration analysis multi level assessment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
441,0,"Optimization of a nanofiltration membrane process for tomato industry wastewater effluent treatment The wastewater stream produced during tomato manufacturing is characterized by a dark color and bad smell, and is heavily polluted by organics, suspended solids and ground particles. The concentration of pollutants in the effluent can vary considerably with time and space due to the changes in the harvested fruit composition and season. A discharge in the municipal sewage system of these streams is not directly possible because of the high organic contents above the legally tolerated limits. This work deals with the treatment and purification of the wastewater stream from the tomato industry by a biological pretreatment step and a batch nanofiltration process step. For the latter, critical fluxes were measured at different recovery levels. This permits applying membrane process optimization methods based on the critical flux. The experiments show that the purification of the wastewater up to a water compatible with the municipal sewer system requirements is possible, with a recovery rate of 90%. Short-term fouling issues may be avoided at permeate fluxes about or below 8.2 l h−1 m2. Wastewater, Nanofiltration, Optimization, Fouling, Tomato",optimization of a nanofiltration membrane process for tomato industry wastewater effluent treatment the wastewater stream produced during tomato manufacturing is characterized by a dark color and bad smell and is heavily polluted by organics suspended solids and ground particles the concentration of pollutants in the effluent can vary considerably with time and space due to the changes in the harvested fruit composition and season a discharge in the municipal sewage system of these streams is not directly possible because of the high organic contents above the legally tolerated limits this work deals with the treatment and purification of the wastewater stream from the tomato industry by a biological pretreatment step and a batch nanofiltration process step for the latter critical fluxes were measured at different recovery levels this permits applying membrane process optimization methods based on the critical flux the experiments show that the purification of the wastewater up to a water compatible with the municipal sewer system requirements is possible with a recovery rate of 90 short term fouling issues may be avoided at permeate fluxes about or below 8 2 l h 1 m2 wastewater nanofiltration optimization fouling tomato,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
442,0,"Deterpenation of mandarin (Citrus reticulata) peel oils by means of countercurrent multistage extraction and adsorption/desorption with supercritical CO2 The mandarin (Citrus reticulata) peel oil consists of more than 98wt.% terpenes and a small fraction of oxygenated components responsible for its distinct smell. The terpene fraction is composed mostly of limonene and the oxygenated aroma fractions are composed mainly of linalool and decanal. The removal of terpenes must be performed in order to increase the storage time of citrus oils. In this work, the deterpenation of two different cold-pressed mandarin peel oils employing countercurrent extraction and ad-/desorption with supercritical CO2 and a combination of these processes were investigated. Countercurrent experiments were carried out at pressures ranging from 8.5 to 10.0MPa and at 50 and 60$ ^\circ$C. At 10.0MPa and 60$ ^\circ$C, a maximum selectivity of 12.8 between terpenes and aromas could be obtained at a folding ratio of 5.0, showing that the fractionation by means of countercurrent gas extraction could be employed. To investigate the complete removal of terpenes, ad-/desorption experiments were also performed and both the raffinate samples obtained through the countercurrent fractionation and the crude cold-pressed peel oils were used as feed material. The components evaluated were desorbed from silica-gel and the best fractionation results were obtained at 40$ ^\circ$C, 25wt.% oil loading in two sequential pressure steps. Initially, terpenes were completely desorbed at 8.0MPa. The second desorption step was carried out at 20.0MPa and a selective fractionation of important aroma components was observed. Additionally, scale-up experiments were performed. Mandarin peel oil, Countercurrent extraction, Desorption, Terpenes, Supercritical fractionation",deterpenation of mandarin citrus reticulata peel oils by means of countercurrent multistage extraction and adsorption desorption with supercritical co2 the mandarin citrus reticulata peel oil consists of more than 98wt terpenes and a small fraction of oxygenated components responsible for its distinct smell the terpene fraction is composed mostly of limonene and the oxygenated aroma fractions are composed mainly of linalool and decanal the removal of terpenes must be performed in order to increase the storage time of citrus oils in this work the deterpenation of two different cold pressed mandarin peel oils employing countercurrent extraction and ad desorption with supercritical co2 and a combination of these processes were investigated countercurrent experiments were carried out at pressures ranging from 8 5 to 10 0mpa and at 50 and 60 circ c at 10 0mpa and 60 circ c a maximum selectivity of 12 8 between terpenes and aromas could be obtained at a folding ratio of 5 0 showing that the fractionation by means of countercurrent gas extraction could be employed to investigate the complete removal of terpenes ad desorption experiments were also performed and both the raffinate samples obtained through the countercurrent fractionation and the crude cold pressed peel oils were used as feed material the components evaluated were desorbed from silica gel and the best fractionation results were obtained at 40 circ c 25wt oil loading in two sequential pressure steps initially terpenes were completely desorbed at 8 0mpa the second desorption step was carried out at 20 0mpa and a selective fractionation of important aroma components was observed additionally scale up experiments were performed mandarin peel oil countercurrent extraction desorption terpenes supercritical fractionation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
443,0,"Can Multisensorial Media Improve Learner Experience? In recent years, the emerging immersive technologies (e.g. Virtual/Augmented Reality, multisensorial media) bring brand-new multi-dimensional effects such as 3D vision, immersion, vibration, smell, airflow, etc. to gaming, video entertainment and other aspects of human life. This paper reports results from an European Horizon 2020 research project on the impact of multisensoral media (mulsemedia) on educational learner experience. A mulsemedia-enhanced test-bed was developed to perform delivery of video content enhanced with haptic, olfaction and airflow effects. The results of the quality rating and questionnaires show significant improvements in terms of mulsemedia-enhanced teaching. E-learning, Multisensory, User Experience",can multisensorial media improve learner experience in recent years the emerging immersive technologies e g virtual augmented reality multisensorial media bring brand new multi dimensional effects such as 3d vision immersion vibration smell airflow etc to gaming video entertainment and other aspects of human life this paper reports results from an european horizon 2020 research project on the impact of multisensoral media mulsemedia on educational learner experience a mulsemedia enhanced test bed was developed to perform delivery of video content enhanced with haptic olfaction and airflow effects the results of the quality rating and questionnaires show significant improvements in terms of mulsemedia enhanced teaching e learning multisensory user experience,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
444,0,"A Large-scale Empirical Study on Self-admitted Technical Debt Technical debt is a metaphor introduced by Cunningham to indicate ""not quite right code which we postpone making it right"". Examples of technical debt are code smells and bug hazards. Several techniques have been proposed to detect different types of technical debt. Among those, Potdar and Shihab defined heuristics to detect instances of self-admitted technical debt in code comments, and used them to perform an empirical study on five software systems to investigate the phenomenon. Still, very little is known about the diffusion and evolution of technical debt in software projects. This paper presents a differentiated replication of the work by Potdar and Shihab. We run a study across 159 software projects to investigate the diffusion and evolution of self-admitted technical debt and its relationship with software quality. The study required the mining of over 600K commits and 2 Billion comments as well as a qualitative analysis performed via open coding. Our main findings show that self-admitted technical debt (i) is diffused, with an average of 51 instances per system, (ii) is mostly represented by code (30%), defect, and requirement debt (20% each), (iii) increases over time due to the introduction of new instances that are not fixed by developers, and (iv) even when fixed, it survives long time (over 1,000 commits on average) in the system. empirical software engineering, mining software repositories, technical debt",a large scale empirical study on self admitted technical debt technical debt is a metaphor introduced by cunningham to indicate not quite right code which we postpone making it right examples of technical debt are code smells and bug hazards several techniques have been proposed to detect different types of technical debt among those potdar and shihab defined heuristics to detect instances of self admitted technical debt in code comments and used them to perform an empirical study on five software systems to investigate the phenomenon still very little is known about the diffusion and evolution of technical debt in software projects this paper presents a differentiated replication of the work by potdar and shihab we run a study across 159 software projects to investigate the diffusion and evolution of self admitted technical debt and its relationship with software quality the study required the mining of over 600k commits and 2 billion comments as well as a qualitative analysis performed via open coding our main findings show that self admitted technical debt i is diffused with an average of 51 instances per system ii is mostly represented by code 30 defect and requirement debt 20 each iii increases over time due to the introduction of new instances that are not fixed by developers and iv even when fixed it survives long time over 1 000 commits on average in the system empirical software engineering mining software repositories technical debt,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
445,0,"Sensory-specific satiety is unaffected by manipulations of flavour intensity Sensory-specific satiety (SSS) refers to the decline in evaluated pleasantness of a food when consumed as compared with other unconsumed foods. In two experiments it was investigated whether SSS is sensitive to manipulations of flavour intensity. In the first experiment, 40 participants (36 women) repeatedly consumed 20 ml of either high- (group Strong; n=20) or low-intensity (group Weak) strawberry lemonade. If flavour intensity affects SSS these two groups should differ, but both groups displayed an equal degree of SSS concerning the evaluation of taste, smell, mouth feel, appearance and prospective consumption (largest F=1.34). In Experiment 2, 60 participants (54 women) were randomly assigned to one of three groups of equal size and repeatedly exposed to 20 ml lemonade that increased (group Increase) or decreased (group Decrease) in flavour intensity, or retained a given intensity with each exposure (group Same). It was investigated whether online changes in flavour intensity interfere with the development of SSS, but again these groups displayed a similar degree of SSS to the lemonade (largest F=1.40). It is concluded that manipulation of flavour intensity does not likely affect SSS. Sensory-specific satiety, Flavour intensity",sensory specific satiety is unaffected by manipulations of flavour intensity sensory specific satiety sss refers to the decline in evaluated pleasantness of a food when consumed as compared with other unconsumed foods in two experiments it was investigated whether sss is sensitive to manipulations of flavour intensity in the first experiment 40 participants 36 women repeatedly consumed 20 ml of either high group strong n 20 or low intensity group weak strawberry lemonade if flavour intensity affects sss these two groups should differ but both groups displayed an equal degree of sss concerning the evaluation of taste smell mouth feel appearance and prospective consumption largest f 1 34 in experiment 2 60 participants 54 women were randomly assigned to one of three groups of equal size and repeatedly exposed to 20 ml lemonade that increased group increase or decreased group decrease in flavour intensity or retained a given intensity with each exposure group same it was investigated whether online changes in flavour intensity interfere with the development of sss but again these groups displayed a similar degree of sss to the lemonade largest f 1 40 it is concluded that manipulation of flavour intensity does not likely affect sss sensory specific satiety flavour intensity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
446,0,"Olfactory influences on mood and autonomic, endocrine, and immune function Summary Despite aromatherapy's popularity, efficacy data are scant, and potential mechanisms are controversial. This randomized controlled trial examined the psychological, autonomic, endocrine, and immune consequences of one purported relaxant odor (lavender), one stimulant odor (lemon), and a no-odor control (water), before and after a stressor (cold pressor); 56 healthy men and women were exposed to each of the odors during three separate visits. To assess the effects of expectancies, participants randomized to the ``blind'' condition were given no information about the odors they would smell; ``primed'' individuals were told what odors they would smell during the session, and what changes to expect. Experimenters were blind. Self-report and unobtrusive mood measures provided robust evidence that lemon oil reliably enhances positive mood compared to water and lavender regardless of expectancies or previous use of aromatherapy. Moreover, norepinephrine levels following the cold pressor remained elevated when subjects smelled lemon, compared to water or lavender. DTH responses to Candida were larger following inhalation of water than lemon or lavender. Odors did not reliably alter IL-6 and IL-10 production, salivary cortisol, heart rate or blood pressure, skin barrier repair following tape stripping, or pain ratings following the cold pressor. Psychoneuroimmunology, Aromatherapy, Odor, Complementary medicine",olfactory influences on mood and autonomic endocrine and immune function summary despite aromatherapy s popularity efficacy data are scant and potential mechanisms are controversial this randomized controlled trial examined the psychological autonomic endocrine and immune consequences of one purported relaxant odor lavender one stimulant odor lemon and a no odor control water before and after a stressor cold pressor 56 healthy men and women were exposed to each of the odors during three separate visits to assess the effects of expectancies participants randomized to the blind condition were given no information about the odors they would smell primed individuals were told what odors they would smell during the session and what changes to expect experimenters were blind self report and unobtrusive mood measures provided robust evidence that lemon oil reliably enhances positive mood compared to water and lavender regardless of expectancies or previous use of aromatherapy moreover norepinephrine levels following the cold pressor remained elevated when subjects smelled lemon compared to water or lavender dth responses to candida were larger following inhalation of water than lemon or lavender odors did not reliably alter il 6 and il 10 production salivary cortisol heart rate or blood pressure skin barrier repair following tape stripping or pain ratings following the cold pressor psychoneuroimmunology aromatherapy odor complementary medicine,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
447,0,"Studying the Prevalence of Exception Handling Anti-patterns Modern programming languages, such as Java and C#, typically provide features that handle exceptions. These features separate error-handling code from regular source code and are proven to enhance the practice of software reliability, comprehension, and maintenance. Having acknowledged the advantages of exception handling features, the misuse of them can still cause catastrophic software failures, such as application crash. Prior studies suggested anti-patterns of exception handling, while little knowledge was shared about the prevalence of these anti-patterns. In this paper, we investigate the prevalence of exception-handling anti-patterns. We collected a thorough list of exception anti-patterns from 16 open-source Java and C# libraries and applications using an automated exception flow analysis tool. We found that although exception handling anti-patterns widely exist in all of our subjects, only a few anti-patterns (e.g. Unhandled Exceptions, Catch Generic, Unreachable Handler, Over-catch, and Destructive Wrapping) can be commonly identified. On the other hand, we find that the prevalence of anti-patterns illustrates differences between C# and Java. Our results call for further in-depth analyses on the exception handling practices across different languages. exception handling comprehension,  exception flow analysis,  static analysis,  object-oriented programming,  empirical software engineering",studying the prevalence of exception handling anti patterns modern programming languages such as java and c typically provide features that handle exceptions these features separate error handling code from regular source code and are proven to enhance the practice of software reliability comprehension and maintenance having acknowledged the advantages of exception handling features the misuse of them can still cause catastrophic software failures such as application crash prior studies suggested anti patterns of exception handling while little knowledge was shared about the prevalence of these anti patterns in this paper we investigate the prevalence of exception handling anti patterns we collected a thorough list of exception anti patterns from 16 open source java and c libraries and applications using an automated exception flow analysis tool we found that although exception handling anti patterns widely exist in all of our subjects only a few anti patterns e g unhandled exceptions catch generic unreachable handler over catch and destructive wrapping can be commonly identified on the other hand we find that the prevalence of anti patterns illustrates differences between c and java our results call for further in depth analyses on the exception handling practices across different languages exception handling comprehension exception flow analysis static analysis object oriented programming empirical software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
448,0,"Acceptability of entire male pork with various levels of androstenone and skatole by consumers according to their sensitivity to androstenone Consumer acceptability of entire male pork at eating was assessed in three experiments. The 140 consumers involved in each experiment were classified as insensitive (INSENS) to the odor of pure androstenone or sensitive perceiving it as pleasant (SENS-PLEA) or unpleasant (SENS-UNPL). Entire male pork with very low skatole and androstenone levels (LS-LA) was as well accepted as gilt pork, whatever the consumer category. Entire male pork with elevated levels in both skatole and androstenone (HS-HA) was clearly differentiated from LS-LA pork by SENS-UNPL, but not by SENS-PLEA or INSENS consumers. Whatever the consumer category, entire male pork with elevated levels of androstenone and very low levels of skatole (LS-HA and LS-HHA) were not significantly differentiated from LS-LA pork. The results suggest that, in the conditions of the present experiment, androstenone and skatole totally explain boar taint at eating and that the acceptability threshold for androstenone, in the absence of skatole, is in the range of 2--3μg/g liquid fat. Boar taint, Consumer acceptance, Androstenone, Skatole",acceptability of entire male pork with various levels of androstenone and skatole by consumers according to their sensitivity to androstenone consumer acceptability of entire male pork at eating was assessed in three experiments the 140 consumers involved in each experiment were classified as insensitive insens to the odor of pure androstenone or sensitive perceiving it as pleasant sens plea or unpleasant sens unpl entire male pork with very low skatole and androstenone levels ls la was as well accepted as gilt pork whatever the consumer category entire male pork with elevated levels in both skatole and androstenone hs ha was clearly differentiated from ls la pork by sens unpl but not by sens plea or insens consumers whatever the consumer category entire male pork with elevated levels of androstenone and very low levels of skatole ls ha and ls hha were not significantly differentiated from ls la pork the results suggest that in the conditions of the present experiment androstenone and skatole totally explain boar taint at eating and that the acceptability threshold for androstenone in the absence of skatole is in the range of 2 3 g g liquid fat boar taint consumer acceptance androstenone skatole,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
449,0,"Sexual incentive motivation, olfactory preference, and activation of the vomeronasal projection pathway by sexually relevant cues in non-copulating and naive male rats There are some apparently healthy male rats that fail to mate after repeated testing with receptive females. We have previously shown that these ``non-copulator (NC)'' males show no partner preference for a receptive female when given the opportunity to physically interact with a sexually receptive female or a sexually active male. We also demonstrated that although NC males prefer odors from estrous females to odors from anestrous females, this preference is significantly reduced in comparison to the preference displayed by copulating (C) males. The aim of the present study was to evaluate in NC males sexual incentive motivation, that is, the approach behavior of male rats to either a sexually receptive female or a sexually active male in a test where the subjects can smell, hear, and see the stimulus animal but prevents their physical interaction. In addition, we determined whether NC rats have alterations in their ability to detect odors from conspecifics or odors related to food. In the detection of odors from conspecifics, we determined if these NC males are sexually attracted toward odors from receptive females or sexually active males. For food-related odors, we quantified the time it took the subjects to locate a hidden a piece of apple. Finally, using the induction of Fos-immunoreactivity (Fos-IR) as an index of neuronal activation, we compared the response of the vomeronasal projection pathway (VN pathway) of C and NC male rats exposed to estrous bedding. Males without sexual experience (WSE) were included in all experiments to determine the importance of previous heterosexual experience in the different behavioral tests and in the activity of the VN pathway. In the sexual incentive motivation test, we found that C and WSE male rats have a clear preference for estrous females over sexually active males, whereas NC male rats showed no preference. In odor tests, our results showed that C males had a clear preference for odors from estrous females as opposed to odors from sexually active males. Although NC and WSE male rats showed a preference for estrous female odors, this preference was significantly reduced compared to that shown by C males. No differences were found between WSE, C, and NC males in the detection of stimuli associated with food-related odors. A significant increase in Fos-IR was observed in the mitral cell layer of the accessory olfactory bulb in all groups when exposed to estrous bedding. However, only the C male rats exposed to estrous female bedding showed an increase Fos-IR in all structures of the VN pathway. An increase in Fos-IR was observed in the medial preoptic area (MPOA) of WSE males exposed to estrous bedding. No increases in Fos-IR were detected along the VN pathway in NC male rats. We proposed that NC male rats do not display sexual behavior due to a reduced sexual motivation that could be caused by alterations in the neuronal activity of the VN pathway during the processing of estrous odors. Non-copulating male rats, Vomeronasal projection pathway, Main olfactory system, Fos immunoreactivity",sexual incentive motivation olfactory preference and activation of the vomeronasal projection pathway by sexually relevant cues in non copulating and naive male rats there are some apparently healthy male rats that fail to mate after repeated testing with receptive females we have previously shown that these non copulator nc males show no partner preference for a receptive female when given the opportunity to physically interact with a sexually receptive female or a sexually active male we also demonstrated that although nc males prefer odors from estrous females to odors from anestrous females this preference is significantly reduced in comparison to the preference displayed by copulating c males the aim of the present study was to evaluate in nc males sexual incentive motivation that is the approach behavior of male rats to either a sexually receptive female or a sexually active male in a test where the subjects can smell hear and see the stimulus animal but prevents their physical interaction in addition we determined whether nc rats have alterations in their ability to detect odors from conspecifics or odors related to food in the detection of odors from conspecifics we determined if these nc males are sexually attracted toward odors from receptive females or sexually active males for food related odors we quantified the time it took the subjects to locate a hidden a piece of apple finally using the induction of fos immunoreactivity fos ir as an index of neuronal activation we compared the response of the vomeronasal projection pathway vn pathway of c and nc male rats exposed to estrous bedding males without sexual experience wse were included in all experiments to determine the importance of previous heterosexual experience in the different behavioral tests and in the activity of the vn pathway in the sexual incentive motivation test we found that c and wse male rats have a clear preference for estrous females over sexually active males whereas nc male rats showed no preference in odor tests our results showed that c males had a clear preference for odors from estrous females as opposed to odors from sexually active males although nc and wse male rats showed a preference for estrous female odors this preference was significantly reduced compared to that shown by c males no differences were found between wse c and nc males in the detection of stimuli associated with food related odors a significant increase in fos ir was observed in the mitral cell layer of the accessory olfactory bulb in all groups when exposed to estrous bedding however only the c male rats exposed to estrous female bedding showed an increase fos ir in all structures of the vn pathway an increase in fos ir was observed in the medial preoptic area mpoa of wse males exposed to estrous bedding no increases in fos ir were detected along the vn pathway in nc male rats we proposed that nc male rats do not display sexual behavior due to a reduced sexual motivation that could be caused by alterations in the neuronal activity of the vn pathway during the processing of estrous odors non copulating male rats vomeronasal projection pathway main olfactory system fos immunoreactivity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
450,0,"Endonasal transsphenoidal surgery: the patient's perspective---survey results from 259 patients Background Patient impressions remain an important yet often overlooked aspect of surgical success. Herein we present postoperative questionnaire results in patients after a standard direct endonasal approach, an extended suprasellar endonasal approach, and a reoperative transsphenoidal surgery for tumor removal with the operating microscope. Methods From July 1998 through April 2005, of 452 patients undergoing endonasal surgery, 346 were sent questionnaires, and of these, 259 (75%) completed them. Nasal packing was placed for 24 hours in the first 95 patients but not in the last 357. Result Overall, 73% of patients reported a better experience than expected and 8% worse than expected. A worse than expected overall experience was noted in 15% of patients with nasal packing compared with 5% of patients without packing (P = .001). Of patients with preoperative headache, 49% resolved, 34% somewhat resolved, and 5% worsened. The frequency of rhinological complaints declined from 2 weeks to 3 months postsurgery (P < .001); by 3 months or more postsurgery, 67% to 87% of patients had no rhinological complaints and 1% to 2% had severe complaints. Of 30 patients with prior sublabial surgery, the endonasal procedure afforded easier recovery (87%), less pain (80%), better nasal airflow (79%), and a shorter hospital stay (median 3 vs 5 days) (P < .001). Of 28 patients with complications, the severity of rhinological complaints was similar to those without complications except this subgroup reported greater loss of sense of smell 3 months after surgery (P < .001). Conclusions Rhinological recovery is typically rapid and relatively complete after direct endonasal transsphenoidal surgery using both standard and extended suprasellar approaches. Compared with the sublabial route, the endonasal approach is associated with less pain, better nasal airflow, and a shorter hospital stay. Endonasal transsphenoidal surgery, Transnasal approach, Pituitary adenoma, Extended transsphenoidal approach, Patient survey, Complications",endonasal transsphenoidal surgery the patient s perspective survey results from 259 patients background patient impressions remain an important yet often overlooked aspect of surgical success herein we present postoperative questionnaire results in patients after a standard direct endonasal approach an extended suprasellar endonasal approach and a reoperative transsphenoidal surgery for tumor removal with the operating microscope methods from july 1998 through april 2005 of 452 patients undergoing endonasal surgery 346 were sent questionnaires and of these 259 75 completed them nasal packing was placed for 24 hours in the first 95 patients but not in the last 357 result overall 73 of patients reported a better experience than expected and 8 worse than expected a worse than expected overall experience was noted in 15 of patients with nasal packing compared with 5 of patients without packing p 001 of patients with preoperative headache 49 resolved 34 somewhat resolved and 5 worsened the frequency of rhinological complaints declined from 2 weeks to 3 months postsurgery p 001 by 3 months or more postsurgery 67 to 87 of patients had no rhinological complaints and 1 to 2 had severe complaints of 30 patients with prior sublabial surgery the endonasal procedure afforded easier recovery 87 less pain 80 better nasal airflow 79 and a shorter hospital stay median 3 vs 5 days p 001 of 28 patients with complications the severity of rhinological complaints was similar to those without complications except this subgroup reported greater loss of sense of smell 3 months after surgery p 001 conclusions rhinological recovery is typically rapid and relatively complete after direct endonasal transsphenoidal surgery using both standard and extended suprasellar approaches compared with the sublabial route the endonasal approach is associated with less pain better nasal airflow and a shorter hospital stay endonasal transsphenoidal surgery transnasal approach pituitary adenoma extended transsphenoidal approach patient survey complications,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
451,0,"Beer classification by electronic nose An electronic nose is a smart instrument that is designed to detect and discriminate among complex odors by using arrays of sensors. The arrays of sensors are treated with a variety of odor-sensitive biological or chemical materials. An electronic nose is a project that uses two researches areas which are hardware for developing sensors and software using theorem from neuron network technology. The operation begins when sensors hit the smell of beer. The result is converted from analog to digital and represented in a graph form. An artificial intelligence is a tool of a thinking system which can create knowledge as if a human does. This project concerns training and testing beer by using 10 types of beer which are Asahi, Chang, Cheer, Samiguel, Singha, Kloster, Heineken, Leo, Tiger and Tai. We separate the experiment into two parts. The first part is immediate checking, which is performed immediately after the beer can is opened. The second part is to check the beer after the can is opened for 24 hours. This project consists of two data classifications which are Rule base and Neural Network. Rule base is used to classify unknown data. Neural network is used to check types of beer. Our structure in a neural network consists of 25 input nodes, 28 hidden nodes, and 10 output nodes. The percentage of correctness is equal to 87.5%. artificial intelligence, beverages, electronic noses, knowledge based systems, neural nets, pattern classification, sensor arrays, beer classification, electronic nose, smart instrument, odor detection, sensor arrays, neuron network technology, analog to digital conversion, graph form, artificial intelligence, data classifications, rule base, neural network, Sensors, Electronic noses, Artificial neural networks, Neurons, Sensor arrays, Pattern recognition, Sensor systems, Electronic Nose, Beer Classification, Neural Network, Rule based system",beer classification by electronic nose an electronic nose is a smart instrument that is designed to detect and discriminate among complex odors by using arrays of sensors the arrays of sensors are treated with a variety of odor sensitive biological or chemical materials an electronic nose is a project that uses two researches areas which are hardware for developing sensors and software using theorem from neuron network technology the operation begins when sensors hit the smell of beer the result is converted from analog to digital and represented in a graph form an artificial intelligence is a tool of a thinking system which can create knowledge as if a human does this project concerns training and testing beer by using 10 types of beer which are asahi chang cheer samiguel singha kloster heineken leo tiger and tai we separate the experiment into two parts the first part is immediate checking which is performed immediately after the beer can is opened the second part is to check the beer after the can is opened for 24 hours this project consists of two data classifications which are rule base and neural network rule base is used to classify unknown data neural network is used to check types of beer our structure in a neural network consists of 25 input nodes 28 hidden nodes and 10 output nodes the percentage of correctness is equal to 87 5 artificial intelligence beverages electronic noses knowledge based systems neural nets pattern classification sensor arrays beer classification electronic nose smart instrument odor detection sensor arrays neuron network technology analog to digital conversion graph form artificial intelligence data classifications rule base neural network sensors electronic noses artificial neural networks neurons sensor arrays pattern recognition sensor systems electronic nose beer classification neural network rule based system,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
452,0,"How Open Source Projects Use Static Code Analysis Tools in Continuous Integration Pipelines Static analysis tools are often used by software developers to entail early detection of potential faults, vulnerabilities, code smells, or to assess the source code adherence to coding standards and guidelines. Also, their adoption within Continuous Integration (CI) pipelines has been advocated by researchers and practitioners. This paper studies the usage of static analysis tools in 20 Java open source projects hosted on GitHub and using Travis CI as continuous integration infrastructure. Specifically, we investigate (i) which tools are being used and how they are configured for the CI, (ii) what types of issues make the build fail or raise warnings, and (iii) whether, how, and after how long are broken builds and warnings resolved. Results indicate that in the analyzed projects build breakages due to static analysis tools are mainly related to adherence to coding standards, and there is also some attention to missing licenses. Build failures related to tools identifying potential bugs or vulnerabilities occur less frequently, and in some cases such tools are activated in a ""softer"" mode, without making the build fail. Also, the study reveals that build breakages due to static analysis tools are quickly fixed by actually solving the problem, rather than by disabling the warning, and are often properly documented. continuous integration, empirical study, open source projects, static analysis tools",how open source projects use static code analysis tools in continuous integration pipelines static analysis tools are often used by software developers to entail early detection of potential faults vulnerabilities code smells or to assess the source code adherence to coding standards and guidelines also their adoption within continuous integration ci pipelines has been advocated by researchers and practitioners this paper studies the usage of static analysis tools in 20 java open source projects hosted on github and using travis ci as continuous integration infrastructure specifically we investigate i which tools are being used and how they are configured for the ci ii what types of issues make the build fail or raise warnings and iii whether how and after how long are broken builds and warnings resolved results indicate that in the analyzed projects build breakages due to static analysis tools are mainly related to adherence to coding standards and there is also some attention to missing licenses build failures related to tools identifying potential bugs or vulnerabilities occur less frequently and in some cases such tools are activated in a softer mode without making the build fail also the study reveals that build breakages due to static analysis tools are quickly fixed by actually solving the problem rather than by disabling the warning and are often properly documented continuous integration empirical study open source projects static analysis tools,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
453,0,"An analysis of corporate social responsibility for Small and Medium-Sized Enterprises This paper presents the results of an empirical analysis of corporate social responsibility for shandong exp. high sch.(SMEs). Some SMEs lacked social responsibility consciousness. Thus all kinds of violation of the law and morality are brought, which cause corporate social potential instability and disharmony. An evaluation model of corporate social responsibility of SMEs based on analytic network process has been put forward in the paper. Moreover, an empirical analysis of some representative SMEs is conducted. Research shows that the method can not only be used to assess the comprehensive evaluation grades of the corporate social responsibility performance of SMEs, but can also find the enterprise's shortages in sustainable development, accordingly provide recommendations for enterprise ecological management. corporate social responsibility, ecology, environmental management, small-to-medium enterprises, sustainable development, corporate social responsibility analysis, small and medium-sized enterprises, SME, social responsibility consciousness, corporate social potential instability, corporate social disharmony, sustainable development, enterprise ecological management, Biological system modeling, Production, Decision making, Contracts, Sustainable development, Analytical models, Economics, corporate social responsibility, small and medium-sized enterprises, analytic network process",an analysis of corporate social responsibility for small and medium sized enterprises this paper presents the results of an empirical analysis of corporate social responsibility for shandong exp high sch smes some smes lacked social responsibility consciousness thus all kinds of violation of the law and morality are brought which cause corporate social potential instability and disharmony an evaluation model of corporate social responsibility of smes based on analytic network process has been put forward in the paper moreover an empirical analysis of some representative smes is conducted research shows that the method can not only be used to assess the comprehensive evaluation grades of the corporate social responsibility performance of smes but can also find the enterprise s shortages in sustainable development accordingly provide recommendations for enterprise ecological management corporate social responsibility ecology environmental management small to medium enterprises sustainable development corporate social responsibility analysis small and medium sized enterprises sme social responsibility consciousness corporate social potential instability corporate social disharmony sustainable development enterprise ecological management biological system modeling production decision making contracts sustainable development analytical models economics corporate social responsibility small and medium sized enterprises analytic network process,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
454,0,"Reducing Subjectivity in Code Smells Detection: Experimenting with the Long Method Guidelines for refactoring are meant to improve software systems internal quality and are widely acknowledged as among software's best practices. However, such guidelines remain mostly qualitative in nature. As a result, judgments on how to conduct refactoring processes remain mostly subjective and therefore non-automatable, prone to errors and unrepeatable. The detection of the Long Method code smell is an example. To address this problem, this paper proposes a technique to detect Long Method objectively and automatically, using a Binary Logistic Regression model calibrated by expert's knowledge. The results of an experiment illustrating the use of this technique are reported. expert systems, regression analysis, software maintenance, software reusability, systems software, code smells detection, software systems, refactoring processes, long method code smell, binary logistic regression model, expert knowledge, Measurement, Correlation, Mathematical model, Predictive models, Complexity theory, Logistics, Training, Refactoring Process, Code Smells, Long Method, Binary Logistic Regression",reducing subjectivity in code smells detection experimenting with the long method guidelines for refactoring are meant to improve software systems internal quality and are widely acknowledged as among software s best practices however such guidelines remain mostly qualitative in nature as a result judgments on how to conduct refactoring processes remain mostly subjective and therefore non automatable prone to errors and unrepeatable the detection of the long method code smell is an example to address this problem this paper proposes a technique to detect long method objectively and automatically using a binary logistic regression model calibrated by expert s knowledge the results of an experiment illustrating the use of this technique are reported expert systems regression analysis software maintenance software reusability systems software code smells detection software systems refactoring processes long method code smell binary logistic regression model expert knowledge measurement correlation mathematical model predictive models complexity theory logistics training refactoring process code smells long method binary logistic regression,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
455,0,"Shielding Against Design Flaws with Field Repairable Control Logic Correctness is a paramount attribute of any microprocessor design; however, without novel technologies to tame the increasing complexity of design verification, the amount of bugs that escape into silicon will only grow in the future. In this paper, we propose a novel hardware patching mechanism that can detect design errors which escaped the verification process, and can correct them directly in the field. We accomplish this goal through a simple field-programmable state matcher, which can identify erroneous configurations in the processor's control state and switch the processor into formally-verified degraded performance mode, once a ""match"" occurs. When the instructions exposing the design flaw are committed, the processor is switched back to normal mode. We show that our approach can detect and correct infrequently-occurring errors with almost no performance impact and has approximately 2% area overhead. hardware patching, processor verification",shielding against design flaws with field repairable control logic correctness is a paramount attribute of any microprocessor design however without novel technologies to tame the increasing complexity of design verification the amount of bugs that escape into silicon will only grow in the future in this paper we propose a novel hardware patching mechanism that can detect design errors which escaped the verification process and can correct them directly in the field we accomplish this goal through a simple field programmable state matcher which can identify erroneous configurations in the processor s control state and switch the processor into formally verified degraded performance mode once a match occurs when the instructions exposing the design flaw are committed the processor is switched back to normal mode we show that our approach can detect and correct infrequently occurring errors with almost no performance impact and has approximately 2 area overhead hardware patching processor verification,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
456,0,"Grazing Behaviour and Plants Preference for Different Ages of Zandi Ewes in Steppe Rangelands of Qom (Iran) Herbivores select diets from an array of plant species that differ in physical and chemical characteristics. Optimal intake of nutrients by grazing animals, however, could be more easily achieved if we were able to understand and control their dietary habits and preferences. Information on food habits of endemic sheeps in Iran is generally scarce. So one mixed flocks of sheep and goats were used in the study. The feeding behaviour of three Zandi ewes (1, 3 and 5 years old) in free grazing system was evaluated considering the plant palatability and preference value based on Close observation method (recording films by video cameras) in each month of grazing season. Then diet composition and preference index for each plant species calculated. Also Grazable Plant samples were dried and milled and analyzed by AOAC methods for qualitative factors such as: ADF%, CP%, ME, DDM%, etc. there were significant differences (p¿0.01) between different species in Nutritive value. Also, Interaction effects of species and sheep age on preference index were significant. But there were no correlation between diet composition/ preference index and forage quality. The plant preference index changed during different months too. Quite often, plants that constitute medium or small proportion of the rangeland made a large part of the grazing animal's diet. Animal experience, Month of grazing, taste, smell and plant cover were the most effective factors on sheep preference. Zandi sheep could be classified as Intermediate feeders in this rangeland. agriculture, behavioural sciences, botany, grazing behaviour, plants preference, zandi ewes, steppe rangelands, Qom, food habits, endemic sheeps, grazing system, preference index, diet composition, Animals, Feeds, Chemicals, Optimal control, Production, Computer science, Quality management, Video recording, Cameras, Distributed decision making, Preference value, grazing behavior, Forage quality, Zandi sheep, Qom",grazing behaviour and plants preference for different ages of zandi ewes in steppe rangelands of qom iran herbivores select diets from an array of plant species that differ in physical and chemical characteristics optimal intake of nutrients by grazing animals however could be more easily achieved if we were able to understand and control their dietary habits and preferences information on food habits of endemic sheeps in iran is generally scarce so one mixed flocks of sheep and goats were used in the study the feeding behaviour of three zandi ewes 1 3 and 5 years old in free grazing system was evaluated considering the plant palatability and preference value based on close observation method recording films by video cameras in each month of grazing season then diet composition and preference index for each plant species calculated also grazable plant samples were dried and milled and analyzed by aoac methods for qualitative factors such as adf cp me ddm etc there were significant differences p 0 01 between different species in nutritive value also interaction effects of species and sheep age on preference index were significant but there were no correlation between diet composition preference index and forage quality the plant preference index changed during different months too quite often plants that constitute medium or small proportion of the rangeland made a large part of the grazing animal s diet animal experience month of grazing taste smell and plant cover were the most effective factors on sheep preference zandi sheep could be classified as intermediate feeders in this rangeland agriculture behavioural sciences botany grazing behaviour plants preference zandi ewes steppe rangelands qom food habits endemic sheeps grazing system preference index diet composition animals feeds chemicals optimal control production computer science quality management video recording cameras distributed decision making preference value grazing behavior forage quality zandi sheep qom,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
457,0,"Odor identification testing in children and young adults using the smell wheel Objective Olfaction is important for nutrition, safety, and quality of life. Detecting smell loss in young children can be difficult, since many children with olfactory deficits do not recognize their problem and may even pretend to smell. The short attention span of some young children precludes testing with longer standardized olfactory tests. Currently there is a dearth of pediatric smell tests. In this study we evaluated the performance of 152 children and young adults on a game-like rotating ``Smell Wheel'' odor identification test. This forced-choice test, which can be self-administered, was designed to capture the child's imagination and to provide a standardized test measure with odors known to young children using a minimum number of trials. Method Thirty 4-5-year olds (10 female), 62 6-7-year olds (17 female), 30 10-11-year olds (18 female) and 30 18-19-year olds (15 female) were tested. Analysis of variance was used to assess the influences of sex and age on the test scores. Results All participants completed the simple and rapid test protocol. Test performance and age-related changes analogous to those obtained using longer tests were observed. Test scores of participants who self-administered the test were equivalent to those for whom the test was administered by the experimenter. Conclusion Good compliance and olfactory test findings congruent with literature results were obtained using the Smell Wheel, suggesting that this test may be useful in assessing olfactory function in pediatric settings where attentional demands are compromised and test time is limited. Sense of smell, Olfaction, Development, Odor identification, Scratch and sniff",odor identification testing in children and young adults using the smell wheel objective olfaction is important for nutrition safety and quality of life detecting smell loss in young children can be difficult since many children with olfactory deficits do not recognize their problem and may even pretend to smell the short attention span of some young children precludes testing with longer standardized olfactory tests currently there is a dearth of pediatric smell tests in this study we evaluated the performance of 152 children and young adults on a game like rotating smell wheel odor identification test this forced choice test which can be self administered was designed to capture the child s imagination and to provide a standardized test measure with odors known to young children using a minimum number of trials method thirty 4 5 year olds 10 female 62 6 7 year olds 17 female 30 10 11 year olds 18 female and 30 18 19 year olds 15 female were tested analysis of variance was used to assess the influences of sex and age on the test scores results all participants completed the simple and rapid test protocol test performance and age related changes analogous to those obtained using longer tests were observed test scores of participants who self administered the test were equivalent to those for whom the test was administered by the experimenter conclusion good compliance and olfactory test findings congruent with literature results were obtained using the smell wheel suggesting that this test may be useful in assessing olfactory function in pediatric settings where attentional demands are compromised and test time is limited sense of smell olfaction development odor identification scratch and sniff,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
458,0,"A Study on the Model of Early-Warning on the Risk of ETI Based on the Principle of Failure Science Failure science is the new branch of management science. Failure science starts from revealing hidden disharmony factors in matters, studies the path and the source of risk that lead to failure, and provides methods to avoid failure according to the warning sign of failure. In this article, the author applies reverse thinking of principle of failure science to achieve the goal of making technological innovation lessons from the failure knowledge and builds up the model of early warning to the risk of ETI (enterprise technological innovation). It can express the rule of failure, path, process, the major risk factors, control conditions of ETI clearly and logically, and fully reflect the logical relations between various factors and events. By this way, it can be taken for reference for formulating scientific and rational technological innovation strategy and achieve an effective early warning of the risk. innovation management, risk analysis, strategic planning, failure science principle, hidden disharmony factors, failure warning sign, failure knowledge, enterprise technological innovation, risk factors, rational technological innovation strategy, Technological innovation, Seminars, Risk management, Technology management, Engineering management, Uncertainty, Accidents, Failure analysis, Research and development, Books, Model of Early-warning, Risk of ETI (enterprise technological innovation), Principle of Failure Science",a study on the model of early warning on the risk of eti based on the principle of failure science failure science is the new branch of management science failure science starts from revealing hidden disharmony factors in matters studies the path and the source of risk that lead to failure and provides methods to avoid failure according to the warning sign of failure in this article the author applies reverse thinking of principle of failure science to achieve the goal of making technological innovation lessons from the failure knowledge and builds up the model of early warning to the risk of eti enterprise technological innovation it can express the rule of failure path process the major risk factors control conditions of eti clearly and logically and fully reflect the logical relations between various factors and events by this way it can be taken for reference for formulating scientific and rational technological innovation strategy and achieve an effective early warning of the risk innovation management risk analysis strategic planning failure science principle hidden disharmony factors failure warning sign failure knowledge enterprise technological innovation risk factors rational technological innovation strategy technological innovation seminars risk management technology management engineering management uncertainty accidents failure analysis research and development books model of early warning risk of eti enterprise technological innovation principle of failure science,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
459,0,"An Empirical Investigation into Code Smell Elimination Sequences for Energy Efficient Software Recent research has shown that maintainability improving activities, such as removing code smells using recommended refactoring activities, may degrade the energy consumption behavior of software systems. However, current research is still immature and requires considerable effort for transferring findings to practice. This work empirically investigates the impact of eliminating a set of three notorious code smells, individually as well as in all six possible sequences, on energy consumption behavior of software systems. It also analyzes whether any relationship exists between software architecture sustainability (in terms of energy efficiency) and maintainability within the context of individual and sequential code smell elimination. The study outcomes show that the selected code smell removal permutations yield variant levels of energy consumption values for the resulted refactored software versions. Also, a particular permutation is learned to yield most energy-efficient refactored software versions, when compared to all other code smell removal permutations. green computing, maintenance engineering, power aware computing, programming, software architecture, source code (software), code smell elimination sequences, energy efficiency software, energy consumption, software systems, software architecture, sustainability, maintainability, green IT, Energy consumption, Measurement, Energy efficiency, Software systems, Software quality, Java, energy consumption, sustainability, code smell, refactoring, software architecture, maintainability, green IT",an empirical investigation into code smell elimination sequences for energy efficient software recent research has shown that maintainability improving activities such as removing code smells using recommended refactoring activities may degrade the energy consumption behavior of software systems however current research is still immature and requires considerable effort for transferring findings to practice this work empirically investigates the impact of eliminating a set of three notorious code smells individually as well as in all six possible sequences on energy consumption behavior of software systems it also analyzes whether any relationship exists between software architecture sustainability in terms of energy efficiency and maintainability within the context of individual and sequential code smell elimination the study outcomes show that the selected code smell removal permutations yield variant levels of energy consumption values for the resulted refactored software versions also a particular permutation is learned to yield most energy efficient refactored software versions when compared to all other code smell removal permutations green computing maintenance engineering power aware computing programming software architecture source code software code smell elimination sequences energy efficiency software energy consumption software systems software architecture sustainability maintainability green it energy consumption measurement energy efficiency software systems software quality java energy consumption sustainability code smell refactoring software architecture maintainability green it,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
460,0,"Of Space and Smell: The Strange Evolution of the Human Nose We humans are the Cyrano de Bergerac's of the primate world, with conspicuously large external noses compared to other great apes. To understand why our nose evolved we must first understand the function of olfaction. To do this requires traveling back in time to the evolution of the first brain. I will describe the hypothesis that the sense of smell evolved as a sense of direction, playing a critical role in navigation and that this function explains why olfactory systems are so plastic and variable in size across animals. The navigation function of olfaction in humans has been largely neglected and I will describe studies showing that humans can orient accurately to odors in real world and virtual reality environments. But why such a nose? To understand this, I return to an evolutionary framework to describe how the first nose, a structure used both for respiration and olfaction, appeared in air-breathing fish. I describe a new hypothesis (PROUST: perceiving and representing odor utility in space and time) to explain how the evolution of air-breathing could have forced vertebrates to segregate olfactory mapping of space to the main olfactory system and the mapping of odors across time to the newly evolved second (vomeronasal) olfactory system. This dichotomy of function and the subsequent conflict between mapping time versus space using odors, could have led to a number of novel vertebrate solutions to sample odors, including the forked tongue of the snake and the human external nose. I will end by proposing that this perspective on the evolution and function of human olfaction could enhance current paradigms in human-robot communication and decision making. navigation, olfaction, sensory evolution",of space and smell the strange evolution of the human nose we humans are the cyrano de bergerac s of the primate world with conspicuously large external noses compared to other great apes to understand why our nose evolved we must first understand the function of olfaction to do this requires traveling back in time to the evolution of the first brain i will describe the hypothesis that the sense of smell evolved as a sense of direction playing a critical role in navigation and that this function explains why olfactory systems are so plastic and variable in size across animals the navigation function of olfaction in humans has been largely neglected and i will describe studies showing that humans can orient accurately to odors in real world and virtual reality environments but why such a nose to understand this i return to an evolutionary framework to describe how the first nose a structure used both for respiration and olfaction appeared in air breathing fish i describe a new hypothesis proust perceiving and representing odor utility in space and time to explain how the evolution of air breathing could have forced vertebrates to segregate olfactory mapping of space to the main olfactory system and the mapping of odors across time to the newly evolved second vomeronasal olfactory system this dichotomy of function and the subsequent conflict between mapping time versus space using odors could have led to a number of novel vertebrate solutions to sample odors including the forked tongue of the snake and the human external nose i will end by proposing that this perspective on the evolution and function of human olfaction could enhance current paradigms in human robot communication and decision making navigation olfaction sensory evolution,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
461,0,"Model-Based Scalability Estimation in Inception-phase Software Architecture Scalability is one of the crucial nonfunctional requirements that must be evaluated in the Inception Phase of the Rational Unified Process [9]. This is the phase in which the least information is generally available to form a principled evaluation. We demonstrate how an estimate of user scalability can be formed using sequence diagrams of the common user scenarios, together with experimentation (ranging from simple timing measurements to more complex architectural prototypes), published study data, and performance data from baseline systems. Despite being quite inexpensive, the techniques used by our team enabled us to identify and guide corrective actions for major bottlenecks before they became serious design flaws in the Elaboration and Construction phases of the Unified Process. The same techniques also allowed us to quickly evaluate the effects of high-level architecture and technology alternatives on user scalability and response time. Sequence Diagram,  Business Logic,  Message Size,  User Scalability,  Message Length",model based scalability estimation in inception phase software architecture scalability is one of the crucial nonfunctional requirements that must be evaluated in the inception phase of the rational unified process 9 this is the phase in which the least information is generally available to form a principled evaluation we demonstrate how an estimate of user scalability can be formed using sequence diagrams of the common user scenarios together with experimentation ranging from simple timing measurements to more complex architectural prototypes published study data and performance data from baseline systems despite being quite inexpensive the techniques used by our team enabled us to identify and guide corrective actions for major bottlenecks before they became serious design flaws in the elaboration and construction phases of the unified process the same techniques also allowed us to quickly evaluate the effects of high level architecture and technology alternatives on user scalability and response time sequence diagram business logic message size user scalability message length,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
462,0,"Sex differences in response to physical and social factors involved in human mate selection: The importance of smell for women A survey study examining the relative importance of various social and physical traits in heterosexual attraction was conducted. Data from 198 male and female heterosexual college students revealed that women ranked body odor as more important for attraction than ``looks'' or any social factor except ``pleasantness.'' Moreover, in contrast to response to fragrance use, liking someone's natural body odor was the most influential olfactory variable for sexual interest for both men and women. Men rated a woman's good looks as most desirable and as more important than any other factor except pleasantness. Sex differences in the relative ranking of several social factors were consistent with prior research. Heterosexual attraction, Sex differences, Parental investment theory, Social and physical traits, MHC, Olfaction",sex differences in response to physical and social factors involved in human mate selection the importance of smell for women a survey study examining the relative importance of various social and physical traits in heterosexual attraction was conducted data from 198 male and female heterosexual college students revealed that women ranked body odor as more important for attraction than looks or any social factor except pleasantness moreover in contrast to response to fragrance use liking someone s natural body odor was the most influential olfactory variable for sexual interest for both men and women men rated a woman s good looks as most desirable and as more important than any other factor except pleasantness sex differences in the relative ranking of several social factors were consistent with prior research heterosexual attraction sex differences parental investment theory social and physical traits mhc olfaction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
463,0,"The adrenergic α2 receptor and sexual incentive motivation in male rats The purpose of the present series of experiments was to determine whether drugs acting at the α2-adrenoceptor modify unconditioned sexual incentive motivation in the male rat. To that end a highly specific agonist, dexmedetomidine, a corresponding antagonist, atipamezole, and a less specific antagonist, yohimbine, were administered to groups of sexually inexperienced male rats. The subjects were tested in a large rectangular arena, where a sexually receptive female and an intact male were employed as incentives. The incentive animals were confined behind a wire mesh in opposite corners of the arena. The animals could see, hear and smell each other, but no sexual interaction was possible. Approach to the incentives constituted the measure of incentive motivation. In addition, the test provided data on ambulatory activity and general arousal. Dexmedetomidine, at a dose of 8μg/kg, produced a slight reduction of sexual incentive motivation. Ambulatory activity and general arousal were also inhibited. Atipamezole, in doses of 0.1 and 0.3mg/kg enhanced the positive incentive properties of the receptive female. A high dose of 1mg/kg did not have any significant effect. Ambulatory activity was slightly reduced by the two larger doses of atipamezole. Yohimbine had a slight stimulatory effect on sexual incentive motivation at a dose (4mg/kg) that also reduced ambulatory activity and general arousal. It is concluded that blockade of the adrenergic α2 receptor stimulates sexual incentive motivation in the male rat whereas stimulation of it has the opposite effect. At present it is not clear if these drug effects are caused by pre- or postsynaptic actions of the drugs, and the importance of secondary changes in other neurotransmitter systems remains unknown. Atipamezole, Dexmedetomidine, Yohimbine, α-Adrenoreceptor, Sexual motivation, Ambulatory activity",the adrenergic 2 receptor and sexual incentive motivation in male rats the purpose of the present series of experiments was to determine whether drugs acting at the 2 adrenoceptor modify unconditioned sexual incentive motivation in the male rat to that end a highly specific agonist dexmedetomidine a corresponding antagonist atipamezole and a less specific antagonist yohimbine were administered to groups of sexually inexperienced male rats the subjects were tested in a large rectangular arena where a sexually receptive female and an intact male were employed as incentives the incentive animals were confined behind a wire mesh in opposite corners of the arena the animals could see hear and smell each other but no sexual interaction was possible approach to the incentives constituted the measure of incentive motivation in addition the test provided data on ambulatory activity and general arousal dexmedetomidine at a dose of 8 g kg produced a slight reduction of sexual incentive motivation ambulatory activity and general arousal were also inhibited atipamezole in doses of 0 1 and 0 3mg kg enhanced the positive incentive properties of the receptive female a high dose of 1mg kg did not have any significant effect ambulatory activity was slightly reduced by the two larger doses of atipamezole yohimbine had a slight stimulatory effect on sexual incentive motivation at a dose 4mg kg that also reduced ambulatory activity and general arousal it is concluded that blockade of the adrenergic 2 receptor stimulates sexual incentive motivation in the male rat whereas stimulation of it has the opposite effect at present it is not clear if these drug effects are caused by pre or postsynaptic actions of the drugs and the importance of secondary changes in other neurotransmitter systems remains unknown atipamezole dexmedetomidine yohimbine adrenoreceptor sexual motivation ambulatory activity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
464,0,"Learning individual signatures: rove beetle males discriminate unreceptive females by cuticular hydrocarbon patterns Pheromones elicit a species-wide, class-specific and stereotyped reaction. By learning class- or individual-specific cues in association with pheromones and subsequently using the cues alone for discrimination, a receiver may react more effectively to its social environment than if its only reaction to pheromones was stereotyped. In the rove beetle Aleochara curtula, recently mated females are inappropriate mating partners; nevertheless they elicit male sexual reactions owing to olfactory excitation by the female sex pheromone. During physical contact, mated females can be discerned by gustatory perception of an antiaphrodisiac pheromone via the clasper-like parameres of the male genitalia. Males transfer the antiaphrodisiac pheromone during copulation, together with the spermatophore, onto their mate. Our experiments showed that in association with antiaphrodisiac pheromone perception, males learned the scent of a mated female and relied on this chemical signature to refrain from sexual grasping responses in subsequent encounters. Habituation--dishabituation experiments further showed that the learned patterns were individual specific. The application of cuticular extracts to alter the scent of females, and the resulting inability of males to discriminate between similar-smelling females, demonstrated that males relied on cuticular hydrocarbons for individual discrimination. Chemical analysis of the cuticular profiles revealed higher variation in female than in male patterns. Learning the scent of mated females in association with the antiaphrodisiac pheromone allows males to reduce the time and energy spent on sexual reactions towards inappropriate mating partners and hence gives them more time to search for a receptive female at the mating site. , antiaphrodisiac, associative learning, cuticular hydrocarbon profile, individual recognition, olfactory discrimination, postcopulatory mate guarding, rove beetle, signature mixture, Staphylinidae",learning individual signatures rove beetle males discriminate unreceptive females by cuticular hydrocarbon patterns pheromones elicit a species wide class specific and stereotyped reaction by learning class or individual specific cues in association with pheromones and subsequently using the cues alone for discrimination a receiver may react more effectively to its social environment than if its only reaction to pheromones was stereotyped in the rove beetle aleochara curtula recently mated females are inappropriate mating partners nevertheless they elicit male sexual reactions owing to olfactory excitation by the female sex pheromone during physical contact mated females can be discerned by gustatory perception of an antiaphrodisiac pheromone via the clasper like parameres of the male genitalia males transfer the antiaphrodisiac pheromone during copulation together with the spermatophore onto their mate our experiments showed that in association with antiaphrodisiac pheromone perception males learned the scent of a mated female and relied on this chemical signature to refrain from sexual grasping responses in subsequent encounters habituation dishabituation experiments further showed that the learned patterns were individual specific the application of cuticular extracts to alter the scent of females and the resulting inability of males to discriminate between similar smelling females demonstrated that males relied on cuticular hydrocarbons for individual discrimination chemical analysis of the cuticular profiles revealed higher variation in female than in male patterns learning the scent of mated females in association with the antiaphrodisiac pheromone allows males to reduce the time and energy spent on sexual reactions towards inappropriate mating partners and hence gives them more time to search for a receptive female at the mating site antiaphrodisiac associative learning cuticular hydrocarbon profile individual recognition olfactory discrimination postcopulatory mate guarding rove beetle signature mixture staphylinidae,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
465,0,"Code smells in spreadsheet formulas revisited on an industrial dataset In previous work, code smells have been adapted to be applicable on spreadsheet formulas. The smell detection algorithm used in this earlier study was validated on a small dataset of industrial spreadsheets by interviewing the users of these spreadsheets and asking them about their opinion about the found smells. In this paper a more in depth validation of the algorithm is done by analyzing a set of spreadsheets of which users indicated whether or not they are smelly. This new dataset gives us the unique possibility to get more insight in how we can distinguish `bad' spreadsheets from `good' spreadsheets. We do that in two ways: For both the smelly and non smelly spreadsheets we 1) have calculated the metrics that detect the smells and 2) have calculated metrics with respect to size, level of coupling, and the use of functions. The results show that indeed the metrics for the smells decrease in spreadsheets that are not smelly. With respect to size we found to our surprise that the improved spreadsheets were not smaller, but bigger. With regard to coupling and the use of functions both datasets are similar. It indicates that it is difficult to use metrics with respect to size, degree of coupling or use of functions to draw conclusions on the complexity of a spreadsheet. software engineering, spreadsheet programs, spreadsheet formula, code smell detection algorithm, industrial spreadsheet, Couplings, Complexity theory, Standards, Programming, Companies, Length measurement",code smells in spreadsheet formulas revisited on an industrial dataset in previous work code smells have been adapted to be applicable on spreadsheet formulas the smell detection algorithm used in this earlier study was validated on a small dataset of industrial spreadsheets by interviewing the users of these spreadsheets and asking them about their opinion about the found smells in this paper a more in depth validation of the algorithm is done by analyzing a set of spreadsheets of which users indicated whether or not they are smelly this new dataset gives us the unique possibility to get more insight in how we can distinguish bad spreadsheets from good spreadsheets we do that in two ways for both the smelly and non smelly spreadsheets we 1 have calculated the metrics that detect the smells and 2 have calculated metrics with respect to size level of coupling and the use of functions the results show that indeed the metrics for the smells decrease in spreadsheets that are not smelly with respect to size we found to our surprise that the improved spreadsheets were not smaller but bigger with regard to coupling and the use of functions both datasets are similar it indicates that it is difficult to use metrics with respect to size degree of coupling or use of functions to draw conclusions on the complexity of a spreadsheet software engineering spreadsheet programs spreadsheet formula code smell detection algorithm industrial spreadsheet couplings complexity theory standards programming companies length measurement,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
466,0,"How 4D Effects Cause Different Types of Presence Experience? 4D is a kind of marketing term, 4D film is a system that is added to various special effects like smell and vibration in the 3D films. Because the system means a technology is added to 3D visual system (3D+1D), it is called 4D. Since 2007 4Ds introduction, 4D system added more entertainment factor like a kind of theme park gives great benefit to film production. But in 4D films, audiences experience is showed different result depending on how 4D effects applied to. When 4D effect wasnt provided in a proper way, it is acting as interference to audience. This paper showed new audiences expience in 4D film and how 4D physical effects influence the audiences expience, Presence. For this study, a total of 7 films screened in South Korea in 2010 were chosen in the various genres and indepth interviews were conducted on an audience of 7 films. The interview results were analyzed through Ground Theory, which is a qualitative analysis method. 4D effects, 4D films, 4D technology, immersion co-experience, presence, user experience",how 4d effects cause different types of presence experience 4d is a kind of marketing term 4d film is a system that is added to various special effects like smell and vibration in the 3d films because the system means a technology is added to 3d visual system 3d 1d it is called 4d since 2007 4ds introduction 4d system added more entertainment factor like a kind of theme park gives great benefit to film production but in 4d films audiences experience is showed different result depending on how 4d effects applied to when 4d effect wasnt provided in a proper way it is acting as interference to audience this paper showed new audiences expience in 4d film and how 4d physical effects influence the audiences expience presence for this study a total of 7 films screened in south korea in 2010 were chosen in the various genres and indepth interviews were conducted on an audience of 7 films the interview results were analyzed through ground theory which is a qualitative analysis method 4d effects 4d films 4d technology immersion co experience presence user experience,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
467,0,"Graph-based Mining of Multiple Object Usage Patterns The interplay of multiple objects in object-oriented programming often follows specific protocols, for example certain orders of method calls and/or control structure constraints among them that are parts of the intended object usages. Unfortunately, the information is not always documented. That creates long learning curve, and importantly, leads to subtle problems due to the misuse of objects. In this paper, we propose GrouMiner, a novel graph-based approach for mining the usage patterns of one or multiple objects. GrouMiner approach includes a graph-based representation for multiple object usages, a pattern mining algorithm, and an anomaly detection technique that are efficient, accurate, and resilient to software changes. Our experiments on several real-world programs show that our prototype is able to find useful usage patterns with multiple objects and control structures, and to translate them into user-friendly code skeletons to assist developers in programming. It could also detect the usage anomalies that caused yet undiscovered defects and code smells in those programs. anomaly, api usage, clone, graph mining, groum, object usage, pattern",graph based mining of multiple object usage patterns the interplay of multiple objects in object oriented programming often follows specific protocols for example certain orders of method calls and or control structure constraints among them that are parts of the intended object usages unfortunately the information is not always documented that creates long learning curve and importantly leads to subtle problems due to the misuse of objects in this paper we propose grouminer a novel graph based approach for mining the usage patterns of one or multiple objects grouminer approach includes a graph based representation for multiple object usages a pattern mining algorithm and an anomaly detection technique that are efficient accurate and resilient to software changes our experiments on several real world programs show that our prototype is able to find useful usage patterns with multiple objects and control structures and to translate them into user friendly code skeletons to assist developers in programming it could also detect the usage anomalies that caused yet undiscovered defects and code smells in those programs anomaly api usage clone graph mining groum object usage pattern,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
468,0,"Teaching Code Review Management Using Branch Based Workflows Developing software with high code quality in a university environment is a challenge for instructors of software engineering capstone courses. Teaching students how to achieve quality and how to conduct code reviews in projects is often neglected, although it helps to improve maintainability. In this paper we describe an informal review technique: branch based code reviews. Developers realize requirements in feature branches. Before they integrate source code into the main codebase, the code is reviewed asynchronously over the Internet in a quality gate to identify defects, design flaws and code flaws. Traditionally reviewing has been a task of the instructor. In our course, we delegate it to students of the development team. Our hypothesis is that students learn and adapt best practices from each other, improving code quality and their coding skills. We applied this technique in a workflow during a project-based capstone course over the period of three semesters. 300 students conducted 2939 code reviews with 4665 comments in 33 projects with industry customers. We evaluated the workflow in a qualitative study using interviews. Our key findings are that students do not longer see reviews as a bureaucratic burden and improve their skills through the comments of experienced team members. They are convinced that reviewing code leads to higher code quality and 89 % want to use the workflow again in future projects. branching model, capstone course, code quality, distributed version control, merge request, pair programming, peer learning, pull request",teaching code review management using branch based workflows developing software with high code quality in a university environment is a challenge for instructors of software engineering capstone courses teaching students how to achieve quality and how to conduct code reviews in projects is often neglected although it helps to improve maintainability in this paper we describe an informal review technique branch based code reviews developers realize requirements in feature branches before they integrate source code into the main codebase the code is reviewed asynchronously over the internet in a quality gate to identify defects design flaws and code flaws traditionally reviewing has been a task of the instructor in our course we delegate it to students of the development team our hypothesis is that students learn and adapt best practices from each other improving code quality and their coding skills we applied this technique in a workflow during a project based capstone course over the period of three semesters 300 students conducted 2939 code reviews with 4665 comments in 33 projects with industry customers we evaluated the workflow in a qualitative study using interviews our key findings are that students do not longer see reviews as a bureaucratic burden and improve their skills through the comments of experienced team members they are convinced that reviewing code leads to higher code quality and 89 want to use the workflow again in future projects branching model capstone course code quality distributed version control merge request pair programming peer learning pull request,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
469,0,"Occupant perceptions and a health outcome in retail stores Indoor Environmental Quality (IEQ) in commercial buildings, such as retail stores, can affect employee satisfaction, productivity, and health. This study administered an IEQ survey to retail employees and found correlations between measured IEQ parameters and the survey responses. The survey included 611 employees in 14 retail stores located in Pennsylvania (climate zone 5A) and Texas (climate zone 2A). The survey questionnaire featured ratings of different aspects of IEQ, including thermal comfort, lighting and noise level, indoor smells, overall cleanness, and environmental quality. Simultaneously with the survey, on-site physical measurements were taken to collect data of relative humidity levels, air exchange rates, dry bulb temperatures, and contaminant concentrations. This data was analyzed using multinomial logit regression with independent variables being the measured IEQ parameters, employees' gender, and age. This study found that employee perception of stuffy smells is related to formaldehyde and PM10 concentrations. Furthermore, the survey also asked the employees to report an annual frequency of common colds as a health indicator. The regression analysis showed that the cold frequency statistically correlates with the measured air exchange rates, outdoor temperatures, and indoor PM2.5 concentrations. Overall, the air exchange rate is the most influential parameter on the employee perception of the overall environmental quality and self-reported health outcome. Indoor environmental quality, Retail stores, Survey, Field study, Occupant perceptions, Common cold",occupant perceptions and a health outcome in retail stores indoor environmental quality ieq in commercial buildings such as retail stores can affect employee satisfaction productivity and health this study administered an ieq survey to retail employees and found correlations between measured ieq parameters and the survey responses the survey included 611 employees in 14 retail stores located in pennsylvania climate zone 5a and texas climate zone 2a the survey questionnaire featured ratings of different aspects of ieq including thermal comfort lighting and noise level indoor smells overall cleanness and environmental quality simultaneously with the survey on site physical measurements were taken to collect data of relative humidity levels air exchange rates dry bulb temperatures and contaminant concentrations this data was analyzed using multinomial logit regression with independent variables being the measured ieq parameters employees gender and age this study found that employee perception of stuffy smells is related to formaldehyde and pm10 concentrations furthermore the survey also asked the employees to report an annual frequency of common colds as a health indicator the regression analysis showed that the cold frequency statistically correlates with the measured air exchange rates outdoor temperatures and indoor pm2 5 concentrations overall the air exchange rate is the most influential parameter on the employee perception of the overall environmental quality and self reported health outcome indoor environmental quality retail stores survey field study occupant perceptions common cold,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
470,0,"Recording and reproducing citrus flavors using odor recorder Despite high significance of the sense of smell, the technique of recording and reproducing the olfactory modality was hardly investigated. The odor recorder developed by our group enables electronic recording of the odors and their reproduction at any time and at properly equipped place. The odor recording technique is expected to be useful in many fields such as virtual environments and e-commerce. To realize the future application of the odor recorder, the range of flavors to be handled by the instrument has to be significantly expanded. However, the expansion has to meet the constraint of reasonable number of odor components. One way to achieve that is using the approximation technique with significant reduction of the flavor components. The alternative way could be blending the complex mixtures of odorants treated as single components. In the present study, we focused on investigating both approaches. In the first part of experiment, we successfully recorded the typical orange flavor, approximating the smell with only 3 of 14 components. Subsequently performed human sensory tests (triangle test) confirmed similarity of reproduced flavor and the target one. In the second part of the experiment, three binary mixtures of essential oils extracted from citrus fruits were successfully recorded using the odor recorder. Results of both parts of the study allowed further expansion of the applicable range of flavors for odor recorder. Odor recorder, Odor sensor, Odor recipe, Artificial olfaction, Odor approximation",recording and reproducing citrus flavors using odor recorder despite high significance of the sense of smell the technique of recording and reproducing the olfactory modality was hardly investigated the odor recorder developed by our group enables electronic recording of the odors and their reproduction at any time and at properly equipped place the odor recording technique is expected to be useful in many fields such as virtual environments and e commerce to realize the future application of the odor recorder the range of flavors to be handled by the instrument has to be significantly expanded however the expansion has to meet the constraint of reasonable number of odor components one way to achieve that is using the approximation technique with significant reduction of the flavor components the alternative way could be blending the complex mixtures of odorants treated as single components in the present study we focused on investigating both approaches in the first part of experiment we successfully recorded the typical orange flavor approximating the smell with only 3 of 14 components subsequently performed human sensory tests triangle test confirmed similarity of reproduced flavor and the target one in the second part of the experiment three binary mixtures of essential oils extracted from citrus fruits were successfully recorded using the odor recorder results of both parts of the study allowed further expansion of the applicable range of flavors for odor recorder odor recorder odor sensor odor recipe artificial olfaction odor approximation,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
471,0,"Characterizing the Relative Significance of a Test Smell Test code, just like any other code we write, erodes when frequently changed. As such, refactoring, which has been shown to impact maintainability and comprehensibility, can be part of a solution to counter this erosion. We propose a metric-based heuristical approach, which allows to rank occurrences of so-called test smells (i.e. symptoms of poorly designed tests) according to their relative significance. This ranking can subsequently be used to start refactoring. Through an open-source case study, ArgoUML, we demonstrate that we are able to identify those test cases who violate unit test criteria software maintenance, software metrics, Unified Modeling Language, test smell relative significance, test code, code refactoring, code maintainability, code comprehensibility, metric-based heuristical approach, poorly designed tests, open-source case study, ArgoUML, Software testing, System testing, Software maintenance, Costs, Counting circuits, Open source software, Application software, Computer bugs, Software systems, Measurement units",characterizing the relative significance of a test smell test code just like any other code we write erodes when frequently changed as such refactoring which has been shown to impact maintainability and comprehensibility can be part of a solution to counter this erosion we propose a metric based heuristical approach which allows to rank occurrences of so called test smells i e symptoms of poorly designed tests according to their relative significance this ranking can subsequently be used to start refactoring through an open source case study argouml we demonstrate that we are able to identify those test cases who violate unit test criteria software maintenance software metrics unified modeling language test smell relative significance test code code refactoring code maintainability code comprehensibility metric based heuristical approach poorly designed tests open source case study argouml software testing system testing software maintenance costs counting circuits open source software application software computer bugs software systems measurement units,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
472,0,"Demonstration of Interactive Teleolfaction with Movie Recently, delivery technologies of visual and auditory information have been established. When movie together with smell information is available, people have more real reality. Our group has studied odor presentation with visual and auditory information using an olfactory display [1]. In VR2007, we have demonstrated the game of cooking with scent using olfactory display. In addition, we have studied smell sensing and reproduction system simultaneously with visual information. However, the function of transmitting sensory information to remote site has not been realized. Recently, we developed the teleolfaction system synchronized with tele-vision system using odor sensor and olfactory display. Moreover, the interactivity is included in this creative showcase. The system consists of recording system and reproduction system as is shown in Fig. 1. In the recording system, an output pattern from an array of QCM (Quartz Crystal Microbalance) sensors with partially overlapped specificities is recognized using a neural network implemented into a PC. An odor concentration is also measured using one of sensors. Moreover, a web camera simultaneously captures vision of odor sources. In reproduction system located away from the recording system, the olfactory display emits the smell synchronized with movie on the computer screen after the data from the recording system are received via the Internet. A user at remote site can control the position of the sensing nozzle using mobile stage via the Internet. The web camera mounted on that stage captures the image around the sensing nozzle. The user can perceive sensation interactively when he/she controls the position of the mobile stage. An example of the sensor response to orange flavor during the stage movement is shown in Fig. 2. When the sensing nozzle is located just above the odor source, the response has the peak and the user sniffs the strongest smell at the remote site. []",demonstration of interactive teleolfaction with movie recently delivery technologies of visual and auditory information have been established when movie together with smell information is available people have more real reality our group has studied odor presentation with visual and auditory information using an olfactory display 1 in vr2007 we have demonstrated the game of cooking with scent using olfactory display in addition we have studied smell sensing and reproduction system simultaneously with visual information however the function of transmitting sensory information to remote site has not been realized recently we developed the teleolfaction system synchronized with tele vision system using odor sensor and olfactory display moreover the interactivity is included in this creative showcase the system consists of recording system and reproduction system as is shown in fig 1 in the recording system an output pattern from an array of qcm quartz crystal microbalance sensors with partially overlapped specificities is recognized using a neural network implemented into a pc an odor concentration is also measured using one of sensors moreover a web camera simultaneously captures vision of odor sources in reproduction system located away from the recording system the olfactory display emits the smell synchronized with movie on the computer screen after the data from the recording system are received via the internet a user at remote site can control the position of the sensing nozzle using mobile stage via the internet the web camera mounted on that stage captures the image around the sensing nozzle the user can perceive sensation interactively when he she controls the position of the mobile stage an example of the sensor response to orange flavor during the stage movement is shown in fig 2 when the sensing nozzle is located just above the odor source the response has the peak and the user sniffs the strongest smell at the remote site,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
473,0,"Gender-specific automatic valence recognition of affective olfactory stimulation through the analysis of the electrodermal activity This study reports on the development of a gender-specific classification system able to discern between two valence levels of smell, through information gathered from electrodermal activity (EDA) dynamics. Specifically, two odorants were administered to 32 healthy volunteers (16 males) while monitoring EDA. CvxEDA model was used to process the EDA signal and extract features from both tonic and phasic components. The feature set was used as input to a K-NN classifier implementing a leave-one-subject-out procedure. Results show strong differences in the accuracy of valence recognition between men (62.5%) and women (78%). We can conclude that affective olfactory stimulation significantly affect EDA dynamics with a highly specific gender dependency. bioelectric potentials, chemioception, feature extraction, medical signal processing, patient monitoring, pattern classification, gender-specific automatic valence recognition, olfactory stimulation, electrodermal activity analysis, gender-specific classification system, smell valence level, EDA dynamics, EDA monitoring, CvxEDA model, EDA signal processing, feature extraction, K-NN classifier, Olfactory, Feature extraction, Autoregressive processes, Heart rate variability, Protocols, Sweat glands, Adult, Algorithms, Arousal, Automation, Databases as Topic, Female, Galvanic Skin Response, Healthy Volunteers, Humans, Male, Physical Stimulation, Self-Assessment, Sex Characteristics, Smell, Statistics as Topic, Surveys and Questionnaires",gender specific automatic valence recognition of affective olfactory stimulation through the analysis of the electrodermal activity this study reports on the development of a gender specific classification system able to discern between two valence levels of smell through information gathered from electrodermal activity eda dynamics specifically two odorants were administered to 32 healthy volunteers 16 males while monitoring eda cvxeda model was used to process the eda signal and extract features from both tonic and phasic components the feature set was used as input to a k nn classifier implementing a leave one subject out procedure results show strong differences in the accuracy of valence recognition between men 62 5 and women 78 we can conclude that affective olfactory stimulation significantly affect eda dynamics with a highly specific gender dependency bioelectric potentials chemioception feature extraction medical signal processing patient monitoring pattern classification gender specific automatic valence recognition olfactory stimulation electrodermal activity analysis gender specific classification system smell valence level eda dynamics eda monitoring cvxeda model eda signal processing feature extraction k nn classifier olfactory feature extraction autoregressive processes heart rate variability protocols sweat glands adult algorithms arousal automation databases as topic female galvanic skin response healthy volunteers humans male physical stimulation self assessment sex characteristics smell statistics as topic surveys and questionnaires,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
474,0,"Olfactory training induces changes in regional functional connectivity in patients with long-term smell loss Recently, olfactory training has been introduced as a promising treatment for patients with olfactory dysfunction. However, less is known about the neuronal basis and the influence on functional networks of this training. Thus, we aimed to investigate the neuroplasticity of chemosensory perception through an olfactory training program in patients with smell loss. The experimental setup included functional MRI (fMRI) experiments with three different types of chemosensory stimuli. Ten anosmic patients (7f, 3m) and 14 healthy controls (7f, 7m) underwent the same testing sessions. After a 12-week olfactory training period, seven patients (4f, 3m) were invited for follow-up testing using the same fMRI protocol. Functional networks were identified using independent component analysis and were further examined in detail using functional connectivity analysis. We found that anosmic patients and healthy controls initially use the same three networks to process chemosensory input: the olfactory; the somatosensory; and the integrative network. Those networks did not differ between the two groups in their spatial extent, but in their functional connectivity. After the olfactory training, the sensitivity to detect odors significantly increased in the anosmic group, which was also manifested in modifications of functional connections in all three investigated networks. The results of this study indicate that an olfactory training program can reorganize functional networks, although, initially, no differences in the spatial distribution of neural activation were observed. Neural plasticity, Functional connectivity, Olfaction, Trigeminal, Independent component analysis",olfactory training induces changes in regional functional connectivity in patients with long term smell loss recently olfactory training has been introduced as a promising treatment for patients with olfactory dysfunction however less is known about the neuronal basis and the influence on functional networks of this training thus we aimed to investigate the neuroplasticity of chemosensory perception through an olfactory training program in patients with smell loss the experimental setup included functional mri fmri experiments with three different types of chemosensory stimuli ten anosmic patients 7f 3m and 14 healthy controls 7f 7m underwent the same testing sessions after a 12 week olfactory training period seven patients 4f 3m were invited for follow up testing using the same fmri protocol functional networks were identified using independent component analysis and were further examined in detail using functional connectivity analysis we found that anosmic patients and healthy controls initially use the same three networks to process chemosensory input the olfactory the somatosensory and the integrative network those networks did not differ between the two groups in their spatial extent but in their functional connectivity after the olfactory training the sensitivity to detect odors significantly increased in the anosmic group which was also manifested in modifications of functional connections in all three investigated networks the results of this study indicate that an olfactory training program can reorganize functional networks although initially no differences in the spatial distribution of neural activation were observed neural plasticity functional connectivity olfaction trigeminal independent component analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
475,0,"Exploring Regular Expression Comprehension The regular expression (regex) is a powerful tool employed in a large variety of software engineering tasks. However, prior work has shown that regexes can be very complex and that it could be difficult for developers to compose and understand them. This work seeks to identify code smells that impact comprehension. We conduct an empirical study on 42 of pairs of behaviorally equivalent but syntactically different regexes using 180 participants and evaluated the understandability of various regex language features. We further analyzed regexes in GitHub to find the community standards or the common usages of various features. We found that some regex expression representations are more understandable than others. For example, using a range (e.g., [0-9]) is often more understandable than a default character class (e.g., [d]). We also found that the DFA size of a regex significantly affects comprehension for the regexes studied. The larger the DFA of a regex (up to size eight), the more understandable it was. Finally, we identify smelly and non-smelly regex representations based on a combination of community standards and understandability metrics. Regular expression comprehension, equivalence class, regex representations",exploring regular expression comprehension the regular expression regex is a powerful tool employed in a large variety of software engineering tasks however prior work has shown that regexes can be very complex and that it could be difficult for developers to compose and understand them this work seeks to identify code smells that impact comprehension we conduct an empirical study on 42 of pairs of behaviorally equivalent but syntactically different regexes using 180 participants and evaluated the understandability of various regex language features we further analyzed regexes in github to find the community standards or the common usages of various features we found that some regex expression representations are more understandable than others for example using a range e g 0 9 is often more understandable than a default character class e g d we also found that the dfa size of a regex significantly affects comprehension for the regexes studied the larger the dfa of a regex up to size eight the more understandable it was finally we identify smelly and non smelly regex representations based on a combination of community standards and understandability metrics regular expression comprehension equivalence class regex representations,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
476,0,"A graph mining approach for detecting identical design structures in object-oriented design models The object-oriented approach has been the most popular software design methodology for the past twenty-five years. Several design patterns and principles are defined to improve the design quality of object-oriented software systems. In addition, designers can use unique design motifs that are designed for the specific application domains. Another commonly used technique is cloning and modifying some parts of the software while creating new modules. Therefore, object-oriented programs can include many identical design structures. This work proposes a sub-graph mining-based approach for detecting identical design structures in object-oriented systems. By identifying and analyzing these structures, we can obtain useful information about the design, such as commonly-used design patterns, most frequent design defects, domain-specific patterns, and reused design clones, which could help developers to improve their knowledge about the software architecture. Furthermore, problematic parts of frequent identical design structures are appropriate refactoring opportunities because they affect multiple areas of the architecture. Experiments with several open-source and industrial projects show that we can successfully find many identical design structures within a project (intra-project) and between different projects (inter-project). We observe that usually most of the detected identical structures are an implementation of common design patterns; however, we also detect various anti-patterns, domain-specific patterns, reused design parts and design-level clones. Software design models, Identical design structures, Software motifs, Pattern extraction, Graph mining",a graph mining approach for detecting identical design structures in object oriented design models the object oriented approach has been the most popular software design methodology for the past twenty five years several design patterns and principles are defined to improve the design quality of object oriented software systems in addition designers can use unique design motifs that are designed for the specific application domains another commonly used technique is cloning and modifying some parts of the software while creating new modules therefore object oriented programs can include many identical design structures this work proposes a sub graph mining based approach for detecting identical design structures in object oriented systems by identifying and analyzing these structures we can obtain useful information about the design such as commonly used design patterns most frequent design defects domain specific patterns and reused design clones which could help developers to improve their knowledge about the software architecture furthermore problematic parts of frequent identical design structures are appropriate refactoring opportunities because they affect multiple areas of the architecture experiments with several open source and industrial projects show that we can successfully find many identical design structures within a project intra project and between different projects inter project we observe that usually most of the detected identical structures are an implementation of common design patterns however we also detect various anti patterns domain specific patterns reused design parts and design level clones software design models identical design structures software motifs pattern extraction graph mining,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
477,0,"Identifying refactoring sequences for improving software maintainability Refactoring is a well-known technique that preserves software behaviors and improves its bad structures or bad smells. In most cases, more than one bad smell is found in a program. Consequently, developers frequently apply refactorings more than once. Applying appropriate refactoring sequences, an ordered list of refactorings, developers can remove bad smells as well as reduce improvement time and produce highly maintainable software. According to our 2011 survey, developers consider four main criteria to select an optimal refactoring sequence: 1) the number of removed bad smells, 2) maintainability, 3) the size of refactoring sequence and 4) the number of modified program elements. A refactoring sequence that satisfies these four criteria produces code without bad smells, with higher maintainability, using the least improvement effort and time, and providing more traceability. Some existing works suggest a list of refactorings without ordering, and others suggest refactoring sequences. However, these works do not consider the four criteria discussed earlier. Therefore, our research proposes an approach to identify an optimal refactoring sequence that meets these criteria. In addition, it is expected that the findings will reduce maintenance time and cost, increase maintainability and enhance software quality. software maintenance, software quality, refactoring sequence identification, software maintainability, software behaviors, bad structures, bad smells, refactoring sequence size, modified program elements, software quality, Refactoring sequence, bad smell, maintainability and software maintenance",identifying refactoring sequences for improving software maintainability refactoring is a well known technique that preserves software behaviors and improves its bad structures or bad smells in most cases more than one bad smell is found in a program consequently developers frequently apply refactorings more than once applying appropriate refactoring sequences an ordered list of refactorings developers can remove bad smells as well as reduce improvement time and produce highly maintainable software according to our 2011 survey developers consider four main criteria to select an optimal refactoring sequence 1 the number of removed bad smells 2 maintainability 3 the size of refactoring sequence and 4 the number of modified program elements a refactoring sequence that satisfies these four criteria produces code without bad smells with higher maintainability using the least improvement effort and time and providing more traceability some existing works suggest a list of refactorings without ordering and others suggest refactoring sequences however these works do not consider the four criteria discussed earlier therefore our research proposes an approach to identify an optimal refactoring sequence that meets these criteria in addition it is expected that the findings will reduce maintenance time and cost increase maintainability and enhance software quality software maintenance software quality refactoring sequence identification software maintainability software behaviors bad structures bad smells refactoring sequence size modified program elements software quality refactoring sequence bad smell maintainability and software maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
478,0,"A novel composting process for plant wastes in Taiwan military barracks Military barracks throughout Taiwan produce large quantities of organic wastes from gardening, such as leaves, grass and flowers. By manipulating and observing the related parameters of the windrow composting process, the study seeks to find an optimum treatment method for plant wastes. Mature compost was used in small amounts as a fermenting source for each experimental sample. Results show that unpleasant smells that other composting methods produce is significantly decreased with effective control of relationships between temperature, saturation and turnover frequency. Furthermore, the time required to complete composting is shortened to 2--3 months. The fertility of the products depends on the original compost materials and the composting method. Through windrow composting, composted matter can reach a fertility level between that of soil and manure. Additionally, this process greatly reduces waste management costs because it utilizes the barrack's undeveloped area. Experiments in the barracks show that advantages of windrow composting include low facility investment, high environmental-friendliness, easy operation and low failure rate. Thus, it is particularly suitable for military barracks, institutions or schools with large open areas, highly green environments and plenty of labor. Plant waste, Military barrack, Windrow composting, Incubation, Germination",a novel composting process for plant wastes in taiwan military barracks military barracks throughout taiwan produce large quantities of organic wastes from gardening such as leaves grass and flowers by manipulating and observing the related parameters of the windrow composting process the study seeks to find an optimum treatment method for plant wastes mature compost was used in small amounts as a fermenting source for each experimental sample results show that unpleasant smells that other composting methods produce is significantly decreased with effective control of relationships between temperature saturation and turnover frequency furthermore the time required to complete composting is shortened to 2 3 months the fertility of the products depends on the original compost materials and the composting method through windrow composting composted matter can reach a fertility level between that of soil and manure additionally this process greatly reduces waste management costs because it utilizes the barrack s undeveloped area experiments in the barracks show that advantages of windrow composting include low facility investment high environmental friendliness easy operation and low failure rate thus it is particularly suitable for military barracks institutions or schools with large open areas highly green environments and plenty of labor plant waste military barrack windrow composting incubation germination,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
479,0,"Scented Pebbles: Interactive Ambient Experience with Smell and Lighting Scented Pebbles is a collection of interactive lighting objects to create multisensory ambience of light and smell. When it senses people's movement and touch, the networked objects will generate dynamic ambience. The pebbles emit smells and control the lighting conditions to create your unique ambience such as Hawaiian Sunset or Japanese Onsen. Experience the orchestra of smell and light play and let your mind run free. The paper presented interactive approach to evoke sensorial imagination through multisensory interactions including olfactory sense. mental imagery, multisensory interactions, sensory ambient environment",scented pebbles interactive ambient experience with smell and lighting scented pebbles is a collection of interactive lighting objects to create multisensory ambience of light and smell when it senses people s movement and touch the networked objects will generate dynamic ambience the pebbles emit smells and control the lighting conditions to create your unique ambience such as hawaiian sunset or japanese onsen experience the orchestra of smell and light play and let your mind run free the paper presented interactive approach to evoke sensorial imagination through multisensory interactions including olfactory sense mental imagery multisensory interactions sensory ambient environment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
480,0,"Feminine to smell but masculine to touch? Multisensory congruence and its effect on the aesthetic experience We draw upon literature examining cross-modal sensory interactions and congruence to explore the impact of smell on touch. In line with our predictions, two experiments show that smell can impact touch in meaningful ways. Specifically, we show that multisensory semantic congruence between smell and touch properties of a stimulus enhances haptic perception and product evaluation. We explore this relationship in the context of two properties of touch, namely texture and temperature, and demonstrate that both smell and touch can have semantic associations, which can affect haptic perception and product evaluation depending on whether they match or not. In study 1, we focus on the semantic association of smell and touch (texture) with gender and in study 2 with temperature. Our results extend prior work on smell and touch within consumer behavior, and further contribute to emerging literature on multisensory interactions. Sensory aesthetics, Sensory perception, Semantic congruence, Smell, Touch",feminine to smell but masculine to touch multisensory congruence and its effect on the aesthetic experience we draw upon literature examining cross modal sensory interactions and congruence to explore the impact of smell on touch in line with our predictions two experiments show that smell can impact touch in meaningful ways specifically we show that multisensory semantic congruence between smell and touch properties of a stimulus enhances haptic perception and product evaluation we explore this relationship in the context of two properties of touch namely texture and temperature and demonstrate that both smell and touch can have semantic associations which can affect haptic perception and product evaluation depending on whether they match or not in study 1 we focus on the semantic association of smell and touch texture with gender and in study 2 with temperature our results extend prior work on smell and touch within consumer behavior and further contribute to emerging literature on multisensory interactions sensory aesthetics sensory perception semantic congruence smell touch,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
481,0,"Perceived physical risk and risk-reducing strategies in the consumption of raw vegetable salads in restaurants The importance of eating away from home has revealed the need to understand consumer perception with respect to the physical risks in this context. When a consumer perceives risks, he/she uses different strategies to minimize them. This study aimed to identify consumer perception concerning the physical risks of consuming raw vegetable salads in full-service restaurants, as also the frequency of using physical risk-reducing strategies, examining the influence of socio-demographic variables and social desirability. The survey instrument consisted of 5 items to measure risk perception, 17 items regarding the risk-reducing strategies, socio-demographic questions and the social desirability scale. A total of 359 consumers were interviewed in the city of Campinas, Brazil. An exploratory factor analysis was carried out to group the risk-reducing strategies using the software PASW Statistics, 18.0. A moderate level of physical risk (mean$\pm$standard deviation=24.2$\pm$13.2, on a response scale that could vary between 1 and 49) was perceived by consumers. Three physical risk-reducing strategies presented significant positive correlation (p<0.05) with social desirability, and were excluded from the other statistical analyses. The fourteen physical risk-reducing strategies were categorized in four factors: ``restaurant quality and previous bad experience'', ``information from the waiter, the media, and the price'', ``workers and restaurant smell'' and ``word of mouth and full, already known restaurant''. ``Restaurant quality and previous bad experience'' was the factor significantly (p<0.05) more used by the consumers in the reduction of physical risks, whereas ``information from the waiter, the media, and the price'' was the least used. Differences (p<0.05) in the frequencies of using the strategies contained in the factors were identified with respect to the socio-demographic variables. Those individuals who perceived a greater level of physical risk in the context surveyed used all the factors related to the strategies with greater frequency, to reduce the risk. The results could provide important information for public and private programs. Consumer, Foodservice, Relievers, Risk, Social desirability, Safety",perceived physical risk and risk reducing strategies in the consumption of raw vegetable salads in restaurants the importance of eating away from home has revealed the need to understand consumer perception with respect to the physical risks in this context when a consumer perceives risks he she uses different strategies to minimize them this study aimed to identify consumer perception concerning the physical risks of consuming raw vegetable salads in full service restaurants as also the frequency of using physical risk reducing strategies examining the influence of socio demographic variables and social desirability the survey instrument consisted of 5 items to measure risk perception 17 items regarding the risk reducing strategies socio demographic questions and the social desirability scale a total of 359 consumers were interviewed in the city of campinas brazil an exploratory factor analysis was carried out to group the risk reducing strategies using the software pasw statistics 18 0 a moderate level of physical risk mean pm standard deviation 24 2 pm 13 2 on a response scale that could vary between 1 and 49 was perceived by consumers three physical risk reducing strategies presented significant positive correlation p 0 05 with social desirability and were excluded from the other statistical analyses the fourteen physical risk reducing strategies were categorized in four factors restaurant quality and previous bad experience information from the waiter the media and the price workers and restaurant smell and word of mouth and full already known restaurant restaurant quality and previous bad experience was the factor significantly p 0 05 more used by the consumers in the reduction of physical risks whereas information from the waiter the media and the price was the least used differences p 0 05 in the frequencies of using the strategies contained in the factors were identified with respect to the socio demographic variables those individuals who perceived a greater level of physical risk in the context surveyed used all the factors related to the strategies with greater frequency to reduce the risk the results could provide important information for public and private programs consumer foodservice relievers risk social desirability safety,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
482,0,"A Real-Time Video Abstraction Technique for AR Content Synthesis on Android Platform In this paper, we offer an efficient real-time video abstraction technique that enables interaction with the real-world environment using a smart device for combining augmented reality (AR) and virtual content. The conventional video abstraction technique is inappropriate for the real-time processing of AR content. Therefore, real-time video abstraction through the GPU approach is necessary to minimize the CPU processing of AR content. The methods other than the abstraction technique using the Open GL-ES shader have constraints regarding hardware and the dependency of AR content data. Consequently, this paper proposes a real-time video abstraction technique using the Open GL-ES shader. The proposed real-time video abstraction technique is a method for minimizing the disharmony between virtual and real-world content occurring on AR performing in the limited computing resources of a smart device. To do this, we performed research on video abstraction and applied three filtering algorithms (Sobel operator, Striped pattern-based toon, Non-boundary-based color quantization). In addition, we considered the applicability of AR content through real-time video abstraction experiments using adjusted and monitoring parameters. Real-time video abstraction, augmented reality, image processing on Android platform",a real time video abstraction technique for ar content synthesis on android platform in this paper we offer an efficient real time video abstraction technique that enables interaction with the real world environment using a smart device for combining augmented reality ar and virtual content the conventional video abstraction technique is inappropriate for the real time processing of ar content therefore real time video abstraction through the gpu approach is necessary to minimize the cpu processing of ar content the methods other than the abstraction technique using the open gl es shader have constraints regarding hardware and the dependency of ar content data consequently this paper proposes a real time video abstraction technique using the open gl es shader the proposed real time video abstraction technique is a method for minimizing the disharmony between virtual and real world content occurring on ar performing in the limited computing resources of a smart device to do this we performed research on video abstraction and applied three filtering algorithms sobel operator striped pattern based toon non boundary based color quantization in addition we considered the applicability of ar content through real time video abstraction experiments using adjusted and monitoring parameters real time video abstraction augmented reality image processing on android platform,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
483,0,"Have stump piles any effect on the pine weevil (Hylobius abietis L.) incidence and seedling damage? Tree stumps are being increasingly used for bioenergy purposes, which may have significant effects on pine weevil (Hylobius abietis L.) populations and the level of damage they can cause to seedlings. Pine weevils are attracted by the smell of fresh stumps in clear-cut areas, and have been shown to cause serious damage to planted coniferous seedlings in European forests. This study was conducted to measure the incidence of pine weevil and damage caused to Norway spruce (Picea abies) seedlings in a field experiment including single stump pile plots (SSP), multiple stump pile plots (MSP) and control plots in North Karelia, Finland. Pine weevils were significantly more abundant in MSP stump plots (22% higher) than in SSP plots, and are 23% more abundant compared to the control plots. The extent of seedling damage was significantly lower in the SSP (by 67%) and MSP plots (by 58%) than in the controls. Seedlings damage increased significantly with the distance from the stump pile. Stump harvesting practices should be updated and, in particular, multiple stump piles should be avoided in the clearcut area. However, future studies will be required to explore the environmental and physical factors in the stump-removal area influencing pine weevil abundance. Bioenergy, L., Seedling damage, Stump pile,",have stump piles any effect on the pine weevil hylobius abietis l incidence and seedling damage tree stumps are being increasingly used for bioenergy purposes which may have significant effects on pine weevil hylobius abietis l populations and the level of damage they can cause to seedlings pine weevils are attracted by the smell of fresh stumps in clear cut areas and have been shown to cause serious damage to planted coniferous seedlings in european forests this study was conducted to measure the incidence of pine weevil and damage caused to norway spruce picea abies seedlings in a field experiment including single stump pile plots ssp multiple stump pile plots msp and control plots in north karelia finland pine weevils were significantly more abundant in msp stump plots 22 higher than in ssp plots and are 23 more abundant compared to the control plots the extent of seedling damage was significantly lower in the ssp by 67 and msp plots by 58 than in the controls seedlings damage increased significantly with the distance from the stump pile stump harvesting practices should be updated and in particular multiple stump piles should be avoided in the clearcut area however future studies will be required to explore the environmental and physical factors in the stump removal area influencing pine weevil abundance bioenergy l seedling damage stump pile,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
484,0,"House of Cards: Code Smells in Open-Source C# Repositories Background: Code smells are indicators of quality problems that make a software hard to maintain and evolve. Given the importance of smells in the source code's maintainability, many studies have explored the characteristics of smells and analyzed their effects on the software's quality. Aim: We aim to investigate fundamental characteristics of code smells through an empirical study on frequently occurring smells that examines inter-category and intra-category correlation between design and implementation smells. Method: The study mines 19 design smells and 11 implementation smells in 1988 C# repositories containing more than 49 million lines of code. The mined data are statistically analyzed using methods such as Spearman's correlation and presented through hexbin and scatter plots. Results: We find that unutilized abstraction and magic number smells are the most frequently occurring smells in C# code. Our results also show that implementation and design smells exhibit strong inter-category correlation. The results of co-occurrence analysis imply that whenever unutilized abstraction or magic number smells are found, it is very likely to find other smells from the same smell category in the project. Conclusions: Our experiment shows high average smell density (14.7 and 55.8 for design and implementation smells respectively) for open source C# programs. Such high smell densities turn a software system into a house of cards reflecting the fragility introduced in the system. Our study advocates greater awareness of smells and the adoption of regular refactoring within the developer community to avoid turning software into a house of cards. software maintenance, software quality, code smells, open-source C# repositories, source code, C# code, smell category, C# languages, Correlation, Data mining, Tools, Terminology, Software systems, Code smells, Implementation smells, Design smells, Code quality, Maintainability, C#",house of cards code smells in open source c repositories background code smells are indicators of quality problems that make a software hard to maintain and evolve given the importance of smells in the source code s maintainability many studies have explored the characteristics of smells and analyzed their effects on the software s quality aim we aim to investigate fundamental characteristics of code smells through an empirical study on frequently occurring smells that examines inter category and intra category correlation between design and implementation smells method the study mines 19 design smells and 11 implementation smells in 1988 c repositories containing more than 49 million lines of code the mined data are statistically analyzed using methods such as spearman s correlation and presented through hexbin and scatter plots results we find that unutilized abstraction and magic number smells are the most frequently occurring smells in c code our results also show that implementation and design smells exhibit strong inter category correlation the results of co occurrence analysis imply that whenever unutilized abstraction or magic number smells are found it is very likely to find other smells from the same smell category in the project conclusions our experiment shows high average smell density 14 7 and 55 8 for design and implementation smells respectively for open source c programs such high smell densities turn a software system into a house of cards reflecting the fragility introduced in the system our study advocates greater awareness of smells and the adoption of regular refactoring within the developer community to avoid turning software into a house of cards software maintenance software quality code smells open source c repositories source code c code smell category c languages correlation data mining tools terminology software systems code smells implementation smells design smells code quality maintainability c,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
485,0,"Do male guppies distinguish virgin females from recently mated ones? In some mating systems males should benefit from mating with virgin females because of their higher reproductive value. We determined experimentally whether and how males distinguish between virgin and recently mated females in the guppy, Poecilia reticulata, a promiscuous livebearer. In a free-swimming experiment, males showed flexible mating behaviour by adjusting their tactics according to the mating status of the female they encountered, virgin or mated. Males followed, nipped and copulated with virgins more than with mated females, but they performed more sneaky copulations with mated females, possibly because the latter were more reluctant to mate than virgin females. When, in another set of experiments, males received only the visual cues of both virgins and mated females they showed no preference for either, but when they were exposed only to the female olfactory cues, they associated considerably more with the smell of virgin females. These results suggest that male guppies assess female behavioural and olfactory cues to determine female virginity and then use different mating tactics depending on the female's status. It is possible that the changes in male mating behaviour increase male reproductive success. alternative mating strategies, female mating status, female reproductive status, guppy, male mate choice, , sexual selection",do male guppies distinguish virgin females from recently mated ones in some mating systems males should benefit from mating with virgin females because of their higher reproductive value we determined experimentally whether and how males distinguish between virgin and recently mated females in the guppy poecilia reticulata a promiscuous livebearer in a free swimming experiment males showed flexible mating behaviour by adjusting their tactics according to the mating status of the female they encountered virgin or mated males followed nipped and copulated with virgins more than with mated females but they performed more sneaky copulations with mated females possibly because the latter were more reluctant to mate than virgin females when in another set of experiments males received only the visual cues of both virgins and mated females they showed no preference for either but when they were exposed only to the female olfactory cues they associated considerably more with the smell of virgin females these results suggest that male guppies assess female behavioural and olfactory cues to determine female virginity and then use different mating tactics depending on the female s status it is possible that the changes in male mating behaviour increase male reproductive success alternative mating strategies female mating status female reproductive status guppy male mate choice sexual selection,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
486,0,"Inference and Analysis of Formal Models of Botnet Command and Control Protocols We propose a novel approach to infer protocol state machines in the realistic high-latency network setting, and apply it to the analysis of botnet Command and Control (C &C) protocols. Our proposed techniques enable an order of magnitude reduction in the number of queries and time needed to learn a botnet C &C protocol compared to classic algorithms (from days to hours for inferring the MegaD C &C protocol). We also show that the computed protocol state machines enable formal analysis for botnet defense, including finding the weakest links in a protocol, uncovering protocol design flaws, inferring the existence of unobservable communication back-channels among botnet servers, and finding deviations of protocol implementations which can be used for fingerprinting. We validate our technique by inferring the protocol state-machine from Postfix's SMTP implementation and comparing the inferred state-machine to the SMTP standard. Further, our experimental results offer new insights into MegaD's C &C, showing our technique can be used as a powerful tool for defense against botnets. protocol model inference and analysis, response prediction",inference and analysis of formal models of botnet command and control protocols we propose a novel approach to infer protocol state machines in the realistic high latency network setting and apply it to the analysis of botnet command and control c c protocols our proposed techniques enable an order of magnitude reduction in the number of queries and time needed to learn a botnet c c protocol compared to classic algorithms from days to hours for inferring the megad c c protocol we also show that the computed protocol state machines enable formal analysis for botnet defense including finding the weakest links in a protocol uncovering protocol design flaws inferring the existence of unobservable communication back channels among botnet servers and finding deviations of protocol implementations which can be used for fingerprinting we validate our technique by inferring the protocol state machine from postfix s smtp implementation and comparing the inferred state machine to the smtp standard further our experimental results offer new insights into megad s c c showing our technique can be used as a powerful tool for defense against botnets protocol model inference and analysis response prediction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
487,0,"Treatment of reduced sulphur compounds and SO2 by Gas Phase Advanced Oxidation Reduced sulphur compounds (RSCs) emitted from pig farms are a major problem for agriculture, due to their health and environmental impacts and foul odour. This study investigates the removal of RSCs, including H2S, and their oxidation product SO2 using Gas Phase Advanced Oxidation (GPAO). GPAO is a novel air cleaning technique which utilises accelerated atmospheric chemistry to oxidise pollutants before removing their oxidation products as particles. Removal efficiencies of 24.5% and 3.9% were found for 461ppb of H2S and 714ppb of SO2 in a laboratory system (volumetric flow Q=75m3/h). A numerical model of the reactor system was developed to explore the basic features of the system; its output was in fair agreement with the experiment. The model verified the role of OH radicals in initiating the oxidation chemistry. All sulphur removed from the gas phase was detected as particulate matter, assuming the observed particles were made of sulphuric acid. In a second set of experiments a range of RSCs at mixing ratios typically found in pig farms were treated using a larger industry-scale system (Q=600--1200m3/h) that included a wet scrubber. Removal efficiencies >90% were found for all compounds. The study demonstrates the ability of GPAO to control RSC emissions with a low energy input relative to many currently available techniques. Pollution control, Smell abatement, Reduced sulphur compounds, Advanced oxidation, Gas-phase treatment",treatment of reduced sulphur compounds and so2 by gas phase advanced oxidation reduced sulphur compounds rscs emitted from pig farms are a major problem for agriculture due to their health and environmental impacts and foul odour this study investigates the removal of rscs including h2s and their oxidation product so2 using gas phase advanced oxidation gpao gpao is a novel air cleaning technique which utilises accelerated atmospheric chemistry to oxidise pollutants before removing their oxidation products as particles removal efficiencies of 24 5 and 3 9 were found for 461ppb of h2s and 714ppb of so2 in a laboratory system volumetric flow q 75m3 h a numerical model of the reactor system was developed to explore the basic features of the system its output was in fair agreement with the experiment the model verified the role of oh radicals in initiating the oxidation chemistry all sulphur removed from the gas phase was detected as particulate matter assuming the observed particles were made of sulphuric acid in a second set of experiments a range of rscs at mixing ratios typically found in pig farms were treated using a larger industry scale system q 600 1200m3 h that included a wet scrubber removal efficiencies 90 were found for all compounds the study demonstrates the ability of gpao to control rsc emissions with a low energy input relative to many currently available techniques pollution control smell abatement reduced sulphur compounds advanced oxidation gas phase treatment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
488,0,"Aroma characterization of orthodox black tea with electronic nose Black tea quality is a very complex phenomenon. There are almost two hundred varieties of bio-chemical compounds, both volatile and nonvolatile present in tea and each of these compounds contribute to tea quality (B. Banerjee, 1996), The major quality attributes of tea are flavour, aroma, colour and strength. Acceptance by consumers and price realized depend on these attributes (S.Y. Dheodhar et al.,). Out of these, aroma is the most important of the attributes and in common parlance, aroma means smell of the tea. Characterization of aroma of tea has been a challenge for tea scientists for long. Efforts have been made towards this through chemical analysis and instrumental studies through gas chromatography (GC) and high profile liquid chromatography (HPLC) techniques. Research and studies have been reported with success for quality characterization of food and beverages using electronic nose (T.C. Pearce et al., 2003). This paper reports a study and results on applicability of electronic nose for aroma characterization of orthodox black tea. Six varieties of orthodox tea samples were tested using Alpha MOS 2000 Electronic Nose and data obtained from the experimental setup have been successfully classified using principal component analysis (PCA) and back-propagation multilayer perceptron model. beverages, testing, production engineering computing, chromatography, principal component analysis, biochemistry, multilayer perceptrons, backpropagation, electronic noses, chemioception, pattern recognition, MIS devices, aroma characterization, orthodox black tea quality, metal oxide semiconductor, Alpha MOS 2000 electronic nose, bio-chemical compound, tea scientist, chemical analysis, gas chromatography, GC, high profile liquid chromatography, HPLC technique, principal component analysis, PCA, back-propagation multilayer perceptron model, pattern recognition, olfaction, sensors, Electronic noses, Humans, Instruments, Chemical analysis, Cloning, Gas chromatography, Principal component analysis, Reactive power, Temperature, Postal services",aroma characterization of orthodox black tea with electronic nose black tea quality is a very complex phenomenon there are almost two hundred varieties of bio chemical compounds both volatile and nonvolatile present in tea and each of these compounds contribute to tea quality b banerjee 1996 the major quality attributes of tea are flavour aroma colour and strength acceptance by consumers and price realized depend on these attributes s y dheodhar et al out of these aroma is the most important of the attributes and in common parlance aroma means smell of the tea characterization of aroma of tea has been a challenge for tea scientists for long efforts have been made towards this through chemical analysis and instrumental studies through gas chromatography gc and high profile liquid chromatography hplc techniques research and studies have been reported with success for quality characterization of food and beverages using electronic nose t c pearce et al 2003 this paper reports a study and results on applicability of electronic nose for aroma characterization of orthodox black tea six varieties of orthodox tea samples were tested using alpha mos 2000 electronic nose and data obtained from the experimental setup have been successfully classified using principal component analysis pca and back propagation multilayer perceptron model beverages testing production engineering computing chromatography principal component analysis biochemistry multilayer perceptrons backpropagation electronic noses chemioception pattern recognition mis devices aroma characterization orthodox black tea quality metal oxide semiconductor alpha mos 2000 electronic nose bio chemical compound tea scientist chemical analysis gas chromatography gc high profile liquid chromatography hplc technique principal component analysis pca back propagation multilayer perceptron model pattern recognition olfaction sensors electronic noses humans instruments chemical analysis cloning gas chromatography principal component analysis reactive power temperature postal services,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
489,0,"Highly sensitive porous metal oxide films for early detection of electrical fire: Surface modification and high throughput screening In this study, an electrical fire simulator was fabricated and connected to a test platform which can take high throughput screening of materials through the method of combinatorial material science. WO3 and In2O3 were used as basis materials in the experiment and modified through the way of micro-injection in order to find the best one sensitive to electrical fire. It is found that CrCl3-modified and MgCl2-modified WO3, as well as LaOCl-modified and SmOCl-modified In2O3 show the best sensing performance. They can be used as sensitive materials for early detection of electrical fire because they have good sensitivity to the smell of PVC even if the working temperature of PVC insulated wires is lower than 200$ ^\circ$C. Therefore, it confirms that the early detection of electrical fire in the invisible smoke stage is feasible by using the modified WO3 or In2O3. Electrical fire, Modified WO, Modified InO, Sensitivity, High throughput screening",highly sensitive porous metal oxide films for early detection of electrical fire surface modification and high throughput screening in this study an electrical fire simulator was fabricated and connected to a test platform which can take high throughput screening of materials through the method of combinatorial material science wo3 and in2o3 were used as basis materials in the experiment and modified through the way of micro injection in order to find the best one sensitive to electrical fire it is found that crcl3 modified and mgcl2 modified wo3 as well as laocl modified and smocl modified in2o3 show the best sensing performance they can be used as sensitive materials for early detection of electrical fire because they have good sensitivity to the smell of pvc even if the working temperature of pvc insulated wires is lower than 200 circ c therefore it confirms that the early detection of electrical fire in the invisible smoke stage is feasible by using the modified wo3 or in2o3 electrical fire modified wo modified ino sensitivity high throughput screening,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
490,0,"Definition and Detection of Control-Flow Anti-patterns in Process Models The correctness of process model is getting crucial as more and more process models begin to execute on workflow engines. Anti-pattern, as an effective and objective mean to verify the correctness of process model, is gaining increasing attention. Great loss could be avoided if control-flow anti-patterns were detected in an early time. In this paper, a control-flow anti-pattern detection approach for process models is proposed, which can support user-defined control-flow anti-pattern detection with different process modeling languages. To achieve this, firstly the control-flow structure of process model is transformed to refined process structure tree (RPST for short) via the cycle equivalence algorithm. Then CAPDL, a control-flow anti-patterns description language, is designed and an anti-pattern detection algorithm based on CAPDL is proposed. Finally, an anti-pattern detection experiment was conducted based on 278 real-world BPMN process models, the detection result of which shows that the proposed approach can detect user-defined control-flow anti-patterns effectively. business data processing, object-oriented methods, specification languages, trees (mathematics), process models, workflow engines, control-flow anti-pattern detection approach, process modeling languages, refined process structure tree, RPST, cycle equivalence algorithm, CAPDL, real-world BPMN process models, control-flow anti-patterns description language, Process control, Computational modeling, Detection algorithms, Periodic structures, Algorithm design and analysis, Synchronization, Conferences, process model, CAPDL, control-flow anti-pattern detection, RPST",definition and detection of control flow anti patterns in process models the correctness of process model is getting crucial as more and more process models begin to execute on workflow engines anti pattern as an effective and objective mean to verify the correctness of process model is gaining increasing attention great loss could be avoided if control flow anti patterns were detected in an early time in this paper a control flow anti pattern detection approach for process models is proposed which can support user defined control flow anti pattern detection with different process modeling languages to achieve this firstly the control flow structure of process model is transformed to refined process structure tree rpst for short via the cycle equivalence algorithm then capdl a control flow anti patterns description language is designed and an anti pattern detection algorithm based on capdl is proposed finally an anti pattern detection experiment was conducted based on 278 real world bpmn process models the detection result of which shows that the proposed approach can detect user defined control flow anti patterns effectively business data processing object oriented methods specification languages trees mathematics process models workflow engines control flow anti pattern detection approach process modeling languages refined process structure tree rpst cycle equivalence algorithm capdl real world bpmn process models control flow anti patterns description language process control computational modeling detection algorithms periodic structures algorithm design and analysis synchronization conferences process model capdl control flow anti pattern detection rpst,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
491,0,"Detecting Code Smells in Software Product Lines -- An Exploratory Study Code smells are symptoms that something is wrong in the source code. They have been catalogued and investigated in several programming techniques. These techniques can be used to develop Software Product Lines (SPL). However, feature-oriented programming (FOP) is a specific technique to deal with the modularization of features in SPL. One of the most popular FOP languages is AHEAD and, as far as we are concerned, we still lack systematic studies on the categorization and detection of code smells in AHEADFOP languages-based SPL. To fill this gap, this paper extends the definitions of three traditional code smells, namely God Method, God Class, and Shotgun Surgery, to take into account FOP abstractions. We then proposed 8 new FOP measures to quantify specific characteristics of compositional approaches like AHEAD. Finally, we combine the proposed and existing measures to define 3 detection strategies for identifying the investigated code smells. To evaluate the detection strategies, we performed an exploratory study involving 26 participants. The study participants rely on metrics to identify code smells in 8 AHEAD systems. Our results show that the proposed detection strategies can be used as code smell predictor since statistical tests indicate agreement among them and the study participants. object-oriented programming, program compilers, software product lines, source code (software), code smell detection, software product lines, source code, programming techniques, SPL, feature oriented programming, AHEADFOP languages, Surgery, Atmospheric measurements, Particle measurements, Software, Programming, Inspection, Software Product Lines, Code Smells, Detection Strategies",detecting code smells in software product lines an exploratory study code smells are symptoms that something is wrong in the source code they have been catalogued and investigated in several programming techniques these techniques can be used to develop software product lines spl however feature oriented programming fop is a specific technique to deal with the modularization of features in spl one of the most popular fop languages is ahead and as far as we are concerned we still lack systematic studies on the categorization and detection of code smells in aheadfop languages based spl to fill this gap this paper extends the definitions of three traditional code smells namely god method god class and shotgun surgery to take into account fop abstractions we then proposed 8 new fop measures to quantify specific characteristics of compositional approaches like ahead finally we combine the proposed and existing measures to define 3 detection strategies for identifying the investigated code smells to evaluate the detection strategies we performed an exploratory study involving 26 participants the study participants rely on metrics to identify code smells in 8 ahead systems our results show that the proposed detection strategies can be used as code smell predictor since statistical tests indicate agreement among them and the study participants object oriented programming program compilers software product lines source code software code smell detection software product lines source code programming techniques spl feature oriented programming aheadfop languages surgery atmospheric measurements particle measurements software programming inspection software product lines code smells detection strategies,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
492,0,"Ethical analysis for space shuttle analysis In an effort to promote the space program launched by the government of United States (US), the first Teacher in Space Project (TISP) was announced by President Reagan in1984. To succeed this project, the management at National Aeronautics and Space Administration (NASA) and their contractor, Thiokol overruled engineer's opinion and commented that the data given was inconclusive. This situation went worse when the management level made irrational decisions to launch the mission yet they knew there was a design flaw in Solid Rocket Booster (SRB). Due to their irresponsible conducts, seven astronauts were killed when the space shuttle they were piloting, the Challenger, exploded 73 seconds after liftoff. It was the first tragedy in US lost their astronauts in flight. Consequently, NASA had to suspend shuttle flights for two years. In order to analyze this case study, analysis is placed on using ethical theories are the foreground. Each ethical theory emphasizes different points to examine problems from different perspectives in order to reach an ethically correct decision. Hence, knowledge of ethical theories is essential because it provides a framework for understanding and making a better decision. NASA, Space shuttles, Structural rings, Ethics, Rockets, Solids, Meteorology, NASA, solid rocket booster, space shuttle, astronauts",ethical analysis for space shuttle analysis in an effort to promote the space program launched by the government of united states us the first teacher in space project tisp was announced by president reagan in1984 to succeed this project the management at national aeronautics and space administration nasa and their contractor thiokol overruled engineer s opinion and commented that the data given was inconclusive this situation went worse when the management level made irrational decisions to launch the mission yet they knew there was a design flaw in solid rocket booster srb due to their irresponsible conducts seven astronauts were killed when the space shuttle they were piloting the challenger exploded 73 seconds after liftoff it was the first tragedy in us lost their astronauts in flight consequently nasa had to suspend shuttle flights for two years in order to analyze this case study analysis is placed on using ethical theories are the foreground each ethical theory emphasizes different points to examine problems from different perspectives in order to reach an ethically correct decision hence knowledge of ethical theories is essential because it provides a framework for understanding and making a better decision nasa space shuttles structural rings ethics rockets solids meteorology nasa solid rocket booster space shuttle astronauts,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
493,0,"Detecting and visualizing inter-worksheet smells in spreadsheets Spreadsheets are often used in business, for simple tasks, as well as for mission critical tasks such as finance or forecasting. Similar to software, some spreadsheets are of better quality than others, for instance with respect to usability, maintainability or reliability. In contrast with software however, spreadsheets are rarely checked, tested or certified. In this paper, we aim at developing an approach for detecting smells that indicate weak points in a spreadsheet's design. To that end we first study code smells and transform these code smells to their spreadsheet counterparts. We then present an approach to detect the smells, and to communicate located smells to spreadsheet users with data flow diagrams. To evaluate our apporach, we analyzed occurrences of these smells in the Euses corpus. Furthermore we conducted ten case studies in an industrial setting. The results of the evaluation indicate that smells can indeed reveal weaknesses in a spreadsheet's design, and that data flow diagrams are an appropriate way to show those weaknesses. data flow analysis, data visualisation, diagrams, spreadsheet programs, interworksheet smell detection, interworksheet smell visualization, spreadsheet design, code smells, data flow diagrams, Euses corpus, Measurement, Data visualization, Surgery, Couplings, Educational institutions, Software engineering, Business, spreadsheets, code smells, refactoring, data flow diagrams",detecting and visualizing inter worksheet smells in spreadsheets spreadsheets are often used in business for simple tasks as well as for mission critical tasks such as finance or forecasting similar to software some spreadsheets are of better quality than others for instance with respect to usability maintainability or reliability in contrast with software however spreadsheets are rarely checked tested or certified in this paper we aim at developing an approach for detecting smells that indicate weak points in a spreadsheet s design to that end we first study code smells and transform these code smells to their spreadsheet counterparts we then present an approach to detect the smells and to communicate located smells to spreadsheet users with data flow diagrams to evaluate our apporach we analyzed occurrences of these smells in the euses corpus furthermore we conducted ten case studies in an industrial setting the results of the evaluation indicate that smells can indeed reveal weaknesses in a spreadsheet s design and that data flow diagrams are an appropriate way to show those weaknesses data flow analysis data visualisation diagrams spreadsheet programs interworksheet smell detection interworksheet smell visualization spreadsheet design code smells data flow diagrams euses corpus measurement data visualization surgery couplings educational institutions software engineering business spreadsheets code smells refactoring data flow diagrams,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
494,0,"Sharing an olfactory experience: The impact of oral communication The way odors are verbally coded in many languages is not very efficient for successful intersubjective communication. Nevertheless, some types of verbalization seem to facilitate the sharing of an olfactory experience. The experiment reported here was aimed at gaining a better understanding of how successful oral communication in the domain of olfaction works. It was hypothesized that oral description of odors enhances the recognition of olfactory stimuli that match the description. The experimental situation involved two participants, one of whom (sender) smelled and orally described an odorant to the other person (receiver) who had to recognize it. Qualitative analyses (verbal) from the communication phase and quantitative analyses (recognition rate) from the recognition phase were made. The line of study of the participants (18 chemistry students and 18 humanities students) and the type-of-odorant used had no effect on the recognition rate. On the other hand, as the number of trials increased, a slight but still statistically significant interaction between participant sex and odor-recognition rate was observed. The qualitative analysis showed that the oral communication revolved mainly around five types of description - known source, odor intensity, hedonistic valence, odorant property, and odorant effect -- and that the use of too many of these descriptors reduces performance. Descriptions were based on associations and fuzzy categories, they were related to the body, occasionally contained references to other senses (sight, touch, and taste), and could exhibit considerable self-confidence, even on trials that ended in a recognition failure. These findings support the idea that one and the same scent-bearing substance can be subject to highly diverse cognitive processing. Odor, Olfaction, Communication, Description, Language, Recognition",sharing an olfactory experience the impact of oral communication the way odors are verbally coded in many languages is not very efficient for successful intersubjective communication nevertheless some types of verbalization seem to facilitate the sharing of an olfactory experience the experiment reported here was aimed at gaining a better understanding of how successful oral communication in the domain of olfaction works it was hypothesized that oral description of odors enhances the recognition of olfactory stimuli that match the description the experimental situation involved two participants one of whom sender smelled and orally described an odorant to the other person receiver who had to recognize it qualitative analyses verbal from the communication phase and quantitative analyses recognition rate from the recognition phase were made the line of study of the participants 18 chemistry students and 18 humanities students and the type of odorant used had no effect on the recognition rate on the other hand as the number of trials increased a slight but still statistically significant interaction between participant sex and odor recognition rate was observed the qualitative analysis showed that the oral communication revolved mainly around five types of description known source odor intensity hedonistic valence odorant property and odorant effect and that the use of too many of these descriptors reduces performance descriptions were based on associations and fuzzy categories they were related to the body occasionally contained references to other senses sight touch and taste and could exhibit considerable self confidence even on trials that ended in a recognition failure these findings support the idea that one and the same scent bearing substance can be subject to highly diverse cognitive processing odor olfaction communication description language recognition,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
495,0,"A Quantitative and Qualitative Investigation of Performance-Related Commits in Android Apps Performance is nowadays becoming a crucial issue for mobile apps, as they are often implementing computational-intensive features, are being used for mission-critical tasks, and, last but not least, a pleasant user experience often is a key factor to determine the success of an app. This paper reports a study aimed at preliminarily investigating to what extent developers take care of performance issues in their commits, and explicitly document that. The study has been conducted on commits of 2,443 open source Android apps, of which 180 turned out to contain a total of 457 documented performance problems. We classified performance-related commits using a card sorting approach, and found that the most predominant kinds of performance-related changes include GUI-related changes, fixing code smells, network-related code, and memory management. Android (operating system), mobile computing, performance-related commits, Android applications, mobile apps, open source Android apps, card sorting approach, GUI-related changes, graphical user interfaces, code smell fixing, network-related code, memory management, Androids, Humanoid robots, Mobile communication, Google, Smart phones, Sorting, Context, Android, Mobile Performance issues, App Store Mining",a quantitative and qualitative investigation of performance related commits in android apps performance is nowadays becoming a crucial issue for mobile apps as they are often implementing computational intensive features are being used for mission critical tasks and last but not least a pleasant user experience often is a key factor to determine the success of an app this paper reports a study aimed at preliminarily investigating to what extent developers take care of performance issues in their commits and explicitly document that the study has been conducted on commits of 2 443 open source android apps of which 180 turned out to contain a total of 457 documented performance problems we classified performance related commits using a card sorting approach and found that the most predominant kinds of performance related changes include gui related changes fixing code smells network related code and memory management android operating system mobile computing performance related commits android applications mobile apps open source android apps card sorting approach gui related changes graphical user interfaces code smell fixing network related code memory management androids humanoid robots mobile communication google smart phones sorting context android mobile performance issues app store mining,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
496,0,"Predicting maintainability of open source software using Gene Expression Programming and bad smells Software maintenance phase of Software Development Lifecycle (SDLC) is the most expensive and complex phase that requires nearly 60-70% of the total project cost. Due to this, many software fails to get repair within real time constraint. Ascribe to technology advancements and changing requirements, software must be well developed and maintained to get adapted. Hence, it is necessary to predict software maintainability in the early phases of the lifecycle so that optimization of resources can be possible and cost can be reduced. Software Maintainability is the quality attribute of software product that explains the ease with which modifications can be performed. The main focus in this study is to propose the use of Gene Expression Programming (GEP) for the software maintainability prediction and measure its performance with various machine leaning techniques such as Decision Tree Forest, Support Vector Machine, Linear regression, Multilayer Perceptron and Radial basis function neural network. The empirical study is conducted with the help of four open source datasets. Eleven bad smells are identified and is considered as maintenance effort. Results of this study show that GEP algorithm performs better than machine learning classifiers; hence it can be used as sound alternative in the prediction of software maintainability. This study would be helpful in achieving better resource allocation hence it will be useful for developers and maintainers. evolutionary computation, learning (artificial intelligence), pattern classification, public domain software, software maintenance, software metrics, open source software, gene expression programming, bad smells, software maintenance, software development lifecycle, SDLC, software maintainability prediction, software product, machine learning classifiers, software metrics, Software, Measurement, Predictive models, Machine learning algorithms, Prediction algorithms, Software algorithms, Gene expression, Software Maintainability, Bad smell, Gene Expression Programming, Machine learning algorithm, Prediction accuracy measures, Software Metrics",predicting maintainability of open source software using gene expression programming and bad smells software maintenance phase of software development lifecycle sdlc is the most expensive and complex phase that requires nearly 60 70 of the total project cost due to this many software fails to get repair within real time constraint ascribe to technology advancements and changing requirements software must be well developed and maintained to get adapted hence it is necessary to predict software maintainability in the early phases of the lifecycle so that optimization of resources can be possible and cost can be reduced software maintainability is the quality attribute of software product that explains the ease with which modifications can be performed the main focus in this study is to propose the use of gene expression programming gep for the software maintainability prediction and measure its performance with various machine leaning techniques such as decision tree forest support vector machine linear regression multilayer perceptron and radial basis function neural network the empirical study is conducted with the help of four open source datasets eleven bad smells are identified and is considered as maintenance effort results of this study show that gep algorithm performs better than machine learning classifiers hence it can be used as sound alternative in the prediction of software maintainability this study would be helpful in achieving better resource allocation hence it will be useful for developers and maintainers evolutionary computation learning artificial intelligence pattern classification public domain software software maintenance software metrics open source software gene expression programming bad smells software maintenance software development lifecycle sdlc software maintainability prediction software product machine learning classifiers software metrics software measurement predictive models machine learning algorithms prediction algorithms software algorithms gene expression software maintainability bad smell gene expression programming machine learning algorithm prediction accuracy measures software metrics,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
497,0,"Relationship between clinical measures and histopathologic findings in chronic rhinosinusitis Objective Describe detailed histopathologic findings from a cohort of patients with chronic rhinosinusitis and evaluate whether histologic measures correlate with baseline clinical factors. Study Design Cross-sectional study with planned data collection. Setting Tertiary medical center. Subjects and Methods Adult patients with chronic rhinosinusitis were prospectively enrolled and demographic data and medical comorbidities recorded. Disease severity was measured by computed tomography (CT), endoscopy, Smell Identification Test (SIT), the Chronic Sinusitis Survey, Rhinosinusitis Disability Index, and SF-36 General Health Survey. Mucosal specimens were assessed for the presence of mucosal inflammation, including cellular (eosinophils, neutrophils, lymphocytes, mast cells, plasma cells, macrophages), epithelial (squamous metaplasia, basement membrane thickening, goblet cells), and stromal markers (subepithelial edema, fibrosis). Histopathologic findings were correlated to baseline clinical factors. Results A total of 147 subjects were enrolled with histologic samples available for review. Presence of inflammatory markers was diverse, with lymphocytes present in 100 percent of subjects, eosinophils in 49.7 percent, and neutrophils found in 0.7 percent. Total eosinophil counts correlated with the presence of nasal polyposis (r = −0.367; P < 0.001), asthma (r = 0.264; P = 0.001), and aspirin intolerance (r = 0.279; P = 0.001). Mucosal eosinophilia correlated with worse disease severity on CT (r = 0.414; P < 0.001), endoscopy (r = 0.376; P < 0.001), and SIT (r = −0.253; P = 0.002), with the highest correlations seen in subgroups without nasal polyps. Histopathologic findings did not significantly correlate with any quality-of-life measure. Conclusion Mucosal eosinophilia correlates with objective disease severity as defined by CT, endoscopy, and SIT scores. Although other histologic markers of inflammation are present, none show similar correlations. The presence of mucosal eosinophils does not correlate with quality-of-life scores. []",relationship between clinical measures and histopathologic findings in chronic rhinosinusitis objective describe detailed histopathologic findings from a cohort of patients with chronic rhinosinusitis and evaluate whether histologic measures correlate with baseline clinical factors study design cross sectional study with planned data collection setting tertiary medical center subjects and methods adult patients with chronic rhinosinusitis were prospectively enrolled and demographic data and medical comorbidities recorded disease severity was measured by computed tomography ct endoscopy smell identification test sit the chronic sinusitis survey rhinosinusitis disability index and sf 36 general health survey mucosal specimens were assessed for the presence of mucosal inflammation including cellular eosinophils neutrophils lymphocytes mast cells plasma cells macrophages epithelial squamous metaplasia basement membrane thickening goblet cells and stromal markers subepithelial edema fibrosis histopathologic findings were correlated to baseline clinical factors results a total of 147 subjects were enrolled with histologic samples available for review presence of inflammatory markers was diverse with lymphocytes present in 100 percent of subjects eosinophils in 49 7 percent and neutrophils found in 0 7 percent total eosinophil counts correlated with the presence of nasal polyposis r 0 367 p 0 001 asthma r 0 264 p 0 001 and aspirin intolerance r 0 279 p 0 001 mucosal eosinophilia correlated with worse disease severity on ct r 0 414 p 0 001 endoscopy r 0 376 p 0 001 and sit r 0 253 p 0 002 with the highest correlations seen in subgroups without nasal polyps histopathologic findings did not significantly correlate with any quality of life measure conclusion mucosal eosinophilia correlates with objective disease severity as defined by ct endoscopy and sit scores although other histologic markers of inflammation are present none show similar correlations the presence of mucosal eosinophils does not correlate with quality of life scores,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
498,0,"Treadmill: Attributing the Source of Tail Latency Through Precise Load Testing and Statistical Inference Managing tail latency of requests has become one of the primary challenges for large-scale Internet services. Data centers are quickly evolving and service operators frequently desire to make changes to the deployed software and production hardware configurations. Such changes demand a confident understanding of the impact on one's service, in particular its effect on tail latency (e.g., 95th-or 99th-percentile response latency of the service). Evaluating the impact on the tail is challenging because of its inherent variability. Existing tools and methodologies for measuring these effects suffer from a number of deficiencies including poor load tester design, statistically inaccurate aggregation, and improper attribution of effects. As shown in the paper, these pitfalls can often result in misleading conclusions. In this paper, we develop a methodology for statistically rigorous performance evaluation and performance factor attribution for server workloads. First, we find that careful design of the server load tester can ensure high quality performance evaluation, and empirically demonstrate the inaccuracy of load testers in previous work. Learning from the design flaws in prior work, we design and develop a modular load tester platform, Treadmill, that overcomes pitfalls of existing tools. Next, utilizing Treadmill, we construct measurement and analysis procedures that can properly attribute performance factors. We rely on statistically-sound performance evaluation and quantile regression, extending it to accommodate the idiosyncrasies of server systems. Finally, we use our augmented methodology to evaluate the impact of common server hardware features with Facebook production workloads on production hardware. We decompose the effects of these features on request tail latency and demonstrate that our evaluation methodology provides superior results, particularly in capturing complicated and counter-intuitive performance behaviors. By tuning the hardware features as suggested by the attribution, we reduce the 99th-percentile latency by 43% and its variance by 93%. data center, load testing, tail latency",treadmill attributing the source of tail latency through precise load testing and statistical inference managing tail latency of requests has become one of the primary challenges for large scale internet services data centers are quickly evolving and service operators frequently desire to make changes to the deployed software and production hardware configurations such changes demand a confident understanding of the impact on one s service in particular its effect on tail latency e g 95th or 99th percentile response latency of the service evaluating the impact on the tail is challenging because of its inherent variability existing tools and methodologies for measuring these effects suffer from a number of deficiencies including poor load tester design statistically inaccurate aggregation and improper attribution of effects as shown in the paper these pitfalls can often result in misleading conclusions in this paper we develop a methodology for statistically rigorous performance evaluation and performance factor attribution for server workloads first we find that careful design of the server load tester can ensure high quality performance evaluation and empirically demonstrate the inaccuracy of load testers in previous work learning from the design flaws in prior work we design and develop a modular load tester platform treadmill that overcomes pitfalls of existing tools next utilizing treadmill we construct measurement and analysis procedures that can properly attribute performance factors we rely on statistically sound performance evaluation and quantile regression extending it to accommodate the idiosyncrasies of server systems finally we use our augmented methodology to evaluate the impact of common server hardware features with facebook production workloads on production hardware we decompose the effects of these features on request tail latency and demonstrate that our evaluation methodology provides superior results particularly in capturing complicated and counter intuitive performance behaviors by tuning the hardware features as suggested by the attribution we reduce the 99th percentile latency by 43 and its variance by 93 data center load testing tail latency,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
499,0,"Mining Version Histories for Detecting Code Smells Code smells are symptoms of poor design and implementation choices that may hinder code comprehension, and possibly increase changeand fault-proneness. While most of the detection techniques just rely on structural information, many code smells are intrinsically characterized by how code elements change overtime. In this paper, we propose Historical Information for Smell deTection (HIST), an approach exploiting change history information to detect instances of five different code smells, namely Divergent Change, Shotgun Surgery, Parallel Inheritance, Blob, and Feature Envy. We evaluate HIST in two empirical studies. The first, conducted on 20 open source projects, aimed at assessing the accuracy of HIST in detecting instances of the code smells mentioned above. The results indicate that the precision of HIST ranges between 72 and 86 percent, and its recall ranges between 58 and 100 percent. Also, results of the first study indicate that HIST is able to identify code smells that cannot be identified by competitive approaches solely based on code analysis of a single system's snapshot. Then, we conducted a second study aimed at investigating to what extent the code smells detected by HIST (and by competitive code analysis techniques) reflect developers' perception of poor design and implementation choices. We involved 12 developers of four open source projects that recognized more than 75 percent of the code smell instances identified by HIST as actual design/implementation problems. data mining, program compilers, public domain software, code smell detection, historical information for smell detection, divergent change, shotgun surgery, parallel inheritance, blob, feature envy, HIST, code analysis, single system snapshot, open source project, mining version history, History, Feature extraction, Surgery, Accuracy, Association rules, Detectors, Code smells, mining software repositories, empirical studies, Code smells, mining software repositories, empirical studies",mining version histories for detecting code smells code smells are symptoms of poor design and implementation choices that may hinder code comprehension and possibly increase changeand fault proneness while most of the detection techniques just rely on structural information many code smells are intrinsically characterized by how code elements change overtime in this paper we propose historical information for smell detection hist an approach exploiting change history information to detect instances of five different code smells namely divergent change shotgun surgery parallel inheritance blob and feature envy we evaluate hist in two empirical studies the first conducted on 20 open source projects aimed at assessing the accuracy of hist in detecting instances of the code smells mentioned above the results indicate that the precision of hist ranges between 72 and 86 percent and its recall ranges between 58 and 100 percent also results of the first study indicate that hist is able to identify code smells that cannot be identified by competitive approaches solely based on code analysis of a single system s snapshot then we conducted a second study aimed at investigating to what extent the code smells detected by hist and by competitive code analysis techniques reflect developers perception of poor design and implementation choices we involved 12 developers of four open source projects that recognized more than 75 percent of the code smell instances identified by hist as actual design implementation problems data mining program compilers public domain software code smell detection historical information for smell detection divergent change shotgun surgery parallel inheritance blob feature envy hist code analysis single system snapshot open source project mining version history history feature extraction surgery accuracy association rules detectors code smells mining software repositories empirical studies code smells mining software repositories empirical studies,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
500,0,"An empirical approach to evaluating dependency locality in hierarchically structured software systems In software development, especially component-based software development, dependency locality states that relevant software components should be at shorter distances than irrelevant components. This principle is used together with modularity and hierarchy to guide the design of large-scale complex software systems. In previous work, dependency locality and its correlation with design quality were studied by statically measuring the interactions between software components. This paper presents an empirical approach to evaluating the hierarchical structure of software systems through mining their revision history. Two metrics, spatial distance and temporal distance, are adapted to measure the dependencies between software components. The correlation of spatial distance and temporal distance between software components represents a factor that influences system design quality. More specially, a well designed system hierarchy should have a significant positive correlation while a non-significant positive correlation or a negative correlation would signify design flaws. In an application of this approach, we use Mantel test to study the dependency locality of six software systems from Apache projects. Dependency locality, Hierarchy, Spatial distance, Temporal distance, Mantel test, Apache",an empirical approach to evaluating dependency locality in hierarchically structured software systems in software development especially component based software development dependency locality states that relevant software components should be at shorter distances than irrelevant components this principle is used together with modularity and hierarchy to guide the design of large scale complex software systems in previous work dependency locality and its correlation with design quality were studied by statically measuring the interactions between software components this paper presents an empirical approach to evaluating the hierarchical structure of software systems through mining their revision history two metrics spatial distance and temporal distance are adapted to measure the dependencies between software components the correlation of spatial distance and temporal distance between software components represents a factor that influences system design quality more specially a well designed system hierarchy should have a significant positive correlation while a non significant positive correlation or a negative correlation would signify design flaws in an application of this approach we use mantel test to study the dependency locality of six software systems from apache projects dependency locality hierarchy spatial distance temporal distance mantel test apache,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
501,0,"Understanding the Impact of Refactoring on Smells: A Longitudinal Study of 23 Software Projects Code smells in a program represent indications of structural quality problems, which can be addressed by software refactoring. However, refactoring intends to achieve different goals in practice, and its application may not reduce smelly structures. Developers may neglect or end up creating new code smells through refactoring. Unfortunately, little has been reported about the beneficial and harmful effects of refactoring on code smells. This paper reports a longitudinal study intended to address this gap. We analyze how often commonly-used refactoring types affect the density of 13 types of code smells along the version histories of 23 projects. Our findings are based on the analysis of 16,566 refactorings distributed in 10 different types. Even though 79.4% of the refactorings touched smelly elements, 57% did not reduce their occurrences. Surprisingly, only 9.7% of refactorings removed smells, while 33.3% induced the introduction of new ones. More than 95% of such refactoring-induced smells were not removed in successive commits, which suggest refactorings tend to more frequently introduce long-living smells instead of eliminating existing ones. We also characterized and quantified typical refactoring-smell patterns, and observed that harmful patterns are frequent, including: (i) approximately 30% of the Move Method and Pull Up Method refactorings induced the emergence of God Class, and (ii) the Extract Superclass refactoring creates the smell Speculative Generality in 68% of the cases. Code Smells, Refactoring, Structural Quality",understanding the impact of refactoring on smells a longitudinal study of 23 software projects code smells in a program represent indications of structural quality problems which can be addressed by software refactoring however refactoring intends to achieve different goals in practice and its application may not reduce smelly structures developers may neglect or end up creating new code smells through refactoring unfortunately little has been reported about the beneficial and harmful effects of refactoring on code smells this paper reports a longitudinal study intended to address this gap we analyze how often commonly used refactoring types affect the density of 13 types of code smells along the version histories of 23 projects our findings are based on the analysis of 16 566 refactorings distributed in 10 different types even though 79 4 of the refactorings touched smelly elements 57 did not reduce their occurrences surprisingly only 9 7 of refactorings removed smells while 33 3 induced the introduction of new ones more than 95 of such refactoring induced smells were not removed in successive commits which suggest refactorings tend to more frequently introduce long living smells instead of eliminating existing ones we also characterized and quantified typical refactoring smell patterns and observed that harmful patterns are frequent including i approximately 30 of the move method and pull up method refactorings induced the emergence of god class and ii the extract superclass refactoring creates the smell speculative generality in 68 of the cases code smells refactoring structural quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
502,0,"Time, money, and happiness: How does putting a price on time affect our ability to smell the roses? In this paper, we investigate how the impatience that results from placing a price on time impairs individuals' ability to derive happiness from pleasurable experiences. Experiment 1 demonstrated that thinking about one's income as an hourly wage reduced the happiness that participants derived from leisure time on the internet. Experiment 2 revealed that a similar manipulation decreased participants' state of happiness after listening to a pleasant song and that this effect was fully mediated by the degree of impatience experienced during the music. Finally, Experiment 3 showed that the deleterious effect on happiness caused by impatience was attenuated by offering participants monetary compensation in exchange for time spent listening to music, suggesting that a sensation of unprofitably wasted time underlay the induced impatience. Together these experiments establish that thinking about time in terms of money can influence how people experience pleasurable events by instigating greater impatience during unpaid time. Time, Money, Impatience, Happiness",time money and happiness how does putting a price on time affect our ability to smell the roses in this paper we investigate how the impatience that results from placing a price on time impairs individuals ability to derive happiness from pleasurable experiences experiment 1 demonstrated that thinking about one s income as an hourly wage reduced the happiness that participants derived from leisure time on the internet experiment 2 revealed that a similar manipulation decreased participants state of happiness after listening to a pleasant song and that this effect was fully mediated by the degree of impatience experienced during the music finally experiment 3 showed that the deleterious effect on happiness caused by impatience was attenuated by offering participants monetary compensation in exchange for time spent listening to music suggesting that a sensation of unprofitably wasted time underlay the induced impatience together these experiments establish that thinking about time in terms of money can influence how people experience pleasurable events by instigating greater impatience during unpaid time time money impatience happiness,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
503,0,"SMURF: A SVM-based Incremental Anti-pattern Detection Approach In current, typical software development projects, hundreds of developers work asynchronously in space and time and may introduce anti-patterns in their software systems because of time pressure, lack of understanding, communication, and-or skills. Anti-patterns impede development and maintenance activities by making the source code more difficult to understand. Detecting anti-patterns incrementally and on subsets of a system could reduce costs, effort, and resources by allowing practitioners to identify and take into account occurrences of anti-patterns as they find them during their development and maintenance activities. Researchers have proposed approaches to detect occurrences of anti-patterns but these approaches have currently four limitations: (1) they require extensive knowledge of anti-patterns, (2) they have limited precision and recall, (3) they are not incremental, and (4) they cannot be applied on subsets of systems. To overcome these limitations, we introduce SMURF, a novel approach to detect anti-patterns, based on a machine learning technique - support vector machines - and taking into account practitioners' feedback. Indeed, through an empirical study involving three systems and four anti-patterns, we showed that the accuracy of SMURF is greater than that of DETEX and BDTEX when detecting anti-patterns occurrences. We also showed that SMURF can be applied in both intra-system and inter-system configurations. Finally, we reported that SMURF accuracy improves when using practitioners' feedback. learning (artificial intelligence), program diagnostics, software development management, software maintenance, support vector machines, SMURF, SVM-based incremental antipattern detection approach, software development projects, maintenance activities, development activities, source code, machine learning technique, support vector machines, DETEX, BDTEX, intersystem configurations, intrasystem configurations, Support vector machines, Accuracy, Measurement, Training, Maintenance engineering, Kernel, Anti-pattern, program comprehension, program maintenance, empirical software engineering",smurf a svm based incremental anti pattern detection approach in current typical software development projects hundreds of developers work asynchronously in space and time and may introduce anti patterns in their software systems because of time pressure lack of understanding communication and or skills anti patterns impede development and maintenance activities by making the source code more difficult to understand detecting anti patterns incrementally and on subsets of a system could reduce costs effort and resources by allowing practitioners to identify and take into account occurrences of anti patterns as they find them during their development and maintenance activities researchers have proposed approaches to detect occurrences of anti patterns but these approaches have currently four limitations 1 they require extensive knowledge of anti patterns 2 they have limited precision and recall 3 they are not incremental and 4 they cannot be applied on subsets of systems to overcome these limitations we introduce smurf a novel approach to detect anti patterns based on a machine learning technique support vector machines and taking into account practitioners feedback indeed through an empirical study involving three systems and four anti patterns we showed that the accuracy of smurf is greater than that of detex and bdtex when detecting anti patterns occurrences we also showed that smurf can be applied in both intra system and inter system configurations finally we reported that smurf accuracy improves when using practitioners feedback learning artificial intelligence program diagnostics software development management software maintenance support vector machines smurf svm based incremental antipattern detection approach software development projects maintenance activities development activities source code machine learning technique support vector machines detex bdtex intersystem configurations intrasystem configurations support vector machines accuracy measurement training maintenance engineering kernel anti pattern program comprehension program maintenance empirical software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
504,0,"Fundamental study of odor recorder for multicomponent odor using recipe exploration method based on singular value decomposition A new method for the odor recorder, electronically recording the recipe of odors or scents made up of many components, was proposed. Although apple flavors have been recorded with a mixture of five components using the odor recorder in previous work, the number of odor components should be increased to expand the applicable range of odors. Since the collinearity problem of the odor sensor array became apparent with the increase of components, a new method based on variable transformation using singular value decomposition was developed in this paper, to extract the effective subspace of the sensor outputs for recipe exploration. As a result, the sensor-array response pattern of the reproduced odor, with the eight-component recipe, almost agreed with that of the target apple flavor. Furthermore, human sensory tests revealed that the smell of the approximated odor was identical to that of the target flavor. chemioception, gas sensors, mixing, singular value decomposition, electronic noses, transformation matrices, odor recorder, multicomponent odor, recipe exploration, singular value decomposition, scents, apple flavor components, odor sensor array collinearity problem, variable transformation, sensor output subspace extraction, sensor-array response pattern, reproduced odor, target flavor, smell, human sensory tests, odor approximation, Singular value decomposition, Sensor arrays, Humans, Testing, Quantization, Gas detectors, Temperature sensors, Electronic noses, Virtual environment, Telemedicine",fundamental study of odor recorder for multicomponent odor using recipe exploration method based on singular value decomposition a new method for the odor recorder electronically recording the recipe of odors or scents made up of many components was proposed although apple flavors have been recorded with a mixture of five components using the odor recorder in previous work the number of odor components should be increased to expand the applicable range of odors since the collinearity problem of the odor sensor array became apparent with the increase of components a new method based on variable transformation using singular value decomposition was developed in this paper to extract the effective subspace of the sensor outputs for recipe exploration as a result the sensor array response pattern of the reproduced odor with the eight component recipe almost agreed with that of the target apple flavor furthermore human sensory tests revealed that the smell of the approximated odor was identical to that of the target flavor chemioception gas sensors mixing singular value decomposition electronic noses transformation matrices odor recorder multicomponent odor recipe exploration singular value decomposition scents apple flavor components odor sensor array collinearity problem variable transformation sensor output subspace extraction sensor array response pattern reproduced odor target flavor smell human sensory tests odor approximation singular value decomposition sensor arrays humans testing quantization gas detectors temperature sensors electronic noses virtual environment telemedicine,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
505,0,"Multisensory Experiences & Spaces Designing multisensory experiences is fascinating academics and practitioners alike. Recent advances in interactive systems and sensory devices also increasingly captures the attention of artists, museum curators, and creative industries, who aim to explore the opportunities of new and emerging technologies to create novel and unexpected experiences. The main objective of this tutorial is to increase the ISS communities' awareness of design spaces beyond audio-visual and tactile interactions. In particular, we will provide an overview on olfactory design spaces and opportunities building on our expertise and experience working on multisensory design projects including the Tate Sensorium, Famous Deaths, Feelies Multisensory VR experiences. We provide an overview on research efforts across disciplines, arts, and industries. Art galleries, Interactive Spaces, Interactive Systems, Multisensory experiences, Smell, Taste, Touch",multisensory experiences spaces designing multisensory experiences is fascinating academics and practitioners alike recent advances in interactive systems and sensory devices also increasingly captures the attention of artists museum curators and creative industries who aim to explore the opportunities of new and emerging technologies to create novel and unexpected experiences the main objective of this tutorial is to increase the iss communities awareness of design spaces beyond audio visual and tactile interactions in particular we will provide an overview on olfactory design spaces and opportunities building on our expertise and experience working on multisensory design projects including the tate sensorium famous deaths feelies multisensory vr experiences we provide an overview on research efforts across disciplines arts and industries art galleries interactive spaces interactive systems multisensory experiences smell taste touch,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
506,0,"Essence Video Showcase: Olfactory Interfaces for Unconscious Influence The sense of smell is perhaps the most pervasive of all senses, but it is also one of the least understood and least exploited in HCI. We present Essence, the first olfactory computational necklace that can be remotely controlled through a smartphone and can vary the intensity and frequency of the released scent based on biometric or contextual data. We present a set of applications for this type of technology as well as the main components of the olfactory display. This video accompanies our CHI full paper [1]. behavior change, fabrication, fashion clothing, health - wellbeing, olfactory interfaces, pervasive, prototyping implementation, smell, unconscious, wearable computers",essence video showcase olfactory interfaces for unconscious influence the sense of smell is perhaps the most pervasive of all senses but it is also one of the least understood and least exploited in hci we present essence the first olfactory computational necklace that can be remotely controlled through a smartphone and can vary the intensity and frequency of the released scent based on biometric or contextual data we present a set of applications for this type of technology as well as the main components of the olfactory display this video accompanies our chi full paper 1 behavior change fabrication fashion clothing health wellbeing olfactory interfaces pervasive prototyping implementation smell unconscious wearable computers,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
507,0,"Hidden Truths in Dead Software Paths Approaches and techniques for statically finding a multitude of issues in source code have been developed in the past. A core property of these approaches is that they are usually targeted towards finding only a very specific kind of issue and that the effort to develop such an analysis is significant. This strictly limits the number of kinds of issues that can be detected. In this paper, we discuss a generic approach based on the detection of infeasible paths in code that can discover a wide range of code smells ranging from useless code that hinders comprehension to real bugs. Code issues are identified by calculating the difference between the control-flow graph that contains all technically possible edges and the corresponding graph recorded while performing a more precise analysis using abstract interpretation. We have evaluated the approach using the Java Development Kit as well as the Qualitas Corpus (a curated collection of over 100 Java Applications) and were able to find thousands of issues across a wide range of categories. Abstract Interpretation, Finding Bugs, Infeasible Paths, Java, Scalable Analysis",hidden truths in dead software paths approaches and techniques for statically finding a multitude of issues in source code have been developed in the past a core property of these approaches is that they are usually targeted towards finding only a very specific kind of issue and that the effort to develop such an analysis is significant this strictly limits the number of kinds of issues that can be detected in this paper we discuss a generic approach based on the detection of infeasible paths in code that can discover a wide range of code smells ranging from useless code that hinders comprehension to real bugs code issues are identified by calculating the difference between the control flow graph that contains all technically possible edges and the corresponding graph recorded while performing a more precise analysis using abstract interpretation we have evaluated the approach using the java development kit as well as the qualitas corpus a curated collection of over 100 java applications and were able to find thousands of issues across a wide range of categories abstract interpretation finding bugs infeasible paths java scalable analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
508,0,"This Image Smells Good: Effects of Image Information Scent in Search Engine Results Pages Users are confronted with an overwhelming amount of web pages when they look for information on the Internet. Current search engines already aid the user in their information seeking tasks by providing textual results but adding images to results pages could further help the user in judging the relevance of a result. We investigated this problem from an Information Foraging perspective and we report on two empirical studies that focused on the information scent of images. Our results show that images have their own distinct ""smell"" which is not as strong as that of text. We also found that combining images and text cues leads to a stronger overall scent. Surprisingly, when images were added to search engine results pages, this did not lead our participants to behave significantly differently in terms of effectiveness or efficiency. Even when we added images that could confuse the participants' scent, this had no significantly detrimental impact on their behaviour. However, participants expressed a preference for results pages which included images. We discuss potential challenges and point to future research to ensure the success of adding images to textual results in search engine results pages. images, information foraging, information scent, search engine results pages, usability, visual search",this image smells good effects of image information scent in search engine results pages users are confronted with an overwhelming amount of web pages when they look for information on the internet current search engines already aid the user in their information seeking tasks by providing textual results but adding images to results pages could further help the user in judging the relevance of a result we investigated this problem from an information foraging perspective and we report on two empirical studies that focused on the information scent of images our results show that images have their own distinct smell which is not as strong as that of text we also found that combining images and text cues leads to a stronger overall scent surprisingly when images were added to search engine results pages this did not lead our participants to behave significantly differently in terms of effectiveness or efficiency even when we added images that could confuse the participants scent this had no significantly detrimental impact on their behaviour however participants expressed a preference for results pages which included images we discuss potential challenges and point to future research to ensure the success of adding images to textual results in search engine results pages images information foraging information scent search engine results pages usability visual search,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
509,0,"Interruptions As Multimodal Outputs: Which Are the Less Disruptive? This paper describes exploratory studies of interruption modalities and disruptiveness. Five interruption modalities were compared: heat, smell, sound, vibration, and light. Much more notable than the differences between modalities was the differences between people. We found that subjects' sensitiveness depended on their previous life exposure to the modalities. Individual differences greatly control the effect of interrupting stimuli. We show that is possible to build a multimodal adaptive interruption interface, such interfaces would dynamically select the output interruption modality to use based on its effectiveness on a particular user. Interruption modalities, interface design, modalities of interaction, multimodal interfaces, self-adaptive interfaces",interruptions as multimodal outputs which are the less disruptive this paper describes exploratory studies of interruption modalities and disruptiveness five interruption modalities were compared heat smell sound vibration and light much more notable than the differences between modalities was the differences between people we found that subjects sensitiveness depended on their previous life exposure to the modalities individual differences greatly control the effect of interrupting stimuli we show that is possible to build a multimodal adaptive interruption interface such interfaces would dynamically select the output interruption modality to use based on its effectiveness on a particular user interruption modalities interface design modalities of interaction multimodal interfaces self adaptive interfaces,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
510,0,"Grasping Cultural Context Through Multisensory Interactions This paper describes the research and design of three tangible and embodied prototypes that aim to enable users to meaningfully engage with an artifact's historical context and use. Together, these prototypes engage users in a cultural heritage experience that is sensorially embodied through a 'multimodal' ensemble of visual, aural, tactile, and olfactory interactions. A preliminary user test suggests that future work on multisensory interaction should focus on developing accessible design principles and considerations that support a sensorially embodied and tangible understanding of historical artifacts. We suggest that multisensory interactions present significant opportunities for interactive exhibits to expand our access to cultural history and its artifacts. Multisensory interaction, cultural artifacts, experience design, interactive museum, senses, sensory, smell, tangible and embodied interfaces",grasping cultural context through multisensory interactions this paper describes the research and design of three tangible and embodied prototypes that aim to enable users to meaningfully engage with an artifact s historical context and use together these prototypes engage users in a cultural heritage experience that is sensorially embodied through a multimodal ensemble of visual aural tactile and olfactory interactions a preliminary user test suggests that future work on multisensory interaction should focus on developing accessible design principles and considerations that support a sensorially embodied and tangible understanding of historical artifacts we suggest that multisensory interactions present significant opportunities for interactive exhibits to expand our access to cultural history and its artifacts multisensory interaction cultural artifacts experience design interactive museum senses sensory smell tangible and embodied interfaces,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
511,0,"Accuracy of Determination for Virtual Animal Halal Slaughtering: A Case Study Virtual slaughtering and dissection is a way to learn about anatomy and dissect animals without harming any real-life animals or feeling ill from that nauseating formaldehyde smell. The virtual slaughtering and dissections also have detailed scientific explanations.We are to develop interactive virtual environments that can simulate several common tasks performed during animal dissection. In this paper, we describe the imaging modality used to reconstruct the cow, provide an overview of the simulation environment and briefly discuss some of the techniques used to manipulate the virtual cow.The system will consists of an anatomically computer model of a cow, a simulation engine capable of providing soft-tissue modeling, rigid body dynamics, collision detection and response, haptic force calculations, and a number of user interface and display devices to interact with the user. The behaviour of the tissue will be modeled by modulating the stiffness coefficients between adjacent internal organs in order to propagate the effects of grasping connected components. This simulation system will be written in C# using Open GL, GLUT and GLUI libraries for visualization and user interface. Several supporting virtual reality tools for grasping, cutting and probing will be used such as haptic devices, non-haptic devices, and display devices. computer based training, user interfaces, virtual reality, zoology, virtual animal halal slaughtering, interactive virtual environments, imaging modality, virtual reality tools, user interface, display devices, Animals, Computational modeling, Computer simulation, Computer displays, Haptic interfaces, User interfaces, Grasping, Anatomy, Virtual environment, Image reconstruction, visual features, virtual dissection, simulation, global navigation elements, soft tissue modelling",accuracy of determination for virtual animal halal slaughtering a case study virtual slaughtering and dissection is a way to learn about anatomy and dissect animals without harming any real life animals or feeling ill from that nauseating formaldehyde smell the virtual slaughtering and dissections also have detailed scientific explanations we are to develop interactive virtual environments that can simulate several common tasks performed during animal dissection in this paper we describe the imaging modality used to reconstruct the cow provide an overview of the simulation environment and briefly discuss some of the techniques used to manipulate the virtual cow the system will consists of an anatomically computer model of a cow a simulation engine capable of providing soft tissue modeling rigid body dynamics collision detection and response haptic force calculations and a number of user interface and display devices to interact with the user the behaviour of the tissue will be modeled by modulating the stiffness coefficients between adjacent internal organs in order to propagate the effects of grasping connected components this simulation system will be written in c using open gl glut and glui libraries for visualization and user interface several supporting virtual reality tools for grasping cutting and probing will be used such as haptic devices non haptic devices and display devices computer based training user interfaces virtual reality zoology virtual animal halal slaughtering interactive virtual environments imaging modality virtual reality tools user interface display devices animals computational modeling computer simulation computer displays haptic interfaces user interfaces grasping anatomy virtual environment image reconstruction visual features virtual dissection simulation global navigation elements soft tissue modelling,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
512,0,"How Do Developers Select and Prioritize Code Smells? A Preliminary Study Code smells are considered to be indicators of design flaws or problems in source code. Various tools and techniques have been proposed for detecting code smells. The number of code smells detected by these tools is generally large, so approaches have also been developed for prioritizing and filtering code smells. However, the lack of empirical data regarding how developers select and prioritize code smells hinders improvements to these approaches. In this study, we investigated professional developers to determine the factors they use for selecting and prioritizing code smells. We found that Task relevance and Smell severity were most commonly considered during code smell selection, while Module importance and Task relevance were employed most often for code smell prioritization. These results may facilitate further research into code smell detection, prioritization, and filtration to better focus on the actual needs of developers. software maintenance, source code (software), source code, code smell selection, code smell prioritization, code smell detection, design flaws, task relevance, smell severity, module importance, code smell filtration, Tools, Software, Couplings, Navigation, Detectors, Conferences, code smells, code smells filtration, code smells prioritization, practitioners' perspective, empirical study",how do developers select and prioritize code smells a preliminary study code smells are considered to be indicators of design flaws or problems in source code various tools and techniques have been proposed for detecting code smells the number of code smells detected by these tools is generally large so approaches have also been developed for prioritizing and filtering code smells however the lack of empirical data regarding how developers select and prioritize code smells hinders improvements to these approaches in this study we investigated professional developers to determine the factors they use for selecting and prioritizing code smells we found that task relevance and smell severity were most commonly considered during code smell selection while module importance and task relevance were employed most often for code smell prioritization these results may facilitate further research into code smell detection prioritization and filtration to better focus on the actual needs of developers software maintenance source code software source code code smell selection code smell prioritization code smell detection design flaws task relevance smell severity module importance code smell filtration tools software couplings navigation detectors conferences code smells code smells filtration code smells prioritization practitioners perspective empirical study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
513,0,"The ""Physics"" of Notations: A Scientific Approach to Designing Visual Notations in Software Engineering Visual notations form an integral part of the language of software engineering (SE). Yet historically, SE researchers and notation designers have ignored or undervalued issues of visual representation. In evaluating and comparing notations, details of visual syntax are rarely discussed. In designing notations, the majority of effort is spent on semantics, with graphical conventions often an afterthought. Typically no design rationale, scientific or otherwise, is provided for visual representation choices. While SE has developed mature methods for evaluating and designing semantics, it lacks equivalent methods for visual syntax. This tutorial defines a set of principles for designing cognitively effective visual notations: ones that are optimised for human communication and problem solving. Together these form a design theory, called the Physics of Notations as it focuses on the physical (perceptual) properties of notations rather than their logical (semantic) properties. The principles were synthesised from theory and empirical evidence from a wide range of fields and rest on an explicit theory of how visual notations communicate. They can be used to evaluate, compare and improve existing visual notations as well as to construct new ones. The tutorial identifies serious design flaws in some of the leading SE notations together with practical suggestions for improving them. It also showcases some examples of visual notation design excellence from SE and other fields. analysis, communication, concrete syntax, diagrams, modelling, visual syntax, visualization",the physics of notations a scientific approach to designing visual notations in software engineering visual notations form an integral part of the language of software engineering se yet historically se researchers and notation designers have ignored or undervalued issues of visual representation in evaluating and comparing notations details of visual syntax are rarely discussed in designing notations the majority of effort is spent on semantics with graphical conventions often an afterthought typically no design rationale scientific or otherwise is provided for visual representation choices while se has developed mature methods for evaluating and designing semantics it lacks equivalent methods for visual syntax this tutorial defines a set of principles for designing cognitively effective visual notations ones that are optimised for human communication and problem solving together these form a design theory called the physics of notations as it focuses on the physical perceptual properties of notations rather than their logical semantic properties the principles were synthesised from theory and empirical evidence from a wide range of fields and rest on an explicit theory of how visual notations communicate they can be used to evaluate compare and improve existing visual notations as well as to construct new ones the tutorial identifies serious design flaws in some of the leading se notations together with practical suggestions for improving them it also showcases some examples of visual notation design excellence from se and other fields analysis communication concrete syntax diagrams modelling visual syntax visualization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
514,0,"Understanding Human Perceptual Experience in Unstructured Data on the Web Computing for human experience has become more important for understanding all of aspects of any interaction of human beings in the cyber, physical, and social environments. In particular, artificial intelligent technologies based on big data enable to understand natural language, enhance day to day human experience, and make a better decision. In this paper, we propose a method to classify unstructured text data on the Web into the five types of sensation features: sight (ophthalmoception), hearing (audioception), touch (tactioception), smell (olfacception), and taste (gustaoception). Even though sensation is the first process of human experience against the environments, the study of sensation information extraction is neglected due to lack of sensory expression and knowledge comparing with the sentimental analysis or opinion mining. We first define the sensation measurement that is assigned to each feature. Then, we identify which sensation feature has a strong influence on human perceptual experience in a specific topic of corpus. Finally, we evaluate our method by comparing with several baselines in terms of the accuracy. classification, human sensory knowledge, sensation information, text mining, word sense disambiguation",understanding human perceptual experience in unstructured data on the web computing for human experience has become more important for understanding all of aspects of any interaction of human beings in the cyber physical and social environments in particular artificial intelligent technologies based on big data enable to understand natural language enhance day to day human experience and make a better decision in this paper we propose a method to classify unstructured text data on the web into the five types of sensation features sight ophthalmoception hearing audioception touch tactioception smell olfacception and taste gustaoception even though sensation is the first process of human experience against the environments the study of sensation information extraction is neglected due to lack of sensory expression and knowledge comparing with the sentimental analysis or opinion mining we first define the sensation measurement that is assigned to each feature then we identify which sensation feature has a strong influence on human perceptual experience in a specific topic of corpus finally we evaluate our method by comparing with several baselines in terms of the accuracy classification human sensory knowledge sensation information text mining word sense disambiguation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
515,0,"The PRISMA Symposium 1: Outcome Tool Use. Disharmony in European Outcomes Research for Palliative and Advanced Disease Care: Too Many Tools in Practice Context As the European population ages and the number of cancer deaths annually increases, there is an urgent requirement to provide high-quality, effective care. The measurement of outcomes in advanced disease is complex, and to conduct comparative research and meta-analyses, appropriate tool selection is essential. Objectives This study aimed to identify the outcome tools currently in use in end-of-life care (both clinically and for research) across Europe and investigate the preferred features of outcome tools from the perspective of those who select and apply them. Methods A pan-European Internet-based survey of tool users was conducted in research and clinical populations. Respondents were asked to identify the tools they are using and describe ideal features of the measures. The study was conducted in accordance with guidance for best practice in web-based research. Results Of the 311 participants who completed a survey, 99 tools in clinical care and audit, and 94 in research, were cited by less than 10 participants. Further data revealed that respondents require the number of potential tools to be rationalized and that brief tools are favored. Conclusion The selection of valid and appropriate tools for palliative care populations requires expert guidance and support to ensure that clinicians and researchers are collecting data that have validity and potential for comparison within and between populations and countries. Outcome assessment, palliative care, terminal care, end-of-life care, research, Europe",the prisma symposium 1 outcome tool use disharmony in european outcomes research for palliative and advanced disease care too many tools in practice context as the european population ages and the number of cancer deaths annually increases there is an urgent requirement to provide high quality effective care the measurement of outcomes in advanced disease is complex and to conduct comparative research and meta analyses appropriate tool selection is essential objectives this study aimed to identify the outcome tools currently in use in end of life care both clinically and for research across europe and investigate the preferred features of outcome tools from the perspective of those who select and apply them methods a pan european internet based survey of tool users was conducted in research and clinical populations respondents were asked to identify the tools they are using and describe ideal features of the measures the study was conducted in accordance with guidance for best practice in web based research results of the 311 participants who completed a survey 99 tools in clinical care and audit and 94 in research were cited by less than 10 participants further data revealed that respondents require the number of potential tools to be rationalized and that brief tools are favored conclusion the selection of valid and appropriate tools for palliative care populations requires expert guidance and support to ensure that clinicians and researchers are collecting data that have validity and potential for comparison within and between populations and countries outcome assessment palliative care terminal care end of life care research europe,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
516,0,"Acetylcholine release in the hippocampus and prelimbic cortex during acquisition of a socially transmitted food preference Interference with cholinergic functions in hippocampus and prefrontal cortex impairs learning and memory for social transmission of food preference, suggesting that acetylcholine (ACh) release in the two brain regions may be important for acquiring the food preference. This experiment examined release of ACh in the hippocampus and prefrontal cortex of rats during training for social transmission of food preference. After demonstrator rats ate a food with novel flavor and odor, a social transmission of food preference group of rats was allowed to interact with the demonstrators for 30min, while in vivo microdialysis collected samples for later measurement of ACh release with HPLC methods. A social control group observed a demonstrator that had eaten food without novel flavor and odor. An odor control group was allowed to smell but not ingest food with novel odor. Rats in the social transmission but not control groups preferred the novel food on a trial 48h later. ACh release in prefrontal cortex, with probes that primarily sampled prelimbic cortex, did not increase during acquisition of the social transmission of food preference, suggesting that training-initiated release of ACh in prelimbic cortex is not necessary for acquisition of the food preference. In contrast, ACh release in the hippocampus increased substantially (200%) upon exposure to a rat that had eaten the novel food. Release in the hippocampus increased significantly less (25%) upon exposure to a rat that had eaten normal food and did not increase significantly in the rats exposed to the novel odor; ACh release in the social transmission group was significantly greater than that of the either of the control groups. Thus, ACh release in the hippocampus but not prelimbic cortex distinguished well the social transmission vs. control conditions, suggesting that cholinergic mechanisms in the hippocampus but not prelimbic cortex are important for acquiring a socially transmitted food preference. Acetylcholine, Hippocampus, Prefrontal cortex, Memory formation, Learning, Social transmission of food preference, Memory modulation",acetylcholine release in the hippocampus and prelimbic cortex during acquisition of a socially transmitted food preference interference with cholinergic functions in hippocampus and prefrontal cortex impairs learning and memory for social transmission of food preference suggesting that acetylcholine ach release in the two brain regions may be important for acquiring the food preference this experiment examined release of ach in the hippocampus and prefrontal cortex of rats during training for social transmission of food preference after demonstrator rats ate a food with novel flavor and odor a social transmission of food preference group of rats was allowed to interact with the demonstrators for 30min while in vivo microdialysis collected samples for later measurement of ach release with hplc methods a social control group observed a demonstrator that had eaten food without novel flavor and odor an odor control group was allowed to smell but not ingest food with novel odor rats in the social transmission but not control groups preferred the novel food on a trial 48h later ach release in prefrontal cortex with probes that primarily sampled prelimbic cortex did not increase during acquisition of the social transmission of food preference suggesting that training initiated release of ach in prelimbic cortex is not necessary for acquisition of the food preference in contrast ach release in the hippocampus increased substantially 200 upon exposure to a rat that had eaten the novel food release in the hippocampus increased significantly less 25 upon exposure to a rat that had eaten normal food and did not increase significantly in the rats exposed to the novel odor ach release in the social transmission group was significantly greater than that of the either of the control groups thus ach release in the hippocampus but not prelimbic cortex distinguished well the social transmission vs control conditions suggesting that cholinergic mechanisms in the hippocampus but not prelimbic cortex are important for acquiring a socially transmitted food preference acetylcholine hippocampus prefrontal cortex memory formation learning social transmission of food preference memory modulation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
517,0,"Short-term olfactory sensitization involves brain networks relevant for pain, and indicates chemical intolerance Chemical intolerance is a medically unexplained affliction that implies deleterious reactions to non-toxic everyday chemical exposure. Sensitization (i.e. increased reactivity to repeated, invariant stimulation) to odorous stimulation is an important component in theoretical explanations of chemical intolerance, but empirical evidence is scarce. We hypothesized that (1) individuals who sensitize to repeated olfactory stimulation, compared with those who habituate, would express a lower blood oxygenated level dependent (BOLD) response in key inhibitory areas such as the rACC, and higher signal in pain/saliency detection regions, as well as primary and/or secondary olfactory projection areas; and (2) olfactory sensitization, compared with habituation, would be associated with greater self-reported chemical intolerance. Moreover, we assessed whether olfactory sensitization was paralleled by comparable trigeminal processing -- in terms of perceptual ratings and BOLD responses. We grouped women from a previous functional magnetic imaging study based on intensity ratings of repeated amyl acetate exposure over time. Fourteen women sensitized to the exposure, 15 habituated, and 20 were considered ``intermediate'' (i.e. neither sensitizers nor habituaters). Olfactory sensitizers, compared with habituaters, displayed a BOLD-pattern in line with the hypothesis, and reported greater problems with odours in everyday life. They also expressed greater reactions to CO2 in terms of both perceived intensity and BOLD signal. The similarities with pain are discussed. Chemical intolerance, Olfactory, Trigeminal, Sensitization, Smell, fMRI",short term olfactory sensitization involves brain networks relevant for pain and indicates chemical intolerance chemical intolerance is a medically unexplained affliction that implies deleterious reactions to non toxic everyday chemical exposure sensitization i e increased reactivity to repeated invariant stimulation to odorous stimulation is an important component in theoretical explanations of chemical intolerance but empirical evidence is scarce we hypothesized that 1 individuals who sensitize to repeated olfactory stimulation compared with those who habituate would express a lower blood oxygenated level dependent bold response in key inhibitory areas such as the racc and higher signal in pain saliency detection regions as well as primary and or secondary olfactory projection areas and 2 olfactory sensitization compared with habituation would be associated with greater self reported chemical intolerance moreover we assessed whether olfactory sensitization was paralleled by comparable trigeminal processing in terms of perceptual ratings and bold responses we grouped women from a previous functional magnetic imaging study based on intensity ratings of repeated amyl acetate exposure over time fourteen women sensitized to the exposure 15 habituated and 20 were considered intermediate i e neither sensitizers nor habituaters olfactory sensitizers compared with habituaters displayed a bold pattern in line with the hypothesis and reported greater problems with odours in everyday life they also expressed greater reactions to co2 in terms of both perceived intensity and bold signal the similarities with pain are discussed chemical intolerance olfactory trigeminal sensitization smell fmri,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
518,0,"Smells familiar: group-joining decisions of predatory mites are mediated by olfactory cues of social familiarity Group-living animals frequently have to trade off the costs and benefits of leaving an established group and joining another group. Owing to their high fitness relevance, group-joining decisions are commonly nonrandom and may be based on traits of both individual members and the group such as life stage, body size, social status and group density or size, respectively. Many group-living animals are able to recognize and to associate preferentially with familiar individuals, i.e. those encountered before. Hence, after dispersing from established groups, animals commonly have to decide whether to join a new familiar or unfamiliar group. Using binary choice situations we assessed the effects of social familiarity on group-joining behaviour of the plant-inhabiting predatory mite Phytoseiulus persimilis. Group living in P. persimilis is brought about by the patchy distribution of its spider mite prey and mutual conspecific attraction. In the first experiment, gravid predator females given a choice between spider mite patches occupied by unfamiliar and familiar groups of females strongly preferred to join familiar groups and to deposit their eggs in these patches. Preference for socially familiar groups was robust across biases of spider mite prey densities between choice options. The second experiment revealed that the predatory mite females can smell social familiarity from a distance. Females subjected to odour choice situations in artificial cages were more strongly attracted to the odour of familiar than unfamiliar groups. We argue that P. persimilis females preferentially join socially familiar groups because a familiar social environment relaxes competition and optimizes foraging and reproduction. familiarity, group living, joining behaviour, olfactory cue, , predatory mite, preference, prey density",smells familiar group joining decisions of predatory mites are mediated by olfactory cues of social familiarity group living animals frequently have to trade off the costs and benefits of leaving an established group and joining another group owing to their high fitness relevance group joining decisions are commonly nonrandom and may be based on traits of both individual members and the group such as life stage body size social status and group density or size respectively many group living animals are able to recognize and to associate preferentially with familiar individuals i e those encountered before hence after dispersing from established groups animals commonly have to decide whether to join a new familiar or unfamiliar group using binary choice situations we assessed the effects of social familiarity on group joining behaviour of the plant inhabiting predatory mite phytoseiulus persimilis group living in p persimilis is brought about by the patchy distribution of its spider mite prey and mutual conspecific attraction in the first experiment gravid predator females given a choice between spider mite patches occupied by unfamiliar and familiar groups of females strongly preferred to join familiar groups and to deposit their eggs in these patches preference for socially familiar groups was robust across biases of spider mite prey densities between choice options the second experiment revealed that the predatory mite females can smell social familiarity from a distance females subjected to odour choice situations in artificial cages were more strongly attracted to the odour of familiar than unfamiliar groups we argue that p persimilis females preferentially join socially familiar groups because a familiar social environment relaxes competition and optimizes foraging and reproduction familiarity group living joining behaviour olfactory cue predatory mite preference prey density,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
519,0,"Software Evolution and Quality Data from Controlled, Multiple, Industrial Case Studies A main difficulty to study the evolution and quality of real-life software systems is the effect of moderator factors, such as: programming skill, type of maintenance task, and learning effect. Experimenters must account for moderator factors to identify the relationships between the variables of interest. In practice, controlling for moderator factors in realistic (industrial) settings is expensive and rather difficult. The data presented in this paper has two particularities: First, it involves six professional developers and four real-life, industrial systems. Second, it was obtained from controlled, multiple case studies where the moderator variables: programming skill, maintenance task, and learning effect were controlled for. This data set is relevant to experimenters studying evolution and quality of real-life systems, in particular those interested in studying industrial systems and replicating empirical studies. case study, code smells, empirical study, industrial data, moderator factors, replication, software defects, software evolution, software quality, software replicability",software evolution and quality data from controlled multiple industrial case studies a main difficulty to study the evolution and quality of real life software systems is the effect of moderator factors such as programming skill type of maintenance task and learning effect experimenters must account for moderator factors to identify the relationships between the variables of interest in practice controlling for moderator factors in realistic industrial settings is expensive and rather difficult the data presented in this paper has two particularities first it involves six professional developers and four real life industrial systems second it was obtained from controlled multiple case studies where the moderator variables programming skill maintenance task and learning effect were controlled for this data set is relevant to experimenters studying evolution and quality of real life systems in particular those interested in studying industrial systems and replicating empirical studies case study code smells empirical study industrial data moderator factors replication software defects software evolution software quality software replicability,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
520,0,"Study on electronic nose and algorithm for identification of spice Quality, stability and unity are the basic requirement for product in modern food industry, which can be guaranteed by proper device, such as electronic nose. So an electronic nose is developed to meet the job, the electronic nose has the ability of working independently or interactively with PC. And it is working under Linux 3.0.1 environment, with fundamental functions to working on ARM or PC. It is to fulfill all the functions that an electronic nose needed. When it is used to detect the status of star anise by smell or aroma, with the help of PCA (principal component analysis) and SVM (Support vector machine), the accuracy may reach 95%. computerised instrumentation, electronic noses, food products, inspection, Linux, principal component analysis, production engineering computing, support vector machines, electronic nose, spice identification, quality requirement, stability requirement, unity requirement, food industry, Linux 3.0.1 environment, PCA, principal component analysis, SVM, support vector machine, Electronic noses, Sensor arrays, Principal component analysis, Feature extraction, Gas detectors, Stability analysis, Support vector machines, electronic nose, star anise, complete system, PCA, SVM",study on electronic nose and algorithm for identification of spice quality stability and unity are the basic requirement for product in modern food industry which can be guaranteed by proper device such as electronic nose so an electronic nose is developed to meet the job the electronic nose has the ability of working independently or interactively with pc and it is working under linux 3 0 1 environment with fundamental functions to working on arm or pc it is to fulfill all the functions that an electronic nose needed when it is used to detect the status of star anise by smell or aroma with the help of pca principal component analysis and svm support vector machine the accuracy may reach 95 computerised instrumentation electronic noses food products inspection linux principal component analysis production engineering computing support vector machines electronic nose spice identification quality requirement stability requirement unity requirement food industry linux 3 0 1 environment pca principal component analysis svm support vector machine electronic noses sensor arrays principal component analysis feature extraction gas detectors stability analysis support vector machines electronic nose star anise complete system pca svm,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
521,0,"An oral-cavity component in retronasal smelling of natural extracts Retronasal and oral-cavity-only identifications of six natural extract odorants, presented in air-phase, were compared in an initial experiment. Prior to identification testing, the 21 participants were given experience with air-phase presentations, and with the odorants and their correct identifications. Retronasal correct identifications for anise, cinnamon, coffee, orange, peppermint, and strawberry were 88%, 81%, 98%, 95%, 91%, and 83%; oral-cavity-only, 19%, 21%, 19%, 21%, 33%, and 24%. All participants correctly identified retronasal odorants above chance. Across participants only peppermint received correct oral-cavity-only identifications, but two participants gave correct oral-cavity-only identifications for all odorants. In a second experiment, different participants attempted to discriminate oral-cavity-only odorants from their solvents. Fifteen participants discriminated orange, peppermint, and strawberry odorants from their solvents, and five discriminated all odorants from their solvents. It had been hypothesized that peppermint would provide unique trigeminal stimulation; this was supported by correct oral-cavity-only identification of only peppermint. A second hypothesis posited oral-cavity-only discrimination of orange and peppermint from their solvents because of trigeminal stimuli, but strawberry extract discrimination was unexpected. Furthermore, oral-cavity-only discrimination of all odorants by one-quarter of the participants was not anticipated. Overall, these outcomes suggest that peppermint-like odorants can initiate sufficiently differential responses in the oral cavity to permit identification, indicate that not only odorants with known trigeminal stimulus components but also others may elicit oral-cavity-only air-phase responses, and imply that for a substantial minority of individuals, trigeminal input may enhance oral-cavity effectiveness of many odorants during retronasal smelling. Retronasal, Trigeminal, Olfaction, Smell, Human, Oral cavity",an oral cavity component in retronasal smelling of natural extracts retronasal and oral cavity only identifications of six natural extract odorants presented in air phase were compared in an initial experiment prior to identification testing the 21 participants were given experience with air phase presentations and with the odorants and their correct identifications retronasal correct identifications for anise cinnamon coffee orange peppermint and strawberry were 88 81 98 95 91 and 83 oral cavity only 19 21 19 21 33 and 24 all participants correctly identified retronasal odorants above chance across participants only peppermint received correct oral cavity only identifications but two participants gave correct oral cavity only identifications for all odorants in a second experiment different participants attempted to discriminate oral cavity only odorants from their solvents fifteen participants discriminated orange peppermint and strawberry odorants from their solvents and five discriminated all odorants from their solvents it had been hypothesized that peppermint would provide unique trigeminal stimulation this was supported by correct oral cavity only identification of only peppermint a second hypothesis posited oral cavity only discrimination of orange and peppermint from their solvents because of trigeminal stimuli but strawberry extract discrimination was unexpected furthermore oral cavity only discrimination of all odorants by one quarter of the participants was not anticipated overall these outcomes suggest that peppermint like odorants can initiate sufficiently differential responses in the oral cavity to permit identification indicate that not only odorants with known trigeminal stimulus components but also others may elicit oral cavity only air phase responses and imply that for a substantial minority of individuals trigeminal input may enhance oral cavity effectiveness of many odorants during retronasal smelling retronasal trigeminal olfaction smell human oral cavity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
522,0,"Post-harvest management of ber (Ziziphus mauritiana Lamk) fruit rot (Alternaria alternata Fr. Keissler) using Trichoderma species, fungicides and their combinations Isolates of Trichoderma species from hot arid regions, fungicides and their combinations were evaluated for the management of ber fruit rot at post-harvest stage. Out of 16 isolates of Trichoderma species, six isolates checked growth of mycelia of Alternaria alternata by more than 55%. A distinct variation in the inherent level of resistance in these six isolates was recorded against 13 common fungicides. None of the Trichoderma species grew in PDA amended with carbendazim even at a very low concentration. In contrast, 100 per cent radial growth was observed in Trichoderma citrinoviride isolate T.c-CIAH224 in the presence of copper oxychloride (250μgg−1) and mancozeb (100μgg−1) in PDA medium. Isolate T.v-CIAH240 was antagonistic against A. alternata and tolerant to most of the fungicides tested. This isolate was highly compatible with chlorothalonil, dinocap and wettable sulphur even at 1000μgg−1 and produced yellowish instead of normal green coloured conidia. Isolate of Trichoderma koningii -- T.k-CIAH176, T. citrinoviride -- T.c-CIAH224 and those of Trichoderma viride -- T.v-CIAH181 and T.v-CIAH240 with inherent tolerance to some of the fungicides have shown better efficacy to suppress the fruit rot pathogen in dual cultures. However isolate T.v-CIAH240 was significantly superior in vitro in the suppression (71%) of the A. alternata through mycoparasitism and apparent secretion of secondary metabolites in the growth medium. Mycoparasitism and competition with the fruit rot pathogen were the mode of action in the majority of the isolates. The growth of A. alternata was completely inhibited in PDA amended with dinocap, propiconazole and tridemorph irrespective of the concentrations. In experiments in vivo, isolate T.v-CIAH240 was significantly effective (75% PEDC- Per cent Efficiency of Disease Control) against post-harvest infection by A. alternata followed by T.v-SBI48 (62 PEDC) and T.v-CIAH149 (44 PEDC). Among the individual fungicide treatments, dinocap and copper oxychloride (50μgg−1) resulted in 52 PEDC. However, dinocap caused a scorching effect and a foul smell in fruits. Fruit rot control efficacy was enhanced to >70% by T.v-CIAH240 with tridemefon, thiophanate methyl, mancozeb or alcidine at 50μgg−1 and to >80% with 100μgg−1 of thiophanate methyl, chlorothalonil, mancozeb and alcidine in ber fruits (cv. Gola). There was a non-significant latent infection caused by isolates T.k-CIAH176, T.c-CIAH224 (T. citrinoviride) and T.v-CIAH240. Such a latent infection was completely suppressed by low concentrations of fungicides when used in combination with T.v-CIAH240. The possible hypothesis involved in management of A. alternata in ber fruits at post-harvest stages using fungicides, Trichoderma species and their combinations is discussed. Ber, , , Fungicides, spp., Management",post harvest management of ber ziziphus mauritiana lamk fruit rot alternaria alternata fr keissler using trichoderma species fungicides and their combinations isolates of trichoderma species from hot arid regions fungicides and their combinations were evaluated for the management of ber fruit rot at post harvest stage out of 16 isolates of trichoderma species six isolates checked growth of mycelia of alternaria alternata by more than 55 a distinct variation in the inherent level of resistance in these six isolates was recorded against 13 common fungicides none of the trichoderma species grew in pda amended with carbendazim even at a very low concentration in contrast 100 per cent radial growth was observed in trichoderma citrinoviride isolate t c ciah224 in the presence of copper oxychloride 250 gg 1 and mancozeb 100 gg 1 in pda medium isolate t v ciah240 was antagonistic against a alternata and tolerant to most of the fungicides tested this isolate was highly compatible with chlorothalonil dinocap and wettable sulphur even at 1000 gg 1 and produced yellowish instead of normal green coloured conidia isolate of trichoderma koningii t k ciah176 t citrinoviride t c ciah224 and those of trichoderma viride t v ciah181 and t v ciah240 with inherent tolerance to some of the fungicides have shown better efficacy to suppress the fruit rot pathogen in dual cultures however isolate t v ciah240 was significantly superior in vitro in the suppression 71 of the a alternata through mycoparasitism and apparent secretion of secondary metabolites in the growth medium mycoparasitism and competition with the fruit rot pathogen were the mode of action in the majority of the isolates the growth of a alternata was completely inhibited in pda amended with dinocap propiconazole and tridemorph irrespective of the concentrations in experiments in vivo isolate t v ciah240 was significantly effective 75 pedc per cent efficiency of disease control against post harvest infection by a alternata followed by t v sbi48 62 pedc and t v ciah149 44 pedc among the individual fungicide treatments dinocap and copper oxychloride 50 gg 1 resulted in 52 pedc however dinocap caused a scorching effect and a foul smell in fruits fruit rot control efficacy was enhanced to 70 by t v ciah240 with tridemefon thiophanate methyl mancozeb or alcidine at 50 gg 1 and to 80 with 100 gg 1 of thiophanate methyl chlorothalonil mancozeb and alcidine in ber fruits cv gola there was a non significant latent infection caused by isolates t k ciah176 t c ciah224 t citrinoviride and t v ciah240 such a latent infection was completely suppressed by low concentrations of fungicides when used in combination with t v ciah240 the possible hypothesis involved in management of a alternata in ber fruits at post harvest stages using fungicides trichoderma species and their combinations is discussed ber fungicides spp management,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
523,0,"The Sensorial Map of the City Our daily urban experiences are the product of our perceptions and senses, yet the complete sensorial range is strikingly absent from urban studies. Sight has been historically privileged over the other senses and urban studies. However, smell and sound have also a huge influence over how we perceive places, they impact our behavior, attitudes and health. Yet, city planning is concerned only with a few bad smells and with limiting noise levels. We propose a new way of capturing nuanced sensorial perceptions of cities from data implicitly generated by social media users and of producing detailed sensorial maps of our cities. smell, sound, urban informatics",the sensorial map of the city our daily urban experiences are the product of our perceptions and senses yet the complete sensorial range is strikingly absent from urban studies sight has been historically privileged over the other senses and urban studies however smell and sound have also a huge influence over how we perceive places they impact our behavior attitudes and health yet city planning is concerned only with a few bad smells and with limiting noise levels we propose a new way of capturing nuanced sensorial perceptions of cities from data implicitly generated by social media users and of producing detailed sensorial maps of our cities smell sound urban informatics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
524,0,"Are early onset aging conditions correlated to daily activity functions in youth and adults with Down syndrome? This study aims to answer the research question of ``Are early onset aging conditions correlated to daily activity functions in youth and adults with Down syndrome (DS)?'' A cross-sectional survey was employed to recruit 216 individuals with DS over 15 years of age in the analyses. A structured questionnaire included demographic data, brief self-reported aging conditions, Dementia Screening Questionnaire for Individuals with Intellectual Disabilities (DSQIID) and activity of daily living (ADL) scales were completed by the primary caregivers who were well-suited for providing information on the functioning conditions of the DS individuals. Results showed that the most five frequent aging conditions (sometimes, usually and always) included frailty (20.2%), vision problem (15.8%), loss of language ability (15.3%), sleep problem (14.9%) and memory impairment (14.5%). Other onset aging conditions included more chronic diseases (13.9%), hearing loss (13%), chewing ability and tooth loss (12.5%), incontinence (11.1%), depressive syndrome (7.7%), falls and gait disorder (7.2%), loss of taste and smell (7.2%). The data also showed scores of DSQIID, onset aging conditions and ADL has significant relationships each other in Pearson's correlation tests. Finally, multiple linear regression analyses indicated onset aging conditions (β=−0.735, p<0.001) can significantly predicted the variation in ADL scores after adjusting other factors (R2=0.381). This study suggests that the authority should initiate early intervention programs aim to improve healthy aging and ADL functions for people with DS. Down syndrome, Intellectual disability, Aging, Dementia, ADL",are early onset aging conditions correlated to daily activity functions in youth and adults with down syndrome this study aims to answer the research question of are early onset aging conditions correlated to daily activity functions in youth and adults with down syndrome ds a cross sectional survey was employed to recruit 216 individuals with ds over 15 years of age in the analyses a structured questionnaire included demographic data brief self reported aging conditions dementia screening questionnaire for individuals with intellectual disabilities dsqiid and activity of daily living adl scales were completed by the primary caregivers who were well suited for providing information on the functioning conditions of the ds individuals results showed that the most five frequent aging conditions sometimes usually and always included frailty 20 2 vision problem 15 8 loss of language ability 15 3 sleep problem 14 9 and memory impairment 14 5 other onset aging conditions included more chronic diseases 13 9 hearing loss 13 chewing ability and tooth loss 12 5 incontinence 11 1 depressive syndrome 7 7 falls and gait disorder 7 2 loss of taste and smell 7 2 the data also showed scores of dsqiid onset aging conditions and adl has significant relationships each other in pearson s correlation tests finally multiple linear regression analyses indicated onset aging conditions 0 735 p 0 001 can significantly predicted the variation in adl scores after adjusting other factors r2 0 381 this study suggests that the authority should initiate early intervention programs aim to improve healthy aging and adl functions for people with ds down syndrome intellectual disability aging dementia adl,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
525,0,"Ontology Based Orchid Knowledge Platform for Knowledge Services in Orchid Cluster Orchid is one of the economic crops in world market. The varieties of shape, style, color and smell of orchids attract people to create products in many ways, such as cut orchid, orchid plant, bouquet, lei, corsage, and orchid loose bloom and so on. Thailand is one of the biggest exporters in orchid market. There are a lot of processes in the chain, such as reproduction, cultivation, market trend survey and analysis, transportation, international trade standard, traceability and so on. In order to provide a smart knowledge service, we have to 1) managing knowledge efficiently in terms of sharing and reusing knowledge and 2) providing knowledge which matches to stakeholders. In this paper, we propose a general framework on ontology base orchid cluster platform for developing a user-centric model of knowledge services in orchid cluster. We give some examples on semantic search model, recommended system model and tracking and monitoring model respectively. crops, marketing data processing, ontologies (artificial intelligence), ontology based orchid knowledge platform, knowledge services, orchid cluster, economic crops, orchids shape, orchids style, orchids color, orchids smell, orchid plant, bouquet, corsage, orchid loose bloom, orchid market, knowledge management, reusing knowledge, orchid cluster platform, user-centric model, semantic search model, recommended system model, recommended system tracking, Ontologies, Production, Agriculture, Supply chain management, Portals, USA Councils, knowledge service, ontology, model, orchid cluster platform",ontology based orchid knowledge platform for knowledge services in orchid cluster orchid is one of the economic crops in world market the varieties of shape style color and smell of orchids attract people to create products in many ways such as cut orchid orchid plant bouquet lei corsage and orchid loose bloom and so on thailand is one of the biggest exporters in orchid market there are a lot of processes in the chain such as reproduction cultivation market trend survey and analysis transportation international trade standard traceability and so on in order to provide a smart knowledge service we have to 1 managing knowledge efficiently in terms of sharing and reusing knowledge and 2 providing knowledge which matches to stakeholders in this paper we propose a general framework on ontology base orchid cluster platform for developing a user centric model of knowledge services in orchid cluster we give some examples on semantic search model recommended system model and tracking and monitoring model respectively crops marketing data processing ontologies artificial intelligence ontology based orchid knowledge platform knowledge services orchid cluster economic crops orchids shape orchids style orchids color orchids smell orchid plant bouquet corsage orchid loose bloom orchid market knowledge management reusing knowledge orchid cluster platform user centric model semantic search model recommended system model recommended system tracking ontologies production agriculture supply chain management portals usa councils knowledge service ontology model orchid cluster platform,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
526,0,"Herbivore diet selection in response to simulated variation in nutrient rewards and plant secondary compounds The interaction between the sensory properties of food plants (i.e. taste and smell) and their postingestive consequences is thought to be an important mechanism by which browsing herbivores learn about the toxic and nutritional properties of foods. The extent to which this mechanism is important when multiple food options are available, each differing in concentrations of both nutrients and plant secondary metabolites, is little known and was tested using goats as a model browsing herbivore. Twenty-four juvenile female goats, Capra hircus, were offered branches of four conifer species, with one species being offered per day on 4 successive conditioning days per week for 5 weeks. On conditioning days, animals were dosed orally with a mixture of two stimuli according to their treatment allocations. Treatments consisted of combinations of a positive (sodium propionate) and a negative (lithium chloride) postingestive stimulus, both imposed at one of four levels. Preference was assessed on the fifth day by offering all species simultaneously for 20min and measuring relative consumption. From the first week, goats responded in a dose-dependent fashion to lithium chloride by reducing their relative preference of associated conifer species as the dose increased. However, they did not modify their choices with the variation in sodium propionate intensity. Comparisons with other experiments which did not use the conditioning method suggest that in complex situations with many stimuli, animals may need additional preingestive cues to perceive the whole value of the food, particularly for assessing nutrient rewards of food plants. []",herbivore diet selection in response to simulated variation in nutrient rewards and plant secondary compounds the interaction between the sensory properties of food plants i e taste and smell and their postingestive consequences is thought to be an important mechanism by which browsing herbivores learn about the toxic and nutritional properties of foods the extent to which this mechanism is important when multiple food options are available each differing in concentrations of both nutrients and plant secondary metabolites is little known and was tested using goats as a model browsing herbivore twenty four juvenile female goats capra hircus were offered branches of four conifer species with one species being offered per day on 4 successive conditioning days per week for 5 weeks on conditioning days animals were dosed orally with a mixture of two stimuli according to their treatment allocations treatments consisted of combinations of a positive sodium propionate and a negative lithium chloride postingestive stimulus both imposed at one of four levels preference was assessed on the fifth day by offering all species simultaneously for 20min and measuring relative consumption from the first week goats responded in a dose dependent fashion to lithium chloride by reducing their relative preference of associated conifer species as the dose increased however they did not modify their choices with the variation in sodium propionate intensity comparisons with other experiments which did not use the conditioning method suggest that in complex situations with many stimuli animals may need additional preingestive cues to perceive the whole value of the food particularly for assessing nutrient rewards of food plants,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
527,0,"Smelling a diseased host: grapevine moth responses to healthy and fungus-infected grapes Herbivorous insects use information about volatile substances to select their host plants. The possibility that insects use these volatiles to assess the infection status of a host plant has rarely been tested. The assessment of host status via olfaction may allow a more successful allocation of time and energy towards the procurement of valuable resources for the offspring. We hypothesized that olfactory cues play a role in providing an herbivorous insect with information about the health status of a potential host plant. To test this hypothesis, we compared the attraction and oviposition response of the grapevine moth, Lobesia botrana, to healthy grapes, Vitis vinifera, with the response to grapes infected with a phytopathogenic fungus, Botrytis cinerea. The fungal infection elicited substantial reductions in both attraction from a distance and oviposition on the host. By preventing contact with the fruits, we found that volatiles from the infected grapes were the signal eliciting the observed behaviour. Experiments with a synthetic compound, 3-methyl-1-butanol, identified in the odour of infected grapes, confirmed the essential function of olfactory cues in this process, both in the laboratory and in the field. In our system, the avoidance of a diseased plant supported the preference performance hypothesis in L. botrana. Results are discussed in relation to the role of fungal volatiles in plant--insect relationships. attraction, , fungal volatile, insect host location, , olfaction, oviposition cue repellence,",smelling a diseased host grapevine moth responses to healthy and fungus infected grapes herbivorous insects use information about volatile substances to select their host plants the possibility that insects use these volatiles to assess the infection status of a host plant has rarely been tested the assessment of host status via olfaction may allow a more successful allocation of time and energy towards the procurement of valuable resources for the offspring we hypothesized that olfactory cues play a role in providing an herbivorous insect with information about the health status of a potential host plant to test this hypothesis we compared the attraction and oviposition response of the grapevine moth lobesia botrana to healthy grapes vitis vinifera with the response to grapes infected with a phytopathogenic fungus botrytis cinerea the fungal infection elicited substantial reductions in both attraction from a distance and oviposition on the host by preventing contact with the fruits we found that volatiles from the infected grapes were the signal eliciting the observed behaviour experiments with a synthetic compound 3 methyl 1 butanol identified in the odour of infected grapes confirmed the essential function of olfactory cues in this process both in the laboratory and in the field in our system the avoidance of a diseased plant supported the preference performance hypothesis in l botrana results are discussed in relation to the role of fungal volatiles in plant insect relationships attraction fungal volatile insect host location olfaction oviposition cue repellence,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
528,0,"Men who kill their own children: paternal filicide incidents in contemporary Fiji Objective: Filicide, or parental murder of offspring, constitutes a major portion of lethal violence perpetrated against children worldwide. Despite the global nature of the phenomenon, researchers have focused their studies on the developed industrialized societies with the consequent neglect of small, developing societies. Second, there is a paucity of empirical data on child homicide committed by fathers. This study therefore explores the nature and extent of paternal filicides in Fiji, a non-Western society, and the social and cultural forces underlying them in order to enhance our knowledge of the phenomenon. Method: Information was obtained from a number of sources, including (a) a police homicide logbook, (b) newspaper reports of homicide, and (c) detailed interviews conducted with criminal justice and medical personnel. Information from these data sources were consolidated to construct case histories of paternal filicides. These cases were then analyzed for dominant themes. Case illustrations are presented in the text. Results: Several of the study's findings are congruent with other studies of paternal filicides: poor, working class fathers were the offenders in all cases. As a corollary, their victims were from low socioeconomic backgrounds. Regarding location, paternal filicides occurred in the home of the offender and victim. The filicides were the culmination of stresses and strains associated with marital disharmony and excessive corporal child-control strategies. Conclusions: The general conclusion of this study is that further research in non-Western societies has the potential to increase our understanding of the social factors and processes involved in paternal child murders. We will then be better positioned to craft effective intervention strategies. Filicide, Homicide, Child murder, Child abuse, Fiji",men who kill their own children paternal filicide incidents in contemporary fiji objective filicide or parental murder of offspring constitutes a major portion of lethal violence perpetrated against children worldwide despite the global nature of the phenomenon researchers have focused their studies on the developed industrialized societies with the consequent neglect of small developing societies second there is a paucity of empirical data on child homicide committed by fathers this study therefore explores the nature and extent of paternal filicides in fiji a non western society and the social and cultural forces underlying them in order to enhance our knowledge of the phenomenon method information was obtained from a number of sources including a a police homicide logbook b newspaper reports of homicide and c detailed interviews conducted with criminal justice and medical personnel information from these data sources were consolidated to construct case histories of paternal filicides these cases were then analyzed for dominant themes case illustrations are presented in the text results several of the study s findings are congruent with other studies of paternal filicides poor working class fathers were the offenders in all cases as a corollary their victims were from low socioeconomic backgrounds regarding location paternal filicides occurred in the home of the offender and victim the filicides were the culmination of stresses and strains associated with marital disharmony and excessive corporal child control strategies conclusions the general conclusion of this study is that further research in non western societies has the potential to increase our understanding of the social factors and processes involved in paternal child murders we will then be better positioned to craft effective intervention strategies filicide homicide child murder child abuse fiji,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
529,0,"Swedish-Norwegian tradable green certificates: Scheme design flaws and perceived investment barriers The EU Commission recommends using market-based support schemes for renewable-electricity projects. One example is the Swedish-Norwegian tradable green certificate scheme. We examine whether design features in the Norwegian part of this scheme, specifically, the scheme's short duration and the way it is to be abruptly terminated, contribute to investors' perceptions of barriers. We apply econometric techniques on primary data collected in two surveys of Norwegian investors in hydropower, and we use real options theory to predict and interpret investors' responses. We show that: (1) immediately after the scheme was introduced, investors are eager to lock in future subsidies by investing immediately and concerned with factors that may delay the completion of their projects; (2) as the certificate deadline neared, investors have become increasingly pessimistic and concerned with economic and risk barriers. Investors in big hydropower plants with regulation reservoirs are particularly concerned with the risk of not completing their projects in time to gain the right to sell certificates. These findings are consistent with the predicted responses to the scheme design derived from real options theory. In contrast to earlier studies, we find no difference in responses to the scheme design across investor types. Renewable electricity, Real options, Policy uncertainty, Investor heterogeneity, Green certificates, Renewable portfolio standard",swedish norwegian tradable green certificates scheme design flaws and perceived investment barriers the eu commission recommends using market based support schemes for renewable electricity projects one example is the swedish norwegian tradable green certificate scheme we examine whether design features in the norwegian part of this scheme specifically the scheme s short duration and the way it is to be abruptly terminated contribute to investors perceptions of barriers we apply econometric techniques on primary data collected in two surveys of norwegian investors in hydropower and we use real options theory to predict and interpret investors responses we show that 1 immediately after the scheme was introduced investors are eager to lock in future subsidies by investing immediately and concerned with factors that may delay the completion of their projects 2 as the certificate deadline neared investors have become increasingly pessimistic and concerned with economic and risk barriers investors in big hydropower plants with regulation reservoirs are particularly concerned with the risk of not completing their projects in time to gain the right to sell certificates these findings are consistent with the predicted responses to the scheme design derived from real options theory in contrast to earlier studies we find no difference in responses to the scheme design across investor types renewable electricity real options policy uncertainty investor heterogeneity green certificates renewable portfolio standard,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
530,0,"How Good Are Code Smells for Evaluating Software Maintainability? Results from a Comparative Case Study An advantage of code smells over traditional software measures is that the former are associated with an explicit set of refactorings to improve the existing design. Past research on code smells has emphasized the formalization and automated detection of code smells, but much less has been done to empirically investigate how good are code smells for evaluating software maintainability. This paper presents a summary of the findings in the thesis by Yamashita, which aimed at investigating the strengths and limitations of code smells for evaluating software maintainability. The study conducted comprised an outsourced maintenance project involving four Java web systems with equivalent functionality but dissimilar implementation, six software professionals, and two software companies. A main result from the study is that the usefulness of code smells differs according to the granularity level (e.g., whether the assessment is done at file or system level) and the particular operationalization of maintainability (e.g., maintainability can be measured via maintenance effort, or problems encountered during maintenance, etc). This paper summarises the most relevant findings from the thesis, discusses a series of lessons learned from conducting this study, and discusses avenues for new research in the area of code smells. Internet, Java, software maintenance, software metrics, software quality, software measures, software refactorings, automated code smell detection, outsourced maintenance project, Java Web systems, granularity level, software quality, software companies, software professionals, software maintainability evaluation, Maintenance engineering, Software, Interviews, Java, Context, Companies, Size measurement, Code smells, Bad smells, Empirical study, Comparative Case Study, Software maintenance, Software quality",how good are code smells for evaluating software maintainability results from a comparative case study an advantage of code smells over traditional software measures is that the former are associated with an explicit set of refactorings to improve the existing design past research on code smells has emphasized the formalization and automated detection of code smells but much less has been done to empirically investigate how good are code smells for evaluating software maintainability this paper presents a summary of the findings in the thesis by yamashita which aimed at investigating the strengths and limitations of code smells for evaluating software maintainability the study conducted comprised an outsourced maintenance project involving four java web systems with equivalent functionality but dissimilar implementation six software professionals and two software companies a main result from the study is that the usefulness of code smells differs according to the granularity level e g whether the assessment is done at file or system level and the particular operationalization of maintainability e g maintainability can be measured via maintenance effort or problems encountered during maintenance etc this paper summarises the most relevant findings from the thesis discusses a series of lessons learned from conducting this study and discusses avenues for new research in the area of code smells internet java software maintenance software metrics software quality software measures software refactorings automated code smell detection outsourced maintenance project java web systems granularity level software quality software companies software professionals software maintainability evaluation maintenance engineering software interviews java context companies size measurement code smells bad smells empirical study comparative case study software maintenance software quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
531,0,"Effects of olfactory and gustatory stimuli on neural excitability for swallowing This project evaluated the effects of olfactory and gustatory stimuli on the amplitude and latency of motor-evoked potentials (MEPs) from the submental muscles when evoked by transcranial magnetic stimulation (TMS). Sixteen healthy volunteers (8 males; age range 19--43) participated in the study. Lemon concentrate at 100% and diluted in water to 25% were presented separately as odor and tastant stimuli. Tap water was used as control. 15 trials of TMS-evoked MEPs triggered by volitional contraction of the submental muscles and volitional swallowing were measured at baseline, during control condition, during stimulus presentation, and immediately, 30-, 60-, and 90-min poststimulation for each of the four stimulus presentations. Experiments were repeated using the combined odor and tastant concentrations that most influenced the MEP independently. Differences in MEP amplitude measured during swallowing were seen at 30-, 60-, and 90-min poststimulation for simultaneous olfactory and gustatory stimulation as opposed to no differences seen at any point for stimuli presented separately. This study has shown that combined odor and tastant stimulation (i.e., flavor) can increase MEP amplitude during swallowing and that this enhancement of MEP can persist for at least 90min following stimulation. As increased MEP amplitude has been associated with improved swallowing performance, a follow-up study is underway to determine the biomechanical changes produced by altered MEPs to facilitate translation of these data to clinical dysphagia management. Olfaction, Gustation, Deglutition, Transcranial magnetic stimulation, Sour",effects of olfactory and gustatory stimuli on neural excitability for swallowing this project evaluated the effects of olfactory and gustatory stimuli on the amplitude and latency of motor evoked potentials meps from the submental muscles when evoked by transcranial magnetic stimulation tms sixteen healthy volunteers 8 males age range 19 43 participated in the study lemon concentrate at 100 and diluted in water to 25 were presented separately as odor and tastant stimuli tap water was used as control 15 trials of tms evoked meps triggered by volitional contraction of the submental muscles and volitional swallowing were measured at baseline during control condition during stimulus presentation and immediately 30 60 and 90 min poststimulation for each of the four stimulus presentations experiments were repeated using the combined odor and tastant concentrations that most influenced the mep independently differences in mep amplitude measured during swallowing were seen at 30 60 and 90 min poststimulation for simultaneous olfactory and gustatory stimulation as opposed to no differences seen at any point for stimuli presented separately this study has shown that combined odor and tastant stimulation i e flavor can increase mep amplitude during swallowing and that this enhancement of mep can persist for at least 90min following stimulation as increased mep amplitude has been associated with improved swallowing performance a follow up study is underway to determine the biomechanical changes produced by altered meps to facilitate translation of these data to clinical dysphagia management olfaction gustation deglutition transcranial magnetic stimulation sour,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
532,0,"Prevalence of annoyance attributed to electrical equipment and smells in a Swedish population, and relationship with subjective health and daily functioning Summary Background Self-reported annoyance from electrical equipment has been in evidence since the mid-1980s, and the first reports of illness from everyday chemicals arose in the 1960s. However, the extent of the problem has not yet been fully established. Aims The aim of this study was to estimate the prevalence of annoyance related to electrical and chemical factors in a Swedish general population, and to assess possible relationships with subjective health and daily functioning. Methods In total, 13,604 subjects, representative of the population of Scania, Sweden, answered a survey containing five questions regarding annoyance from five environmental factors: fluorescent tube lighting, visual display units, other electrical equipment, air that smells of chemicals, and other smells. The survey also obtained data on self-reported health (SRH-7), mental well-being [General Health Questionnaire (GHQ)-12], work situation and daily functioning. Results Almost one-third of the respondents reported annoyance from at least one environmental factor. Annoyance was more frequent among women, subjects of working age and immigrants. Subjects who reported environmental annoyance scored higher on GHQ-12 and lower on SRH-7, indicating impaired subjective physical and mental well-being. They were also more likely to report deteriorated daily functioning. Conclusions Annoyance related to electrical and/or chemical factors was common in a Swedish population. Subjects reporting environmental annoyance rated their overall health significantly poorer than the general population. The association with subjective health and functional capacity increased with severity of annoyance, which suggests that there is some connection between environmental annoyance, well-being and functional capacity. Environmental intolerance, Environmental illness, Epidemiology",prevalence of annoyance attributed to electrical equipment and smells in a swedish population and relationship with subjective health and daily functioning summary background self reported annoyance from electrical equipment has been in evidence since the mid 1980s and the first reports of illness from everyday chemicals arose in the 1960s however the extent of the problem has not yet been fully established aims the aim of this study was to estimate the prevalence of annoyance related to electrical and chemical factors in a swedish general population and to assess possible relationships with subjective health and daily functioning methods in total 13 604 subjects representative of the population of scania sweden answered a survey containing five questions regarding annoyance from five environmental factors fluorescent tube lighting visual display units other electrical equipment air that smells of chemicals and other smells the survey also obtained data on self reported health srh 7 mental well being general health questionnaire ghq 12 work situation and daily functioning results almost one third of the respondents reported annoyance from at least one environmental factor annoyance was more frequent among women subjects of working age and immigrants subjects who reported environmental annoyance scored higher on ghq 12 and lower on srh 7 indicating impaired subjective physical and mental well being they were also more likely to report deteriorated daily functioning conclusions annoyance related to electrical and or chemical factors was common in a swedish population subjects reporting environmental annoyance rated their overall health significantly poorer than the general population the association with subjective health and functional capacity increased with severity of annoyance which suggests that there is some connection between environmental annoyance well being and functional capacity environmental intolerance environmental illness epidemiology,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
533,0,"Olfactory stem cells can be induced to express chondrogenic phenotype in a rat intervertebral disc injury model Background In humans, lower back pain is one of the most common causes of morbidity. Many studies implicate degeneration of intervertebral discs as the cause. In the normal intervertebral disc, the nucleus pulposus exerts a hydrostatic pressure against the constraining annulus fibrosus, which allows the disc to maintain flexibility between adjacent vertebrae, while absorbing necessary compressive forces. The nucleus pulposus performs this role because of its hydrophilic gel-like structure. The extracellular matrix of the nucleus pulposus is up to 80% hydrated, as a result of large amounts of the aggregating proteoglycan, chondroitin sulfate proteoglycan (CSPG). This proteoglycan is enmeshed in a randomly orientated network of fine collagen Type II (CT2) fibers. Study design and purpose A useful adult tissue-derived stem cell is that from the olfactory mucosa, the organ of smell. These cells, accessible in humans from nasal biopsies, are multipotent and are able to make many cell types from all germ layers. They are easily grown in vitro and can be expanded to large numbers and stored frozen. These qualities indicate the potential for autologous transplantation for disc repair. In this article, using a rat model, we explore the hypothesis that olfactory stem cells can differentiate into a nucleus pulposus chondrocyte phenotype in vitro, as well as in vivo after transplantation into the injured intervertebral disc. Patient sample Female rats (14 weeks) were anesthetized with xylazine/ketamine. The abdominal wall was shaved and injected with local anesthetic (lidocaine) before incision. The ventral part of the lumbar spine, including two intervertebral discs, was exposed. Disc degeneration was then induced in the two exposed discs by needle aspiration of the nucleus pulposus. The prominent spina iliaca posterior superior was used as an anatomical landmark for identification of the first disc. Two weeks later, one injured intervertebral disc was exposed in a second, similar, surgery and 20,000 olfactory neurosphere-derived cells were transplanted with a 25-G needle. Outcome measures In vitro induction of nucleus pulposus chondrocyte phenotype is measured by the percentage of cells expressing CT2 and CSPG. In vivo, a successful outcome is evidence of engraftment of donor-derived cells and their expression of CT2 and CSPG. Methods In this article, we tested two hypotheses: the first that progenitor cells within olfactory neurospheres could be induced to express markers distinctive of the nucleus pulposus when placed in vitro in a coculture experiment. The second hypothesis tested the same induction in genetically labeled transplanted cells within damaged vertebral discs in vivo. The two markers measured are those held by current literature to engender the necessary cushioning characteristics of nucleus pulposus, CT2 and CSPG. Results Our experiments demonstrated virtually 100% induction of these two markers in vitro. Also, this induction was achieved in donor-derived cells after delivery to the nucleus pulposus region of animals whose discs had previously been lesioned 2 weeks before transplant. Conclusions These results provide a rationale for moving toward more extensive larger animal studies for assessment of regeneration before human trials where relief of symptoms can be more easily assessed. Olfactory, Stem cells, Progenitors, Chondrocytes, Vertebral discs, Cell transplant, Therapy",olfactory stem cells can be induced to express chondrogenic phenotype in a rat intervertebral disc injury model background in humans lower back pain is one of the most common causes of morbidity many studies implicate degeneration of intervertebral discs as the cause in the normal intervertebral disc the nucleus pulposus exerts a hydrostatic pressure against the constraining annulus fibrosus which allows the disc to maintain flexibility between adjacent vertebrae while absorbing necessary compressive forces the nucleus pulposus performs this role because of its hydrophilic gel like structure the extracellular matrix of the nucleus pulposus is up to 80 hydrated as a result of large amounts of the aggregating proteoglycan chondroitin sulfate proteoglycan cspg this proteoglycan is enmeshed in a randomly orientated network of fine collagen type ii ct2 fibers study design and purpose a useful adult tissue derived stem cell is that from the olfactory mucosa the organ of smell these cells accessible in humans from nasal biopsies are multipotent and are able to make many cell types from all germ layers they are easily grown in vitro and can be expanded to large numbers and stored frozen these qualities indicate the potential for autologous transplantation for disc repair in this article using a rat model we explore the hypothesis that olfactory stem cells can differentiate into a nucleus pulposus chondrocyte phenotype in vitro as well as in vivo after transplantation into the injured intervertebral disc patient sample female rats 14 weeks were anesthetized with xylazine ketamine the abdominal wall was shaved and injected with local anesthetic lidocaine before incision the ventral part of the lumbar spine including two intervertebral discs was exposed disc degeneration was then induced in the two exposed discs by needle aspiration of the nucleus pulposus the prominent spina iliaca posterior superior was used as an anatomical landmark for identification of the first disc two weeks later one injured intervertebral disc was exposed in a second similar surgery and 20 000 olfactory neurosphere derived cells were transplanted with a 25 g needle outcome measures in vitro induction of nucleus pulposus chondrocyte phenotype is measured by the percentage of cells expressing ct2 and cspg in vivo a successful outcome is evidence of engraftment of donor derived cells and their expression of ct2 and cspg methods in this article we tested two hypotheses the first that progenitor cells within olfactory neurospheres could be induced to express markers distinctive of the nucleus pulposus when placed in vitro in a coculture experiment the second hypothesis tested the same induction in genetically labeled transplanted cells within damaged vertebral discs in vivo the two markers measured are those held by current literature to engender the necessary cushioning characteristics of nucleus pulposus ct2 and cspg results our experiments demonstrated virtually 100 induction of these two markers in vitro also this induction was achieved in donor derived cells after delivery to the nucleus pulposus region of animals whose discs had previously been lesioned 2 weeks before transplant conclusions these results provide a rationale for moving toward more extensive larger animal studies for assessment of regeneration before human trials where relief of symptoms can be more easily assessed olfactory stem cells progenitors chondrocytes vertebral discs cell transplant therapy,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
534,0,"Effects of chronic peripheral olfactory loss on functional brain networks The effects of sensory loss on central processing in various sensory systems have already been described. The olfactory system holds the special ability to be activated by a sensorimotor act, without the presentation of an odor. In this study, we investigated brain changes related to chronic peripheral smell loss. We included 11 anosmic patients (eight female, three male; mean age, 43.5years) with smell loss after an infection of the upper respiratory tract (mean disease duration, 4.64years) and 14 healthy controls (seven female, seven male; mean age, 30.1years) in a functional magnetic resonance imaging experiment with a sniffing paradigm. Data were analyzed using group-independent component analysis and functional connectivity analysis. Our results revealed a spatially intact olfactory network in patients, whereas major aberrations due to peripheral loss were observed in functional connectivity through a variety of distributed brain areas. This is the first study to show the re-organization caused by the lack of peripheral input. The results of this study indicate that anosmic patients hold the ability to activate an olfaction-related functional network through the sensorimotor component of odor-perception (sniffing). The areas involved were not different from those that emerged in healthy controls. However, functional connectivity appears to be different between the two groups, with a decrease in functional connectivity in the brain in patients with chronic peripheral sensory loss. We can further conclude that the loss of the sense of smell may induce far-reaching effects in the whole brain, which lead to compensatory mechanisms from other sensory systems due to the close interconnectivity of the olfactory system with other functional networks. functional connectivity, piriform cortex, olfaction, anosmia, sniffing",effects of chronic peripheral olfactory loss on functional brain networks the effects of sensory loss on central processing in various sensory systems have already been described the olfactory system holds the special ability to be activated by a sensorimotor act without the presentation of an odor in this study we investigated brain changes related to chronic peripheral smell loss we included 11 anosmic patients eight female three male mean age 43 5years with smell loss after an infection of the upper respiratory tract mean disease duration 4 64years and 14 healthy controls seven female seven male mean age 30 1years in a functional magnetic resonance imaging experiment with a sniffing paradigm data were analyzed using group independent component analysis and functional connectivity analysis our results revealed a spatially intact olfactory network in patients whereas major aberrations due to peripheral loss were observed in functional connectivity through a variety of distributed brain areas this is the first study to show the re organization caused by the lack of peripheral input the results of this study indicate that anosmic patients hold the ability to activate an olfaction related functional network through the sensorimotor component of odor perception sniffing the areas involved were not different from those that emerged in healthy controls however functional connectivity appears to be different between the two groups with a decrease in functional connectivity in the brain in patients with chronic peripheral sensory loss we can further conclude that the loss of the sense of smell may induce far reaching effects in the whole brain which lead to compensatory mechanisms from other sensory systems due to the close interconnectivity of the olfactory system with other functional networks functional connectivity piriform cortex olfaction anosmia sniffing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
535,0,"Telemanagement of hypertension: A qualitative assessment of patient and physician preferences [] Blood pressure monitoring, Diabetes, Hypertension, Mobile phone, Self, Self-care",telemanagement of hypertension a qualitative assessment of patient and physician preferences blood pressure monitoring diabetes hypertension mobile phone self self care,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
536,0,"Theoretical calculations of a compound formed by Fe+3 and tris(catechol) Phenolic compounds generally have special smell, easily soluble in water, organic solvents (alcohols, esters, chloroform, ethyl acetate), in aqueous solutions of bases, colorless or colorful, crystalline and amorphous materials. Phenols form colorful complexes when they form compounds with heavy metals. In this study, the structural properties of a compound formed by catechol and Fe+3 are investigated theoretically. The electronic and thermodynamic properties of the complex were also investigated in gas phase and organic solvents at B3LYP/6-31+G(d,p) and B3LYP/6-311++G(d,p) basis set. The formation of Fe--tris(catechol) complex compound is exothermic, and it is difficult to obtain the complex as the temperature increases. The observed and calculated FT-IR and geometric parameters spectra are in good agreement with empirical. Catechol, Phenolic compounds, DFT, NBO, HOMO--LUMO",theoretical calculations of a compound formed by fe 3 and tris catechol phenolic compounds generally have special smell easily soluble in water organic solvents alcohols esters chloroform ethyl acetate in aqueous solutions of bases colorless or colorful crystalline and amorphous materials phenols form colorful complexes when they form compounds with heavy metals in this study the structural properties of a compound formed by catechol and fe 3 are investigated theoretically the electronic and thermodynamic properties of the complex were also investigated in gas phase and organic solvents at b3lyp 6 31 g d p and b3lyp 6 311 g d p basis set the formation of fe tris catechol complex compound is exothermic and it is difficult to obtain the complex as the temperature increases the observed and calculated ft ir and geometric parameters spectra are in good agreement with empirical catechol phenolic compounds dft nbo homo lumo,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
537,0,"Tricorder: Building a Program Analysis Ecosystem Static analysis tools help developers find bugs, improve code readability, and ensure consistent style across a project. However, these tools can be difficult to smoothly integrate with each other and into the developer workflow, particularly when scaling to large codebases. We present Tricorder, a program analysis platform aimed at building a data-driven ecosystem around program analysis. We present a set of guiding principles for our program analysis tools and a scalable architecture for an analysis platform implementing these principles. We include an empirical, in-situ evaluation of the tool as it is used by developers across Google that shows the usefulness and impact of the platform. program analysis, static analysis",tricorder building a program analysis ecosystem static analysis tools help developers find bugs improve code readability and ensure consistent style across a project however these tools can be difficult to smoothly integrate with each other and into the developer workflow particularly when scaling to large codebases we present tricorder a program analysis platform aimed at building a data driven ecosystem around program analysis we present a set of guiding principles for our program analysis tools and a scalable architecture for an analysis platform implementing these principles we include an empirical in situ evaluation of the tool as it is used by developers across google that shows the usefulness and impact of the platform program analysis static analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
538,0,"Fault Localization for Build Code Errors in Makefiles Building is an important process in software development. In large software projects, build code has a high level of complexity, churn rate, and defect proneness. While several automated approaches exist to help developers in localizing faults in traditional source code and in detecting code smells in build code, fault localization techniques have not yet been developed for build code. In this work, we introduce MkFault, a tool to localize errors resulting in build crashes. MkFault monitors the execution traces from GNU Make statements that produce concrete build rules and the original code locations for each component of a rule (i.e., target, prerequisites, and recipe). It then uses a novel ranking algorithm to give suspiciousness scores to the original statements in the Makefile. In our empirical evaluation with real faults, we show that MkFault can help localize faults in Make code with high accuracy. Build code, Fault localization, Makefiles",fault localization for build code errors in makefiles building is an important process in software development in large software projects build code has a high level of complexity churn rate and defect proneness while several automated approaches exist to help developers in localizing faults in traditional source code and in detecting code smells in build code fault localization techniques have not yet been developed for build code in this work we introduce mkfault a tool to localize errors resulting in build crashes mkfault monitors the execution traces from gnu make statements that produce concrete build rules and the original code locations for each component of a rule i e target prerequisites and recipe it then uses a novel ranking algorithm to give suspiciousness scores to the original statements in the makefile in our empirical evaluation with real faults we show that mkfault can help localize faults in make code with high accuracy build code fault localization makefiles,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
539,0,"Antipattern and Code Smell False Positives: Preliminary Conceptualization and Classification Anti-patterns and code smells are archetypes used for describing software design shortcomings that can negatively affect software quality, in particular maintainability. Tools, metrics and methodologies have been developed to identify these archetypes, based on the assumption that they can point at problematic code. However, recent empirical studies have shown that some of these archetypes are ubiquitous in real world programs, and many of them are found not to be as detrimental to quality as previously conjectured. We are therefore interested in revisiting common anti-patterns and code smells, and building a catalogue of cases that constitute candidates for ""false positives"". We propose a preliminary classification of such false positives with the aim of facilitating a better understanding of the effects of anti-patterns and code smells in practice. We hope that the development and further refinement of such a classification can support researchers and tool vendors in their endeavour to develop more pragmatic, context-relevant detection and analysis tools for anti-patterns and code smells. pattern classification, software maintenance, software reliability, ubiquitous computing, code smells, software design shortcomings, software quality, software maintainability, false positives, tool vendors, context-relevant detection, antipattern analysis tools, preliminary classification, preliminary conceptualization, Production facilities, Generators, Software quality, Graphical user interfaces, Maintenance engineering, Systematics, Concrete, Anti-patterns, code smells, false positives, detection accuracy, conceptual framework",antipattern and code smell false positives preliminary conceptualization and classification anti patterns and code smells are archetypes used for describing software design shortcomings that can negatively affect software quality in particular maintainability tools metrics and methodologies have been developed to identify these archetypes based on the assumption that they can point at problematic code however recent empirical studies have shown that some of these archetypes are ubiquitous in real world programs and many of them are found not to be as detrimental to quality as previously conjectured we are therefore interested in revisiting common anti patterns and code smells and building a catalogue of cases that constitute candidates for false positives we propose a preliminary classification of such false positives with the aim of facilitating a better understanding of the effects of anti patterns and code smells in practice we hope that the development and further refinement of such a classification can support researchers and tool vendors in their endeavour to develop more pragmatic context relevant detection and analysis tools for anti patterns and code smells pattern classification software maintenance software reliability ubiquitous computing code smells software design shortcomings software quality software maintainability false positives tool vendors context relevant detection antipattern analysis tools preliminary classification preliminary conceptualization production facilities generators software quality graphical user interfaces maintenance engineering systematics concrete anti patterns code smells false positives detection accuracy conceptual framework,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
540,0,"Complexity metrics for Workflow nets Process modeling languages such as EPCs, BPMN, flow charts, UML activity diagrams, Petri nets, etc., are used to model business processes and to configure process-aware information systems. It is known that users have problems understanding these diagrams. In fact, even process engineers and system analysts have difficulties in grasping the dynamics implied by a process model. Recent empirical studies show that people make numerous errors when modeling complex business processes, e.g., about 20% of the EPCs in the SAP reference model have design flaws resulting in potential deadlocks, livelocks, etc. It seems obvious that the complexity of the model contributes to design errors and a lack of understanding. It is not easy to measure complexity, however. This paper presents three complexity metrics that have been implemented in the process analysis tool ProM. The metrics are defined for a subclass of Petri nets named Workflow nets, but the results can easily be applied to other languages. To demonstrate the applicability of these metrics, we have applied our approach and tool to 262 relatively complex Protos models made in the context of various student projects. This allows us to validate and compare the different metrics. It turns out that our new metric focusing on the structuredness outperforms existing metrics. Metrics, Petri nets, Understandability",complexity metrics for workflow nets process modeling languages such as epcs bpmn flow charts uml activity diagrams petri nets etc are used to model business processes and to configure process aware information systems it is known that users have problems understanding these diagrams in fact even process engineers and system analysts have difficulties in grasping the dynamics implied by a process model recent empirical studies show that people make numerous errors when modeling complex business processes e g about 20 of the epcs in the sap reference model have design flaws resulting in potential deadlocks livelocks etc it seems obvious that the complexity of the model contributes to design errors and a lack of understanding it is not easy to measure complexity however this paper presents three complexity metrics that have been implemented in the process analysis tool prom the metrics are defined for a subclass of petri nets named workflow nets but the results can easily be applied to other languages to demonstrate the applicability of these metrics we have applied our approach and tool to 262 relatively complex protos models made in the context of various student projects this allows us to validate and compare the different metrics it turns out that our new metric focusing on the structuredness outperforms existing metrics metrics petri nets understandability,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
541,0,"A System Analysis Study Comparing Reverse Engineered Combinatorial Testing to Expert Judgment The Lockheed Martin F-16 ventral fin redesign-combinatorial test study effort was to demonstrate how Combinatorial Testing (CT) could have been applied to system hardware design flaw analysis. The historic analysis was able to determine a set of combinations, which isolated the problem and tested a solution. However, the original effort was expensive, time consuming, and required highly specialized knowledge from the expert to be effective. The new study was an effort to understand if combinatorial test could be applied to similar situations using the original data but conducted by a less senior person without an expert's knowledgebase. The situation and CT approaches are detailed in this paper. In the study, a series of iterations created combinatorial test cases which could have ""replicated"" the original highly optimized and successful test program, without the expert. aerospace components, aerospace computing, failure analysis, program testing, reverse engineering, reverse engineered combinatorial testing, expert judgment, system analysis study, Lockheed Martin F-16 ventral fin redesign combinatorial test study, system hardware design flaw analysis, CT approaches, test program, Testing, Aircraft, Aerodynamics, Industries, NIST, Analytical models, Fatigue, Case-Study, Combinatorial Test, Design problem",a system analysis study comparing reverse engineered combinatorial testing to expert judgment the lockheed martin f 16 ventral fin redesign combinatorial test study effort was to demonstrate how combinatorial testing ct could have been applied to system hardware design flaw analysis the historic analysis was able to determine a set of combinations which isolated the problem and tested a solution however the original effort was expensive time consuming and required highly specialized knowledge from the expert to be effective the new study was an effort to understand if combinatorial test could be applied to similar situations using the original data but conducted by a less senior person without an expert s knowledgebase the situation and ct approaches are detailed in this paper in the study a series of iterations created combinatorial test cases which could have replicated the original highly optimized and successful test program without the expert aerospace components aerospace computing failure analysis program testing reverse engineering reverse engineered combinatorial testing expert judgment system analysis study lockheed martin f 16 ventral fin redesign combinatorial test study system hardware design flaw analysis ct approaches test program testing aircraft aerodynamics industries nist analytical models fatigue case study combinatorial test design problem,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
542,0,"Onset aging conditions of adults with an intellectual disability associated with primary caregiver depression Caregivers of adults with an intellectual disability experience depressive symptoms, but the aging factors of the care recipients associated with the depressive symptoms are unknown. The objective of this study was to analyze the onset aging conditions of adults with an intellectual disability that associated with the depression scores of their primary caregivers. A cross-sectional survey was administered to gather information from 455 caregivers of adults with an intellectual disability about their symptoms of depression which assessed by a 9-item Patient Health Questionnaire (PHQ-9). The 12 aging conditions of adults with an intellectual disability include physical and mental health. The results indicate that 78% of adults with an intellectual disability demonstrate aging conditions. Physical conditions associated with aging include hearing decline (66.3%), vision decline (63.6%), incontinence (44%), articulation and bone degeneration (57.9%), teeth loss (80.4), physical strength decline (81.2%), sense of taste and smell decline (52.8%), and accompanied chronic illnesses (74.6%). Mental conditions associated with aging include memory loss (77%), language ability deterioration (74.4%), poor sleep quality (74.2%), and easy onset of depression and sadness (50.3%). Aging conditions of adults with an intellectual disability (p<0.001) was one factor that significantly affected the presence of depressive symptom among caregivers after controlling demographic characteristics. Particularly, poor sleep quality of adults with an intellectual disability (yes vs. no, OR=3.807, p=0.002) was statistically correlated to the occurrence of significant depressive symptoms among their caregivers. This study suggests that the authorities should reorient community services and future policies toward the needs of family caregivers to decrease the burdens associated with caregiving. Aging, Patient Health Questionnaire, PHQ-9, Intellectual disability, Caregiver, Depression, Mental health",onset aging conditions of adults with an intellectual disability associated with primary caregiver depression caregivers of adults with an intellectual disability experience depressive symptoms but the aging factors of the care recipients associated with the depressive symptoms are unknown the objective of this study was to analyze the onset aging conditions of adults with an intellectual disability that associated with the depression scores of their primary caregivers a cross sectional survey was administered to gather information from 455 caregivers of adults with an intellectual disability about their symptoms of depression which assessed by a 9 item patient health questionnaire phq 9 the 12 aging conditions of adults with an intellectual disability include physical and mental health the results indicate that 78 of adults with an intellectual disability demonstrate aging conditions physical conditions associated with aging include hearing decline 66 3 vision decline 63 6 incontinence 44 articulation and bone degeneration 57 9 teeth loss 80 4 physical strength decline 81 2 sense of taste and smell decline 52 8 and accompanied chronic illnesses 74 6 mental conditions associated with aging include memory loss 77 language ability deterioration 74 4 poor sleep quality 74 2 and easy onset of depression and sadness 50 3 aging conditions of adults with an intellectual disability p 0 001 was one factor that significantly affected the presence of depressive symptom among caregivers after controlling demographic characteristics particularly poor sleep quality of adults with an intellectual disability yes vs no or 3 807 p 0 002 was statistically correlated to the occurrence of significant depressive symptoms among their caregivers this study suggests that the authorities should reorient community services and future policies toward the needs of family caregivers to decrease the burdens associated with caregiving aging patient health questionnaire phq 9 intellectual disability caregiver depression mental health,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
543,0,"Real-time simulation of blue-green algae outburst in Taihu Lake Blue-green algae, widely distributed almost all over the world, is one kind of the most ancient and primitive algae plants. The toxin and smell that blue-green algae releases out endanger human life and health directly, it is of great significance to study the mechanism of algae outbreak. The paper presents a method for the algae simulation based on wireless sensor networks and particle systems theory. The basic idea of this method is to adopt the technology of embedded system, design a set of temperature and transparency measurement system online. Then according to the established mathematical models, carry on the simulation of blue-green algae outburst in Taihu Lake by OpenGL. The method above which satisfies the general requirements of the real-time display under the ordinary personal computer has some practical values. embedded systems, environmental science computing, water resources, wireless sensor networks, blue-green algae, algae outburst simulation, Taihu lake, wireless sensor networks, algae outbreak mechanism, particle systems theory, embedded system, temperature measurement system, transparency measurement system, Temperature measurement, Antenna measurements, Temperature sensors, Biomedical monitoring, Monitoring, Color, Lakes, blue-green algae, simulation, wireless sensor networks, particle systems",real time simulation of blue green algae outburst in taihu lake blue green algae widely distributed almost all over the world is one kind of the most ancient and primitive algae plants the toxin and smell that blue green algae releases out endanger human life and health directly it is of great significance to study the mechanism of algae outbreak the paper presents a method for the algae simulation based on wireless sensor networks and particle systems theory the basic idea of this method is to adopt the technology of embedded system design a set of temperature and transparency measurement system online then according to the established mathematical models carry on the simulation of blue green algae outburst in taihu lake by opengl the method above which satisfies the general requirements of the real time display under the ordinary personal computer has some practical values embedded systems environmental science computing water resources wireless sensor networks blue green algae algae outburst simulation taihu lake wireless sensor networks algae outbreak mechanism particle systems theory embedded system temperature measurement system transparency measurement system temperature measurement antenna measurements temperature sensors biomedical monitoring monitoring color lakes blue green algae simulation wireless sensor networks particle systems,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
544,0,"An Approach to Improve Code-first Web Services Discoverability at Development Time Previous efforts towards simplifying Web Service discovery have shown that avoiding some well-known WSDL specification anti-patterns yield quite good results in making more discoverable services. The anti-patterns, however, have been studied with contract-first Web Services, a service construction methodology that is much less popular in the software industry compared to code-first. We study a number of source code refactorings that can be applied at service development time to reduce the presence of anti-patterns in code-first WSDL documents. The cornerstone of these refactorings is a statistical correlation between common object-oriented (OO) metrics and the anti-patterns computed by using a data-set of real Web Services. We quantify the impact of the refactorings on Web Service discovery and show that more clear WSDL documents are generated and service discovery is greatly improved. OO metrics, WSDL anti-patterns, code-first, web service discovery, web services",an approach to improve code first web services discoverability at development time previous efforts towards simplifying web service discovery have shown that avoiding some well known wsdl specification anti patterns yield quite good results in making more discoverable services the anti patterns however have been studied with contract first web services a service construction methodology that is much less popular in the software industry compared to code first we study a number of source code refactorings that can be applied at service development time to reduce the presence of anti patterns in code first wsdl documents the cornerstone of these refactorings is a statistical correlation between common object oriented oo metrics and the anti patterns computed by using a data set of real web services we quantify the impact of the refactorings on web service discovery and show that more clear wsdl documents are generated and service discovery is greatly improved oo metrics wsdl anti patterns code first web service discovery web services,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
545,0,"Dietary self-selection of protein-unbalanced diets supplemented with three essential amino acids in Nile tilapia Animals do not eat whatever food item they encounter, but choose different foods that best match their requirements. Fish exhibit such ``nutritional wisdom'' and adapt their feeding behaviour and food intake according to their needs and the nutritional properties of diets. In this paper, we tested the ability of Nile tilapia to select between diets with a balanced or unbalanced composition of essential amino acids. To this end, three different diets were prepared: a gelatine based diet (D1), a gelatine diet supplemented with three essential amino acids (EAA, l-tryptophane, l-methionine, l-threonine) (D2), and a diet containing only cellulose and the three crystalline EAA (D3). In addition, the putative role of both orosensorial factors (using pellets vs capsules) and social interactions (single vs groups of ten fish) was investigated. To this end, a total of 68 male tilapia of about 141$\pm$48g (mean$\pm$S.D.) were challenged, individually or in groups, to select between D1 vs D2 using pellets dispensed by self-feeders (exp. 1). In another experiment (exp. 2), 11 individual fish were challenged to select encapsulated diets with non flavour or smell proprieties (D1 vs D2), and in exp. 3 fish were challenged to self-supplementation in EAA (D1 vs D3). The results showed the ability of tilapia to avoid the EAA-deficient diet, choosing 82.2% D2 in the case of individual fish, and 80.8% D2 in the case of fish groups. Dietary selection was not directly driven by the orosensorial characteristics of food, since tilapia sustained a higher preference for D2 when fed with encapsulated diets. Finally, in exp. 3 tilapia self-supplemented the EAA deficiency by selecting a synchronised combination of D1 and D3 that matched their nutritional requirements. These findings highlighted the capacity of fish to make dietary selection based on the EAA content, which should be considered when discussing food intake regulation mechanisms, and diet formulation and supplementation with EAA. Behaviour, Essential amino acids, Nutritional wisdom, , Self-selection",dietary self selection of protein unbalanced diets supplemented with three essential amino acids in nile tilapia animals do not eat whatever food item they encounter but choose different foods that best match their requirements fish exhibit such nutritional wisdom and adapt their feeding behaviour and food intake according to their needs and the nutritional properties of diets in this paper we tested the ability of nile tilapia to select between diets with a balanced or unbalanced composition of essential amino acids to this end three different diets were prepared a gelatine based diet d1 a gelatine diet supplemented with three essential amino acids eaa l tryptophane l methionine l threonine d2 and a diet containing only cellulose and the three crystalline eaa d3 in addition the putative role of both orosensorial factors using pellets vs capsules and social interactions single vs groups of ten fish was investigated to this end a total of 68 male tilapia of about 141 pm 48g mean pm s d were challenged individually or in groups to select between d1 vs d2 using pellets dispensed by self feeders exp 1 in another experiment exp 2 11 individual fish were challenged to select encapsulated diets with non flavour or smell proprieties d1 vs d2 and in exp 3 fish were challenged to self supplementation in eaa d1 vs d3 the results showed the ability of tilapia to avoid the eaa deficient diet choosing 82 2 d2 in the case of individual fish and 80 8 d2 in the case of fish groups dietary selection was not directly driven by the orosensorial characteristics of food since tilapia sustained a higher preference for d2 when fed with encapsulated diets finally in exp 3 tilapia self supplemented the eaa deficiency by selecting a synchronised combination of d1 and d3 that matched their nutritional requirements these findings highlighted the capacity of fish to make dietary selection based on the eaa content which should be considered when discussing food intake regulation mechanisms and diet formulation and supplementation with eaa behaviour essential amino acids nutritional wisdom self selection,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
546,0,"Brining of cod fillets: effects of phosphate, salt, glucose, ascorbate and starch on yield, sensory quality and consumers liking In order to study how triphosphate, salt, glucose, ascorbate and starch, both separately and in mixture, could affect the quality and the yield of brined cod fillets, an experimental design was applied. Salt was the variable with highest pronounced effect on yield and appearance, followed by triphosphate, glucose, starch and sodium ascorbate. By treating skinless frozen/thawed cod fillets with brine consisting of 25gsalt/l, 10g triphosphate/l, 5g glucose/l, 5gsodium ascorbate/l and 5gstarch/l in a vacuum tumbler for 15min, a 35% weight increase was obtained. The products retained a natural appearance with a homogenous surface. Next, an experiment was carried out to assess the effect of this brining mixture on sensory properties and consumers liking of both fresh and frozen/thawed cod fillets. Sensory analyses showed that the intensity of the sensory attributes cod taste, cod smell, juiciness, whiteness and glossiness could be heightened by brining, while the intensities of old/stale taste and smell could be lowered. The effects were prominent for products subjected to freezing before and/or after processing, while the characteristics of the fresh products were little influenced by brining. Using an in-house consumer panel, it was shown that the frozen/thawed products were the less preferred products. However, brining considerably enhanced the preferences for frozen and thawed cod fillets, obtaining preferences similar to the fresh, nonbrined product (F). Cod, Frozen, Fresh, Brining, Additives, Yield, Sensory properties, Consumers' liking",brining of cod fillets effects of phosphate salt glucose ascorbate and starch on yield sensory quality and consumers liking in order to study how triphosphate salt glucose ascorbate and starch both separately and in mixture could affect the quality and the yield of brined cod fillets an experimental design was applied salt was the variable with highest pronounced effect on yield and appearance followed by triphosphate glucose starch and sodium ascorbate by treating skinless frozen thawed cod fillets with brine consisting of 25gsalt l 10g triphosphate l 5g glucose l 5gsodium ascorbate l and 5gstarch l in a vacuum tumbler for 15min a 35 weight increase was obtained the products retained a natural appearance with a homogenous surface next an experiment was carried out to assess the effect of this brining mixture on sensory properties and consumers liking of both fresh and frozen thawed cod fillets sensory analyses showed that the intensity of the sensory attributes cod taste cod smell juiciness whiteness and glossiness could be heightened by brining while the intensities of old stale taste and smell could be lowered the effects were prominent for products subjected to freezing before and or after processing while the characteristics of the fresh products were little influenced by brining using an in house consumer panel it was shown that the frozen thawed products were the less preferred products however brining considerably enhanced the preferences for frozen and thawed cod fillets obtaining preferences similar to the fresh nonbrined product f cod frozen fresh brining additives yield sensory properties consumers liking,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
547,0,"Beliefs and attitudes related to narghile (waterpipe) smoking among university students in Syria Purpose To assess the beliefs and attitudes related to narghile (waterpipe) smoking that are likely to contribute to its increased popularity among young people in Syria. Methods In 2003, a cross-sectional survey was administered to university students in Aleppo, using an interviewer-administered questionnaire. Overall, 587 students participated in the study (278 males, 309 females; mean age, 21.8 $\pm$ 2.1; response rate 98.8%). Results The most common positive perceptions of narghile were related to its smell and taste. Negative perceptions of narghile included the smoke produced, the pollution, and perceived adverse health effects. Students believed the popularity of narghile to be part of a rising regional trend in its use, due to its being an appealing way to spend leisure time socializing with friends. More students (49.7%) believed narghile to be more harmful to health than cigarettes, compared with 30% who believed the opposite. Respiratory disease was the most commonly cited health effect of narghile smoking. Family attitudes regarding tobacco use by younger members were more permissive about narghile compared with cigarettes, and, surprisingly, were more permissive about females smoking narghile than males doing so. Conclusions The rise in narghile smoking as a trendy social habit appears to be occurring despite considerable appreciation of its potential health risks. Permissiveness of adult family members towards narghile use by young female members, especially in the presence of a strong taboo against female cigarette smoking may contribute to the continuous spread of narghile smoking among women in Syria. Narghile Smoking, Waterpipe, University Students, Beliefs, Attitudes, Syria",beliefs and attitudes related to narghile waterpipe smoking among university students in syria purpose to assess the beliefs and attitudes related to narghile waterpipe smoking that are likely to contribute to its increased popularity among young people in syria methods in 2003 a cross sectional survey was administered to university students in aleppo using an interviewer administered questionnaire overall 587 students participated in the study 278 males 309 females mean age 21 8 pm 2 1 response rate 98 8 results the most common positive perceptions of narghile were related to its smell and taste negative perceptions of narghile included the smoke produced the pollution and perceived adverse health effects students believed the popularity of narghile to be part of a rising regional trend in its use due to its being an appealing way to spend leisure time socializing with friends more students 49 7 believed narghile to be more harmful to health than cigarettes compared with 30 who believed the opposite respiratory disease was the most commonly cited health effect of narghile smoking family attitudes regarding tobacco use by younger members were more permissive about narghile compared with cigarettes and surprisingly were more permissive about females smoking narghile than males doing so conclusions the rise in narghile smoking as a trendy social habit appears to be occurring despite considerable appreciation of its potential health risks permissiveness of adult family members towards narghile use by young female members especially in the presence of a strong taboo against female cigarette smoking may contribute to the continuous spread of narghile smoking among women in syria narghile smoking waterpipe university students beliefs attitudes syria,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
548,0,"Emission and burnt smell characteristics from combustion experiments with defined materials Typical burnt smell often results from fire accidents or in general from incomplete combustion. Recently, eleven compounds were identified, which are basically responsible for this odour. When analyzing residual materials from different fire accidents, the pattern that means the relative ratios of these compounds among each other varies strongly, although always causing a burnt smelling. Consequently, lab-scale combustion experiments were performed in order to investigate the influence of defined materials from domestic environment on the burnt-smell fingerprints. Furthermore, the occurrence of other polar and higher molecular combustion products was studied. It was found that under good combustion conditions, the burnt smell patterns resulting from the single materials were astonishingly consistent, mostly dominated by methylphenols or naphthalene. No correlation could be found between these `fingerprints' and combustion product groups identified by GC/MS-screenings. LC/MS/MS-measurements especially pointed at the existence of higher molecular weight phenolic and acidic functionalized compounds in the combustion residues. Fire accident, Burnt smell, Combustion experiment, Combustion product, LC MS MS",emission and burnt smell characteristics from combustion experiments with defined materials typical burnt smell often results from fire accidents or in general from incomplete combustion recently eleven compounds were identified which are basically responsible for this odour when analyzing residual materials from different fire accidents the pattern that means the relative ratios of these compounds among each other varies strongly although always causing a burnt smelling consequently lab scale combustion experiments were performed in order to investigate the influence of defined materials from domestic environment on the burnt smell fingerprints furthermore the occurrence of other polar and higher molecular combustion products was studied it was found that under good combustion conditions the burnt smell patterns resulting from the single materials were astonishingly consistent mostly dominated by methylphenols or naphthalene no correlation could be found between these fingerprints and combustion product groups identified by gc ms screenings lc ms ms measurements especially pointed at the existence of higher molecular weight phenolic and acidic functionalized compounds in the combustion residues fire accident burnt smell combustion experiment combustion product lc ms ms,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
549,0,"Build code analysis with symbolic evaluation Build process is crucial in software development. However, the analysis support for build code is still limited. In this paper, we present SYMake, an infrastructure and tool for the analysis of build code in make. Due to the dynamic nature of make language, it is challenging to understand and maintain complex Makefiles. SYMake provides a symbolic evaluation algorithm that processes Makefiles and produces a symbolic dependency graph (SDG), which represents the build dependencies (i.e. rules) among files via commands. During the symbolic evaluation, for each resulting string value in an SDG that represents a part of a file name or a command in a rule, SYMake provides also an acyclic graph (called T-model) to represent its symbolic evaluation trace. We have used SYMake to develop algorithms and a tool 1) to detect several types of code smells and errors in Makefiles, and 2) to support build code refactoring, e.g. renaming a variable/target even if its name is fragmented and built from multiple substrings. Our empirical evaluation for SYMake's renaming on several real-world systems showed its high accuracy in entity renaming. Our controlled experiment showed that with SYMake, developers were able to understand Makefiles better and to detect more code smells as well as to perform refactoring more accurately. graph theory, software maintenance, symbolic evaluation, build code analysis, build process, software development, SYMake, Makefiles, symbolic evaluation algorithm, symbolic dependency graph, SDG, acyclic graph, symbolic evaluation trace, code smell detection, code error detection, code refactoring, Reactive power, Servers, Protocols, Concrete, Linux, Maintenance engineering, build code maintenance, build code analysis",build code analysis with symbolic evaluation build process is crucial in software development however the analysis support for build code is still limited in this paper we present symake an infrastructure and tool for the analysis of build code in make due to the dynamic nature of make language it is challenging to understand and maintain complex makefiles symake provides a symbolic evaluation algorithm that processes makefiles and produces a symbolic dependency graph sdg which represents the build dependencies i e rules among files via commands during the symbolic evaluation for each resulting string value in an sdg that represents a part of a file name or a command in a rule symake provides also an acyclic graph called t model to represent its symbolic evaluation trace we have used symake to develop algorithms and a tool 1 to detect several types of code smells and errors in makefiles and 2 to support build code refactoring e g renaming a variable target even if its name is fragmented and built from multiple substrings our empirical evaluation for symake s renaming on several real world systems showed its high accuracy in entity renaming our controlled experiment showed that with symake developers were able to understand makefiles better and to detect more code smells as well as to perform refactoring more accurately graph theory software maintenance symbolic evaluation build code analysis build process software development symake makefiles symbolic evaluation algorithm symbolic dependency graph sdg acyclic graph symbolic evaluation trace code smell detection code error detection code refactoring reactive power servers protocols concrete linux maintenance engineering build code maintenance build code analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
550,0,"Olfoto: Designing a Smell-based Interaction We present a study into the use of smell for searching digi-tal photo collections. Many people now have large photo libraries on their computers and effective search tools are needed. Smell has a strong link to memory and emotion so may be a good way to cue recall when searching. Our study compared text and smell based tagging. For the first stage we generated a set of smell and tag names from user de-scriptions of photos, participants then used these to tag pho-tos, returning two weeks later to answer questions on their photos. Results showed that participants could tag effec-tively with text labels, as this is a common and familiar task. Performance with smells was lower but participants performed significantly above chance, with some partici-pants using smells well. This suggests that smell has poten-tial. Results also showed that some smells were consistently identified and useful, but some were not and highlighted issues with smell delivery devices. We also discuss some practical issues of using smell for interaction. digital photographs, olfaction, searching, smell, tagging",olfoto designing a smell based interaction we present a study into the use of smell for searching digi tal photo collections many people now have large photo libraries on their computers and effective search tools are needed smell has a strong link to memory and emotion so may be a good way to cue recall when searching our study compared text and smell based tagging for the first stage we generated a set of smell and tag names from user de scriptions of photos participants then used these to tag pho tos returning two weeks later to answer questions on their photos results showed that participants could tag effec tively with text labels as this is a common and familiar task performance with smells was lower but participants performed significantly above chance with some partici pants using smells well this suggests that smell has poten tial results also showed that some smells were consistently identified and useful but some were not and highlighted issues with smell delivery devices we also discuss some practical issues of using smell for interaction digital photographs olfaction searching smell tagging,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
551,0,"Perceived Synchronization of Olfactory Multimedia The concept of synchronization is of fundamental importance in multimedia systems and applications. The focus of this this paper is on olfaction-enhanced multimedia, which concerns itself with associating computer-generated smell with other media. However, the lingering nature of smell, as opposed to the transitory nature of other media objects that multimedia applications are accustomed to, such as video and audio, means that specific attention needs to be given when synchronizing other media content with olfactory data. Consequently, this paper presents the results of an experimental study carried out to explore and investigate the temporal boundaries within which olfactory-data output in an olfaction-enhanced multimedia application can be successfully synchronized with other media objects from an end-user perspective. Results show the presence of two main synchronization regions, and that olfaction ahead of audiovisual content is more tolerable than olfaction behind content. chemioception, multimedia computing, synchronisation, olfactory multimedia, synchronization, multimedia system, computer-generated smell, Olfactory, Streaming media, Multimedia systems, Application software, Information systems, Delay, Jitter, Focusing, TV, DVD, Multimedia, olfaction, perceived quality, synchronization",perceived synchronization of olfactory multimedia the concept of synchronization is of fundamental importance in multimedia systems and applications the focus of this this paper is on olfaction enhanced multimedia which concerns itself with associating computer generated smell with other media however the lingering nature of smell as opposed to the transitory nature of other media objects that multimedia applications are accustomed to such as video and audio means that specific attention needs to be given when synchronizing other media content with olfactory data consequently this paper presents the results of an experimental study carried out to explore and investigate the temporal boundaries within which olfactory data output in an olfaction enhanced multimedia application can be successfully synchronized with other media objects from an end user perspective results show the presence of two main synchronization regions and that olfaction ahead of audiovisual content is more tolerable than olfaction behind content chemioception multimedia computing synchronisation olfactory multimedia synchronization multimedia system computer generated smell olfactory streaming media multimedia systems application software information systems delay jitter focusing tv dvd multimedia olfaction perceived quality synchronization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
552,0,"Time away from ``smelling the roses'': Where do mothers raising children with disabilities find the time to work? Using the Australian Time Use survey (TUS), this study examined time allocation among working parents raising children with disabilities. Findings showed that raising children with disabilities reduced the time working mothers had for leisure activities, but increased the time for socializing activities. Consistent with the literature, the latter effect probably reflects the special need of working mothers raising children with disabilities for strong social networks offering regular support. While a mother's time for personal care was reduced by a child with a disability, a father's time for personal care was unaffected. Thus, mothers were relatively more disadvantaged than fathers in terms of total time for themselves. This study offers new knowledge on the impact of childhood disability on working parents' time for personal care and leisure, activities that can improve their psychological and physical well-being. Children with disabilities, Family stress, Gender, Work and family, Time use diaries, Health inequalities, Australia",time away from smelling the roses where do mothers raising children with disabilities find the time to work using the australian time use survey tus this study examined time allocation among working parents raising children with disabilities findings showed that raising children with disabilities reduced the time working mothers had for leisure activities but increased the time for socializing activities consistent with the literature the latter effect probably reflects the special need of working mothers raising children with disabilities for strong social networks offering regular support while a mother s time for personal care was reduced by a child with a disability a father s time for personal care was unaffected thus mothers were relatively more disadvantaged than fathers in terms of total time for themselves this study offers new knowledge on the impact of childhood disability on working parents time for personal care and leisure activities that can improve their psychological and physical well being children with disabilities family stress gender work and family time use diaries health inequalities australia,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
553,0,"Safely Evolving Preprocessor-based Configurable Systems Since the 70s, the C preprocessor is still widely used in practice in a numbers of projects, including Apache, Linux, and Libssh, to tailor systems to different platforms. To better understand the C preprocessor challenges, we conducted 40 interviews and a survey among 202 developers. We found that developers deal with three common problems: configuration-related bugs, combinatorial testing, and code comprehension. To safely evolve preprocessor-based configurable systems, we proposed strategies to detect preprocessor-related bugs and bad smells, and a set of 16 refactorings to remove bad smells. To better deal with exponential configuration spaces, we compared 10 sampling algorithms with respect to effort (i.e., number of configurations to test) and bug-detection capabilities (i.e., number of bugs detected in the sampled configurations). Based on the results, we proposed a sampling algorithm with a useful balance between effort and bug-detection capability. By evaluating the proposed solution using 40 popular projects, we found 131 preprocessor-related bugs and more than 5K opportunities to apply the refactorings in practice. []",safely evolving preprocessor based configurable systems since the 70s the c preprocessor is still widely used in practice in a numbers of projects including apache linux and libssh to tailor systems to different platforms to better understand the c preprocessor challenges we conducted 40 interviews and a survey among 202 developers we found that developers deal with three common problems configuration related bugs combinatorial testing and code comprehension to safely evolve preprocessor based configurable systems we proposed strategies to detect preprocessor related bugs and bad smells and a set of 16 refactorings to remove bad smells to better deal with exponential configuration spaces we compared 10 sampling algorithms with respect to effort i e number of configurations to test and bug detection capabilities i e number of bugs detected in the sampled configurations based on the results we proposed a sampling algorithm with a useful balance between effort and bug detection capability by evaluating the proposed solution using 40 popular projects we found 131 preprocessor related bugs and more than 5k opportunities to apply the refactorings in practice,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
554,0,"Extract Package Refactoring in ARIES Software evolution often leads to the degradation of software design quality. In Object-Oriented (OO) systems, this often results in packages that are hard to understand and maintain, as they group together heterogeneous classes with unrelated responsibilities. In such cases, state-of-the-art re-modularization tools solve the problem by proposing a new organization of the existing classes into packages. However, as indicated by recent empirical studies, such approaches require changing thousands of lines of code to implement the new recommended modularization. In this demo, we present the implementation of an Extract Package refactoring approach in ARIES (Automated Refactoring In EclipSe), a tool supporting refactoring operations in Eclipse. Unlike state-of-the-art approaches, ARIES automatically identifies and removes single low-cohesive packages from software systems, which represent localized design flaws in the package organization, with the aim to incrementally improve the overall quality of the software modularisation. []",extract package refactoring in aries software evolution often leads to the degradation of software design quality in object oriented oo systems this often results in packages that are hard to understand and maintain as they group together heterogeneous classes with unrelated responsibilities in such cases state of the art re modularization tools solve the problem by proposing a new organization of the existing classes into packages however as indicated by recent empirical studies such approaches require changing thousands of lines of code to implement the new recommended modularization in this demo we present the implementation of an extract package refactoring approach in aries automated refactoring in eclipse a tool supporting refactoring operations in eclipse unlike state of the art approaches aries automatically identifies and removes single low cohesive packages from software systems which represent localized design flaws in the package organization with the aim to incrementally improve the overall quality of the software modularisation,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
555,0,"Methodbook: Recommending Move Method Refactorings via Relational Topic Models During software maintenance and evolution the internal structure of the software system undergoes continuous changes. These modifications drift the source code away from its original design, thus deteriorating its quality, including cohesion and coupling of classes. Several refactoring methods have been proposed to overcome this problem. In this paper we propose a novel technique to identify Move Method refactoring opportunities and remove the Feature Envy bad smell from source code. Our approach, coined as Methodbook, is based on relational topic models (RTM), a probabilistic technique for representing and modeling topics, documents (in our case methods) and known relationships among these. Methodbook uses RTM to analyze both structural and textual information gleaned from software to better support move method refactoring. We evaluated Methodbook in two case studies. The first study has been executed on six software systems to analyze if the move method operations suggested by Methodbook help to improve the design quality of the systems as captured by quality metrics. The second study has been conducted with eighty developers that evaluated the refactoring recommendations produced by Methodbook. The achieved results indicate that Methodbook provides accurate and meaningful recommendations for move method refactoring operations. software maintenance, software metrics, source code (software), Methodbook, recommending move method refactorings, relational topic model, software maintenance, source code, modifications drift, quality metrics, software development, Software systems, Couplings, Measurement, Object oriented modeling, Educational institutions, Electronic mail, Refactoring, relational topic models, empirical studies",methodbook recommending move method refactorings via relational topic models during software maintenance and evolution the internal structure of the software system undergoes continuous changes these modifications drift the source code away from its original design thus deteriorating its quality including cohesion and coupling of classes several refactoring methods have been proposed to overcome this problem in this paper we propose a novel technique to identify move method refactoring opportunities and remove the feature envy bad smell from source code our approach coined as methodbook is based on relational topic models rtm a probabilistic technique for representing and modeling topics documents in our case methods and known relationships among these methodbook uses rtm to analyze both structural and textual information gleaned from software to better support move method refactoring we evaluated methodbook in two case studies the first study has been executed on six software systems to analyze if the move method operations suggested by methodbook help to improve the design quality of the systems as captured by quality metrics the second study has been conducted with eighty developers that evaluated the refactoring recommendations produced by methodbook the achieved results indicate that methodbook provides accurate and meaningful recommendations for move method refactoring operations software maintenance software metrics source code software methodbook recommending move method refactorings relational topic model software maintenance source code modifications drift quality metrics software development software systems couplings measurement object oriented modeling educational institutions electronic mail refactoring relational topic models empirical studies,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
556,0,"DroidPill: Pwn Your Daily-Use Apps Nowadays, attacking and defending Android apps has be- come an arms race between black hats and white hats. In this paper, we explore a new hacking technique called the App Confusion Attack, which allows hackers to take full control of benign apps and their resources without device root- ing or privilege escalation. Conceptually, an App Confusion Attack hijacks the launching process of each benign app, and forces it to run in a virtual execution context controlled by hackers, instead of the native one provided by the Android Application Framework. This attack is furtive but lethal. When a user clicks on a benign app, the malicious alternative can be loaded and executed with an indistinguishable user interface. As a result, hackers can manipulate the communication between the benign app and the OS, including kernel and system services, and manipulate the code and data at will. To address this issue, we build DroidPill, a framework for malware creation that employs the app virtualization technique and the design flaws in Android to achieve such attacks with free apps. Our evaluation results and case studies show that DroidPill is practical and effective. Lastly, we conclude this work with several possible countermeasures to the App Confusion Attack. android malware, app confusion attack, app virtualization, mobile system security",droidpill pwn your daily use apps nowadays attacking and defending android apps has be come an arms race between black hats and white hats in this paper we explore a new hacking technique called the app confusion attack which allows hackers to take full control of benign apps and their resources without device root ing or privilege escalation conceptually an app confusion attack hijacks the launching process of each benign app and forces it to run in a virtual execution context controlled by hackers instead of the native one provided by the android application framework this attack is furtive but lethal when a user clicks on a benign app the malicious alternative can be loaded and executed with an indistinguishable user interface as a result hackers can manipulate the communication between the benign app and the os including kernel and system services and manipulate the code and data at will to address this issue we build droidpill a framework for malware creation that employs the app virtualization technique and the design flaws in android to achieve such attacks with free apps our evaluation results and case studies show that droidpill is practical and effective lastly we conclude this work with several possible countermeasures to the app confusion attack android malware app confusion attack app virtualization mobile system security,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
557,0,"A Toolchain for the Detection of Structural and Behavioral Latent System Properties The cost to repair a requirements-based defect in softwarebased systems increases substantially with each successive phase of the software lifecycle in which the error is allowed to propagate. While tools exist to facilitate early detection of design flaws, such tools do not detect flaws in system requirements, thus allowing such flaws to propagate into system design and implementation. This paper describes an experience report using a toolchain that supports a novel combination of structural and behavioral analysis of UML state diagrams that is not currently available in commercial UML modeling tools. With the toolchain, models can be incrementally and systematically improved through syntaxbased analysis, type checking, and detection of latent behavioral system properties, including feature interactions. This paper demonstrates use of the toolchain on an industry-provided model of onboard electronics for an automotive application. UML, latent properties, model checking, requirements engineering",a toolchain for the detection of structural and behavioral latent system properties the cost to repair a requirements based defect in softwarebased systems increases substantially with each successive phase of the software lifecycle in which the error is allowed to propagate while tools exist to facilitate early detection of design flaws such tools do not detect flaws in system requirements thus allowing such flaws to propagate into system design and implementation this paper describes an experience report using a toolchain that supports a novel combination of structural and behavioral analysis of uml state diagrams that is not currently available in commercial uml modeling tools with the toolchain models can be incrementally and systematically improved through syntaxbased analysis type checking and detection of latent behavioral system properties including feature interactions this paper demonstrates use of the toolchain on an industry provided model of onboard electronics for an automotive application uml latent properties model checking requirements engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
558,0,"The `deception' of code smells: An empirical investigation Code smells represent code decay and as such should be eradicated from a system to prevent future maintenance problems. A range of twenty smells described by Fowler and Beck each require varying numbers and combinations of refactorings in order to be eradicated - but exactly how many are needed when we consider related, nested refactorings is unclear. In this paper, we enumerate these refactorings when categorised according to Mantyla's smell taxonomy. We then show how, ironically, the `smelliest' of smells (and hence most difficult to eradicate) are actually those best understood by developers. So, code smells are not only unpleasant to have around but are deceptive in their nature and make-up. The study is thus a warning against attempting what are seemingly easily eradicated smells - these are often the smells the developer needs to be most wary of. chemioception, codes, collections of physical data, testing, code smell, code decay, Mantyla smell taxonomy, maintenance problem, deception, testing, Taxonomy, Switches, Feature extraction, Couplings, Couplers, Surgery, Data mining, Refactoring, OO, Code smell",the deception of code smells an empirical investigation code smells represent code decay and as such should be eradicated from a system to prevent future maintenance problems a range of twenty smells described by fowler and beck each require varying numbers and combinations of refactorings in order to be eradicated but exactly how many are needed when we consider related nested refactorings is unclear in this paper we enumerate these refactorings when categorised according to mantyla s smell taxonomy we then show how ironically the smelliest of smells and hence most difficult to eradicate are actually those best understood by developers so code smells are not only unpleasant to have around but are deceptive in their nature and make up the study is thus a warning against attempting what are seemingly easily eradicated smells these are often the smells the developer needs to be most wary of chemioception codes collections of physical data testing code smell code decay mantyla smell taxonomy maintenance problem deception testing taxonomy switches feature extraction couplings couplers surgery data mining refactoring oo code smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
559,0,"Fasting stress exacerbates classical conditioned histamine release in guinea pigs To clarify the contribution of stress to classical conditioning-associated asthmatic responses, the effect of fasting stress on conditioned histamine release was investigated in a guinea pig model of asthma. The animals were randomly divided into 2 groups for Experiment 1 and 2, and received a conditioning procedure in which ovalbumin (OA) as an unconditioned stimulus (US) and dimethylsulfide (DMS, sulfur smelling) as a conditioned stimulus (CS) were simultaneously inhaled after fasting for 16 h. Then, one group was given food as a reward for respiratory distress, and the other group was denied it for more than 3 h, while being placed in front of the feeding group. After this procedure was repeated 5 times, the plasma histamine levels in response to the CS were measured in half of each group in Experiment 1, and the respiratory resistance (Rrs) was assessed similarly in the other half of each group in Experiment 2. The same experiments were again performed after exchanging assignments of feeding group or fasting group in both experiments. The control groups in both experiments received the CS and the US 10 times separately in a random order under 16 h fasting conditions and were provided food after the exposures. After these pseudo-conditioning presentations, the plasma histamine levels or the Rrs in response to the CS were measured. In Experiment 1, the plasma histamine levels in the fasting stress group after the first conditioning sessions were significantly higher than those of the other groups. This difference was not observed when the groups were exchanged. In Experiment 2, the fasting stress group showed higher values in the Rrs compared to the other groups, irrespective of the first or second conditionings; however, they were not significant. The present study indicates that fasting stress after the conditioning procedures exacerbates the following conditioned histamine release, although the stress effect on bronchoconstriction was not confirmed. Classical conditioning, Histamine, Fasting, Stress, Bronchial asthma, Guinea pig",fasting stress exacerbates classical conditioned histamine release in guinea pigs to clarify the contribution of stress to classical conditioning associated asthmatic responses the effect of fasting stress on conditioned histamine release was investigated in a guinea pig model of asthma the animals were randomly divided into 2 groups for experiment 1 and 2 and received a conditioning procedure in which ovalbumin oa as an unconditioned stimulus us and dimethylsulfide dms sulfur smelling as a conditioned stimulus cs were simultaneously inhaled after fasting for 16 h then one group was given food as a reward for respiratory distress and the other group was denied it for more than 3 h while being placed in front of the feeding group after this procedure was repeated 5 times the plasma histamine levels in response to the cs were measured in half of each group in experiment 1 and the respiratory resistance rrs was assessed similarly in the other half of each group in experiment 2 the same experiments were again performed after exchanging assignments of feeding group or fasting group in both experiments the control groups in both experiments received the cs and the us 10 times separately in a random order under 16 h fasting conditions and were provided food after the exposures after these pseudo conditioning presentations the plasma histamine levels or the rrs in response to the cs were measured in experiment 1 the plasma histamine levels in the fasting stress group after the first conditioning sessions were significantly higher than those of the other groups this difference was not observed when the groups were exchanged in experiment 2 the fasting stress group showed higher values in the rrs compared to the other groups irrespective of the first or second conditionings however they were not significant the present study indicates that fasting stress after the conditioning procedures exacerbates the following conditioned histamine release although the stress effect on bronchoconstriction was not confirmed classical conditioning histamine fasting stress bronchial asthma guinea pig,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
560,0,"Probabilistic model checking for comparative analysis of automated air traffic control systems Ensuring aircraft stay safely separated is the primary consideration in air traffic control. To achieve the required level of assurance for this safety-critical application, the Automated Airspace Concept (AAC) proposes a network of components providing multiple levels of separation assurance, including conflict detection and resolution. In our previous work, we conducted a formal study of this concept including specification, validation, and verification utilizing the NuSMV and CadenceSMV model checkers to ensure there are no potentially catastrophic design flaws remaining in the AAC design before the next stage of production. In this paper, we extend that work to include probabilistic model checking of the AAC system.1 We are motivated by the system designers requirement to compare different design options to optimize the functional allocation of the AAC components. Probabilistic model checking provides quantitative measures for evaluating different design options, helping system designers to understand the impact of parameters in the model on a given critical safety requirement. We detail our approach to modeling and probabilistically analyzing this complex system consisting of a real-time algorithm, a logic protocol, and human factors. We utilize both Discrete Time Markov Chain (DTMC) and Continuous Time Markov Chain (CTMC) models to capture the important behaviors in the AAC components. The separation assurance algorithms, which are defined over specific time ranges, are modeled using a DTMC. The emergence of conflicts in an airspace sector and the reaction times of pilots, which can be simplified as Markov processes on continuous time, are modeled as a CTMC. Utilizing these two models, we calculate the probability of an unresolved conflict as a measure of safety and compare multiple design options. aerospace computing, air safety, air traffic control, continuous time systems, discrete time systems, formal verification, Markov processes, probability, probabilistic model checking, comparative analysis, automated air traffic control systems, safety-critical application, automated airspace concept, conflict detection and resolution, NuSMV, CadenceSMV model checker, catastrophic design flaw, AAC design, AAC system, system designer, functional allocation, AAC component, design option, critical safety requirement, real-time algorithm, logic protocol, human factor, discrete time Markov chain, DTMC, continuous time Markov chain model, CTMC model, separation assurance algorithm, airspace sector, Markov process, probability, Atmospheric modeling, Probabilistic logic, Aircraft, Analytical models, Safety, Probability, Model checking",probabilistic model checking for comparative analysis of automated air traffic control systems ensuring aircraft stay safely separated is the primary consideration in air traffic control to achieve the required level of assurance for this safety critical application the automated airspace concept aac proposes a network of components providing multiple levels of separation assurance including conflict detection and resolution in our previous work we conducted a formal study of this concept including specification validation and verification utilizing the nusmv and cadencesmv model checkers to ensure there are no potentially catastrophic design flaws remaining in the aac design before the next stage of production in this paper we extend that work to include probabilistic model checking of the aac system 1 we are motivated by the system designers requirement to compare different design options to optimize the functional allocation of the aac components probabilistic model checking provides quantitative measures for evaluating different design options helping system designers to understand the impact of parameters in the model on a given critical safety requirement we detail our approach to modeling and probabilistically analyzing this complex system consisting of a real time algorithm a logic protocol and human factors we utilize both discrete time markov chain dtmc and continuous time markov chain ctmc models to capture the important behaviors in the aac components the separation assurance algorithms which are defined over specific time ranges are modeled using a dtmc the emergence of conflicts in an airspace sector and the reaction times of pilots which can be simplified as markov processes on continuous time are modeled as a ctmc utilizing these two models we calculate the probability of an unresolved conflict as a measure of safety and compare multiple design options aerospace computing air safety air traffic control continuous time systems discrete time systems formal verification markov processes probability probabilistic model checking comparative analysis automated air traffic control systems safety critical application automated airspace concept conflict detection and resolution nusmv cadencesmv model checker catastrophic design flaw aac design aac system system designer functional allocation aac component design option critical safety requirement real time algorithm logic protocol human factor discrete time markov chain dtmc continuous time markov chain model ctmc model separation assurance algorithm airspace sector markov process probability atmospheric modeling probabilistic logic aircraft analytical models safety probability model checking,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
561,0,"Artificial Odor Discrimination System Using Electronic Nose and Neural Networks for the Identification of Urinary Tract Infection Current clinical diagnostics are based on biochemical, immunological, or microbiological methods. However, these methods are operator dependent, time-consuming, expensive, and require special skills, and are therefore, not suitable for point-of-care testing. Recent developments in gas-sensing technology and pattern recognition methods make electronic nose technology an interesting alternative for medical point-of-care devices. An electronic nose has been used to detect urinary tract infection from 45 suspected cases that were sent for analysis in a U.K. Public Health Registry. These samples were analyzed by incubation in a volatile generation test tube system for 4-5 h. Two issues are being addressed, including the implementation of an advanced neural network, based on a modified expectation maximization scheme that incorporates a dynamic structure methodology and the concept of a fusion of multiple classifiers dedicated to specific feature parameters. This study has shown the potential for early detection of microbial contaminants in urine samples using electronic nose technology. biochemistry, chemical analysis, diseases, expectation-maximisation algorithm, medical computing, medical signal detection, microorganisms, neural nets, patient diagnosis, pattern recognition, somatosensory phenomena, artificial odor discrimination, neural networks, urinary tract infection, gas sensing technology, pattern recognition method, electronic nose technology, UK Public Health Registry, test tube system, expectation maximization scheme, dynamic structure methodology, microbial contaminants, time 4 hr to 5 hr, Electronic noses, Artificial neural networks, Humans, Diseases, Sensor arrays, Medical diagnostic imaging, Microorganisms, Costs, Instruments, Delay, Electronic nose, microbial analysis, multiple classifiers, neural networks (NNs), Neural networks, multiple classifiers, electronic nose, microbial analysis, Algorithms, Artificial Intelligence, Diagnostic Techniques, Urological, Electronics, Medical, Fuzzy Logic, Humans, Neural Networks (Computer), Odors, Point-of-Care Systems, Robotics, Robotics, Smell, Urinary Tract Infections, Urinary Tract Infections, Urine, Volatile Organic Compounds, Volatile Organic Compounds",artificial odor discrimination system using electronic nose and neural networks for the identification of urinary tract infection current clinical diagnostics are based on biochemical immunological or microbiological methods however these methods are operator dependent time consuming expensive and require special skills and are therefore not suitable for point of care testing recent developments in gas sensing technology and pattern recognition methods make electronic nose technology an interesting alternative for medical point of care devices an electronic nose has been used to detect urinary tract infection from 45 suspected cases that were sent for analysis in a u k public health registry these samples were analyzed by incubation in a volatile generation test tube system for 4 5 h two issues are being addressed including the implementation of an advanced neural network based on a modified expectation maximization scheme that incorporates a dynamic structure methodology and the concept of a fusion of multiple classifiers dedicated to specific feature parameters this study has shown the potential for early detection of microbial contaminants in urine samples using electronic nose technology biochemistry chemical analysis diseases expectation maximisation algorithm medical computing medical signal detection microorganisms neural nets patient diagnosis pattern recognition somatosensory phenomena artificial odor discrimination neural networks urinary tract infection gas sensing technology pattern recognition method electronic nose technology uk public health registry test tube system expectation maximization scheme dynamic structure methodology microbial contaminants time 4 hr to 5 hr electronic noses artificial neural networks humans diseases sensor arrays medical diagnostic imaging microorganisms costs instruments delay electronic nose microbial analysis multiple classifiers neural networks nns neural networks multiple classifiers electronic nose microbial analysis algorithms artificial intelligence diagnostic techniques urological electronics medical fuzzy logic humans neural networks computer odors point of care systems robotics robotics smell urinary tract infections urinary tract infections urine volatile organic compounds volatile organic compounds,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
562,0,"Survey-Defined Patient Experiences With Aspirin-Exacerbated Respiratory Disease Background Aspirin-exacerbated respiratory disease (AERD) is a chronic illness of progressive recurrent sinus disease with nasal polyps and asthma. No population-based comprehensive surveys of patients with AERD have been carried out to assess specific quality-of-life impact or perceptions of treatment benefit. Objective This survey analyzed perceptions and quality of life in those living with AERD and queried patient observations of treatment effectiveness. The survey assessed whether dietary and nutritional support was used to manage AERD, and if so, whether there was a perceived benefit. Methods This survey was publicized through clinics that treat patients with AERD, Web sites, and online blogs. Results Results are reported for 190 patients. Most subjects reported an adverse effect of AERD on quality of life. Chronic nasal symptoms followed by decreased sense of smell were reported to have the greatest impact on quality of life---in 81 (43%) and 74 (39%), respectively. Those who lost their ability to smell (n = 65; 34%) reported that they missed the enjoyment of food and eating the most. A minority indicated that a combination of medications (aspirin, leukotriene receptor antagonist, zileuton, or omalizumab) was more effective than 1 alone. Of those surveyed, 120 (63%) respondents felt that components of their diet contributed to their disease and 147 (77%) respondents reported having reactions after alcohol consumption. Conclusions Patients with AERD live with frustration and report a poor quality of life in spite of several pharmacologic treatments including aspirin desensitization followed by daily aspirin. Despite ongoing medical therapy, the burden of disease in AERD remains high. Aspirin-exacerbated respiratory disease, Aspirin-induced asthma, Desensitization, Survey, Quality of life",survey defined patient experiences with aspirin exacerbated respiratory disease background aspirin exacerbated respiratory disease aerd is a chronic illness of progressive recurrent sinus disease with nasal polyps and asthma no population based comprehensive surveys of patients with aerd have been carried out to assess specific quality of life impact or perceptions of treatment benefit objective this survey analyzed perceptions and quality of life in those living with aerd and queried patient observations of treatment effectiveness the survey assessed whether dietary and nutritional support was used to manage aerd and if so whether there was a perceived benefit methods this survey was publicized through clinics that treat patients with aerd web sites and online blogs results results are reported for 190 patients most subjects reported an adverse effect of aerd on quality of life chronic nasal symptoms followed by decreased sense of smell were reported to have the greatest impact on quality of life in 81 43 and 74 39 respectively those who lost their ability to smell n 65 34 reported that they missed the enjoyment of food and eating the most a minority indicated that a combination of medications aspirin leukotriene receptor antagonist zileuton or omalizumab was more effective than 1 alone of those surveyed 120 63 respondents felt that components of their diet contributed to their disease and 147 77 respondents reported having reactions after alcohol consumption conclusions patients with aerd live with frustration and report a poor quality of life in spite of several pharmacologic treatments including aspirin desensitization followed by daily aspirin despite ongoing medical therapy the burden of disease in aerd remains high aspirin exacerbated respiratory disease aspirin induced asthma desensitization survey quality of life,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
563,0,"Visual recognition of conspecifics in the American lobster, Homarus americanus For years, individual recognition has been the subject of many studies but, owing to the intrinsic complexity of the phenomenon, it has also been the source of much controversy. The sensory channel(s) used for recognition has also been much discussed. In aquatic invertebrates, vision has been one of the least understood media. We carried out two laboratory experiments using 49 pairs of adult male American lobsters. The first experiment was aimed at investigating the sensory channel/s (smell, sight or the two combined) used by lobsters to get information about the opponent, whereas in the second experiment we tested whether visual experience might allow lobsters to recognize the familiar opponent. Previous exposure to the sight of a conspecific induced lobsters either to avoid the opponent or to skip preliminaries (approaches and threats) and escalate the interaction. However, such changes in the dynamics of fighting were shown only when the opponent was the individual that the experimental lobster had previously seen rather than a generic lobster. This is the first study to provide evidence that lobsters can identify familiar conspecifics by sight, although this does not necessarily mean that they recognize them as individuals. Further studies are needed to clarify this issue. aggressive behaviour, , individual recognition, lobster, sight",visual recognition of conspecifics in the american lobster homarus americanus for years individual recognition has been the subject of many studies but owing to the intrinsic complexity of the phenomenon it has also been the source of much controversy the sensory channel s used for recognition has also been much discussed in aquatic invertebrates vision has been one of the least understood media we carried out two laboratory experiments using 49 pairs of adult male american lobsters the first experiment was aimed at investigating the sensory channel s smell sight or the two combined used by lobsters to get information about the opponent whereas in the second experiment we tested whether visual experience might allow lobsters to recognize the familiar opponent previous exposure to the sight of a conspecific induced lobsters either to avoid the opponent or to skip preliminaries approaches and threats and escalate the interaction however such changes in the dynamics of fighting were shown only when the opponent was the individual that the experimental lobster had previously seen rather than a generic lobster this is the first study to provide evidence that lobsters can identify familiar conspecifics by sight although this does not necessarily mean that they recognize them as individuals further studies are needed to clarify this issue aggressive behaviour individual recognition lobster sight,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
564,0,"The Backbone Project (Abstract Only) It is well-known that software maintenance is an arduous task. It is particularly so because of poor design decisions made by software engineers during the development phase. Past research has shown that there are smells in the code that can be used to gauge the quality of the project. Nevertheless, code maintenance due to these research tools is still costly because they are focused on curative solutions rather than preventive measures. Majority of the past research techniques detect code smells after the fact; and the classification of code changes rely on the commit messages written by the developers. However, developers do not always mention the necessary meta-data to determine the changes. The goal of my research is to find a set of design and implementation change categories using abstract syntax trees from the code rather than the commit messages. The categories will help classify the common changes in software projects and identify the resulting unstable regions. A rule-based system will be developed using these regions to recommend the potential improvements required to stabilize the code-base. The result of my research will contribute a toolset that will be used from the start of the development phase to evaluate the stability of the system using software metrics and recommend improvements. This will help project managers mitigate the design and implementation flaws early on during the product life-cycle and reduce the cost during the maintenance phase. Hence, the toolset will have the potential to change the software maintenance paradigm from corrective to preventative measures. software maintenance, software metrics",the backbone project abstract only it is well known that software maintenance is an arduous task it is particularly so because of poor design decisions made by software engineers during the development phase past research has shown that there are smells in the code that can be used to gauge the quality of the project nevertheless code maintenance due to these research tools is still costly because they are focused on curative solutions rather than preventive measures majority of the past research techniques detect code smells after the fact and the classification of code changes rely on the commit messages written by the developers however developers do not always mention the necessary meta data to determine the changes the goal of my research is to find a set of design and implementation change categories using abstract syntax trees from the code rather than the commit messages the categories will help classify the common changes in software projects and identify the resulting unstable regions a rule based system will be developed using these regions to recommend the potential improvements required to stabilize the code base the result of my research will contribute a toolset that will be used from the start of the development phase to evaluate the stability of the system using software metrics and recommend improvements this will help project managers mitigate the design and implementation flaws early on during the product life cycle and reduce the cost during the maintenance phase hence the toolset will have the potential to change the software maintenance paradigm from corrective to preventative measures software maintenance software metrics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
565,0,"Mars mission program for primary students: Building student and teacher skills in science, technology, engineering and mathematics The Victorian Space Science Education Centre (VSSEC) scenario-based programs, including the Mission to Mars and Mission to the Orbiting Space Laboratory, utilize methodologies such as hands-on applications, immersive learning, integrated technologies, critical thinking and mentoring. The use of a scenario provides a real-life context and purpose to what students might otherwise consider disjointed information. These programs engage students in the areas of maths and science, and highlight potential career paths in science and engineering. The introduction of a scenario-based program for primary students engages students in maths and science at a younger age, addressing the issues of basic numeracy and science literacy, thus laying the foundation for stronger senior science initiatives. Primary students absorb more information within the context of the scenario, and presenting information they can see, hear, touch and smell creates a memorable learning and sensory experience. The mission also supports development of teacher skills in the delivery of hands-on science and helps build their confidence to teach science. The Primary Mission to the Mars Base gives primary school students access to an environment and equipment not available in schools. Students wear flight suits for the duration of the program to immerse them in the experience of being an astronaut. Astronauts work in the VSSEC Space Laboratory, which is transformed into a Mars base for the primary program, to conduct experiments in areas such as robotics, human physiology, microbiology, nanotechnology and environmental science. Specialist mission control software has been developed by La Trobe University Centre for Games Technology to provide age appropriate Information and Communication Technology (ICT) based problem solving and support the concept of a mission. Students in Mission Control observe the astronauts working in the space laboratory and talk to them via the AV system. This interactive environment promotes high order thinking skills such as problem solving, team work, communication skills and leadership. To promote the teaching of science in the classroom, and prepare the students for their mission, the program includes a pre-visit program. These classroom-based lessons model best practice in effective science teaching and learning to support the development of confident primary science teachers. Education, Engagement, Scenario-based learning, Games technology, Space mission simulation",mars mission program for primary students building student and teacher skills in science technology engineering and mathematics the victorian space science education centre vssec scenario based programs including the mission to mars and mission to the orbiting space laboratory utilize methodologies such as hands on applications immersive learning integrated technologies critical thinking and mentoring the use of a scenario provides a real life context and purpose to what students might otherwise consider disjointed information these programs engage students in the areas of maths and science and highlight potential career paths in science and engineering the introduction of a scenario based program for primary students engages students in maths and science at a younger age addressing the issues of basic numeracy and science literacy thus laying the foundation for stronger senior science initiatives primary students absorb more information within the context of the scenario and presenting information they can see hear touch and smell creates a memorable learning and sensory experience the mission also supports development of teacher skills in the delivery of hands on science and helps build their confidence to teach science the primary mission to the mars base gives primary school students access to an environment and equipment not available in schools students wear flight suits for the duration of the program to immerse them in the experience of being an astronaut astronauts work in the vssec space laboratory which is transformed into a mars base for the primary program to conduct experiments in areas such as robotics human physiology microbiology nanotechnology and environmental science specialist mission control software has been developed by la trobe university centre for games technology to provide age appropriate information and communication technology ict based problem solving and support the concept of a mission students in mission control observe the astronauts working in the space laboratory and talk to them via the av system this interactive environment promotes high order thinking skills such as problem solving team work communication skills and leadership to promote the teaching of science in the classroom and prepare the students for their mission the program includes a pre visit program these classroom based lessons model best practice in effective science teaching and learning to support the development of confident primary science teachers education engagement scenario based learning games technology space mission simulation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
566,0,"Testing and validating activity models for network intrusion detection Models and modelling are effective approaches to describe events or activities of systems or environment. An error or design flaw in the models can cause failures in applications utilizing these models. Therefore, an effective testing and validation approach is required for identifying possible errors and misunderstandings. This paper proposes a process for testing and validating intrusion models used in network intrusion detection. The process can be integrated as part of the intrusion model development process with proper tool support. This will help to identify possible errors in the intrusion model as early as possible. The contribution is to apply well-known aspects from software testing and implement them in the intrusion model testing and validation. The experimental implementation of the proposed process will concentrate on testing intrusion models focusing on detecting port scan attacks. This experiment will indicate that when the testing and validation is part of the intrusion model development process, the intrusion model developer receives immediate feedback and can quickly refine the intrusion model. This increases the confidence of the intrusion model and errors and design misunderstandings are located effectively. computer network security, program testing, activity model testing, activity model validation, network intrusion detection, intrusion model testing, intrusion model validation, intrusion model development process, software testing, port scan attack detection, Testing, Intrusion model, testing, validation, network intrusion detection",testing and validating activity models for network intrusion detection models and modelling are effective approaches to describe events or activities of systems or environment an error or design flaw in the models can cause failures in applications utilizing these models therefore an effective testing and validation approach is required for identifying possible errors and misunderstandings this paper proposes a process for testing and validating intrusion models used in network intrusion detection the process can be integrated as part of the intrusion model development process with proper tool support this will help to identify possible errors in the intrusion model as early as possible the contribution is to apply well known aspects from software testing and implement them in the intrusion model testing and validation the experimental implementation of the proposed process will concentrate on testing intrusion models focusing on detecting port scan attacks this experiment will indicate that when the testing and validation is part of the intrusion model development process the intrusion model developer receives immediate feedback and can quickly refine the intrusion model this increases the confidence of the intrusion model and errors and design misunderstandings are located effectively computer network security program testing activity model testing activity model validation network intrusion detection intrusion model testing intrusion model validation intrusion model development process software testing port scan attack detection testing intrusion model testing validation network intrusion detection,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
567,0,"Stimuli inducing gregarious colouration and behaviour in nymphs of Schistocerca gregaria Solitarious nymphs of Schistocerca gregaria were reared under various conditions in both Jerusalem and Oxford to tease apart cues involved in behavioural and colour phase change. Treatments included rearing nymphs from the IInd or IIIrd until the final nymphal stadium in physical contact with similarly aged conspecific groups or with another locust species, Locusta migratoria migratorioides, as well as confining single nymphs in mesh cages, which were kept within crowds of S. gregaria or L. migratoria migratorioides, providing visual and olfactory but no physical contact with other locusts. In the Oxford experiments, an extra treatment was included which provided olfactory cues without visual or contact stimulation. Our results confirm that transformation from the solitarious to the gregarious phase of locusts is complex, and that different phase characteristics not only follow different time courses, but are also controlled by different suites of cues. As predicted from earlier studies, behavioural phase change was evoked by non-species-specific cues. Rearing in contact with either species was fully effective in inducing gregarious behaviour, as was the combination of the sight and smell of other locusts, but odour alone was ineffective. Colour phase change was shown to comprise two distinct elements that could be dissociated: black patterning and yellow background. The former of these could be induced as effectively by rearing S. gregaria nymphs in a crowd of L. migratoria migratorioides as by rearing with conspecifics. Sight and smell of other locusts also triggered black patterning and, unlike behavioural change, some black patterning was induced by odour cues alone. Hence, physical contact was not needed to induce gregarious black patterning. Yellow colouration, however, was only fully induced when locusts were reared in contact with conspecifics, implying the presence of a species-specific contact chemical cue. Locust phases, Phase colour polymorphism, Gregarious colour, Gregarious behaviour, Stimuli, ,",stimuli inducing gregarious colouration and behaviour in nymphs of schistocerca gregaria solitarious nymphs of schistocerca gregaria were reared under various conditions in both jerusalem and oxford to tease apart cues involved in behavioural and colour phase change treatments included rearing nymphs from the iind or iiird until the final nymphal stadium in physical contact with similarly aged conspecific groups or with another locust species locusta migratoria migratorioides as well as confining single nymphs in mesh cages which were kept within crowds of s gregaria or l migratoria migratorioides providing visual and olfactory but no physical contact with other locusts in the oxford experiments an extra treatment was included which provided olfactory cues without visual or contact stimulation our results confirm that transformation from the solitarious to the gregarious phase of locusts is complex and that different phase characteristics not only follow different time courses but are also controlled by different suites of cues as predicted from earlier studies behavioural phase change was evoked by non species specific cues rearing in contact with either species was fully effective in inducing gregarious behaviour as was the combination of the sight and smell of other locusts but odour alone was ineffective colour phase change was shown to comprise two distinct elements that could be dissociated black patterning and yellow background the former of these could be induced as effectively by rearing s gregaria nymphs in a crowd of l migratoria migratorioides as by rearing with conspecifics sight and smell of other locusts also triggered black patterning and unlike behavioural change some black patterning was induced by odour cues alone hence physical contact was not needed to induce gregarious black patterning yellow colouration however was only fully induced when locusts were reared in contact with conspecifics implying the presence of a species specific contact chemical cue locust phases phase colour polymorphism gregarious colour gregarious behaviour stimuli,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
568,0,"Chatty, Happy, and Smelly Maps Mapping apps are the greatest game-changer for encouraging people to explore the city. You take your phone out and you know immediately where to go. However, the app also assumes there are only a handful of directions to the destination. It has the power to make those handful of directions the definitive direction to that destination. A few years ago, my research started to focus on understanding how people psychologically experience the city. I used computer science tools to replicate social science experiments at scale, at web scale [4,5]. I became captivated by the beauty and genius of traditional social science experiments done by Jane Jacobs, Stanley Milgram, Kevin Lynch[1,2,3]. The result of that research has been the creation of new maps, maps where one does not only find the shortest path but also the most enjoyable path [6,9]. We did so by building a new city map weighted for human emotions. On this cartography, one is not only able to see and connect from point A to point B the shortest segments, but one is also able to see the happy path, the beautiful path, the quiet path. In tests, participants found the happy, the beautiful, the quiet paths far more enjoyable than the shortest one, and that just by adding a few minutes to travel time. Participants also recalled how some paths smelled and sounded. So what if we had a mapping tool that would return the most enjoyable routes based not only on aesthetics but also based on smell and sound? That is the research question this talk will start to address [7,8]. social media, urban informatics, web science",chatty happy and smelly maps mapping apps are the greatest game changer for encouraging people to explore the city you take your phone out and you know immediately where to go however the app also assumes there are only a handful of directions to the destination it has the power to make those handful of directions the definitive direction to that destination a few years ago my research started to focus on understanding how people psychologically experience the city i used computer science tools to replicate social science experiments at scale at web scale 4 5 i became captivated by the beauty and genius of traditional social science experiments done by jane jacobs stanley milgram kevin lynch 1 2 3 the result of that research has been the creation of new maps maps where one does not only find the shortest path but also the most enjoyable path 6 9 we did so by building a new city map weighted for human emotions on this cartography one is not only able to see and connect from point a to point b the shortest segments but one is also able to see the happy path the beautiful path the quiet path in tests participants found the happy the beautiful the quiet paths far more enjoyable than the shortest one and that just by adding a few minutes to travel time participants also recalled how some paths smelled and sounded so what if we had a mapping tool that would return the most enjoyable routes based not only on aesthetics but also based on smell and sound that is the research question this talk will start to address 7 8 social media urban informatics web science,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
569,0,"Test-driven Evaluation of Linked Data Quality Linked Open Data (LOD) comprises an unprecedented volume of structured data on the Web. However, these datasets are of varying quality ranging from extensively curated datasets to crowdsourced or extracted data of often relatively low quality. We present a methodology for test-driven quality assessment of Linked Data, which is inspired by test-driven software development. We argue that vocabularies, ontologies and knowledge bases should be accompanied by a number of test cases, which help to ensure a basic level of quality. We present a methodology for assessing the quality of linked data resources, based on a formalization of bad smells and data quality problems. Our formalization employs SPARQL query templates, which are instantiated into concrete quality test case queries. Based on an extensive survey, we compile a comprehensive library of data quality test case patterns. We perform automatic test case instantiation based on schema constraints or semi-automatically enriched schemata and allow the user to generate specific test case instantiations that are applicable to a schema or dataset. We provide an extensive evaluation of five LOD datasets, manual test case instantiation for five schemas and automatic test case instantiations for all available schemata registered with Linked Open Vocabularies (LOV). One of the main advantages of our approach is that domain specific semantics can be encoded in the data quality test cases, thus being able to discover data quality problems beyond conventional quality heuristics. data quality, dbpedia, linked data",test driven evaluation of linked data quality linked open data lod comprises an unprecedented volume of structured data on the web however these datasets are of varying quality ranging from extensively curated datasets to crowdsourced or extracted data of often relatively low quality we present a methodology for test driven quality assessment of linked data which is inspired by test driven software development we argue that vocabularies ontologies and knowledge bases should be accompanied by a number of test cases which help to ensure a basic level of quality we present a methodology for assessing the quality of linked data resources based on a formalization of bad smells and data quality problems our formalization employs sparql query templates which are instantiated into concrete quality test case queries based on an extensive survey we compile a comprehensive library of data quality test case patterns we perform automatic test case instantiation based on schema constraints or semi automatically enriched schemata and allow the user to generate specific test case instantiations that are applicable to a schema or dataset we provide an extensive evaluation of five lod datasets manual test case instantiation for five schemas and automatic test case instantiations for all available schemata registered with linked open vocabularies lov one of the main advantages of our approach is that domain specific semantics can be encoded in the data quality test cases thus being able to discover data quality problems beyond conventional quality heuristics data quality dbpedia linked data,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
570,0,"Assessing the relationship between concentrations of malodor compounds and odor scores from judges ABSTRACT Background The purpose of this review was to assess the relationship between mean organoleptic scores (using a 0-to-5 scale) and concentrations of putative odorants representative of those thought to be important in oral malodor, as well as to propose a simple model that explains the dose-response curves obtained from a group of odor judges. Methods The model assumes that the scale is rooted at the detection threshold (0), the maximum score (5) is fully saturating and the brain and olfactory nervous system can act as a faithful transducer of the state of binding (occupancy) of the smell receptors in the nose. The authors predicted that the response would be exponential or sigmoidal in nature. They tested this using published empirical data based on seven odor judges and eight odor compounds. Results Analysis of the data by different plotting methods showed the odorants to be significantly different from each other (P < .01 by regression analysis) with regard to thresholds and slopes. The lower the threshold, the stronger the inherent odor of the compound. The greater the slope, the greater the odor power. Volatile sulfur compounds had low smell thresholds and high odor power and were highly volatile, while indole was less volatile but had a very low threshold. Both compounds may be significant in human oral malodor. Conclusions The authors found that the organoleptic scale was exponential in practice. These findings imply that when inhibitory agents are tested against odor-generating bacteria, a given percentage inhibition of the volatile compound production rate by a treatment (such as an antimicrobial mouthwash) will result in an equal incremental reduction on the scale, regardless of the starting position on the scale. Understanding the scale enables dental professionals to develop better ways of training, calibrating and standardizing odor judges, along with better ways of designing clinical trials and interpreting data regarding the efficacy of antiodor treatments. Oral malodor model, organoleptic intensity scale, volatile compounds, odor judges",assessing the relationship between concentrations of malodor compounds and odor scores from judges abstract background the purpose of this review was to assess the relationship between mean organoleptic scores using a 0 to 5 scale and concentrations of putative odorants representative of those thought to be important in oral malodor as well as to propose a simple model that explains the dose response curves obtained from a group of odor judges methods the model assumes that the scale is rooted at the detection threshold 0 the maximum score 5 is fully saturating and the brain and olfactory nervous system can act as a faithful transducer of the state of binding occupancy of the smell receptors in the nose the authors predicted that the response would be exponential or sigmoidal in nature they tested this using published empirical data based on seven odor judges and eight odor compounds results analysis of the data by different plotting methods showed the odorants to be significantly different from each other p 01 by regression analysis with regard to thresholds and slopes the lower the threshold the stronger the inherent odor of the compound the greater the slope the greater the odor power volatile sulfur compounds had low smell thresholds and high odor power and were highly volatile while indole was less volatile but had a very low threshold both compounds may be significant in human oral malodor conclusions the authors found that the organoleptic scale was exponential in practice these findings imply that when inhibitory agents are tested against odor generating bacteria a given percentage inhibition of the volatile compound production rate by a treatment such as an antimicrobial mouthwash will result in an equal incremental reduction on the scale regardless of the starting position on the scale understanding the scale enables dental professionals to develop better ways of training calibrating and standardizing odor judges along with better ways of designing clinical trials and interpreting data regarding the efficacy of antiodor treatments oral malodor model organoleptic intensity scale volatile compounds odor judges,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
571,0,"Safety hazard and time to recall: The role of recall strategy, product defect type, and supply chain player in the U.S. toy industry This research identifies and tests key factors that can be associated with time to recall a product. Product recalls due to safety hazards entail societal costs, such as property damage, injury, and sometimes death. For firms, the related external failure costs are many, including the costs of recalling the product, providing a remedy, meeting the legal liability, and repairing damage to the firm's reputation. The recent spate of product recalls has shifted attention from why products are recalled to why it takes so long to recall a defective product that poses a safety hazard. To address this, our research subjects to empirical scrutiny the time to recall and its relationship with recall strategies, source of the defect and supply chain position of the recalling firm. We develop and verify our conceptual arguments in the U.S. toy industry by analyzing over 500 product recalls during a 15-year period (1993--2008). The empirical results indicate that the time to recall, as measured by difference between product recall announcement date and product first sold date, is associated with (1) the recall strategy (preventive vs. reactive) adopted by the firm, (2) the type of product defect (manufacturing defect vs. design flaw), and (3) the supply chain entity that issues the recall (toy company vs. distributor vs. retailer). Our results provide cues that could trigger a firm's recognition of factors that increase the time to recall. External failure costs, Safety hazard, Product recalls, Toy industry",safety hazard and time to recall the role of recall strategy product defect type and supply chain player in the u s toy industry this research identifies and tests key factors that can be associated with time to recall a product product recalls due to safety hazards entail societal costs such as property damage injury and sometimes death for firms the related external failure costs are many including the costs of recalling the product providing a remedy meeting the legal liability and repairing damage to the firm s reputation the recent spate of product recalls has shifted attention from why products are recalled to why it takes so long to recall a defective product that poses a safety hazard to address this our research subjects to empirical scrutiny the time to recall and its relationship with recall strategies source of the defect and supply chain position of the recalling firm we develop and verify our conceptual arguments in the u s toy industry by analyzing over 500 product recalls during a 15 year period 1993 2008 the empirical results indicate that the time to recall as measured by difference between product recall announcement date and product first sold date is associated with 1 the recall strategy preventive vs reactive adopted by the firm 2 the type of product defect manufacturing defect vs design flaw and 3 the supply chain entity that issues the recall toy company vs distributor vs retailer our results provide cues that could trigger a firm s recognition of factors that increase the time to recall external failure costs safety hazard product recalls toy industry,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
572,0,"Automated Requirements Analysis for a Molecular Watchdog Timer Dynamic systems in DNA nanotechnology are often programmed using a chemical reaction network (CRN) model as an intermediate level of abstraction. In this paper, we design and analyze a CRN model of a watchdog timer, a device commonly used to monitor the health of a safety critical system. Our process uses incremental design practices with goal-oriented requirements engineering, software verification tools, and custom software to help automate the software engineering process. The watchdog timer is comprised of three components: an absence detector, a threshold filter, and a signal amplifier. These components are separately designed and verified, and only then composed to create the molecular watchdog timer. During the requirements-design iterations, simulation, model checking, and analysis are used to verify the system. Using this methodology several incomplete requirements and design flaws were found, and the final verified model helped determine specific parameters for biological experiments. chemical reaction networks, molecular programming, probabilistic model checking, requirements engineering",automated requirements analysis for a molecular watchdog timer dynamic systems in dna nanotechnology are often programmed using a chemical reaction network crn model as an intermediate level of abstraction in this paper we design and analyze a crn model of a watchdog timer a device commonly used to monitor the health of a safety critical system our process uses incremental design practices with goal oriented requirements engineering software verification tools and custom software to help automate the software engineering process the watchdog timer is comprised of three components an absence detector a threshold filter and a signal amplifier these components are separately designed and verified and only then composed to create the molecular watchdog timer during the requirements design iterations simulation model checking and analysis are used to verify the system using this methodology several incomplete requirements and design flaws were found and the final verified model helped determine specific parameters for biological experiments chemical reaction networks molecular programming probabilistic model checking requirements engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
573,0,"Textual Analysis for Code Smell Detection The negative impact of smells on the quality of a software systems has been empirical investigated in several studies. This has recalled the need to have approaches for the identification and the removal of smells. While approaches to remove smells have investigated the use of both structural and conceptual information extracted from source code, approaches to identify smells are based on structural information only. In this paper, we bridge the gap analyzing to what extent conceptual information, extracted using textual analysis techniques, can be used to identify smells in source code. The proposed textual-based approach for detecting smells in source code, coined as TACO (Textual Analysis for Code smell detectiOn), has been instantiated for detecting the Long Method smell and has been evaluated on three Java open source projects. The results indicate that TACO is able to detect between 50% and 77% of the smell instances with a precision ranging between 63% and 67%. In addition, the results show that TACO identifies smells that are not identified by approaches based on solely structural information. information retrieval, Java, software systems, structural information, textual analysis techniques, TACO, textual analysis for code smell detection, long method smell, Java open source projects, Software engineering, Conferences, Accuracy, Data mining, Software systems, Societies",textual analysis for code smell detection the negative impact of smells on the quality of a software systems has been empirical investigated in several studies this has recalled the need to have approaches for the identification and the removal of smells while approaches to remove smells have investigated the use of both structural and conceptual information extracted from source code approaches to identify smells are based on structural information only in this paper we bridge the gap analyzing to what extent conceptual information extracted using textual analysis techniques can be used to identify smells in source code the proposed textual based approach for detecting smells in source code coined as taco textual analysis for code smell detection has been instantiated for detecting the long method smell and has been evaluated on three java open source projects the results indicate that taco is able to detect between 50 and 77 of the smell instances with a precision ranging between 63 and 67 in addition the results show that taco identifies smells that are not identified by approaches based on solely structural information information retrieval java software systems structural information textual analysis techniques taco textual analysis for code smell detection long method smell java open source projects software engineering conferences accuracy data mining software systems societies,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
574,0,"A GUI based unit testing technique for antipattern identification Anti-patterns are considered as deficient programming practices that are unacceptable as a solution. They can be thought of as certain patterns in software development that are undesirable in comparison to design patterns which are acceptable solutions formalized for a common problem. From the study on anti-pattern classes involved in object-oriented systems, we examined the impact of presence of anti-patterns on the system. There are certain issues with the testing strategies used for finding bugs in the software systems such as objectives of testing, procedure used to test new functions, maximum resources and time needed to execute the project and the environment in which testing needs to be carried out. There is an enormous requirement to carry out testing process in a more suitable way due to the enlarged complications in the development of software systems. Anti-pattern testing is concerned with the reduction of testing cost for different modules. In this paper, we propose a new GUI based testing technique for the identification of anti patterns in object-oriented systems through automation testing. cost reduction, graphical user interfaces, object-oriented programming, program debugging, program testing, GUI based unit testing technique, anti-pattern identification, deficient programming practices, software development, object-oriented systems, software bugs, software testing, anti-pattern testing, testing cost reduction, automated testing, Testing, Software, Graphical user interfaces, Automation, Unified modeling language, Information technology, Java, Object-oriented, Anti-pattern, Detection Techniques, Testing, Software systems",a gui based unit testing technique for antipattern identification anti patterns are considered as deficient programming practices that are unacceptable as a solution they can be thought of as certain patterns in software development that are undesirable in comparison to design patterns which are acceptable solutions formalized for a common problem from the study on anti pattern classes involved in object oriented systems we examined the impact of presence of anti patterns on the system there are certain issues with the testing strategies used for finding bugs in the software systems such as objectives of testing procedure used to test new functions maximum resources and time needed to execute the project and the environment in which testing needs to be carried out there is an enormous requirement to carry out testing process in a more suitable way due to the enlarged complications in the development of software systems anti pattern testing is concerned with the reduction of testing cost for different modules in this paper we propose a new gui based testing technique for the identification of anti patterns in object oriented systems through automation testing cost reduction graphical user interfaces object oriented programming program debugging program testing gui based unit testing technique anti pattern identification deficient programming practices software development object oriented systems software bugs software testing anti pattern testing testing cost reduction automated testing testing software graphical user interfaces automation unified modeling language information technology java object oriented anti pattern detection techniques testing software systems,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
575,0,"Sniffing Through Millions of Blocks for Bad Smells Code smells codify poor coding patterns known to degrade software quality. Block-based languages have proven to be a viable educational and end-user programming paradigm with increasing adoption across a broad spectrum of users and domains. This rising popularity of this programming paradigm calls for a serious look at the program quality written in block-based languages. While code smells in the context of text-based languages have been studied extensively, the research community lacks a comprehensive understanding of code smells in block-based software. To address this problem, we present the results of a large-scale study of code smells prevalent in programs written in the highly popular Scratch programming language. We analyzed programs submitted to the public Scratch repository in 2016, considering a million programs altogether. We discovered interesting relationships between the prevalence of certain smells and the levels of proficiency of the programmers commonly introducing them. Our findings not only can help block-based programmers improve the quality of their software, but also establish the requirements for refactoring support in this programming domain. CS education, block-based programming, code smells, introductory computing, scratch, software quality",sniffing through millions of blocks for bad smells code smells codify poor coding patterns known to degrade software quality block based languages have proven to be a viable educational and end user programming paradigm with increasing adoption across a broad spectrum of users and domains this rising popularity of this programming paradigm calls for a serious look at the program quality written in block based languages while code smells in the context of text based languages have been studied extensively the research community lacks a comprehensive understanding of code smells in block based software to address this problem we present the results of a large scale study of code smells prevalent in programs written in the highly popular scratch programming language we analyzed programs submitted to the public scratch repository in 2016 considering a million programs altogether we discovered interesting relationships between the prevalence of certain smells and the levels of proficiency of the programmers commonly introducing them our findings not only can help block based programmers improve the quality of their software but also establish the requirements for refactoring support in this programming domain cs education block based programming code smells introductory computing scratch software quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
576,0,"The Composition Refactoring Triangle (CRT) Practical Toolkit: From Spaghetti to Lasagna Adding to and restructuring the design of a large existing code base is known to be a difficult and time consuming task. There are methods for assisting these challenges, such as composition refactoring, reengineering, and anti-patterns detection methods. Most of these methods concentrate on specific perspectives of software engineering.This practical paper presents the Composition Refactoring Triangle (CRT) unified approach for handling multiple changes across complex environments. The CRT is a combination of: the process (CRP), the management tool (CRMT), and the external and internal refactoring elements. The CRT was constructed during on-going need to implement major changes within a living product. This paper contains the ""Via Delarosa"" - The ""Path of Suffering"" which describes the road of how the CRT was created, and why other methods failed.Practical evaluation was conducted using the CRT, demonstrating its capabilities. The unified perspectives of the CRT enable improved risk analysis and technical control over multiple architectural evolution changes and their relative dependencies. Its implementation encourages quick testing procedure, code correctness, and short time-to-market response of the development team. anti-patterns, architecture centric evolution, design, methodology, refactoring, requirements, traceability, tracking",the composition refactoring triangle crt practical toolkit from spaghetti to lasagna adding to and restructuring the design of a large existing code base is known to be a difficult and time consuming task there are methods for assisting these challenges such as composition refactoring reengineering and anti patterns detection methods most of these methods concentrate on specific perspectives of software engineering this practical paper presents the composition refactoring triangle crt unified approach for handling multiple changes across complex environments the crt is a combination of the process crp the management tool crmt and the external and internal refactoring elements the crt was constructed during on going need to implement major changes within a living product this paper contains the via delarosa the path of suffering which describes the road of how the crt was created and why other methods failed practical evaluation was conducted using the crt demonstrating its capabilities the unified perspectives of the crt enable improved risk analysis and technical control over multiple architectural evolution changes and their relative dependencies its implementation encourages quick testing procedure code correctness and short time to market response of the development team anti patterns architecture centric evolution design methodology refactoring requirements traceability tracking,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
577,0,"Website design: Viewing the web as a cognitive landscape Web content has been identified as one of the main factors contributing to repeat visits. As content on the web includes text, pictures, graphics, layout, sound, motion and, someday, even smell, making the right web content decisions are critical to effective web design. While an understanding of marketing strategies that attract visitors to websites is beginning to emerge, how to convert web surfers to repeat visitors is a less well-understood phenomenon. Through an empirical study, the authors develop the Website Preference Scale (WSPS) based upon the work in environmental psychology of Rachel Kaplan and Stephen Kaplan. The results identify underlying dimensions of effective website design and provide insight into site design characteristics, which may lead to a higher likelihood of revisit. Website design, Website assessment, Web content, Web environment",website design viewing the web as a cognitive landscape web content has been identified as one of the main factors contributing to repeat visits as content on the web includes text pictures graphics layout sound motion and someday even smell making the right web content decisions are critical to effective web design while an understanding of marketing strategies that attract visitors to websites is beginning to emerge how to convert web surfers to repeat visitors is a less well understood phenomenon through an empirical study the authors develop the website preference scale wsps based upon the work in environmental psychology of rachel kaplan and stephen kaplan the results identify underlying dimensions of effective website design and provide insight into site design characteristics which may lead to a higher likelihood of revisit website design website assessment web content web environment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
578,0,"Mining Interprocedural, Data-oriented Usage Patterns in JavaScript Web Applications A frequently occurring usage of program elements in a programming language and software libraries is called a usage pattern. In JavaScript (JS) Web applications, JS usage patterns in their source code have special characteristics that pose challenges in pattern mining. They involve nested data objects with no corresponding names or types. JS functions can be also used as data objects. JS usages are often cross-language, inter-procedural, and involve control and data flow dependencies among JS program entities and data objects whose data types are revealed only at run time due to dynamic typing in JS. This paper presents JSModel, a novel graph-based representation for JS usages, and JSMiner, a scalable approach to mine inter-procedural, data-oriented JS usage patterns. Our empirical evaluation on several Web programs shows that JSMiner efficiently detects more JS patterns with higher accuracy than a state-of-the-art approach. We conducted experiments to show JSModel's usefulness in two applications: detecting anti-patterns (buggy patterns) and documenting JS APIs via pattern skeletons. Our controlled experiment shows that the mined patterns are useful as JS documentation and code templates. JavaScript, Mining, Usage Patterns, Web Applications",mining interprocedural data oriented usage patterns in javascript web applications a frequently occurring usage of program elements in a programming language and software libraries is called a usage pattern in javascript js web applications js usage patterns in their source code have special characteristics that pose challenges in pattern mining they involve nested data objects with no corresponding names or types js functions can be also used as data objects js usages are often cross language inter procedural and involve control and data flow dependencies among js program entities and data objects whose data types are revealed only at run time due to dynamic typing in js this paper presents jsmodel a novel graph based representation for js usages and jsminer a scalable approach to mine inter procedural data oriented js usage patterns our empirical evaluation on several web programs shows that jsminer efficiently detects more js patterns with higher accuracy than a state of the art approach we conducted experiments to show jsmodel s usefulness in two applications detecting anti patterns buggy patterns and documenting js apis via pattern skeletons our controlled experiment shows that the mined patterns are useful as js documentation and code templates javascript mining usage patterns web applications,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
579,0,"Reproduction of scent and video at remote site using odor sensing system and olfactory display together with camera We propose the new system for scent reproduction at remote site together with video. The odor is identified using odor sensing system and the result is transferred via Internet to the remote site, where the identified smell is regenerated using an olfactory display. It is also possible to reproduce the odor concentration change. Users can sniff the smell in real time at the location away from the odor source, simultaneously watching a video around the odor source. We did the experiment on the teleolfaction between our campus and Tokyo Big Sights. The questionnaire survey revealed that our system provided the good performance of the teleolfaction. The proposed system can enhance the reality when smell is attached to the video. electronic noses, Internet, scent reproduction, odor sensing system, olfactory display, Internet, odor concentration change, teleolfaction, Olfactory, Displays, Cameras, Sensor arrays, Frequency, Counting circuits, Calibration, Animation, Sensor systems, Pattern recognition",reproduction of scent and video at remote site using odor sensing system and olfactory display together with camera we propose the new system for scent reproduction at remote site together with video the odor is identified using odor sensing system and the result is transferred via internet to the remote site where the identified smell is regenerated using an olfactory display it is also possible to reproduce the odor concentration change users can sniff the smell in real time at the location away from the odor source simultaneously watching a video around the odor source we did the experiment on the teleolfaction between our campus and tokyo big sights the questionnaire survey revealed that our system provided the good performance of the teleolfaction the proposed system can enhance the reality when smell is attached to the video electronic noses internet scent reproduction odor sensing system olfactory display internet odor concentration change teleolfaction olfactory displays cameras sensor arrays frequency counting circuits calibration animation sensor systems pattern recognition,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
580,0,"Local acceptance of existing biogas plants in Switzerland After the Swiss government's decision to decommission its five nuclear power plants by 2035, energy production from wind, biomass, biogas and photovoltaic is expected to increase significantly. Due to its many aspects of a direct democracy, high levels of public acceptance are necessary if a substantial increase in new renewable energy power plants is to be achieved in Switzerland. A survey of 502 citizens living near 19 biogas plants was conducted as the basis for using structural equation modeling to measure the effects of perceived benefits, perceived costs, trust towards the plant operator, perceived smell, information received and participation options on citizens' acceptance of ``their'' biogas plant. Results show that local acceptance towards existing biogas power plants is relatively high in Switzerland. Perceived benefits and costs as well as trust towards the plant operator are highly correlated and have a significant effect on local acceptance. While smell perception and information received had a significant effect on local acceptance as well, no such effect was found for participation options. Reasons for the non-impact of participation options on local acceptance are discussed, and pathways for future research are presented. Biogas, Local acceptance, Justice",local acceptance of existing biogas plants in switzerland after the swiss government s decision to decommission its five nuclear power plants by 2035 energy production from wind biomass biogas and photovoltaic is expected to increase significantly due to its many aspects of a direct democracy high levels of public acceptance are necessary if a substantial increase in new renewable energy power plants is to be achieved in switzerland a survey of 502 citizens living near 19 biogas plants was conducted as the basis for using structural equation modeling to measure the effects of perceived benefits perceived costs trust towards the plant operator perceived smell information received and participation options on citizens acceptance of their biogas plant results show that local acceptance towards existing biogas power plants is relatively high in switzerland perceived benefits and costs as well as trust towards the plant operator are highly correlated and have a significant effect on local acceptance while smell perception and information received had a significant effect on local acceptance as well no such effect was found for participation options reasons for the non impact of participation options on local acceptance are discussed and pathways for future research are presented biogas local acceptance justice,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
581,0,"Food for thought: hedonic experience beyond homeostasis in the human brain Food intake is an essential human activity regulated by homeostatic and hedonic systems in the brain which has mostly been ignored by the cognitive neurosciences. Yet, the study of food intake integrates fundamental cognitive and emotional processes in the human brain, and can in particular provide evidence on the neural correlates of the hedonic experience central to guiding behaviour. Neuroimaging experiments provide a novel basis for the further exploration of the brain systems involved in the conscious experience of pleasure and reward, and thus provide a unique method for studying the hedonic quality of human experience. Recent neuroimaging experiments have identified some of the regions involved in the cortical networks mediating hedonic experience in the human brain, with the evidence suggesting that the orbitofrontal cortex is the perhaps strongest candidate for linking food and other kinds of reward to hedonic experience. Based on the reviewed literature, a model is proposed to account for the roles of the different parts of the orbitofrontal cortex in this hedonic network. taste, smell, pleasantness, insula operculum, anterior cingulate cortex, motivation",food for thought hedonic experience beyond homeostasis in the human brain food intake is an essential human activity regulated by homeostatic and hedonic systems in the brain which has mostly been ignored by the cognitive neurosciences yet the study of food intake integrates fundamental cognitive and emotional processes in the human brain and can in particular provide evidence on the neural correlates of the hedonic experience central to guiding behaviour neuroimaging experiments provide a novel basis for the further exploration of the brain systems involved in the conscious experience of pleasure and reward and thus provide a unique method for studying the hedonic quality of human experience recent neuroimaging experiments have identified some of the regions involved in the cortical networks mediating hedonic experience in the human brain with the evidence suggesting that the orbitofrontal cortex is the perhaps strongest candidate for linking food and other kinds of reward to hedonic experience based on the reviewed literature a model is proposed to account for the roles of the different parts of the orbitofrontal cortex in this hedonic network taste smell pleasantness insula operculum anterior cingulate cortex motivation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
582,0,"Identifying method friendships to remove the feature envy bad smell: NIER track We propose a novel approach to identify Move Method refactoring opportunities and remove the Feature Envy bad smell from source code. The proposed approach analyzes both structural and conceptual relationships between methods and uses Relational Topic Models to identify sets of methods that share several responsabilities, i.e., 'friend methods'. The analysis of method friendships of a given method can be used to pinpoint the target class (envied class) where the method should be moved in. The results of a preliminary empirical evaluation indicate that the proposed approach provides meaningful refactoring opportunities. program compilers, software maintenance, method friendships identification, feature envy bad smell, NIER track, move method refactoring opportunities, source code, relational topic models, Software, Couplings, Accuracy, Measurement, Educational institutions, Reliability, Facebook, refactoring, relational topic model, source code quality",identifying method friendships to remove the feature envy bad smell nier track we propose a novel approach to identify move method refactoring opportunities and remove the feature envy bad smell from source code the proposed approach analyzes both structural and conceptual relationships between methods and uses relational topic models to identify sets of methods that share several responsabilities i e friend methods the analysis of method friendships of a given method can be used to pinpoint the target class envied class where the method should be moved in the results of a preliminary empirical evaluation indicate that the proposed approach provides meaningful refactoring opportunities program compilers software maintenance method friendships identification feature envy bad smell nier track move method refactoring opportunities source code relational topic models software couplings accuracy measurement educational institutions reliability facebook refactoring relational topic model source code quality,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
583,0,"Advantages of voice reproduction and the development of a biomimetic self-regulating double-clack valve for a prosthesis of the larynx - a feasibility study The human larynx is a versatile organ. Main functions are phonation, protection and regulation of the air ways. Patients suffer severely from the diagnosis of a laryngeal carcinoma of the stages T3 and T4. In most cases this diagnosis will lead to a total laryngectomy, which is usually dissatisfying in the sense of postoperative rehabilitation. The postoperative consequences include the loss of the native voice, the loss of regular air ways via mouth and nose, sense of smell, and the inability to build up an abdominal pressure. In this paper we focus on the feasibility of a modular larynx prosthesis which enables the laryngectomee to talk with his native voice, to breathe via the regular air ways, and to build up abdominal pressure. In particular we will give insights for a postoperative solution - a modular prosthesis based on a biomimetic self-regulating double clack-valve and on a voice reconstruction module, a so called vocoder. The vocoder is a device to reproduce the natural human voice. Most important for the use is an additional device required to analyze, conserve and manage voice characteristics of the patient before surgery. The self-regulating double clack-valve is designed to build up an abdominal pressure e.g. to cough. Therefore, our valve-system is working in both directions - a two-way valve system. By bridging the gap of the regular air ways lost by laryngectomy, the sense of smell and taste are restored. In the following we will present details and characteristics of these two main components required for a modular prosthesis of the larynx in laryngectomees. biological organs, biomimetics, cancer, prosthetics, speech, speech synthesis, surgery, valves, vocoders, voice reproduction, biomimetic self-regulating double-clack valve, laryngeal carcinoma, total laryngectomy, postoperative rehabilitation, modular larynx prosthesis, vocoder, two-way valve system, air ways, smell, taste, Prosthetics, Larynx, Vocoders, Valves, Biological system modeling, Speech, Muscles, Biomimetic Materials, Humans, Laryngeal Neoplasms, Larynx, Larynx, Artificial, Prosthesis Design, Voice",advantages of voice reproduction and the development of a biomimetic self regulating double clack valve for a prosthesis of the larynx a feasibility study the human larynx is a versatile organ main functions are phonation protection and regulation of the air ways patients suffer severely from the diagnosis of a laryngeal carcinoma of the stages t3 and t4 in most cases this diagnosis will lead to a total laryngectomy which is usually dissatisfying in the sense of postoperative rehabilitation the postoperative consequences include the loss of the native voice the loss of regular air ways via mouth and nose sense of smell and the inability to build up an abdominal pressure in this paper we focus on the feasibility of a modular larynx prosthesis which enables the laryngectomee to talk with his native voice to breathe via the regular air ways and to build up abdominal pressure in particular we will give insights for a postoperative solution a modular prosthesis based on a biomimetic self regulating double clack valve and on a voice reconstruction module a so called vocoder the vocoder is a device to reproduce the natural human voice most important for the use is an additional device required to analyze conserve and manage voice characteristics of the patient before surgery the self regulating double clack valve is designed to build up an abdominal pressure e g to cough therefore our valve system is working in both directions a two way valve system by bridging the gap of the regular air ways lost by laryngectomy the sense of smell and taste are restored in the following we will present details and characteristics of these two main components required for a modular prosthesis of the larynx in laryngectomees biological organs biomimetics cancer prosthetics speech speech synthesis surgery valves vocoders voice reproduction biomimetic self regulating double clack valve laryngeal carcinoma total laryngectomy postoperative rehabilitation modular larynx prosthesis vocoder two way valve system air ways smell taste prosthetics larynx vocoders valves biological system modeling speech muscles biomimetic materials humans laryngeal neoplasms larynx larynx artificial prosthesis design voice,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
584,0,"Combined electronic nose and tongue for a flavour sensing system We present a novel, smart sensing system developed for the flavour analysis of liquids. The system comprises both a so-called ``electronic tongue'' based on shear horizontal surface acoustic wave (SH-SAW) sensors analysing the liquid phase and a so-called ``electronic nose'' based on chemFET sensors analysing the gaseous phase. Flavour is generally understood to be the overall experience from the combination of oral and nasal stimulation and is principally derived from a combination of the human senses of taste (gustation) and smell (olfaction). Thus, by combining two types of microsensors, an artificial flavour sensing system has been developed. Initial tests conducted with different liquid samples, i.e. water, orange juice and milk (of different fat content), resulted in 100% discrimination using principal components analysis; although it was found that there was little contribution from the electronic nose. Therefore further flavour experiments were designed to demonstrate the potential of the combined electronic nose/tongue flavour system. Consequently, experiments were conducted on low vapour pressure taste-biased solutions and high vapour pressure, smell-biased solutions. Only the combined flavour analysis system could achieve 100% discrimination between all the different liquids. We believe that this is the first report of a SAW-based analysis system that determines flavour through the combination of both liquid and headspace analysis. Electronic nose, Electronic tongue, Flavour system, chemFET, SH-SAW",combined electronic nose and tongue for a flavour sensing system we present a novel smart sensing system developed for the flavour analysis of liquids the system comprises both a so called electronic tongue based on shear horizontal surface acoustic wave sh saw sensors analysing the liquid phase and a so called electronic nose based on chemfet sensors analysing the gaseous phase flavour is generally understood to be the overall experience from the combination of oral and nasal stimulation and is principally derived from a combination of the human senses of taste gustation and smell olfaction thus by combining two types of microsensors an artificial flavour sensing system has been developed initial tests conducted with different liquid samples i e water orange juice and milk of different fat content resulted in 100 discrimination using principal components analysis although it was found that there was little contribution from the electronic nose therefore further flavour experiments were designed to demonstrate the potential of the combined electronic nose tongue flavour system consequently experiments were conducted on low vapour pressure taste biased solutions and high vapour pressure smell biased solutions only the combined flavour analysis system could achieve 100 discrimination between all the different liquids we believe that this is the first report of a saw based analysis system that determines flavour through the combination of both liquid and headspace analysis electronic nose electronic tongue flavour system chemfet sh saw,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
585,0,"Is Spreadsheet Ambiguity Harmful? Detecting and Repairing Spreadsheet Smells Due to Ambiguous Computation Spreadsheets are widely used by end users for numerical computation in their business. Spreadsheet cells whose computation is subject to the same semantics are often clustered in a row or column. When a spreadsheet evolves, these cell clusters can degenerate due to ad hoc modifications or undisciplined copy-and-pastes. Such degenerated clusters no longer keep cells prescribing the same computational semantics, and are said to exhibit ambiguous computation smells. Our empirical study finds that such smells are common and likely harmful. We propose AmCheck, a novel technique that automatically detects and repairs ambiguous computation smells by recovering their intended computational semantics. A case study using AmCheck suggests that it is useful for discovering and repairing real spreadsheet problems. Spreadsheet, ambiguous computation, repair, smell",is spreadsheet ambiguity harmful detecting and repairing spreadsheet smells due to ambiguous computation spreadsheets are widely used by end users for numerical computation in their business spreadsheet cells whose computation is subject to the same semantics are often clustered in a row or column when a spreadsheet evolves these cell clusters can degenerate due to ad hoc modifications or undisciplined copy and pastes such degenerated clusters no longer keep cells prescribing the same computational semantics and are said to exhibit ambiguous computation smells our empirical study finds that such smells are common and likely harmful we propose amcheck a novel technique that automatically detects and repairs ambiguous computation smells by recovering their intended computational semantics a case study using amcheck suggests that it is useful for discovering and repairing real spreadsheet problems spreadsheet ambiguous computation repair smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
586,0,"Does injustice affect your sense of taste and smell? The mediating role of moral disgust Unfair treatment can activate strong negative emotions among victims and third parties. Less is known about other innate and evolutionary-based reactions to unfairness, such as those that manifest themselves through our senses. In three experiments, we found that interpersonally unfair treatment at work, defined as treatment that violates an individual's sense of dignity and respect, triggered disgust emotions over and above anger which subsequently related to stronger taste and smell reactions to gustatory and olfactory stimuli. This effect was observed for pleasant and unpleasant tasting products, for agreeable and malodorous scents, and among both mistreatment victims and third parties. Our findings suggest that violations of dignity and respect can trigger an evolutionary based reaction that activates a human alarm system, warning individuals of impending threats even when no oral threat is imminent. Interpersonal injustice, Sensory responses, Disgust, Moral emotions",does injustice affect your sense of taste and smell the mediating role of moral disgust unfair treatment can activate strong negative emotions among victims and third parties less is known about other innate and evolutionary based reactions to unfairness such as those that manifest themselves through our senses in three experiments we found that interpersonally unfair treatment at work defined as treatment that violates an individual s sense of dignity and respect triggered disgust emotions over and above anger which subsequently related to stronger taste and smell reactions to gustatory and olfactory stimuli this effect was observed for pleasant and unpleasant tasting products for agreeable and malodorous scents and among both mistreatment victims and third parties our findings suggest that violations of dignity and respect can trigger an evolutionary based reaction that activates a human alarm system warning individuals of impending threats even when no oral threat is imminent interpersonal injustice sensory responses disgust moral emotions,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
587,0,"Why We Refactor? Confessions of GitHub Contributors Refactoring is a widespread practice that helps developers to improve the maintainability and readability of their code. However, there is a limited number of studies empirically investigating the actual motivations behind specific refactoring operations applied by developers. To fill this gap, we monitored Java projects hosted on GitHub to detect recently applied refactorings, and asked the developers to explain the reasons behind their decision to refactor the code. By applying thematic analysis on the collected responses, we compiled a catalogue of 44 distinct motivations for 12 well-known refactoring types. We found that refactoring activity is mainly driven by changes in the requirements and much less by code smells. Extract Method is the most versatile refactoring operation serving 11 different purposes. Finally, we found evidence that the IDE used by the developers affects the adoption of automated refactoring tools. GitHub, Refactoring, code smells, software evolution",why we refactor confessions of github contributors refactoring is a widespread practice that helps developers to improve the maintainability and readability of their code however there is a limited number of studies empirically investigating the actual motivations behind specific refactoring operations applied by developers to fill this gap we monitored java projects hosted on github to detect recently applied refactorings and asked the developers to explain the reasons behind their decision to refactor the code by applying thematic analysis on the collected responses we compiled a catalogue of 44 distinct motivations for 12 well known refactoring types we found that refactoring activity is mainly driven by changes in the requirements and much less by code smells extract method is the most versatile refactoring operation serving 11 different purposes finally we found evidence that the ide used by the developers affects the adoption of automated refactoring tools github refactoring code smells software evolution,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
588,0,"When More Heads Are Better than One? Understanding and Improving Collaborative Identification of Code Smells Code smells are program structures that often indicate software design problems. Their efficient identification is required in order to ensure software longevity. However, the identification of code smells often cannot be performed in isolation by a single developer. This task might require the knowledge of various program parts, which are better understood by different developers. However, there is little guidance to support software teams on efficient identification of code smells. In this research, we investigate how to improve efficiency on the collaborative identification of code smells. Our investigation is based on a set of controlled experiments conducted with more than 58 novice and professional developers. Our preliminary results suggest the use of collaborative practices significantly increases the efficiency of code smell identification. We also compiled a set of guidelines and heuristics to support an effective collaborative strategy for code smell identification. program diagnostics, software quality, source code (software), collaborative code smell identification, program structures, software design problems, software longevity, Software, Programming profession, Teamwork, Software engineering, Guidelines, Collaborative Practices, Controlled Experiment, Code Smells.",when more heads are better than one understanding and improving collaborative identification of code smells code smells are program structures that often indicate software design problems their efficient identification is required in order to ensure software longevity however the identification of code smells often cannot be performed in isolation by a single developer this task might require the knowledge of various program parts which are better understood by different developers however there is little guidance to support software teams on efficient identification of code smells in this research we investigate how to improve efficiency on the collaborative identification of code smells our investigation is based on a set of controlled experiments conducted with more than 58 novice and professional developers our preliminary results suggest the use of collaborative practices significantly increases the efficiency of code smell identification we also compiled a set of guidelines and heuristics to support an effective collaborative strategy for code smell identification program diagnostics software quality source code software collaborative code smell identification program structures software design problems software longevity software programming profession teamwork software engineering guidelines collaborative practices controlled experiment code smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
589,0,"TRPs in Our Senses In the last decade, studies of transient receptor potential (TRP) channels, a superfamily of cation-conducting membrane proteins, have significantly extended our knowledge about the molecular basis of sensory perception in animals. Due to their distinct activation mechanisms and biophysical properties, TRP channels are highly suited to function in receptor cells, either as receptors for environmental or endogenous stimuli or as molecular players in signal transduction cascades downstream of metabotropic receptors. As such, TRP channels play a crucial role in many mammalian senses, including touch, taste and smell. Starting with a brief survey of sensory TRP channels in invertebrate model systems, this review covers the current state of research on TRP channel function in the classical mammalian senses and summarizes how modulation of TRP channels can tune our sensations. []",trps in our senses in the last decade studies of transient receptor potential trp channels a superfamily of cation conducting membrane proteins have significantly extended our knowledge about the molecular basis of sensory perception in animals due to their distinct activation mechanisms and biophysical properties trp channels are highly suited to function in receptor cells either as receptors for environmental or endogenous stimuli or as molecular players in signal transduction cascades downstream of metabotropic receptors as such trp channels play a crucial role in many mammalian senses including touch taste and smell starting with a brief survey of sensory trp channels in invertebrate model systems this review covers the current state of research on trp channel function in the classical mammalian senses and summarizes how modulation of trp channels can tune our sensations,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
590,0,"Measuring Object-oriented Design Principles The idea of automatizing the assessment of object-oriented design is not new. Different approaches define and apply their own quality models, which are composed of single metrics or combinations thereof, to operationalize software design. However, single metrics are too fine-grained to identify core design flaws and they cannot provide hints for making design improvements. In order to deal with these weaknesses of metric-based models, rules-based approaches have proven successful in the realm of source-code quality. Moreover, for developing a well-designed software system, design principles play a key role, as they define fundamental guidelines and help to avoid pitfalls. Therefore, this thesis will enhance and complete a rule-based quality reference model for operationalizing design principles and will provide a measuring tool that implements these rules. The validation of the design quality model and the measurement tool will be based on various industrial projects. Additionally, quantitative and qualitative surveys will be conducted in order to get validated results on the value of object-oriented design principles for software development. design model, design principles, software-design assessment method, software-design quality",measuring object oriented design principles the idea of automatizing the assessment of object oriented design is not new different approaches define and apply their own quality models which are composed of single metrics or combinations thereof to operationalize software design however single metrics are too fine grained to identify core design flaws and they cannot provide hints for making design improvements in order to deal with these weaknesses of metric based models rules based approaches have proven successful in the realm of source code quality moreover for developing a well designed software system design principles play a key role as they define fundamental guidelines and help to avoid pitfalls therefore this thesis will enhance and complete a rule based quality reference model for operationalizing design principles and will provide a measuring tool that implements these rules the validation of the design quality model and the measurement tool will be based on various industrial projects additionally quantitative and qualitative surveys will be conducted in order to get validated results on the value of object oriented design principles for software development design model design principles software design assessment method software design quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
591,0,"Recognition of burrow's olfactory signature in blue petrels, Halobaena caerulea: an efficient discrimination mechanism in the dark Previous work has shown that blue petrels need olfaction to home. We investigated whether they also recognize an olfactory signature of their own nest. We performed T-maze experiments in which maze arms were connected with the subject bird's burrow and with the burrow of a conspecific neighbour. Of 23 birds, 16 were able to recognize the arm leading to their own burrow. In a second experiment, we positioned the maze in front of the subject's burrow but the maze arms were closed and did not enter the burrow. Consequently, no burrow odours could be sensed by the bird. In this case, 85% of birds (17 of 20) failed to choose, suggesting that petrels were not motivated to choose by positional cues in the absence of odour cues. We explored this idea further by performing a homing experiment whereby homing birds had to relocate an artificially displaced burrow entrance. Blue petrels homed, ignoring the natural burrow entrance and using the new artificial one. The ability to smell their own burrow allows blue petrels to return to the colony at night and to find the correct nest. []",recognition of burrow s olfactory signature in blue petrels halobaena caerulea an efficient discrimination mechanism in the dark previous work has shown that blue petrels need olfaction to home we investigated whether they also recognize an olfactory signature of their own nest we performed t maze experiments in which maze arms were connected with the subject bird s burrow and with the burrow of a conspecific neighbour of 23 birds 16 were able to recognize the arm leading to their own burrow in a second experiment we positioned the maze in front of the subject s burrow but the maze arms were closed and did not enter the burrow consequently no burrow odours could be sensed by the bird in this case 85 of birds 17 of 20 failed to choose suggesting that petrels were not motivated to choose by positional cues in the absence of odour cues we explored this idea further by performing a homing experiment whereby homing birds had to relocate an artificially displaced burrow entrance blue petrels homed ignoring the natural burrow entrance and using the new artificial one the ability to smell their own burrow allows blue petrels to return to the colony at night and to find the correct nest,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
592,0,"The relative importance of olfaction and remote touch in prey detection by North Island brown kiwis Birds that forage by probing in sand, soil or mud substrates must often use senses other than vision to find their prey. Kiwis (Apterygidae) are nocturnal probing birds inhabiting forested areas in New Zealand. Their visual sense is reduced, but they have a highly developed sense of smell, a bill tip organ similar to that found in Scolopacidae shorebirds, which may be used to detect vibrotactile cues produced by burrowing prey (remote touch), and prominent ear openings. We designed a foraging experiment presenting mealworm prey to eight captive North Island brown kiwis, Apteryx mantelli, under a variety of trial conditions to discover whether they were using hearing, olfaction, remote touch or direct touch (chance alone), singly or together, to find prey. Kiwis were most efficient at finding prey using olfaction alone or in combination with other cues, but switched to locating prey with lower efficiency using remote touch, in the absence of olfactory cues. They did not appear to use auditory cues for foraging. The ability to switch between sensory modalities depending on the quality of the cues available has been documented before in other groups of birds (including thrushes (Turdidae) and sandpipers (Scolopacidae)) and would be of great advantage to wild kiwis foraging under a wide range of environmental conditions. , bill tip organ, foraging, hearing, North Island brown kiwi, olfaction, prey detection, remote touch, sensory pit,",the relative importance of olfaction and remote touch in prey detection by north island brown kiwis birds that forage by probing in sand soil or mud substrates must often use senses other than vision to find their prey kiwis apterygidae are nocturnal probing birds inhabiting forested areas in new zealand their visual sense is reduced but they have a highly developed sense of smell a bill tip organ similar to that found in scolopacidae shorebirds which may be used to detect vibrotactile cues produced by burrowing prey remote touch and prominent ear openings we designed a foraging experiment presenting mealworm prey to eight captive north island brown kiwis apteryx mantelli under a variety of trial conditions to discover whether they were using hearing olfaction remote touch or direct touch chance alone singly or together to find prey kiwis were most efficient at finding prey using olfaction alone or in combination with other cues but switched to locating prey with lower efficiency using remote touch in the absence of olfactory cues they did not appear to use auditory cues for foraging the ability to switch between sensory modalities depending on the quality of the cues available has been documented before in other groups of birds including thrushes turdidae and sandpipers scolopacidae and would be of great advantage to wild kiwis foraging under a wide range of environmental conditions bill tip organ foraging hearing north island brown kiwi olfaction prey detection remote touch sensory pit,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
593,0,"Mental beliefs about blood, and not its smell, affect presence in a violent computer game Presence in virtual reality -- the feeling that one is inside mediated reality -- has fascinated academics in the field of virtual reality from its onset. While conceptual analyses and empirical research unequivocally stressed the importance of immersion through sensory input, agent-related aspects such as mental beliefs received less attention. We are the first to examine the separate and combined effects of being exposed to the smell of a particular stimulus and/or having a representation of this stimulus in mind. Blood was considered to be interesting to work with, because of widespread folk ideas about its capacity to induce aggression in violent contexts. Using a violent computer game in a between-subjects design, male subjects were tested for the immersive impact of blood, first as an olfactory cue, and second as a mental belief, i.e. the true or false belief that one is smelling `blood'. Lower skin conductance and game scores showed that `blood' served as a distractor hindering the subject's spontaneous engagement. Subjects higher in dispositional aggressiveness, however, got more immersed during the `blood' game rounds, by displaying more combativeness. We discuss our results in light of the undervalued importance of subjective realism in research on presence, and explain the relevance of this work for applications in virtual training in the military and for clinical intervention in combat-related PTSD. Computer game, Presence, Belief, Blood, Violence",mental beliefs about blood and not its smell affect presence in a violent computer game presence in virtual reality the feeling that one is inside mediated reality has fascinated academics in the field of virtual reality from its onset while conceptual analyses and empirical research unequivocally stressed the importance of immersion through sensory input agent related aspects such as mental beliefs received less attention we are the first to examine the separate and combined effects of being exposed to the smell of a particular stimulus and or having a representation of this stimulus in mind blood was considered to be interesting to work with because of widespread folk ideas about its capacity to induce aggression in violent contexts using a violent computer game in a between subjects design male subjects were tested for the immersive impact of blood first as an olfactory cue and second as a mental belief i e the true or false belief that one is smelling blood lower skin conductance and game scores showed that blood served as a distractor hindering the subject s spontaneous engagement subjects higher in dispositional aggressiveness however got more immersed during the blood game rounds by displaying more combativeness we discuss our results in light of the undervalued importance of subjective realism in research on presence and explain the relevance of this work for applications in virtual training in the military and for clinical intervention in combat related ptsd computer game presence belief blood violence,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
594,0,"A Hybrid Fruit Fly Optimization Algorithm for the Realistic Hybrid Flowshop Rescheduling Problem in Steelmaking Systems In this study, we propose a hybrid fruit fly optimization algorithm (HFOA) to solve the hybrid flowshop rescheduling problem with flexible processing time in steelmaking casting systems. First, machine breakdown and processing variation disruptions are considered simultaneously in the rescheduling problem. Second, each solution is represented by a fruit fly with a well-designed solution representation. Third, two novel decoding heuristics considering the problem characteristics, which can significantly improve the solution quality, are developed. Several routing and scheduling neighborhood structures are proposed to balance the exploration and exploitation abilities. Finally, we propose an effective HFOA with well-designed smell and vision search procedures. In addition, an iterated greedy (IG) local search is embedded in the proposed algorithm to further enhance its exploitation ability. The proposed algorithm is tested on sets of instances generated from industrial data. Through comprehensive computational comparisons and statistical analyses, the performance of the proposed HFOA algorithm is favorably compared against several algorithms in terms of both solution quality and efficiency. Note to Practitioners-The steelmaking rescheduling process is critical to the effective operation of iron and steel production. This study models the steelmaking rescheduling problem with flexible processing time as a complex hybrid flowshop in which two types of disruptions, machine breakdown and processing variation, are considered concurrently. A weighted sum of the five objectives, including minimization of the average sojourn time, earliness penalty, tardiness penalty, cast-break penalty, and system instability penalty, is considered in the proposed algorithm. We develop an effective hybrid fruit fly optimization algorithm (HFOA) that applies two vectors to represent individuals and presents routing and scheduling neighborhood structures. An IG-based local search procedure is embedded to enhance the exploitation ability of the proposed algorithm. Two decoding heuristics considering the problem characteristics are developed. The effectiveness of the proposed HFOA is demonstrated through comparisons to other well-known and recently developed meta-heuristics. This work can be extended to practical problems by considering other types of disruptions. In addition, the proposed HFOA can also be generalized, and to other hybrid flowshop rescheduling problems. flow shop scheduling, iterative methods, minimisation, reliability, statistical analysis, steel industry, hybrid fruit fly optimization algorithm, realistic hybrid flowshop rescheduling problem, steelmaking casting system, machine breakdown, processing variation disruption, decoding heuristics, solution quality improvement, iterated greedy local search, IG local search, statistical analyses, comprehensive computational comparison, HFOA algorithm, steelmaking rescheduling process, steel production, iron production, flexible processing, average sojourn time minimization, tardiness penalty minimization, earliness penalty minimization, cast-break penalty minimization, system instability penalty minimization, routing neighborhood structure, scheduling neighborhood structure, Job shop scheduling, Casting, Electric breakdown, Optimal scheduling, Heuristic algorithms, Schedules, Fruit fly optimization algorithm, heuristic, hybrid flowshop, iterated greedy, rescheduling",a hybrid fruit fly optimization algorithm for the realistic hybrid flowshop rescheduling problem in steelmaking systems in this study we propose a hybrid fruit fly optimization algorithm hfoa to solve the hybrid flowshop rescheduling problem with flexible processing time in steelmaking casting systems first machine breakdown and processing variation disruptions are considered simultaneously in the rescheduling problem second each solution is represented by a fruit fly with a well designed solution representation third two novel decoding heuristics considering the problem characteristics which can significantly improve the solution quality are developed several routing and scheduling neighborhood structures are proposed to balance the exploration and exploitation abilities finally we propose an effective hfoa with well designed smell and vision search procedures in addition an iterated greedy ig local search is embedded in the proposed algorithm to further enhance its exploitation ability the proposed algorithm is tested on sets of instances generated from industrial data through comprehensive computational comparisons and statistical analyses the performance of the proposed hfoa algorithm is favorably compared against several algorithms in terms of both solution quality and efficiency note to practitioners the steelmaking rescheduling process is critical to the effective operation of iron and steel production this study models the steelmaking rescheduling problem with flexible processing time as a complex hybrid flowshop in which two types of disruptions machine breakdown and processing variation are considered concurrently a weighted sum of the five objectives including minimization of the average sojourn time earliness penalty tardiness penalty cast break penalty and system instability penalty is considered in the proposed algorithm we develop an effective hybrid fruit fly optimization algorithm hfoa that applies two vectors to represent individuals and presents routing and scheduling neighborhood structures an ig based local search procedure is embedded to enhance the exploitation ability of the proposed algorithm two decoding heuristics considering the problem characteristics are developed the effectiveness of the proposed hfoa is demonstrated through comparisons to other well known and recently developed meta heuristics this work can be extended to practical problems by considering other types of disruptions in addition the proposed hfoa can also be generalized and to other hybrid flowshop rescheduling problems flow shop scheduling iterative methods minimisation reliability statistical analysis steel industry hybrid fruit fly optimization algorithm realistic hybrid flowshop rescheduling problem steelmaking casting system machine breakdown processing variation disruption decoding heuristics solution quality improvement iterated greedy local search ig local search statistical analyses comprehensive computational comparison hfoa algorithm steelmaking rescheduling process steel production iron production flexible processing average sojourn time minimization tardiness penalty minimization earliness penalty minimization cast break penalty minimization system instability penalty minimization routing neighborhood structure scheduling neighborhood structure job shop scheduling casting electric breakdown optimal scheduling heuristic algorithms schedules fruit fly optimization algorithm heuristic hybrid flowshop iterated greedy rescheduling,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
595,0,"Identification of olfactory receptors using a parametric model Human nose can smell number of chemicals having distinct odors. These odor molecules are detected by the olfactory receptors. Olfactory Receptors (ORs) have a large family of mouse, rat, human, chimpanzee, earthworm, dog, etc. As there are number of families of distinct species, the mouse OR genes are identified to work upon, because restricted amount of work has been done using this species. In this paper, OR family of mouse and human has been studied by using quantification of Barcode matrix, DNA walk and Haar wavelet coefficients. These parameters have been studied for the proper understanding of their DNA sequences, to know the difference between intricate sequences of DNA and to know the hidden symmetries between the DNA sequences. Subsequently, clustering method is applied after knowing the quantitative results. Then a proper study has been done for the clustering results to examine the mouse OR. Using this proposed model, a probable justification or deterministic nullification can be given that whether a given sequence of DNA string composed of nucleotides is a probable mouse OR or not. biological organs, chemioception, DNA, Haar transforms, molecular biophysics, molecular configurations, pattern clustering, wavelet transforms, olfactory receptors, parametric model, human nose, distinct odors, olfactory receptors, mouse, rat, chimpanzee, earthworm, dog, mouse OR genes, Barcode matrix quantification, DNA walk, Haar wavelet coefficients, DNA sequences, clustering method, DNA string, nucleotides, DNA, Fractals, Mice, Matrix decomposition, Olfactory, Rats, Bioinformatics, Olfactory receptors, Fractal dimension, DNA walk, Wavelet coefficients, Haar Wavelet Coefficients",identification of olfactory receptors using a parametric model human nose can smell number of chemicals having distinct odors these odor molecules are detected by the olfactory receptors olfactory receptors ors have a large family of mouse rat human chimpanzee earthworm dog etc as there are number of families of distinct species the mouse or genes are identified to work upon because restricted amount of work has been done using this species in this paper or family of mouse and human has been studied by using quantification of barcode matrix dna walk and haar wavelet coefficients these parameters have been studied for the proper understanding of their dna sequences to know the difference between intricate sequences of dna and to know the hidden symmetries between the dna sequences subsequently clustering method is applied after knowing the quantitative results then a proper study has been done for the clustering results to examine the mouse or using this proposed model a probable justification or deterministic nullification can be given that whether a given sequence of dna string composed of nucleotides is a probable mouse or or not biological organs chemioception dna haar transforms molecular biophysics molecular configurations pattern clustering wavelet transforms olfactory receptors parametric model human nose distinct odors olfactory receptors mouse rat chimpanzee earthworm dog mouse or genes barcode matrix quantification dna walk haar wavelet coefficients dna sequences clustering method dna string nucleotides dna fractals mice matrix decomposition olfactory rats bioinformatics olfactory receptors fractal dimension dna walk wavelet coefficients haar wavelet coefficients,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
596,0,"Do desert ants smell the scenery in stereo? Desert ants, Cataglyphis fortis, navigate individually in the inhospitable saltpans of Tunisia using path integration for long-distance navigation, and visual and olfactory landmarks for fine-scale orientation in the vicinity of the nest entrance. Here, we show in a field experiment that the ants are able to locate the nest entrance within a two-dimensional olfactory array. Ants were trained to forage in an open channel and to memorize the nest entrance relative to four odours that were applied at the corners of an invisible quadratic array. In a test situation, the ants pinpointed the fictive nest only when the odours were present at their learned positions. Our results suggest that the ants had learned the olfactory scenery around their nest. Furthermore, unilaterally antennectomized ants could not pinpoint the nest within a two-dimensional array. Hence, this kind of orientation depends on the simultaneous input of both antennae, that is, on a stereo sense of smell. Until now, insects and mammals, including humans, have only been known to use bilateral sensory input to follow a concentration gradient of an odour. Our evidence suggests that desert ants require a stereo sense of smell to make use of the olfactory scenery around their nest for homing. , desert ant, insect, landmark, navigation, olfaction, stereo smell",do desert ants smell the scenery in stereo desert ants cataglyphis fortis navigate individually in the inhospitable saltpans of tunisia using path integration for long distance navigation and visual and olfactory landmarks for fine scale orientation in the vicinity of the nest entrance here we show in a field experiment that the ants are able to locate the nest entrance within a two dimensional olfactory array ants were trained to forage in an open channel and to memorize the nest entrance relative to four odours that were applied at the corners of an invisible quadratic array in a test situation the ants pinpointed the fictive nest only when the odours were present at their learned positions our results suggest that the ants had learned the olfactory scenery around their nest furthermore unilaterally antennectomized ants could not pinpoint the nest within a two dimensional array hence this kind of orientation depends on the simultaneous input of both antennae that is on a stereo sense of smell until now insects and mammals including humans have only been known to use bilateral sensory input to follow a concentration gradient of an odour our evidence suggests that desert ants require a stereo sense of smell to make use of the olfactory scenery around their nest for homing desert ant insect landmark navigation olfaction stereo smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
597,0,"Identifying Extract Method Refactoring Opportunities Based on Functional Relevance `Extract Method' is considered one of the most frequently applied and beneficial refactorings, since the corresponding Long Method smell is among the most common and persistent ones. Although Long Method is conceptually related to the implementation of diverse functionalities within a method, until now, this relationship has not been utilized while identifying refactoring opportunities. In this paper we introduce an approach (accompanied by a tool) that aims at identifying source code chunks that collaborate to provide a specific functionality, and propose their extraction as separate methods. The accuracy of the proposed approach has been empirically validated both in an industrial and an open-source setting. In the former case, the approach was capable of identifying functionally related statements within two industrial long methods (approx. 500 LoC each), with a recall rate of 93 percent. In the latter case, based on a comparative study on open-source data, our approach ranks better compared to two well-known techniques of the literature. To assist software engineers in the prioritization of the suggested refactoring opportunities the approach ranks them based on an estimate of their fitness for extraction. The provided ranking has been validated in both settings and proved to be strongly correlated with experts' opinion. public domain software, software maintenance, open-source data, functional relevance, beneficial refactorings, diverse functionalities, specific functionality, open-source setting, functionally related statements, industrial long methods, refactoring opportunities, Extract Method, Long Method smell, source code chunks, Measurement, Open source software, Mathematics, Data mining, Computer science, Syntactics, Design tools and techniques, object-oriented programming, metrics measurement",identifying extract method refactoring opportunities based on functional relevance extract method is considered one of the most frequently applied and beneficial refactorings since the corresponding long method smell is among the most common and persistent ones although long method is conceptually related to the implementation of diverse functionalities within a method until now this relationship has not been utilized while identifying refactoring opportunities in this paper we introduce an approach accompanied by a tool that aims at identifying source code chunks that collaborate to provide a specific functionality and propose their extraction as separate methods the accuracy of the proposed approach has been empirically validated both in an industrial and an open source setting in the former case the approach was capable of identifying functionally related statements within two industrial long methods approx 500 loc each with a recall rate of 93 percent in the latter case based on a comparative study on open source data our approach ranks better compared to two well known techniques of the literature to assist software engineers in the prioritization of the suggested refactoring opportunities the approach ranks them based on an estimate of their fitness for extraction the provided ranking has been validated in both settings and proved to be strongly correlated with experts opinion public domain software software maintenance open source data functional relevance beneficial refactorings diverse functionalities specific functionality open source setting functionally related statements industrial long methods refactoring opportunities extract method long method smell source code chunks measurement open source software mathematics data mining computer science syntactics design tools and techniques object oriented programming metrics measurement,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
598,0,"Tracking real-time neural activation of conceptual knowledge using single-trial event-related potentials Empirically derived semantic feature norms categorized into different types of knowledge (e.g., visual, functional, auditory) can be summed to create number-of-feature counts per knowledge type. Initial evidence suggests several such knowledge types may be recruited during language comprehension. The present study provides a more detailed understanding of the timecourse and intensity of influence of several such knowledge types on real-time neural activity. A linear mixed-effects model was applied to single trial event-related potentials for 207 visually presented concrete words measured on total number of features (semantic richness), imageability, and number of visual motion, color, visual form, smell, taste, sound, and function features. Significant influences of multiple feature types occurred before 200ms, suggesting parallel neural computation of word form and conceptual knowledge during language comprehension. Function and visual motion features most prominently influenced neural activity, underscoring the importance of action-related knowledge in computing word meaning. The dynamic time courses and topographies of these effects are most consistent with a flexible conceptual system wherein temporally dynamic recruitment of representations in modal and supramodal cortex are a crucial element of the constellation of processes constituting word meaning computation in the brain. Conceptual knowledge, Semantic memory, Event-related potentials, Mixed-effects model, Timecourse, Language, Word recognition",tracking real time neural activation of conceptual knowledge using single trial event related potentials empirically derived semantic feature norms categorized into different types of knowledge e g visual functional auditory can be summed to create number of feature counts per knowledge type initial evidence suggests several such knowledge types may be recruited during language comprehension the present study provides a more detailed understanding of the timecourse and intensity of influence of several such knowledge types on real time neural activity a linear mixed effects model was applied to single trial event related potentials for 207 visually presented concrete words measured on total number of features semantic richness imageability and number of visual motion color visual form smell taste sound and function features significant influences of multiple feature types occurred before 200ms suggesting parallel neural computation of word form and conceptual knowledge during language comprehension function and visual motion features most prominently influenced neural activity underscoring the importance of action related knowledge in computing word meaning the dynamic time courses and topographies of these effects are most consistent with a flexible conceptual system wherein temporally dynamic recruitment of representations in modal and supramodal cortex are a crucial element of the constellation of processes constituting word meaning computation in the brain conceptual knowledge semantic memory event related potentials mixed effects model timecourse language word recognition,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
599,0,"Public perception of odour and environmental pollution attributed to MSW treatment and disposal facilities: A case study If residents' perceptions, concerns and attitudes towards waste management facilities are either not well understood or underestimated, people can produce strong opposition that may include protest demonstrations and violent conflicts such as those experienced in the Campania Region of Italy. The aim of this study was to verify the effects of the closure of solid waste treatment and disposal facilities (two landfills and one RDF production plant) on public perception of odour and environmental pollution. The study took place in four villages in Southern Italy. Identical questionnaires were administered to residents during 2003 and after the closure of the facilities occurred in 2008. The residents' perception of odour nuisance considerably diminished between 2003 and 2009 for the nearest villages, with odour perception showing an association with distance from the facilities. Post closure, residents had difficulty in identifying the type of smell due to the decrease in odour level. During both surveys, older residents reported most concern about the potentially adverse health impacts of long-term exposure to odours from MSW facilities. However, although awareness of MSW facilities and concern about potentially adverse health impacts varied according to the characteristics of residents in 2003, substantial media coverage produced an equalisation effect and increased knowledge about the type of facilities and how they operated. It is possible that residents of the village nearest to the facilities reported lower awareness of and concern about odour and environmental pollution because the municipality received economic compensation for their presence. Environment, Landfill, Odour, Pollution, Public opinion, Refuse-derived fuel, Waste management",public perception of odour and environmental pollution attributed to msw treatment and disposal facilities a case study if residents perceptions concerns and attitudes towards waste management facilities are either not well understood or underestimated people can produce strong opposition that may include protest demonstrations and violent conflicts such as those experienced in the campania region of italy the aim of this study was to verify the effects of the closure of solid waste treatment and disposal facilities two landfills and one rdf production plant on public perception of odour and environmental pollution the study took place in four villages in southern italy identical questionnaires were administered to residents during 2003 and after the closure of the facilities occurred in 2008 the residents perception of odour nuisance considerably diminished between 2003 and 2009 for the nearest villages with odour perception showing an association with distance from the facilities post closure residents had difficulty in identifying the type of smell due to the decrease in odour level during both surveys older residents reported most concern about the potentially adverse health impacts of long term exposure to odours from msw facilities however although awareness of msw facilities and concern about potentially adverse health impacts varied according to the characteristics of residents in 2003 substantial media coverage produced an equalisation effect and increased knowledge about the type of facilities and how they operated it is possible that residents of the village nearest to the facilities reported lower awareness of and concern about odour and environmental pollution because the municipality received economic compensation for their presence environment landfill odour pollution public opinion refuse derived fuel waste management,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
600,0,Absorption of odourous substances using selective gas--liquid separation processes Absorption is one of the most widely used techniques for treating odourous waste gases. An improvement of the effectiveness of gas scrubbers can be achieved by using adapted washing liquids. A screening test is proposed as a low cost tool for testing washing liquids on industrial waste gases. The odour index is used to identify the main cause of the specific smell and to simplify the analysis of absorptive performances of washing liquids. The method is verified by experiments at a chocolate factory and a fat and oil refinery. [],absorption of odourous substances using selective gas liquid separation processes absorption is one of the most widely used techniques for treating odourous waste gases an improvement of the effectiveness of gas scrubbers can be achieved by using adapted washing liquids a screening test is proposed as a low cost tool for testing washing liquids on industrial waste gases the odour index is used to identify the main cause of the specific smell and to simplify the analysis of absorptive performances of washing liquids the method is verified by experiments at a chocolate factory and a fat and oil refinery,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
601,0,"Don't do this -- Pitfalls in using anti-patterns in teaching human--computer interaction principles This paper explores the use of design patterns and anti-patterns in teaching human--computer interaction principles. Patterns are increasingly popular and are seen as an efficient knowledge transfer mechanism in many fields, including software development in the field of software engineering, and more recently in the field of human--computer interaction. In software engineering a concerted effort is also being made to identify and document anti-patterns for recording the experiences of expert software developers to caution novices against potential bad practices. It is, however, essential that we ensure compatibility with the learner's internal knowledge representation and acquisition processes, whether we are attempting to convey the knowledge in the form of a pattern or an anti-pattern. Since teaching with anti-patterns implies using negation, the primary aim of the research reported in this paper is to explore the efficacy of negative, rather than positive, teaching mechanisms. Evidence from theories of mental modelling and knowledge acquisition that highlight significant dangers in the use of anti-patterns to teach novices human--computer interaction principles is presented and supported with empirical findings. We started off by investigating the use of patterns (positive) in teaching, and then carried out experiments to test the use of anti-patterns (negative) in teaching HCI principles. This paper, whilst reporting mainly on our findings with respect to HCI design anti-patterns, will also identify some problems with the structure and use of patterns and anti-patterns in pedagogy. Human--computer interface, Improving classroom teaching, Pedagogical issues, Teaching strategies",don t do this pitfalls in using anti patterns in teaching human computer interaction principles this paper explores the use of design patterns and anti patterns in teaching human computer interaction principles patterns are increasingly popular and are seen as an efficient knowledge transfer mechanism in many fields including software development in the field of software engineering and more recently in the field of human computer interaction in software engineering a concerted effort is also being made to identify and document anti patterns for recording the experiences of expert software developers to caution novices against potential bad practices it is however essential that we ensure compatibility with the learner s internal knowledge representation and acquisition processes whether we are attempting to convey the knowledge in the form of a pattern or an anti pattern since teaching with anti patterns implies using negation the primary aim of the research reported in this paper is to explore the efficacy of negative rather than positive teaching mechanisms evidence from theories of mental modelling and knowledge acquisition that highlight significant dangers in the use of anti patterns to teach novices human computer interaction principles is presented and supported with empirical findings we started off by investigating the use of patterns positive in teaching and then carried out experiments to test the use of anti patterns negative in teaching hci principles this paper whilst reporting mainly on our findings with respect to hci design anti patterns will also identify some problems with the structure and use of patterns and anti patterns in pedagogy human computer interface improving classroom teaching pedagogical issues teaching strategies,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
602,0,"Biogeochemical processes in a clay formation in situ experiment: Part D -- Microbial analyses -- Synthesis of results The purpose of the Porewater Chemistry (PC) experiment at the Mont Terri (MT) Underground Rock Laboratory (URL) was to measure geochemical parameters, such as pH, Eh and pCO2, in the porewater of the Opalinus Clay formation. Although the PC experiment was designed and implemented carefully from a geochemical perspective, conditions were not sterile and some microbial and nutrient contamination likely occurred. Microbial activity in the added synthetic porewater in the borehole was apparent shortly after initiation of the experiment and affected the geochemical parameters observed in the porewater. This paper summarizes the results from microbial analyses of post-termination PC water and overcore clay samples, conducted to attempt to elucidate the role of microbial activity in the evolution of the geochemical conditions in the PC experiment. Microbial analyses of the PC borehole water, and of clay overcore samples from around the borehole, were carried out at three laboratories and included both molecular biology and culturing methods. Results indicated the presence of heterotrophic aerobic and anaerobic organisms that resulted likely from the initial, non-sterile conditions, sustained by suspected contamination with organic matter (glycerol, acetone). The results also indicated the presence of NO3-reducers, Fe-reducers, SO4-reducers and methanogens (i.e., Bacteria as well as Archaea), suggesting a reducing environment with Fe(III)- and SO4 reduction, and methanogenesis occurring in the PC water and adjacent clay. A black precipitate containing pyrite (identified by XRD and SEM) and a strong H2S smell in the porewater confirmed the occurrence of SO4 reduction. Microorganisms identified in the porewater included Pseudomonas stutzeri, Bacillus licheniformis, Desulfosporosinus spp. and Hyphomonas spp. Species identified in enrichment cultures from the overcore samples included Pseudomonas stutzeri, three species of Trichococcus spp., Caldanaerocella colombiensis, Geosporobacter subterrenus and Desulfosporosinus lacus. Overall the results indicated a thriving microbial community in the PC water and adjacent clay in contrast to ``undisturbed'' Opalinus Clay for which limited evidence for a small viable microbial community has been given in a previous study. []",biogeochemical processes in a clay formation in situ experiment part d microbial analyses synthesis of results the purpose of the porewater chemistry pc experiment at the mont terri mt underground rock laboratory url was to measure geochemical parameters such as ph eh and pco2 in the porewater of the opalinus clay formation although the pc experiment was designed and implemented carefully from a geochemical perspective conditions were not sterile and some microbial and nutrient contamination likely occurred microbial activity in the added synthetic porewater in the borehole was apparent shortly after initiation of the experiment and affected the geochemical parameters observed in the porewater this paper summarizes the results from microbial analyses of post termination pc water and overcore clay samples conducted to attempt to elucidate the role of microbial activity in the evolution of the geochemical conditions in the pc experiment microbial analyses of the pc borehole water and of clay overcore samples from around the borehole were carried out at three laboratories and included both molecular biology and culturing methods results indicated the presence of heterotrophic aerobic and anaerobic organisms that resulted likely from the initial non sterile conditions sustained by suspected contamination with organic matter glycerol acetone the results also indicated the presence of no3 reducers fe reducers so4 reducers and methanogens i e bacteria as well as archaea suggesting a reducing environment with fe iii and so4 reduction and methanogenesis occurring in the pc water and adjacent clay a black precipitate containing pyrite identified by xrd and sem and a strong h2s smell in the porewater confirmed the occurrence of so4 reduction microorganisms identified in the porewater included pseudomonas stutzeri bacillus licheniformis desulfosporosinus spp and hyphomonas spp species identified in enrichment cultures from the overcore samples included pseudomonas stutzeri three species of trichococcus spp caldanaerocella colombiensis geosporobacter subterrenus and desulfosporosinus lacus overall the results indicated a thriving microbial community in the pc water and adjacent clay in contrast to undisturbed opalinus clay for which limited evidence for a small viable microbial community has been given in a previous study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
603,0,"Improving Web Service descriptions for effective service discovery Service-Oriented Computing (SOC) is a new paradigm that replaces the traditional way to develop distributed software with a combination of discovery, engagement and reuse of third-party services. Web Service technologies are currently the most adopted alternative for implementing the SOC paradigm. However, Web Service discovery presents many challenges that, in the end, hinder service reuse. This paper reports frequent practices present in a body of public services that attempt to prevent the discovery of any service. In addition, we have studied how to solve the discoverability problems that these bad practices cause. Accordingly, this paper presents a novel catalog of eight Web Service discoverability anti-patterns. We conducted a comparative analysis of the retrieval effectiveness of three discovery systems by using the original body of Web Services versus their corrected version. This experiment shows that the removal of the identified anti-patterns eases the discovery process by allowing the employed discovery systems to rank more relevant services before non-relevant ones, with the same queries. Moreover, we conducted a survey to collect the opinions from 26 individuals about whether the improved descriptions are more intelligible than the original ones. This experiment provides more evidence of the importance of correcting the observed problems. Web Services, Web Service publication, Web Service discovery, Web Service discoverability anti-patterns",improving web service descriptions for effective service discovery service oriented computing soc is a new paradigm that replaces the traditional way to develop distributed software with a combination of discovery engagement and reuse of third party services web service technologies are currently the most adopted alternative for implementing the soc paradigm however web service discovery presents many challenges that in the end hinder service reuse this paper reports frequent practices present in a body of public services that attempt to prevent the discovery of any service in addition we have studied how to solve the discoverability problems that these bad practices cause accordingly this paper presents a novel catalog of eight web service discoverability anti patterns we conducted a comparative analysis of the retrieval effectiveness of three discovery systems by using the original body of web services versus their corrected version this experiment shows that the removal of the identified anti patterns eases the discovery process by allowing the employed discovery systems to rank more relevant services before non relevant ones with the same queries moreover we conducted a survey to collect the opinions from 26 individuals about whether the improved descriptions are more intelligible than the original ones this experiment provides more evidence of the importance of correcting the observed problems web services web service publication web service discovery web service discoverability anti patterns,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
604,0,"Detecting Performance Anti-patterns for Applications Developed Using Object-relational Mapping Object-Relational Mapping (ORM) provides developers a conceptual abstraction for mapping the application code to the underlying databases. ORM is widely used in industry due to its convenience; permitting developers to focus on developing the business logic without worrying too much about the database access details. However, developers often write ORM code without considering the impact of such code on database performance, leading to cause transactions with timeouts or hangs in large-scale systems. Unfortunately, there is little support to help developers automatically detect suboptimal database accesses. In this paper, we propose an automated framework to detect ORM performance anti-patterns. Our framework automatically flags performance anti-patterns in the source code. Furthermore, as there could be hundreds or even thousands of instances of anti-patterns, our framework provides sup- port to prioritize performance bug fixes based on a statistically rigorous performance assessment. We have successfully evaluated our framework on two open source and one large-scale industrial systems. Our case studies show that our framework can detect new and known real-world performance bugs and that fixing the detected performance anti- patterns can improve the system response time by up to 98%. Dynamic Analysis, Performance, Performance Anti-pattern, Performance Evaluation, Static Analysis",detecting performance anti patterns for applications developed using object relational mapping object relational mapping orm provides developers a conceptual abstraction for mapping the application code to the underlying databases orm is widely used in industry due to its convenience permitting developers to focus on developing the business logic without worrying too much about the database access details however developers often write orm code without considering the impact of such code on database performance leading to cause transactions with timeouts or hangs in large scale systems unfortunately there is little support to help developers automatically detect suboptimal database accesses in this paper we propose an automated framework to detect orm performance anti patterns our framework automatically flags performance anti patterns in the source code furthermore as there could be hundreds or even thousands of instances of anti patterns our framework provides sup port to prioritize performance bug fixes based on a statistically rigorous performance assessment we have successfully evaluated our framework on two open source and one large scale industrial systems our case studies show that our framework can detect new and known real world performance bugs and that fixing the detected performance anti patterns can improve the system response time by up to 98 dynamic analysis performance performance anti pattern performance evaluation static analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
605,0,"Beliefs and attitudes of butchers and consumers towards dry-cured ham The objectives were to evaluate the attitude of butcher and consumer towards soft and pasty texture problems in dry-cured ham and to assess the butcher and consumer behaviour when selecting and purchasing this product. Ninety-nine butchers and 200 consumers were interviewed with 17-question and 20-question surveys, respectively. The texture problems (softness and pastiness) were highly important for both butchers and consumers. The characteristics most frequently considered ``important'' or ``very important'' by butchers were processing time, smell/aroma and texture as selection criteria and salty taste and aged/matured flavour as sensory indicators of dry-cured ham quality. According to butchers' opinion, salty taste and their own advice are the factors most frequently considered ``important'' or ``very important'' as affecting the consumer's decision to purchase. For the consumer, the sensory attributes were considered more important than extrinsic characteristics when purchasing dry-cured ham. Texture problems, Sensory quality, Butchers, Consumers, Dry-cured ham",beliefs and attitudes of butchers and consumers towards dry cured ham the objectives were to evaluate the attitude of butcher and consumer towards soft and pasty texture problems in dry cured ham and to assess the butcher and consumer behaviour when selecting and purchasing this product ninety nine butchers and 200 consumers were interviewed with 17 question and 20 question surveys respectively the texture problems softness and pastiness were highly important for both butchers and consumers the characteristics most frequently considered important or very important by butchers were processing time smell aroma and texture as selection criteria and salty taste and aged matured flavour as sensory indicators of dry cured ham quality according to butchers opinion salty taste and their own advice are the factors most frequently considered important or very important as affecting the consumer s decision to purchase for the consumer the sensory attributes were considered more important than extrinsic characteristics when purchasing dry cured ham texture problems sensory quality butchers consumers dry cured ham,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
606,0,"Lipase-catalysed acylglycerol synthesis of glycerol and n−3 PUFA from tuna oil: Optimisation of process parameters Enzymatic synthesis of acylglycerols from glycerol and n−3 polyunsaturated fatty acids concentrates, prepared from tuna oil, was optimised by response surface methodology. Acylglycerol synthesis was performed using Lipozyme Novo 435 under different reaction conditions according to the experiment design. Five factors were chosen to optimise the process parameters of lipase-catalysed synthesis. The results indicated that the esterification degree was above 90% under the following conditions: glycerol -- 2.5g, hexane -- 5ml, the initial water content -- 0.60%, temperature -- 40$ ^\circ$C, and molecular sieves -- 1g. The product was a bright orange and transparent liquid, with no fishlike smell and high mobility. The contents of DHA and EPA were 73.4% and 13.5%, respectively. The reaction product was composed of monoacylglycerols, diacylglycerols and triacylglycerols, the contents of which were 12.1%, 56.1% and 31.3%, respectively. Tuna oil, Polyunsaturated fatty acids, Lipase-catalysed synthesis, Process optimisation",lipase catalysed acylglycerol synthesis of glycerol and n 3 pufa from tuna oil optimisation of process parameters enzymatic synthesis of acylglycerols from glycerol and n 3 polyunsaturated fatty acids concentrates prepared from tuna oil was optimised by response surface methodology acylglycerol synthesis was performed using lipozyme novo 435 under different reaction conditions according to the experiment design five factors were chosen to optimise the process parameters of lipase catalysed synthesis the results indicated that the esterification degree was above 90 under the following conditions glycerol 2 5g hexane 5ml the initial water content 0 60 temperature 40 circ c and molecular sieves 1g the product was a bright orange and transparent liquid with no fishlike smell and high mobility the contents of dha and epa were 73 4 and 13 5 respectively the reaction product was composed of monoacylglycerols diacylglycerols and triacylglycerols the contents of which were 12 1 56 1 and 31 3 respectively tuna oil polyunsaturated fatty acids lipase catalysed synthesis process optimisation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
607,0,"Manufacturing 2: A Simulation Study of Robotic Welding System with Parallel and Serial Processes in the Metal Fabrication Industry This paper presents the usefulness of simulation in studying the impacts of system failures and delays on the output and cycle time of finished weldments produced by a robotic work cell having both serial and parallel processes. Due to multiple processes and overlapped activities, process mapping plays a significant role in building the model. The model replicates a non-terminating welding fabrication system with duplicate stochastic events caused by system failures and delays. A full factorial model is employed and analyzed to examine the main and interaction effects of five major types of system failures and delays via multiple regression analysis. The analysis derived from the full factorial model shows that material handling carrier delays have the most significant impact on the cycle time. This case study illustrates a modeling approach with system verification and validation revealing fundamental system design flaws which cause a significant loss of production. []",manufacturing 2 a simulation study of robotic welding system with parallel and serial processes in the metal fabrication industry this paper presents the usefulness of simulation in studying the impacts of system failures and delays on the output and cycle time of finished weldments produced by a robotic work cell having both serial and parallel processes due to multiple processes and overlapped activities process mapping plays a significant role in building the model the model replicates a non terminating welding fabrication system with duplicate stochastic events caused by system failures and delays a full factorial model is employed and analyzed to examine the main and interaction effects of five major types of system failures and delays via multiple regression analysis the analysis derived from the full factorial model shows that material handling carrier delays have the most significant impact on the cycle time this case study illustrates a modeling approach with system verification and validation revealing fundamental system design flaws which cause a significant loss of production,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
608,0,"Synthesis of odor tracking algorithms with genetic programming At the moment, smell sensors for odor source localization in mobile robotics represent a topic of interest for researchers around the world. In particular, we introduce in this paper the idea of developing biologically inspired sniffing robots in combination with bioinspired techniques such as evolutionary computing. The aim is to approach the problem of creating an artificial nose that can be incorporated into a real working system, while considering the environmental model and odor behavior, the perception system, and algorithm for tracking the odor plume. Current algorithms try to emulate animal behavior in an attempt to replicate their capability to follow odors. Nevertheless, odor perception systems are still in their infancy and far from their biological counterpart. This paper presents a proposal in which a real-working artificial nose is tested as a perception system within a mobile robot. Genetic programming is used as the learning technique platform to develop odor source localization algorithms. Experiments in simulation and with an actual working robot are presented and the results compared with two algorithms. The quality of results demonstrates that genetic programming is able to recreate chemotaxis behavior by considering mathematical models for odor propagation and perception system. Odor tracking algorithm, Bio-inspired nose, Chemical sensors, Sniffing robot",synthesis of odor tracking algorithms with genetic programming at the moment smell sensors for odor source localization in mobile robotics represent a topic of interest for researchers around the world in particular we introduce in this paper the idea of developing biologically inspired sniffing robots in combination with bioinspired techniques such as evolutionary computing the aim is to approach the problem of creating an artificial nose that can be incorporated into a real working system while considering the environmental model and odor behavior the perception system and algorithm for tracking the odor plume current algorithms try to emulate animal behavior in an attempt to replicate their capability to follow odors nevertheless odor perception systems are still in their infancy and far from their biological counterpart this paper presents a proposal in which a real working artificial nose is tested as a perception system within a mobile robot genetic programming is used as the learning technique platform to develop odor source localization algorithms experiments in simulation and with an actual working robot are presented and the results compared with two algorithms the quality of results demonstrates that genetic programming is able to recreate chemotaxis behavior by considering mathematical models for odor propagation and perception system odor tracking algorithm bio inspired nose chemical sensors sniffing robot,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
609,0,"Monitoring aroma changes during human milk storage at +4 $ ^\circ$C by sensory and quantification experiments Summary Background & aims The effect of human milk storage in the refrigerator has been investigated with regard to sensory changes and modifications to the molecular composition of the milk odour-active volatiles. Methods In the present study, characteristic odorants from fat oxidation, known from previous studies, as well as free fatty acids were quantified as representative marker substances by means of stable isotope dilution assays of fresh milk samples and milk samples stored at +4 $ ^\circ$C for one and three days, respectively. Results Sensory evaluation showed that rancid and sweaty odour attributes were generated during storage, resulting in an unpleasant aroma profile for adults; however, odour changes were not as pronounced as those observed in our previous study for freeze storage. Fatty and buttery odour notes and a cooked milk-like smell were also generated. In total eight odorants from fat oxidation were determined and some potent odorants showed slight concentration increases. Moreover, five free fatty acids were determined and these all showed drastic concentration increases, even after storage for just one day. Conclusions These investigations support our previous findings that storage recommendations for breast milk might need to be slightly reconsidered in view of potential sensory changes; on the other hand, no negative physiological effects are to be expected from these changes. Quantification, Stable isotope dilution assays (SIDA), Storage at +4 $ ^\circ$C, Fatty acid oxidation, Polyunsaturated fatty acid (PUFA), Human milk",monitoring aroma changes during human milk storage at 4 circ c by sensory and quantification experiments summary background aims the effect of human milk storage in the refrigerator has been investigated with regard to sensory changes and modifications to the molecular composition of the milk odour active volatiles methods in the present study characteristic odorants from fat oxidation known from previous studies as well as free fatty acids were quantified as representative marker substances by means of stable isotope dilution assays of fresh milk samples and milk samples stored at 4 circ c for one and three days respectively results sensory evaluation showed that rancid and sweaty odour attributes were generated during storage resulting in an unpleasant aroma profile for adults however odour changes were not as pronounced as those observed in our previous study for freeze storage fatty and buttery odour notes and a cooked milk like smell were also generated in total eight odorants from fat oxidation were determined and some potent odorants showed slight concentration increases moreover five free fatty acids were determined and these all showed drastic concentration increases even after storage for just one day conclusions these investigations support our previous findings that storage recommendations for breast milk might need to be slightly reconsidered in view of potential sensory changes on the other hand no negative physiological effects are to be expected from these changes quantification stable isotope dilution assays sida storage at 4 circ c fatty acid oxidation polyunsaturated fatty acid pufa human milk,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
610,0,"Rats smell: odour-mediated local enhancement, in a vertical movement two-action test In two experiments, hungry rats, Rattus norvegicus, were present in one side of an operant chamber while a conspecific demonstrator in the adjacent compartment moved a single lever either up or down for a food reward. During a subsequent test session, in which these rats were allowed access to the lever for the first time, all responses were rewarded regardless of their direction. In experiment 1, rats that were prevented from observing the direction of lever movement by means of a screen showed a reliable demonstrator-consistent response bias, while rats that had observed the direction of lever movement and in addition had access to any odour cues deposited on the lever did not. In experiment 2, each rat observed another rat (the `viewed' demonstrator) moving a lever either up or down. They were then transferred into the test compartment of a different operant chamber in which another rat (the `box' demonstrator) had moved the lever in the same direction as the viewed demonstrator or in the opposite direction. These observer rats showed a reliable preference for their box demonstrator's direction, but responded in the opposite direction to their viewed demonstrator. Taken together, the results of these experiments suggest that directional responding by rats in a vertical movement two-action test is influenced by demonstrator-deposited odour cues in addition to visual experience of a demonstrator's behaviour. Furthermore, while odour-mediated local enhancement gave rise to demonstrator-consistent responding, visual observation of a conspecific appeared to have the reverse effect. Copyright 2002 The Association for the Study of Animal Behaviour. Published by Elsevier Science Ltd. All rights reserved. []",rats smell odour mediated local enhancement in a vertical movement two action test in two experiments hungry rats rattus norvegicus were present in one side of an operant chamber while a conspecific demonstrator in the adjacent compartment moved a single lever either up or down for a food reward during a subsequent test session in which these rats were allowed access to the lever for the first time all responses were rewarded regardless of their direction in experiment 1 rats that were prevented from observing the direction of lever movement by means of a screen showed a reliable demonstrator consistent response bias while rats that had observed the direction of lever movement and in addition had access to any odour cues deposited on the lever did not in experiment 2 each rat observed another rat the viewed demonstrator moving a lever either up or down they were then transferred into the test compartment of a different operant chamber in which another rat the box demonstrator had moved the lever in the same direction as the viewed demonstrator or in the opposite direction these observer rats showed a reliable preference for their box demonstrator s direction but responded in the opposite direction to their viewed demonstrator taken together the results of these experiments suggest that directional responding by rats in a vertical movement two action test is influenced by demonstrator deposited odour cues in addition to visual experience of a demonstrator s behaviour furthermore while odour mediated local enhancement gave rise to demonstrator consistent responding visual observation of a conspecific appeared to have the reverse effect copyright 2002 the association for the study of animal behaviour published by elsevier science ltd all rights reserved,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
611,0,"Infant visual preference for fruit enhanced by congruent in-season odor We explored the ability of infants to recognize the smell of daily foods, including strawberries and tomatoes, by using a preferential-looking-technique. Experiment 1 was conducted while strawberries were in season (from March to June) in order to enhance the frequency of participant exposure to strawberries outside of the laboratory. Thirty-seven infants aged 6--8months were tested with a stimulus composed of a pair of photos of strawberries and tomatoes placed side by side and accompanied by a strawberry odor, a tomato odor, or no odors. Infants showed a preference for the strawberry picture when they smelled the congruent odor, but no such preference for the tomato picture. These results suggest that even young infants can recognize olfactory--visual congruency. We conducted Experiment 2 while strawberries were out of season (from July to September) to reduce participant exposure to strawberries in their daily life. Twenty-six infants aged 6--8months were tested with a stimulus composed of a pair of photos of strawberries and tomatoes placed side by side and accompanied by a strawberry odor, or no odors. In Experiment 2, the olfactory--visual binding effect disappeared. This implies that visual--olfactory binding is triggered by an observer's experience. Olfactory perception, Infant cognition, Child development, Multisensory perception, Object recognition",infant visual preference for fruit enhanced by congruent in season odor we explored the ability of infants to recognize the smell of daily foods including strawberries and tomatoes by using a preferential looking technique experiment 1 was conducted while strawberries were in season from march to june in order to enhance the frequency of participant exposure to strawberries outside of the laboratory thirty seven infants aged 6 8months were tested with a stimulus composed of a pair of photos of strawberries and tomatoes placed side by side and accompanied by a strawberry odor a tomato odor or no odors infants showed a preference for the strawberry picture when they smelled the congruent odor but no such preference for the tomato picture these results suggest that even young infants can recognize olfactory visual congruency we conducted experiment 2 while strawberries were out of season from july to september to reduce participant exposure to strawberries in their daily life twenty six infants aged 6 8months were tested with a stimulus composed of a pair of photos of strawberries and tomatoes placed side by side and accompanied by a strawberry odor or no odors in experiment 2 the olfactory visual binding effect disappeared this implies that visual olfactory binding is triggered by an observer s experience olfactory perception infant cognition child development multisensory perception object recognition,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
612,0,"Detecting architecturally-relevant code smells in evolving software systems Refactoring tends to avoid the early deviation of a program from its intended architecture design. However, there is little knowledge about whether the manifestation of code smells in evolving software is indicator of architectural deviations. A fundamental difficulty in this process is that developers are only equipped with static analysis techniques for the source code, which do not exploit traceable architectural information. This work addresses this problem by: (1) identifying a family of architecturally-relevant code smells; (2) providing empirical evidence about the correlation of code smell patterns and architectural degeneration; (3) proposing a set of metrics and detection strategies and that exploit traceable architectural information in smell detection; and (4) conceiving a technique to support the early identification of architecture degeneration symptoms by reasoning about code smell patterns. program diagnostics, reasoning about programs, software architecture, software maintenance, software metrics, architecturally-relevant code smell detection, software systems, refactoring, software evolution, static analysis techniques, source code, code smell pattern correlation, architectural degeneration, metrics strategies, detection strategies, architecture degeneration symptoms, Computer architecture, Measurement, Accuracy, Software, DSL, Graphical user interfaces, Correlation, architectural degeneration, code smells, design rule",detecting architecturally relevant code smells in evolving software systems refactoring tends to avoid the early deviation of a program from its intended architecture design however there is little knowledge about whether the manifestation of code smells in evolving software is indicator of architectural deviations a fundamental difficulty in this process is that developers are only equipped with static analysis techniques for the source code which do not exploit traceable architectural information this work addresses this problem by 1 identifying a family of architecturally relevant code smells 2 providing empirical evidence about the correlation of code smell patterns and architectural degeneration 3 proposing a set of metrics and detection strategies and that exploit traceable architectural information in smell detection and 4 conceiving a technique to support the early identification of architecture degeneration symptoms by reasoning about code smell patterns program diagnostics reasoning about programs software architecture software maintenance software metrics architecturally relevant code smell detection software systems refactoring software evolution static analysis techniques source code code smell pattern correlation architectural degeneration metrics strategies detection strategies architecture degeneration symptoms computer architecture measurement accuracy software dsl graphical user interfaces correlation architectural degeneration code smells design rule,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
613,0,"Riemannian Geometry Applied to Detection of Respiratory States From EEG Signals: The Basis for a Brain--Ventilator Interface Goal: During mechanical ventilation, patient-ventilator disharmony is frequently observed and may result in increased breathing effort, compromising the patient's comfort and recovery. This circumstance requires clinical intervention and becomes challenging when verbal communication is difficult. In this study, we propose a brain-computer interface (BCI) to automatically and noninvasively detect patient-ventilator disharmony from electroencephalographic (EEG) signals: a brain-ventilator interface (BVI). Methods: Our framework exploits the cortical activation provoked by the inspiratory compensation when the subject and the ventilator are desynchronized. Use of a one-class approach and Riemannian geometry of EEG covariance matrices allows effective classification of respiratory states. The BVI is validated on nine healthy subjects that performed different respiratory tasks that mimic a patient-ventilator disharmony. Results: Classification performances, in terms of areas under receiver operating characteristic curves, are significantly improved using EEG signals compared to detection based on air flow. Reduction in the number of electrodes that can achieve discrimination can be often desirable (e.g., for portable BCI systems). By using an iterative channel selection technique, the common highest order ranking, we find that a reduced set of electrodes (n = 6) can slightly improve for an intrasubject configuration, and it still provides fairly good performances for a general intersubject setting. Conclusion: Results support the discriminant capacity of our approach to identify anomalous respiratory states, by learning from a training set containing only normal respiratory epochs. Significance: The proposed framework opens the door to BVIs for monitoring patient's breathing comfort and adapting ventilator parameters to patient respiratory needs. bioelectric potentials, brain-computer interfaces, electroencephalography, lung, medical signal detection, medical signal processing, neurophysiology, sensitivity analysis, Riemannian geometry, respiratory state detection, brain-ventilator interface, mechanical ventilation, breathing effort, verbal communication, brain-computer interface, automatic patient-ventilator disharmony detection, noninvasive patient-ventilator disharmony detection, EEG signals, electroencephalographic signals, inspiratory compensation, one-class approach, EEG covariance matrices, areas under receiver operating characteristic curves, iterative channel selection technique, Electroencephalography, Covariance matrices, Geometry, Electrodes, Prototypes, Feature extraction, Ventilation, Biomedical signal processing, biomedical monitoring, brain--computer interfaces (BCI), electroencephalography (EEG), medical signal detection, Adult, Brain, Brain-Computer Interfaces, Diagnosis, Computer-Assisted, Electroencephalography, Female, Humans, Machine Learning, Male, Pattern Recognition, Automated, Respiration, Artificial, Respiratory Mechanics",riemannian geometry applied to detection of respiratory states from eeg signals the basis for a brain ventilator interface goal during mechanical ventilation patient ventilator disharmony is frequently observed and may result in increased breathing effort compromising the patient s comfort and recovery this circumstance requires clinical intervention and becomes challenging when verbal communication is difficult in this study we propose a brain computer interface bci to automatically and noninvasively detect patient ventilator disharmony from electroencephalographic eeg signals a brain ventilator interface bvi methods our framework exploits the cortical activation provoked by the inspiratory compensation when the subject and the ventilator are desynchronized use of a one class approach and riemannian geometry of eeg covariance matrices allows effective classification of respiratory states the bvi is validated on nine healthy subjects that performed different respiratory tasks that mimic a patient ventilator disharmony results classification performances in terms of areas under receiver operating characteristic curves are significantly improved using eeg signals compared to detection based on air flow reduction in the number of electrodes that can achieve discrimination can be often desirable e g for portable bci systems by using an iterative channel selection technique the common highest order ranking we find that a reduced set of electrodes n 6 can slightly improve for an intrasubject configuration and it still provides fairly good performances for a general intersubject setting conclusion results support the discriminant capacity of our approach to identify anomalous respiratory states by learning from a training set containing only normal respiratory epochs significance the proposed framework opens the door to bvis for monitoring patient s breathing comfort and adapting ventilator parameters to patient respiratory needs bioelectric potentials brain computer interfaces electroencephalography lung medical signal detection medical signal processing neurophysiology sensitivity analysis riemannian geometry respiratory state detection brain ventilator interface mechanical ventilation breathing effort verbal communication brain computer interface automatic patient ventilator disharmony detection noninvasive patient ventilator disharmony detection eeg signals electroencephalographic signals inspiratory compensation one class approach eeg covariance matrices areas under receiver operating characteristic curves iterative channel selection technique electroencephalography covariance matrices geometry electrodes prototypes feature extraction ventilation biomedical signal processing biomedical monitoring brain computer interfaces bci electroencephalography eeg medical signal detection adult brain brain computer interfaces diagnosis computer assisted electroencephalography female humans machine learning male pattern recognition automated respiration artificial respiratory mechanics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
614,0,"Vocktail: A Virtual Cocktail for Pairing Digital Taste, Smell, and Color Sensations Similar to the concept of a cocktail or mocktail, we present Vocktail (a.k.a. Virtual Cocktail) - an interactive drinking utensil that digitally simulates multisensory flavor experiences. The Vocktail system utilizes three common sensory modalities, taste, smell, and visual (color), to create virtual flavors and augment the existing flavors of a beverage. The system is coupled with a mobile application that enables users to create customized virtual flavor sensations by configuring each of the stimuli via Bluetooth. The system consists of a cocktail glass that is seamlessly fused into a 3D printed structure, which holds the electronic control module, three scent cartridges, and three micro air-pumps. When a user drinks from the system, the visual (RGB light projected on the beverage), taste (electrical stimulation at the tip of the tongue), and smell stimuli (emitted by micro air-pumps) are combined to create a virtual flavor sensation, thus altering the flavor of the beverage. In summary, this paper discusses 1) technical details of the Vocktail system and 2) user experiments that investigate the influences of these multimodal stimuli on the perception of virtual flavors in terms of five primary tastes (i.e. salty, sweet, bitter, sour, and umami). Our results suggest that the combination of these stimuli delivers richer flavor experiences, as compared to separately simulating individual modalities, and indicates that the types of pairings that can be formed between smell and electric taste stimuli. digital taste, electric taste, virtual cocktail, virtual flavor, virtual taste, vocktail",vocktail a virtual cocktail for pairing digital taste smell and color sensations similar to the concept of a cocktail or mocktail we present vocktail a k a virtual cocktail an interactive drinking utensil that digitally simulates multisensory flavor experiences the vocktail system utilizes three common sensory modalities taste smell and visual color to create virtual flavors and augment the existing flavors of a beverage the system is coupled with a mobile application that enables users to create customized virtual flavor sensations by configuring each of the stimuli via bluetooth the system consists of a cocktail glass that is seamlessly fused into a 3d printed structure which holds the electronic control module three scent cartridges and three micro air pumps when a user drinks from the system the visual rgb light projected on the beverage taste electrical stimulation at the tip of the tongue and smell stimuli emitted by micro air pumps are combined to create a virtual flavor sensation thus altering the flavor of the beverage in summary this paper discusses 1 technical details of the vocktail system and 2 user experiments that investigate the influences of these multimodal stimuli on the perception of virtual flavors in terms of five primary tastes i e salty sweet bitter sour and umami our results suggest that the combination of these stimuli delivers richer flavor experiences as compared to separately simulating individual modalities and indicates that the types of pairings that can be formed between smell and electric taste stimuli digital taste electric taste virtual cocktail virtual flavor virtual taste vocktail,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
615,0,"Study of odor recorder for recording recipe of orange flavor The smell reproduction technique in addition to that for vision and hearing will be useful in the fields of virtual environments, games and e-commerce. In this study, citrus flavors were electronically recorded using ""odor recorder"" composed of quartz crystal microbalance odor sensors. First, an artificial orange flavor composed of 14 constituents was successfully recorded with its approximated recipe of 3 odor components. The human sensory test revealed that the reproduced odor was close to the target odor for the human olfaction. Next, we tried to record natural smells from citrus essential oils. The mixture smells of two essential oils were successfully recorded using the odor recorder. gas sensors, microbalances, chemioception, odor recorder, orange flavor, virtual environments, games, e-commerce, citrus flavors, quartz crystal microbalance odor sensors, human sensory test, human olfaction, citrus essential oils, mixture smells, Sensor arrays, Oils, Humans, Auditory system, Virtual environment, Games, Testing, CD recording, Video recording, Sensor systems",study of odor recorder for recording recipe of orange flavor the smell reproduction technique in addition to that for vision and hearing will be useful in the fields of virtual environments games and e commerce in this study citrus flavors were electronically recorded using odor recorder composed of quartz crystal microbalance odor sensors first an artificial orange flavor composed of 14 constituents was successfully recorded with its approximated recipe of 3 odor components the human sensory test revealed that the reproduced odor was close to the target odor for the human olfaction next we tried to record natural smells from citrus essential oils the mixture smells of two essential oils were successfully recorded using the odor recorder gas sensors microbalances chemioception odor recorder orange flavor virtual environments games e commerce citrus flavors quartz crystal microbalance odor sensors human sensory test human olfaction citrus essential oils mixture smells sensor arrays oils humans auditory system virtual environment games testing cd recording video recording sensor systems,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
616,0,"The smell of success: choice of larval rearing sites by means of chemical cues in a Peruvian poison frog Parental care is a common strategy among vertebrates to ensure successful reproduction. Anuran amphibians have evolved a remarkable diversity of reproductive methods including advanced levels of parental care. Among the most derived strategies are those of the Neotropical poison frogs (Dendrobatidae). These amphibians exhibit a wide array of behavioural traits such as egg guarding, larval transport by parental frogs and larval feeding with trophic (unfertilized) eggs. Ranitomeya variabilis from the upper Amazon basin in Peru deposits both eggs and tadpoles in phytotelmata. The exploitation of these small pools is advantageous as it lowers the risk of predation, but it is more costly because of limited resource availability. Additionally, poison frog larvae are often cannibalistic, so the identification and avoidance of conspecifics represents an adaptive behaviour for these amphibians. While studies have shown that poison frogs actively avoid depositing with conspecifics, the mechanism for assessing pool quality remains unknown. In field experiments, we found that parental R. variabilis frogs used chemical cues to recognize the presence of tadpoles in phytotelmata. Furthermore, they distinguished between cannibalistic and noncannibalistic tadpoles, a behaviour that supports the survival of their own offspring. Dendrobatidae, olfaction, parental care, phytotelmata, predation, , reproductive strategy",the smell of success choice of larval rearing sites by means of chemical cues in a peruvian poison frog parental care is a common strategy among vertebrates to ensure successful reproduction anuran amphibians have evolved a remarkable diversity of reproductive methods including advanced levels of parental care among the most derived strategies are those of the neotropical poison frogs dendrobatidae these amphibians exhibit a wide array of behavioural traits such as egg guarding larval transport by parental frogs and larval feeding with trophic unfertilized eggs ranitomeya variabilis from the upper amazon basin in peru deposits both eggs and tadpoles in phytotelmata the exploitation of these small pools is advantageous as it lowers the risk of predation but it is more costly because of limited resource availability additionally poison frog larvae are often cannibalistic so the identification and avoidance of conspecifics represents an adaptive behaviour for these amphibians while studies have shown that poison frogs actively avoid depositing with conspecifics the mechanism for assessing pool quality remains unknown in field experiments we found that parental r variabilis frogs used chemical cues to recognize the presence of tadpoles in phytotelmata furthermore they distinguished between cannibalistic and noncannibalistic tadpoles a behaviour that supports the survival of their own offspring dendrobatidae olfaction parental care phytotelmata predation reproductive strategy,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
617,0,"Effects of Haptization on Disabled People Terminal equipment like personal computers (PCs) and mobile phones are mainstream devices in the Information Society. Most means for stimulating active communications depend on visual information. To classify human sensations, the phrase of ""five senses"" consisting of vision, hearing, touch, taste, and smell, has been used from olden days. This classification is triggered by the ancient Greeks. However, there are at least nine types or over twenty types of human sensory channels if the classification is considered from a practical standpoint. In the case of touch sensation, it tells the brain not only simple skin sensations, pain, and temperature, but also a variety of sensations such as pressure and vibration. As you can easily experience when you browse web pages on the Internet, the current web technology enables the visualization of their contents, it does not provide any means to convey other sensory information. Consequently, we focus on the tactile information as a way for enabling multisensory communication and we are conducting a research project for designing and developing a ¿haptization¿ based communication framework and its application systems. It is not just a vision targeted at people with disabilities, and we would like to eye pregnant, elderly, and the weak in information technology who called ¿digital divide¿. Such people ordinarily have difficulties for obtaining information as various reasons. We report our past activities and a questionnaire survey for exploring problems such as what is the impact of haptization to use as a communication mean, and what are technical issues for implementing a good solution. handicapped aids, haptic interfaces, disabled people, information society, tactile information, multisensory communication, haptization based communication framework, people with disabilities, Humans, Microcomputers, Personal communication networks, Mobile handsets, Mobile communication, Auditory system, Skin, Pain, Temperature sensors, Web pages, disabled people, haptization, digital divide, the weak in information technology, information accesibility",effects of haptization on disabled people terminal equipment like personal computers pcs and mobile phones are mainstream devices in the information society most means for stimulating active communications depend on visual information to classify human sensations the phrase of five senses consisting of vision hearing touch taste and smell has been used from olden days this classification is triggered by the ancient greeks however there are at least nine types or over twenty types of human sensory channels if the classification is considered from a practical standpoint in the case of touch sensation it tells the brain not only simple skin sensations pain and temperature but also a variety of sensations such as pressure and vibration as you can easily experience when you browse web pages on the internet the current web technology enables the visualization of their contents it does not provide any means to convey other sensory information consequently we focus on the tactile information as a way for enabling multisensory communication and we are conducting a research project for designing and developing a haptization based communication framework and its application systems it is not just a vision targeted at people with disabilities and we would like to eye pregnant elderly and the weak in information technology who called digital divide such people ordinarily have difficulties for obtaining information as various reasons we report our past activities and a questionnaire survey for exploring problems such as what is the impact of haptization to use as a communication mean and what are technical issues for implementing a good solution handicapped aids haptic interfaces disabled people information society tactile information multisensory communication haptization based communication framework people with disabilities humans microcomputers personal communication networks mobile handsets mobile communication auditory system skin pain temperature sensors web pages disabled people haptization digital divide the weak in information technology information accesibility,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
618,0,"Detecting Architecturally-relevant Code Anomalies: A Case Study of Effectiveness and Effort Code anomalies are structural problems in the program. Even though they might represent symptoms of architecture degradation, several code anomalies do not contribute to this process. Source code inspection by developers might not support time-effective detection of architecturally-relevant anomalies in a program. Hence, they usually rely on multiple software metrics known to effectively detect code anomalies. However, there is still no empirical knowledge about the time effectiveness of metric-based strategies to detect architecturally-relevant anomalies. Given the longitudinal nature of this activity, we performed a first exploratory case study to address this gap. We compare metrics-based strategies with manual inspections made by the actual software developers. The study was conducted in the context of a legacy software system with 30K lines of code, 415 architectural elements, 210 versions, and embracing reengineering effort for almost 3 years. Effectiveness was assessed in terms of several quantitative and qualitative indicators. To measure the effort, we computed the amount of time used in several activities required to identify architecturally-relevant code anomalies. The results of our study shed light on potential effort reduction and effectiveness improvements of metrics-based strategies. architectural degeneration, code anomaly, effectiveness, effort",detecting architecturally relevant code anomalies a case study of effectiveness and effort code anomalies are structural problems in the program even though they might represent symptoms of architecture degradation several code anomalies do not contribute to this process source code inspection by developers might not support time effective detection of architecturally relevant anomalies in a program hence they usually rely on multiple software metrics known to effectively detect code anomalies however there is still no empirical knowledge about the time effectiveness of metric based strategies to detect architecturally relevant anomalies given the longitudinal nature of this activity we performed a first exploratory case study to address this gap we compare metrics based strategies with manual inspections made by the actual software developers the study was conducted in the context of a legacy software system with 30k lines of code 415 architectural elements 210 versions and embracing reengineering effort for almost 3 years effectiveness was assessed in terms of several quantitative and qualitative indicators to measure the effort we computed the amount of time used in several activities required to identify architecturally relevant code anomalies the results of our study shed light on potential effort reduction and effectiveness improvements of metrics based strategies architectural degeneration code anomaly effectiveness effort,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
619,0,"Semantic Smells and Errors in Access Control Models: A Case Study in PHP Access control models implement mechanisms to restrict access to sensitive data from unprivileged users. Access controls typically check privileges that capture the semantics of the operations they protect. Semantic smells and errors in access control models stem from privileges that are partially or totally unrelated to the action they protect. This paper presents a novel approach, partly based on static analysis and information retrieval techniques, for the automatic detection of semantic smells and errors in access control models. Investigation of the case study application revealed 31 smells and 2 errors. Errors were reported to developers who quickly confirmed their relevance and took actions to correct them. Based on the obtained results, we also propose three categories of semantic smells and errors to lay the foundations for further research on access control smells in other systems and domains. []",semantic smells and errors in access control models a case study in php access control models implement mechanisms to restrict access to sensitive data from unprivileged users access controls typically check privileges that capture the semantics of the operations they protect semantic smells and errors in access control models stem from privileges that are partially or totally unrelated to the action they protect this paper presents a novel approach partly based on static analysis and information retrieval techniques for the automatic detection of semantic smells and errors in access control models investigation of the case study application revealed 31 smells and 2 errors errors were reported to developers who quickly confirmed their relevance and took actions to correct them based on the obtained results we also propose three categories of semantic smells and errors to lay the foundations for further research on access control smells in other systems and domains,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
620,0,"A rose in any other font would not smell as sweet: Effects of perceptual fluency on categorization Fluency -- the ease with which people process information -- is a central piece of information we take into account when we make judgments about the world. Prior research has shown that fluency affects judgments in a wide variety of domains, including frequency, familiarity, and confidence. In this paper, we present evidence that fluency also plays a role in categorization judgments. In Experiment 1, participants judged a variety of different exemplars to be worse category members if they were less fluent (because they were presented in a smaller typeface). In Experiment 2, we found that fluency also affected judgments of feature typicality. In Experiment 3, we demonstrated that the effects of fluency can be reversed when a salient attribution for reduced fluency is available (i.e., the stimuli are hard to read because they were printed by a printer with low toner). In Experiment 4 we replicated these effects using a within-subject design, which ruled out the possibility that the effects were a statistical artifact caused by aggregation of data. We propose a possible mechanism for these effects: if an exemplar and its category are closely related, activation of one will cause priming of the other, leading to increased fluency. Over time, feelings of fluency come to be used as a valid cue that can become confused with more traditional sources of information about category membership. Perceptual fluency, Categorization, Priming, Categorical induction",a rose in any other font would not smell as sweet effects of perceptual fluency on categorization fluency the ease with which people process information is a central piece of information we take into account when we make judgments about the world prior research has shown that fluency affects judgments in a wide variety of domains including frequency familiarity and confidence in this paper we present evidence that fluency also plays a role in categorization judgments in experiment 1 participants judged a variety of different exemplars to be worse category members if they were less fluent because they were presented in a smaller typeface in experiment 2 we found that fluency also affected judgments of feature typicality in experiment 3 we demonstrated that the effects of fluency can be reversed when a salient attribution for reduced fluency is available i e the stimuli are hard to read because they were printed by a printer with low toner in experiment 4 we replicated these effects using a within subject design which ruled out the possibility that the effects were a statistical artifact caused by aggregation of data we propose a possible mechanism for these effects if an exemplar and its category are closely related activation of one will cause priming of the other leading to increased fluency over time feelings of fluency come to be used as a valid cue that can become confused with more traditional sources of information about category membership perceptual fluency categorization priming categorical induction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
621,0,"Runtime Detection of Business Process Compliance Violations: An Approach Based on Anti Patterns Today's enterprises demand a high degree of compliance in their business processes to meet diverse regulations and legislations. Several industrial studies have shown that compliance management is a daunting task, and organizations are still struggling and spending billions of dollars annually to ensure and prove their compliance. Theoretically, design-time compliance checking could provide a preliminary assurance that corresponding running instances would be compliant to relevant laws and regulations; however, due to the existence of human and machine related errors and the absence of necessary contextual information during design-time, runtime compliance monitoring becomes a must. In this paper, we present a generic proactive runtime Business Process (BP) compliance monitoring framework:BP-MaaS, which incorporates a wide range of expressive high-level compliance patterns for the abstract specification of runtime constraints. Compliance monitoring is achieved by means of anti-patterns, a novel evaluation approach that is independent of any underlying technology and could be applied to the checking of compliance in the different phases of the BP lifecycle. As a proof-of-concept, complex event processing (CEP) technology is adopted as one of the possible realizations of the framework. []",runtime detection of business process compliance violations an approach based on anti patterns today s enterprises demand a high degree of compliance in their business processes to meet diverse regulations and legislations several industrial studies have shown that compliance management is a daunting task and organizations are still struggling and spending billions of dollars annually to ensure and prove their compliance theoretically design time compliance checking could provide a preliminary assurance that corresponding running instances would be compliant to relevant laws and regulations however due to the existence of human and machine related errors and the absence of necessary contextual information during design time runtime compliance monitoring becomes a must in this paper we present a generic proactive runtime business process bp compliance monitoring framework bp maas which incorporates a wide range of expressive high level compliance patterns for the abstract specification of runtime constraints compliance monitoring is achieved by means of anti patterns a novel evaluation approach that is independent of any underlying technology and could be applied to the checking of compliance in the different phases of the bp lifecycle as a proof of concept complex event processing cep technology is adopted as one of the possible realizations of the framework,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
622,0,"Hunting for Smells in Natural Language Tests Tests are central artifacts of software systems and play a crucial role for software quality. In system testing, a lot of test execution is performed manually using tests in natural language. However, those test cases are often poorly written without best practices in mind. This leads to tests which are not maintainable, hard to understand and inefficient to execute. For source code and unit tests, so called code smells and test smells have been established as indicators to identify poorly written code. We apply the idea of smells to natural language tests by defining a set of common Natural Language Test Smells (NLTS). Furthermore, we report on an empirical study analyzing the extent in more than 2800 tests of seven industrial test suites. []",hunting for smells in natural language tests tests are central artifacts of software systems and play a crucial role for software quality in system testing a lot of test execution is performed manually using tests in natural language however those test cases are often poorly written without best practices in mind this leads to tests which are not maintainable hard to understand and inefficient to execute for source code and unit tests so called code smells and test smells have been established as indicators to identify poorly written code we apply the idea of smells to natural language tests by defining a set of common natural language test smells nlts furthermore we report on an empirical study analyzing the extent in more than 2800 tests of seven industrial test suites,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
623,0,"IDE-based Real-time Focused Search for Near-miss Clones Code clone is a well-known code smell that needs to be detected and managed during the software development process. However, the existing clone detectors have one or more of the three shortcomings: (a) limitation in detecting Type-3 clones, (b) they come as stand-alone tools separate from IDE and thus cannot support clone-aware development, (c) they overwhelm the developer with all clones from the entire code-base, instead of a focused search for clones of a selected code segment of the developer's interest. This paper presents our IDE-integrated clone search tool, that addresses all the above issues. For clone detection, we adapt a suffix-tree-based hybrid algorithm. Through an asymptotic analysis, we show that our approach for clone detection is both time and memory efficient. Moreover, using three separate empirical studies, we demonstrate that our tool is flexibly usable for searching exact (Type-1) and near-miss (Type-2 and Type-3) clones with high precision and recall. clone detection, clone search, maintenance, reengineering",ide based real time focused search for near miss clones code clone is a well known code smell that needs to be detected and managed during the software development process however the existing clone detectors have one or more of the three shortcomings a limitation in detecting type 3 clones b they come as stand alone tools separate from ide and thus cannot support clone aware development c they overwhelm the developer with all clones from the entire code base instead of a focused search for clones of a selected code segment of the developer s interest this paper presents our ide integrated clone search tool that addresses all the above issues for clone detection we adapt a suffix tree based hybrid algorithm through an asymptotic analysis we show that our approach for clone detection is both time and memory efficient moreover using three separate empirical studies we demonstrate that our tool is flexibly usable for searching exact type 1 and near miss type 2 and type 3 clones with high precision and recall clone detection clone search maintenance reengineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
624,0,"Insights into research on phytochemistry and biological activities of Prunus armeniaca L. (apricot) Prunus armeniaca L. (Rosaceae) is an important medicinal edible plant species commonly known as ``apricot''. Apricot is one of the most delicious and commercially traded fruits in the world. The plant is rich in mono- and polysaccharides, polyphenols, fatty acids and sterol derivatives, carotenoids, cyanogenic glucosides, and volatile components due to its appealing smell. P. armeniaca has been also investigated for various biological activities such as antimicrobial, antimutagenic, inhibitory activity against several enzymes, cardioprotective, anti-inflammatory and antinociceptive as well as antioxidant activity. Among these activities, antioxidant activity of apricot has been studied extensively and the plant displayed a high antioxidant effect in both in vitro and in vivo test systems. In this review, the relevant literature summary is given on phytochemistry and biological activity reports published on apricot. The literature survey for this review was performed using the key words ``Prunus armeniaca and apricot'' through the search Scopus, ScienceDirect, Pubmed, and Web of Science data bases between 1950 and 2010. , Apricot, Rosaceae, Phytochemistry, Biological activity",insights into research on phytochemistry and biological activities of prunus armeniaca l apricot prunus armeniaca l rosaceae is an important medicinal edible plant species commonly known as apricot apricot is one of the most delicious and commercially traded fruits in the world the plant is rich in mono and polysaccharides polyphenols fatty acids and sterol derivatives carotenoids cyanogenic glucosides and volatile components due to its appealing smell p armeniaca has been also investigated for various biological activities such as antimicrobial antimutagenic inhibitory activity against several enzymes cardioprotective anti inflammatory and antinociceptive as well as antioxidant activity among these activities antioxidant activity of apricot has been studied extensively and the plant displayed a high antioxidant effect in both in vitro and in vivo test systems in this review the relevant literature summary is given on phytochemistry and biological activity reports published on apricot the literature survey for this review was performed using the key words prunus armeniaca and apricot through the search scopus sciencedirect pubmed and web of science data bases between 1950 and 2010 apricot rosaceae phytochemistry biological activity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
625,0,"OBEY: Optimal Batched Refactoring Plan Execution for Class Responsibility Redistribution The redistribution of class responsibilities is a common reengineering practice in object-oriented (OO) software evolution. During the redistribution, developers frequently construct batched refactoring plans for moving multiple methods and fields among various classes. With an objective of carefully maintaining the cohesion and coupling degree of the class design, executing a batched refactoring plan without introducing any objective-violating side effect into the refactored code is essential. However, using most refactoring engines for batched refactoring plan execution introduces coupling-increasing Middle Man bad smell in the final refactored code and therefore makes the refactoring execution suboptimal in achieving the redistribution objective. This work proposes Obey, a methodology for optimal batched refactoring plan execution. Obey analyzes a batched refactoring plan, identifies Middle Man symptoms that cause suboptimal execution, and renovates the plan for optimal execution. We have conducted an empirical study on three open-source software projects to confirm the effectiveness of Obey in a practical context. object-oriented programming, software maintenance, OBEY methodology, optimal batched refactoring plan execution, class responsibility redistribution, software reengineering practice, object-oriented software evolution, OO software evolution, refactoring engine, coupling-increasing middle man bad smell, open-source software project, Couplings, Engines, Software systems, Measurement, Optimization, Context, Reengineering, class responsibility redistribution, batched refactoring execution, change impact analysis, optimization",obey optimal batched refactoring plan execution for class responsibility redistribution the redistribution of class responsibilities is a common reengineering practice in object oriented oo software evolution during the redistribution developers frequently construct batched refactoring plans for moving multiple methods and fields among various classes with an objective of carefully maintaining the cohesion and coupling degree of the class design executing a batched refactoring plan without introducing any objective violating side effect into the refactored code is essential however using most refactoring engines for batched refactoring plan execution introduces coupling increasing middle man bad smell in the final refactored code and therefore makes the refactoring execution suboptimal in achieving the redistribution objective this work proposes obey a methodology for optimal batched refactoring plan execution obey analyzes a batched refactoring plan identifies middle man symptoms that cause suboptimal execution and renovates the plan for optimal execution we have conducted an empirical study on three open source software projects to confirm the effectiveness of obey in a practical context object oriented programming software maintenance obey methodology optimal batched refactoring plan execution class responsibility redistribution software reengineering practice object oriented software evolution oo software evolution refactoring engine coupling increasing middle man bad smell open source software project couplings engines software systems measurement optimization context reengineering class responsibility redistribution batched refactoring execution change impact analysis optimization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
626,0,"Folding of guanine quadruplex molecules--funnel-like mechanism or kinetic partitioning? An overview from MD simulation studies Background Guanine quadruplexes (GQs) play vital roles in many cellular processes and are of much interest as drug targets. In contrast to the availability of many structural studies, there is still limited knowledge on GQ folding. Scope of review We review recent molecular dynamics (MD) simulation studies of the folding of GQs, with an emphasis paid to the human telomeric DNA GQ. We explain the basic principles and limitations of all types of MD methods used to study unfolding and folding in a way accessible to non-specialists. We discuss the potential role of G-hairpin, G-triplex and alternative GQ intermediates in the folding process. We argue that, in general, folding of GQs is fundamentally different from funneled folding of small fast-folding proteins, and can be best described by a kinetic partitioning (KP) mechanism. KP is a competition between at least two (but often many) well-separated and structurally different conformational ensembles. Major conclusions The KP mechanism is the only plausible way to explain experiments reporting long time-scales of GQ folding and the existence of long-lived sub-states. A significant part of the natural partitioning of the free energy landscape of GQs comes from the ability of the GQ-forming sequences to populate a large number of syn-anti patterns in their G-tracts. The extreme complexity of the KP of GQs typically prevents an appropriate description of the folding landscape using just a few order parameters or collective variables. General significance We reconcile available computational and experimental studies of GQ folding and formulate basic principles characterizing GQ folding landscapes. This article is part of a Special Issue entitled G-quadruplex Guest Editor: Dr. Concetta Giancola and Dr. Daniela Montesarchio. G-quadruplex, Folding landscape, Molecular dynamics, Simulation force fields",folding of guanine quadruplex molecules funnel like mechanism or kinetic partitioning an overview from md simulation studies background guanine quadruplexes gqs play vital roles in many cellular processes and are of much interest as drug targets in contrast to the availability of many structural studies there is still limited knowledge on gq folding scope of review we review recent molecular dynamics md simulation studies of the folding of gqs with an emphasis paid to the human telomeric dna gq we explain the basic principles and limitations of all types of md methods used to study unfolding and folding in a way accessible to non specialists we discuss the potential role of g hairpin g triplex and alternative gq intermediates in the folding process we argue that in general folding of gqs is fundamentally different from funneled folding of small fast folding proteins and can be best described by a kinetic partitioning kp mechanism kp is a competition between at least two but often many well separated and structurally different conformational ensembles major conclusions the kp mechanism is the only plausible way to explain experiments reporting long time scales of gq folding and the existence of long lived sub states a significant part of the natural partitioning of the free energy landscape of gqs comes from the ability of the gq forming sequences to populate a large number of syn anti patterns in their g tracts the extreme complexity of the kp of gqs typically prevents an appropriate description of the folding landscape using just a few order parameters or collective variables general significance we reconcile available computational and experimental studies of gq folding and formulate basic principles characterizing gq folding landscapes this article is part of a special issue entitled g quadruplex guest editor dr concetta giancola and dr daniela montesarchio g quadruplex folding landscape molecular dynamics simulation force fields,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
627,0,"An Analysis of Anti-micro-patterns Effects on Fault-proneness in Large Java Systems Micro patterns are similar to design patterns, but are at a lower level of abstraction, closer to the implementation. Anti patterns are micro patterns not respecting the prescriptions of good Object Oriented programming practices. In this paper, we use the definitions introduced by Arcelli and Maggioni [3] in order to study the evolution of five particular micro patterns (anti patterns) in different releases of the Eclipse and NetBeans systems, and the correlations between anti patterns and faults. Our analysis confirms previous findings regarding the high coverage of micro patterns onto the system classes, and show that anti patterns not only represent bad Object Oriented programming practices, but may also be associated to the production of lower quality software, since they present a fault proneness significantly enhanced. anti patterns, metrics, micro patterns, object-oriented programming, software faults",an analysis of anti micro patterns effects on fault proneness in large java systems micro patterns are similar to design patterns but are at a lower level of abstraction closer to the implementation anti patterns are micro patterns not respecting the prescriptions of good object oriented programming practices in this paper we use the definitions introduced by arcelli and maggioni 3 in order to study the evolution of five particular micro patterns anti patterns in different releases of the eclipse and netbeans systems and the correlations between anti patterns and faults our analysis confirms previous findings regarding the high coverage of micro patterns onto the system classes and show that anti patterns not only represent bad object oriented programming practices but may also be associated to the production of lower quality software since they present a fault proneness significantly enhanced anti patterns metrics micro patterns object oriented programming software faults,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
628,0,"The causes of distribution channel conflict in Chinese telecommunication industry Until now, there are some literatures discussing the conflict causes in western theory, especially in US theory. However, the differences between the situations of Chinese channel and western channel are neglected. In fact, the difference between them is important. Correspondingly, no literature discusses this problem concerning the causes of channel conflict in Chinese telecom industry (TI). This study, which was conducted empirically in China, with the method of survey, investigates the conflict causes in channel of Chinese TI. The results indicate that there are four causes of channel conflict: goal divergence, roles unclarity, expectations divergence and relationship disharmony. Three of these causes studied here are found to be similar to those in western channels, but the other conflict cause - relationship disharmony - is the particular conflict cause in Chinese TI. telecommunication services, telecommunication channels, Chinese telecommunication industry, distribution channel conflict, goal divergence, roles unclarity, expectations divergence, relationship disharmony, Communication industry, Telecommunications, Industrial relations, Computer industry, Computer science, Natural languages, Business, Manufacturing industries, Testing, Emotion recognition",the causes of distribution channel conflict in chinese telecommunication industry until now there are some literatures discussing the conflict causes in western theory especially in us theory however the differences between the situations of chinese channel and western channel are neglected in fact the difference between them is important correspondingly no literature discusses this problem concerning the causes of channel conflict in chinese telecom industry ti this study which was conducted empirically in china with the method of survey investigates the conflict causes in channel of chinese ti the results indicate that there are four causes of channel conflict goal divergence roles unclarity expectations divergence and relationship disharmony three of these causes studied here are found to be similar to those in western channels but the other conflict cause relationship disharmony is the particular conflict cause in chinese ti telecommunication services telecommunication channels chinese telecommunication industry distribution channel conflict goal divergence roles unclarity expectations divergence relationship disharmony communication industry telecommunications industrial relations computer industry computer science natural languages business manufacturing industries testing emotion recognition,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
629,0,"High Dimensional Search-based Software Engineering: Finding Tradeoffs Among 15 Objectives for Automating Software Refactoring Using NSGA-III There is a growing need for scalable search-based software engineering approaches that address software engineering problems where a large number of objectives are to be optimized. Software refactoring is one of these problems where a refactoring sequence is sought that optimizes several software metrics. Most of the existing refactoring work uses a large set of quality metrics to evaluate the software design after applying refactoring operations, but current search-based software engineering approaches are limited to using a maximum of five metrics. We propose for the first time a scalable search-based software engineering approach based on a newly proposed evolutionary optimization method NSGA-III where there are 15 different objectives to be optimized. In our approach, automated refactoring solutions are evaluated using a set of 15 distinct quality metrics. We evaluated this approach on seven large open source systems and found that, on average, more than 92% of code smells were corrected. Statistical analysis of our experiments over 31 runs shows that NSGA-III performed significantly better than two other many-objective techniques (IBEA and MOEA/D), a multi-objective algorithm (NSGA-II) and two mono-objective approaches, hence demonstrating that our NSGA-III approach represents the new state of the art in fully-automated refactoring. code-smells, refactroing, search-based software engineering",high dimensional search based software engineering finding tradeoffs among 15 objectives for automating software refactoring using nsga iii there is a growing need for scalable search based software engineering approaches that address software engineering problems where a large number of objectives are to be optimized software refactoring is one of these problems where a refactoring sequence is sought that optimizes several software metrics most of the existing refactoring work uses a large set of quality metrics to evaluate the software design after applying refactoring operations but current search based software engineering approaches are limited to using a maximum of five metrics we propose for the first time a scalable search based software engineering approach based on a newly proposed evolutionary optimization method nsga iii where there are 15 different objectives to be optimized in our approach automated refactoring solutions are evaluated using a set of 15 distinct quality metrics we evaluated this approach on seven large open source systems and found that on average more than 92 of code smells were corrected statistical analysis of our experiments over 31 runs shows that nsga iii performed significantly better than two other many objective techniques ibea and moea d a multi objective algorithm nsga ii and two mono objective approaches hence demonstrating that our nsga iii approach represents the new state of the art in fully automated refactoring code smells refactroing search based software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
630,0,"Nodding and smiling in silence during the loop sequence of backchannels in Japanese conversation Some Japanese language students have suggested that Japanese conversation tends to have periods of silence. However, empirical research regarding this tendency has rarely been done. The present study takes a glimpse at the occurrence of silence in the sequence of backchannels, known as the loop sequence, and shows that silence is not interactionally vacuous in this context of Japanese conversation. The data in the present study consist of four audio- and video-recorded dyadic conversations in which the participants were given a theme to discuss. An analysis of visualized data reveals that nods, produced independently and without any vocals, frequently occur during the loop sequence. It also indicates that creating silence in which no talk-relevant activities are conducted is avoided as much as possible during the loop sequence. The participants fill in a loop sequence silence with reciprocal or simultaneous verbal backchannels, nods, or smiles. As a result, a cooperative atmosphere is maintained during the loop sequence. Floor negotiation during the loop sequence is an enterprise by which Japanese conversationalists take advantage of both verbal and nonverbal channels so that they can continue the current dialogue without causing disharmony. Japanese conversation, Loop sequence of backchannels, Nodding, Silence",nodding and smiling in silence during the loop sequence of backchannels in japanese conversation some japanese language students have suggested that japanese conversation tends to have periods of silence however empirical research regarding this tendency has rarely been done the present study takes a glimpse at the occurrence of silence in the sequence of backchannels known as the loop sequence and shows that silence is not interactionally vacuous in this context of japanese conversation the data in the present study consist of four audio and video recorded dyadic conversations in which the participants were given a theme to discuss an analysis of visualized data reveals that nods produced independently and without any vocals frequently occur during the loop sequence it also indicates that creating silence in which no talk relevant activities are conducted is avoided as much as possible during the loop sequence the participants fill in a loop sequence silence with reciprocal or simultaneous verbal backchannels nods or smiles as a result a cooperative atmosphere is maintained during the loop sequence floor negotiation during the loop sequence is an enterprise by which japanese conversationalists take advantage of both verbal and nonverbal channels so that they can continue the current dialogue without causing disharmony japanese conversation loop sequence of backchannels nodding silence,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
631,0,"A comparison of the efficiency and effectiveness of vulnerability discovery techniques Context Security vulnerabilities discovered later in the development cycle are more expensive to fix than those discovered early. Therefore, software developers should strive to discover vulnerabilities as early as possible. Unfortunately, the large size of code bases and lack of developer expertise can make discovering software vulnerabilities difficult. A number of vulnerability discovery techniques are available, each with their own strengths. Objective The objective of this research is to aid in the selection of vulnerability discovery techniques by comparing the vulnerabilities detected by each and comparing their efficiencies. Method We conducted three case studies using three electronic health record systems to compare four vulnerability discovery techniques: exploratory manual penetration testing, systematic manual penetration testing, automated penetration testing, and automated static analysis. Results In our case study, we found empirical evidence that no single technique discovered every type of vulnerability. We discovered that the specific set of vulnerabilities identified by one tool was largely orthogonal to that of other tools. Systematic manual penetration testing found the most design flaws, while automated static analysis found the most implementation bugs. The most efficient discovery technique in terms of vulnerabilities discovered per hour was automated penetration testing. Conclusion The results show that employing a single technique for vulnerability discovery is insufficient for finding all types of vulnerabilities. Each technique identified only a subset of the vulnerabilities, which, for the most part were independent of each other. Our results suggest that in order to discover the greatest variety of vulnerability types, at least systematic manual penetration testing and automated static analysis should be performed. Security, Vulnerability, Static analysis, Penetration testing, Black box testing, White box testing",a comparison of the efficiency and effectiveness of vulnerability discovery techniques context security vulnerabilities discovered later in the development cycle are more expensive to fix than those discovered early therefore software developers should strive to discover vulnerabilities as early as possible unfortunately the large size of code bases and lack of developer expertise can make discovering software vulnerabilities difficult a number of vulnerability discovery techniques are available each with their own strengths objective the objective of this research is to aid in the selection of vulnerability discovery techniques by comparing the vulnerabilities detected by each and comparing their efficiencies method we conducted three case studies using three electronic health record systems to compare four vulnerability discovery techniques exploratory manual penetration testing systematic manual penetration testing automated penetration testing and automated static analysis results in our case study we found empirical evidence that no single technique discovered every type of vulnerability we discovered that the specific set of vulnerabilities identified by one tool was largely orthogonal to that of other tools systematic manual penetration testing found the most design flaws while automated static analysis found the most implementation bugs the most efficient discovery technique in terms of vulnerabilities discovered per hour was automated penetration testing conclusion the results show that employing a single technique for vulnerability discovery is insufficient for finding all types of vulnerabilities each technique identified only a subset of the vulnerabilities which for the most part were independent of each other our results suggest that in order to discover the greatest variety of vulnerability types at least systematic manual penetration testing and automated static analysis should be performed security vulnerability static analysis penetration testing black box testing white box testing,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
632,0,"Cinema Data Mining: The Smell of Fear While the physiological response of humans to emotional events or stimuli is well-investigated for many modalities (like EEG, skin resistance, ...), surprisingly little is known about the exhalation of so-called Volatile Organic Compounds (VOCs) at quite low concentrations in response to such stimuli. VOCs are molecules of relatively small mass that quickly evaporate or sublimate and can be detected in the air that surrounds us. The paper introduces a new field of application for data mining, where trace gas responses of people reacting on-line to films shown in cinemas (or movie theaters) are related to the semantic content of the films themselves. To do so, we measured the VOCs from a movie theater over a whole month in intervals of thirty seconds, and annotated the screened films by a controlled vocabulary compiled from multiple sources. To gain a better understanding of the data and to reveal unknown relationships, we have built prediction models for so-called forward prediction (the prediction of future VOCs from the past), backward prediction (the prediction of past scene labels from future VOCs), which is some form of abductive reasoning, and Granger causality. Experimental results show that some VOCs and some labels can be predicted with relatively low error, and that hint for causality with low p-values can be detected in the data. The data set is publicly available at: abductive reasoning, application, atmospheric chemistry, breath analysis, causality, data mining, emotional response analysis, movie analysis",cinema data mining the smell of fear while the physiological response of humans to emotional events or stimuli is well investigated for many modalities like eeg skin resistance surprisingly little is known about the exhalation of so called volatile organic compounds vocs at quite low concentrations in response to such stimuli vocs are molecules of relatively small mass that quickly evaporate or sublimate and can be detected in the air that surrounds us the paper introduces a new field of application for data mining where trace gas responses of people reacting on line to films shown in cinemas or movie theaters are related to the semantic content of the films themselves to do so we measured the vocs from a movie theater over a whole month in intervals of thirty seconds and annotated the screened films by a controlled vocabulary compiled from multiple sources to gain a better understanding of the data and to reveal unknown relationships we have built prediction models for so called forward prediction the prediction of future vocs from the past backward prediction the prediction of past scene labels from future vocs which is some form of abductive reasoning and granger causality experimental results show that some vocs and some labels can be predicted with relatively low error and that hint for causality with low p values can be detected in the data the data set is publicly available at abductive reasoning application atmospheric chemistry breath analysis causality data mining emotional response analysis movie analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
633,0,"Response Time in Switching Scents When Converting Scenes Information that can be gained using smell, one of the five senses, has a deep connection with memory and affect, therefore, presentation of scents with videos has an effect that enhances realistic sensations. In current videos with scents, it is often the case that a great deal of scent is emitted at the same time in one scene, and there is no change of scent in subsequent scenes. In this study, we researched how humans react when the scent switches between video scenes. We focused especially on how visual information affects the reaction speed. Through this experiment, we found that reaction time was shorter when the scent changed after converting scenes. In addition, we found that the content of the videos did not have an effect on the reaction times. Therefore, when adding scents, it is best to switch the scent after the scene changes. We hope that this finding about responses toward scent changes assists in designing presentations that use scents. chemioception, human factors, video signal processing, visual information affect, switching scent, Videos, Olfactory, Switches, Visualization, Synchronization, human reaction, olfactory display, pulse ejection, olfactory information",response time in switching scents when converting scenes information that can be gained using smell one of the five senses has a deep connection with memory and affect therefore presentation of scents with videos has an effect that enhances realistic sensations in current videos with scents it is often the case that a great deal of scent is emitted at the same time in one scene and there is no change of scent in subsequent scenes in this study we researched how humans react when the scent switches between video scenes we focused especially on how visual information affects the reaction speed through this experiment we found that reaction time was shorter when the scent changed after converting scenes in addition we found that the content of the videos did not have an effect on the reaction times therefore when adding scents it is best to switch the scent after the scene changes we hope that this finding about responses toward scent changes assists in designing presentations that use scents chemioception human factors video signal processing visual information affect switching scent videos olfactory switches visualization synchronization human reaction olfactory display pulse ejection olfactory information,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
634,0,"Tool Support for Evaluating Architectural Debt of an Existing System: An Experience Report During software development, maintenance and evolution, we can assess the quality of code, design and architecture to capture hints of possible problems and face them as soon as possible. We can capture signals of architecture erosion in different ways by exploiting several tools with the aim to identify architectural violations, architectural smells or other relevant features. In this paper, we provide our experience report in using three known tools to capture information that can be useful to identify and evaluate the architectural debt of an application. We outline the main differences among these tools and the results they produce. architectural debt, architecture assessment, tool experimentation",tool support for evaluating architectural debt of an existing system an experience report during software development maintenance and evolution we can assess the quality of code design and architecture to capture hints of possible problems and face them as soon as possible we can capture signals of architecture erosion in different ways by exploiting several tools with the aim to identify architectural violations architectural smells or other relevant features in this paper we provide our experience report in using three known tools to capture information that can be useful to identify and evaluate the architectural debt of an application we outline the main differences among these tools and the results they produce architectural debt architecture assessment tool experimentation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
635,0,"Breaking Web Applications Built On Top of Encrypted Data We develop a systematic approach for analyzing client-server applications that aim to hide sensitive user data from untrusted servers. We then apply it to Mylar, a framework that uses multi-key searchable encryption (MKSE) to build Web applications on top of encrypted data. We demonstrate that (1) the Popa-Zeldovich model for MKSE does not imply security against either passive or active attacks; (2) Mylar-based Web applications reveal users' data and queries to passive and active adversarial servers; and (3) Mylar is generically insecure against active attacks due to system design flaws. Our results show that the problem of securing client-server applications against actively malicious servers is challenging and still unsolved. We conclude with general lessons for the designers of systems that rely on property-preserving or searchable encryption to protect data from untrusted servers. application security, leakage, provable security, searchable encryption",breaking web applications built on top of encrypted data we develop a systematic approach for analyzing client server applications that aim to hide sensitive user data from untrusted servers we then apply it to mylar a framework that uses multi key searchable encryption mkse to build web applications on top of encrypted data we demonstrate that 1 the popa zeldovich model for mkse does not imply security against either passive or active attacks 2 mylar based web applications reveal users data and queries to passive and active adversarial servers and 3 mylar is generically insecure against active attacks due to system design flaws our results show that the problem of securing client server applications against actively malicious servers is challenging and still unsolved we conclude with general lessons for the designers of systems that rely on property preserving or searchable encryption to protect data from untrusted servers application security leakage provable security searchable encryption,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
636,0,"SPRESSO: A Secure, Privacy-Respecting Single Sign-On System for the Web Single sign-on (SSO) systems, such as OpenID and OAuth, allow web sites, so-called relying parties (RPs), to delegate user authentication to identity providers (IdPs), such as Facebook or Google. These systems are very popular, as they provide a convenient means for users to log in at RPs and move much of the burden of user authentication from RPs to IdPs. There is, however, a downside to current systems, as they do not respect users' privacy: IdPs learn at which RP a user logs in. With one exception, namely Mozilla's BrowserID system (a.k.a. Mozilla Persona), current SSO systems were not even designed with user privacy in mind. Unfortunately, recently discovered attacks, which exploit design flaws of BrowserID, show that BrowserID does not provide user privacy either. In this paper, we therefore propose the first privacy-respecting SSO system for the web, called SPRESSO (for Secure Privacy-REspecting Single Sign-On). The system is easy to use, decentralized, and platform independent. It is based solely on standard HTML5 and web features and uses no browser extensions, plug-ins, or other executables. Existing SSO systems and the numerous attacks on such systems illustrate that the design of secure SSO systems is highly non-trivial. We therefore also carry out a formal analysis of SPRESSO based on an expressive model of the web in order to formally prove that SPRESSO enjoys strong authentication and privacy properties. HTML5, formal analysis, privacy, single sign-on, web security",spresso a secure privacy respecting single sign on system for the web single sign on sso systems such as openid and oauth allow web sites so called relying parties rps to delegate user authentication to identity providers idps such as facebook or google these systems are very popular as they provide a convenient means for users to log in at rps and move much of the burden of user authentication from rps to idps there is however a downside to current systems as they do not respect users privacy idps learn at which rp a user logs in with one exception namely mozilla s browserid system a k a mozilla persona current sso systems were not even designed with user privacy in mind unfortunately recently discovered attacks which exploit design flaws of browserid show that browserid does not provide user privacy either in this paper we therefore propose the first privacy respecting sso system for the web called spresso for secure privacy respecting single sign on the system is easy to use decentralized and platform independent it is based solely on standard html5 and web features and uses no browser extensions plug ins or other executables existing sso systems and the numerous attacks on such systems illustrate that the design of secure sso systems is highly non trivial we therefore also carry out a formal analysis of spresso based on an expressive model of the web in order to formally prove that spresso enjoys strong authentication and privacy properties html5 formal analysis privacy single sign on web security,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
637,0,"Analyzing the Change-proneness of Service-oriented Systems from an Industrial Perspective Antipatterns and code smells have been widely proved to affect the change-proneness of software components. However, there is a lack of studies that propose indicators of changes for service-oriented systems. Like any other software systems, such systems evolve to address functional and non func- tional requirements. In this research, we investigate the change- proneness of service-oriented systems from the perspective of software engineers. Based on the feedback from our industrial partners we investigate which indicators can be used to highlight change-prone application programming interfaces (APIs) and service interfaces in order to improve their reusability and response time. The output of this PhD research will assist software engineers in designing stable APIs and reusable services with adequate response time. []",analyzing the change proneness of service oriented systems from an industrial perspective antipatterns and code smells have been widely proved to affect the change proneness of software components however there is a lack of studies that propose indicators of changes for service oriented systems like any other software systems such systems evolve to address functional and non func tional requirements in this research we investigate the change proneness of service oriented systems from the perspective of software engineers based on the feedback from our industrial partners we investigate which indicators can be used to highlight change prone application programming interfaces apis and service interfaces in order to improve their reusability and response time the output of this phd research will assist software engineers in designing stable apis and reusable services with adequate response time,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
638,0,"Design Fiction Film-Making: A Pipeline for Communicating Experiences The use of films in early stages of the design of technology is a practice that is becoming increasingly common. However, the focus of these films is usually centered on exploring the technology and its specifications rather than on the experiences that the technology can potentially create for its user. Previous research emphasises the relevance of experiences created by the technology in the users arguing that the emotions should be taken into account during early design stages and made part of the design itself. In this paper we provide a step-by-step production pipeline on how to make your own design fiction film, and how you can get the experiences across. For this purpose we focus on the experiences and emotions that a specific interaction medium elicits. We gained inspiration from the increased exploration of olfactory experiences in HCI. We used a classification of smell experiences as a starting point to produce a design fiction film for the automotive context, not limited by technology but inspired by experiences. automotive context, design fiction, experience design, film production, olfactory experiences, smell",design fiction film making a pipeline for communicating experiences the use of films in early stages of the design of technology is a practice that is becoming increasingly common however the focus of these films is usually centered on exploring the technology and its specifications rather than on the experiences that the technology can potentially create for its user previous research emphasises the relevance of experiences created by the technology in the users arguing that the emotions should be taken into account during early design stages and made part of the design itself in this paper we provide a step by step production pipeline on how to make your own design fiction film and how you can get the experiences across for this purpose we focus on the experiences and emotions that a specific interaction medium elicits we gained inspiration from the increased exploration of olfactory experiences in hci we used a classification of smell experiences as a starting point to produce a design fiction film for the automotive context not limited by technology but inspired by experiences automotive context design fiction experience design film production olfactory experiences smell,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
639,0,"Formal Analysis of Steady State Errors in Feedback Control Systems Using HOL-light The accuracy of control systems analysis is of paramount importance as even minor design flaws can lead to disastrous consequences in this domain. This paper provides a higher-order-logic theorem proving based framework for the formal analysis of steady state errors in feedback control systems. In particular, we present the formalization of control system foundations, like transfer functions, summing junctions, feedback loops and pickoff points, and steady state error models for the step, ramp and parabola cases. These foundations can be built upon to formally specify a wide range of feedback control systems in higher-order logic and reason about their steady state errors within the sound core of a theorem prover. The proposed formalization is based on the complex number theory of the HOL-Light theorem prover. For illustration purposes, we present the steady state error analysis of a solar tracking control system. []",formal analysis of steady state errors in feedback control systems using hol light the accuracy of control systems analysis is of paramount importance as even minor design flaws can lead to disastrous consequences in this domain this paper provides a higher order logic theorem proving based framework for the formal analysis of steady state errors in feedback control systems in particular we present the formalization of control system foundations like transfer functions summing junctions feedback loops and pickoff points and steady state error models for the step ramp and parabola cases these foundations can be built upon to formally specify a wide range of feedback control systems in higher order logic and reason about their steady state errors within the sound core of a theorem prover the proposed formalization is based on the complex number theory of the hol light theorem prover for illustration purposes we present the steady state error analysis of a solar tracking control system,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
640,0,"Synchronisation of olfactory-enhanced multimedia: Perspectives from an empirical study The concept of synchronisation is of fundamental importance in multimedia systems and applications. It relates to defining and maintaining the temporal relationships between two or more correlated media objects that are combined, processed and presented together to produce a multimedia system or application. The focus of the research presented in this paper is on olfactory enhanced multimedia, which concerns itself with associating computer generated smell with other media. However, the lingering nature of smell, as opposed to the transitory nature of other media objects that multimedia applications are accustomed to, such as video and audio, means that specific attention needs to be given when synchronising other media content with olfactory data. Results highlight the existence of two perceptual synchronisation regions for olfactory enhanced-multimedia applications. Moreover, olfaction ahead of audiovisual content was shown to be less noticeable than the inverse case, of olfaction behind audiovisual content. audio-visual systems, multimedia communication, synchronisation, olfactory-enhanced multimedia synchronisation, correlated media objects, perceptual synchronisation regions, audiovisual content, Synchronization, Olfactory, Media, Multimedia communication, Multimedia systems, Streaming media, Computers, Synchronization, Olfaction, Perceptual Experience",synchronisation of olfactory enhanced multimedia perspectives from an empirical study the concept of synchronisation is of fundamental importance in multimedia systems and applications it relates to defining and maintaining the temporal relationships between two or more correlated media objects that are combined processed and presented together to produce a multimedia system or application the focus of the research presented in this paper is on olfactory enhanced multimedia which concerns itself with associating computer generated smell with other media however the lingering nature of smell as opposed to the transitory nature of other media objects that multimedia applications are accustomed to such as video and audio means that specific attention needs to be given when synchronising other media content with olfactory data results highlight the existence of two perceptual synchronisation regions for olfactory enhanced multimedia applications moreover olfaction ahead of audiovisual content was shown to be less noticeable than the inverse case of olfaction behind audiovisual content audio visual systems multimedia communication synchronisation olfactory enhanced multimedia synchronisation correlated media objects perceptual synchronisation regions audiovisual content synchronization olfactory media multimedia communication multimedia systems streaming media computers synchronization olfaction perceptual experience,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
641,0,"The Use of Development History in Software Refactoring Using a Multi-objective Evolutionary Algorithm One of the widely used techniques for evolving software systems is refactoring, a maintenance activity that improves design structure while preserving the external behavior. Exploring past maintenance and development history can be an effective way of finding refactoring opportunities. Code elements which undergo changes in the past, at approximately the same time, bear a good probability for being semantically related. Moreover, these elements that experienced a huge number of refactoring in the past have a good chance for refactoring in the future. In addition, the development history can be used to propose new refactoring solutions in similar contexts. In this paper, we propose a multi-objective optimization-based approach to find the best sequence of refactorings that minimizes the number of bad-smells, and maximizes the use of development history and semantic coherence. To this end, we use the non-dominated sorting genetic algorithm (NSGA-II) to find the best trade-off between these three objectives. We report the results of our experiments using different large open source projects. code change, design defects, refactoring, search-based software engineering, semantics",the use of development history in software refactoring using a multi objective evolutionary algorithm one of the widely used techniques for evolving software systems is refactoring a maintenance activity that improves design structure while preserving the external behavior exploring past maintenance and development history can be an effective way of finding refactoring opportunities code elements which undergo changes in the past at approximately the same time bear a good probability for being semantically related moreover these elements that experienced a huge number of refactoring in the past have a good chance for refactoring in the future in addition the development history can be used to propose new refactoring solutions in similar contexts in this paper we propose a multi objective optimization based approach to find the best sequence of refactorings that minimizes the number of bad smells and maximizes the use of development history and semantic coherence to this end we use the non dominated sorting genetic algorithm nsga ii to find the best trade off between these three objectives we report the results of our experiments using different large open source projects code change design defects refactoring search based software engineering semantics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
642,0,"A Systematic Mapping Study on Mining Software Repositories Background: Software repositories provide large amount of data encompassing software changes throughout its evolution. Those repositories can be effectively used to extract and analyze pertinent information and derive conclusions related to the software history or its current snapshot. Objective: This work aims to investigate recent studies on Mining Software Repositories (MSR) approaches collecting evidences about software analysis goals (purpose, focus, and object of analysis), data sources, evaluation methods, tools, and how the area is evolving. Method: A systematic mapping study was performed to identify and analyze research on mining software repositories by analyzing five editions of Working Conference on Mining Software Repositories -- the main conference on this area. Results: MSR approaches have been used for many different goals, mainly for comprehension of defects, analysis of the contribution and behavior of developers, and software evolution comprehension. Besides, some gaps were identified with respect to their goals, focus, and data source type (e.g. lack of usage of comments to identify smells, refactoring, and issues of software quality). Regarding the evaluation method, our analysis pointed out to an extensive usage of some types of empirical evaluation. Conclusion: Studies of the MSR have focused on different goals, however there are still many research opportunities to be explored and issues associated with MSR that should be considered. empirical software engineering, mining software repository, secondary study, systematic mapping study",a systematic mapping study on mining software repositories background software repositories provide large amount of data encompassing software changes throughout its evolution those repositories can be effectively used to extract and analyze pertinent information and derive conclusions related to the software history or its current snapshot objective this work aims to investigate recent studies on mining software repositories msr approaches collecting evidences about software analysis goals purpose focus and object of analysis data sources evaluation methods tools and how the area is evolving method a systematic mapping study was performed to identify and analyze research on mining software repositories by analyzing five editions of working conference on mining software repositories the main conference on this area results msr approaches have been used for many different goals mainly for comprehension of defects analysis of the contribution and behavior of developers and software evolution comprehension besides some gaps were identified with respect to their goals focus and data source type e g lack of usage of comments to identify smells refactoring and issues of software quality regarding the evaluation method our analysis pointed out to an extensive usage of some types of empirical evaluation conclusion studies of the msr have focused on different goals however there are still many research opportunities to be explored and issues associated with msr that should be considered empirical software engineering mining software repository secondary study systematic mapping study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
643,0,"Clinical Effects of Far-Infrared Therapy in Patients with Allergic Rhinitis Allergic rhinitis (AR) is the sixth most common chronic illness worldwide, which has a significant impact on patients' quality of life. The actual cost of AR is staggering, approximately $5.6 billion being spent annually in direct medical costs and other indirect costs. Therefore, it should be taken seriously upon its evaluation and treatment. AR is an IgE-mediated inflammation, which symptoms are likely due to increased vascular permeability. Current therapeutic options such as avoidance of allergen, medication and immunotherapy are unsatisfactory. Far-infrared (FIR) is an invisible electromagnetic wave with a wavelength longer than that of visible light. It has been used to treat vascular diseases as a result of an increase in blood flow. The objective of this study was to evaluate the clinical effects of FIR therapy in patients with AR. Thirty-one patients with AR were enrolled in this study. A WS TY101 FIR emitter was placed to face the patient's nasal region at a distance of 30 cm. The treatment was performed for 40 min every morning for 7 days. Every day, patients recorded their symptoms in a diary before and during treatment. Each symptom of rhinitis was rated on a 4-point scale (0-3) according to severity. During the period of FIR therapy, the symptoms of eye itching, nasal itching, nasal stuffiness, rhinorrhea and sneezing were all significantly improved. Smell impairment was not improved until after the last treatment. No obvious adverse effect was observed in the patients during treatment and follow-up. We concluded that FIR therapy could improve the symptoms of AR and might serve as a novel treatment modality for AR. diseases, radiation therapy, far-infrared therapy, allergic rhinitis, chronic illness, WS TY101 FIR, patient nasal region, eye itching, nasal itching, nasal stuffiness, rhinorrhea, sneezing, distance 30 cm, time 40 min to 7 day, Medical treatment, Finite impulse response filter, Diseases, Costs, Immune system, Permeability, Electromagnetic scattering, Blood flow, Hospitals, Biomedical engineering, Adolescent, Adult, Child, Child, Preschool, Female, Humans, Hyperthermia, Induced, Infrared Rays, Male, Rhinitis, Allergic, Seasonal, Rhinitis, Allergic, Seasonal, Treatment Outcome",clinical effects of far infrared therapy in patients with allergic rhinitis allergic rhinitis ar is the sixth most common chronic illness worldwide which has a significant impact on patients quality of life the actual cost of ar is staggering approximately 5 6 billion being spent annually in direct medical costs and other indirect costs therefore it should be taken seriously upon its evaluation and treatment ar is an ige mediated inflammation which symptoms are likely due to increased vascular permeability current therapeutic options such as avoidance of allergen medication and immunotherapy are unsatisfactory far infrared fir is an invisible electromagnetic wave with a wavelength longer than that of visible light it has been used to treat vascular diseases as a result of an increase in blood flow the objective of this study was to evaluate the clinical effects of fir therapy in patients with ar thirty one patients with ar were enrolled in this study a ws ty101 fir emitter was placed to face the patient s nasal region at a distance of 30 cm the treatment was performed for 40 min every morning for 7 days every day patients recorded their symptoms in a diary before and during treatment each symptom of rhinitis was rated on a 4 point scale 0 3 according to severity during the period of fir therapy the symptoms of eye itching nasal itching nasal stuffiness rhinorrhea and sneezing were all significantly improved smell impairment was not improved until after the last treatment no obvious adverse effect was observed in the patients during treatment and follow up we concluded that fir therapy could improve the symptoms of ar and might serve as a novel treatment modality for ar diseases radiation therapy far infrared therapy allergic rhinitis chronic illness ws ty101 fir patient nasal region eye itching nasal itching nasal stuffiness rhinorrhea sneezing distance 30 cm time 40 min to 7 day medical treatment finite impulse response filter diseases costs immune system permeability electromagnetic scattering blood flow hospitals biomedical engineering adolescent adult child child preschool female humans hyperthermia induced infrared rays male rhinitis allergic seasonal rhinitis allergic seasonal treatment outcome,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
644,0,"Integrated Analysis of Exception Flows and Handler Actions in Java Libraries: An Empirical Study This paper presents an empirical study of exception handling strategies in Java libraries. The study conducts an integrated analysis of exception flows and handler actions from Java libraries with the aim to understand the impact of adopted exception handling strategies from the perspective of libraries' users. We extended an existing static analysis tool to identify exception flows in software libraries and collected data from the eight most downloaded Java libraries in Maven repository. After that, manual analysis was performed to categorize the tailored handler actions for each exception handler. Our results show that a high number of uncaught runtime exceptions and subsumption handlers were applied in some libraries. We also investigated the community anti-patterns implemented by handler actions in exception flows. Our results reveal the need to have automated support to allow the integrated analysis of exception flows and their handler actions explicitly. empirical study, exception handling, software libraries, static analysis",integrated analysis of exception flows and handler actions in java libraries an empirical study this paper presents an empirical study of exception handling strategies in java libraries the study conducts an integrated analysis of exception flows and handler actions from java libraries with the aim to understand the impact of adopted exception handling strategies from the perspective of libraries users we extended an existing static analysis tool to identify exception flows in software libraries and collected data from the eight most downloaded java libraries in maven repository after that manual analysis was performed to categorize the tailored handler actions for each exception handler our results show that a high number of uncaught runtime exceptions and subsumption handlers were applied in some libraries we also investigated the community anti patterns implemented by handler actions in exception flows our results reveal the need to have automated support to allow the integrated analysis of exception flows and their handler actions explicitly empirical study exception handling software libraries static analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
645,0,"Antibiotic Patterns with Inflatable Penile Prosthesis Insertion ABSTRACT Introduction A clear set of guidelines has not been defined in the use of antibiotics in penile prosthesis implantation. Aim We surveyed urologists throughout the United States to determine current practice patterns regarding antibiotic use in primary and revision penile prosthesis surgery. Methods Fifty-two Sexual Medicine Society of North America (SMS) member urologist and 164 non-SMS member urologist responses were obtained. Main Outcome Measures The survey contained 10 questions regarding antibiotic selection for primary and revision inflatable penile prosthesis (IPP) implantation. Results One hundred percent of responders in both groups utilize intraoperative antibiotics, most commonly vancomycin and gentamicin in both groups. Of SMS members, 94% prescribed postoperative home oral antibiotics in contrast to 88% of non-SMS members (P=0.3). Among SMS members, the most common antibiotic prescribed postoperatively was levofloxacin 500mg daily while among non-SMS members, the most common antibiotic postoperatively was cephalexin 500mg 2--4 times daily. Of SMS members, antibiotic irrigation intraoperatively occurred with 100% and with 92% of non-SMS members (P=0.04). Thirty-seven percent SMS physicians and 15% non-SMS physicians made modifications of intraoperative and postoperative antibiotics for high-risk patients (P=0.001). In the circumstance of revision of a clinically noninfected IPP, 23% SMS and 16% non-SMS member physicians utilized additional antibiotics/treatment (P=0.3). Sixteen of those surveyed admitted that they had been approached by their institution about their antibiotic use and asked to change. In the past 5 years, 29% surveyed have changed their practice patterns in antibiotic use. Conclusions There is significant difference between practice patterns of SMS and non-SMS urologists in terms of antibiotic irrigation usage, modifications for high-risk patients, and consensus about the importance of antibiotic use with Coloplast Titan implant (Coloplast, Minneapolis, MN, USA). A significant lack of uniformity exists among urologists performing prosthetic surgery with regard to antibiotic protocols. A standard set of guidelines may prove useful to implanters. Wosnitzer MS and Greenfield JM. Antibiotic patterns with inflatable penile prosthesis insertion. Inflatable Penile Prosthesis, Antibiotic Selection, Infection, Erectile Dysfunction, Survey of Urologic Practice in Preventing Penile Implant Infections",antibiotic patterns with inflatable penile prosthesis insertion abstract introduction a clear set of guidelines has not been defined in the use of antibiotics in penile prosthesis implantation aim we surveyed urologists throughout the united states to determine current practice patterns regarding antibiotic use in primary and revision penile prosthesis surgery methods fifty two sexual medicine society of north america sms member urologist and 164 non sms member urologist responses were obtained main outcome measures the survey contained 10 questions regarding antibiotic selection for primary and revision inflatable penile prosthesis ipp implantation results one hundred percent of responders in both groups utilize intraoperative antibiotics most commonly vancomycin and gentamicin in both groups of sms members 94 prescribed postoperative home oral antibiotics in contrast to 88 of non sms members p 0 3 among sms members the most common antibiotic prescribed postoperatively was levofloxacin 500mg daily while among non sms members the most common antibiotic postoperatively was cephalexin 500mg 2 4 times daily of sms members antibiotic irrigation intraoperatively occurred with 100 and with 92 of non sms members p 0 04 thirty seven percent sms physicians and 15 non sms physicians made modifications of intraoperative and postoperative antibiotics for high risk patients p 0 001 in the circumstance of revision of a clinically noninfected ipp 23 sms and 16 non sms member physicians utilized additional antibiotics treatment p 0 3 sixteen of those surveyed admitted that they had been approached by their institution about their antibiotic use and asked to change in the past 5 years 29 surveyed have changed their practice patterns in antibiotic use conclusions there is significant difference between practice patterns of sms and non sms urologists in terms of antibiotic irrigation usage modifications for high risk patients and consensus about the importance of antibiotic use with coloplast titan implant coloplast minneapolis mn usa a significant lack of uniformity exists among urologists performing prosthetic surgery with regard to antibiotic protocols a standard set of guidelines may prove useful to implanters wosnitzer ms and greenfield jm antibiotic patterns with inflatable penile prosthesis insertion inflatable penile prosthesis antibiotic selection infection erectile dysfunction survey of urologic practice in preventing penile implant infections,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
646,0,"Detecting design flaws in control systems using optimisation methods Complicated control systems are used in many safety-critical applications, such as in cars and airplanes. Due to the nature of these systems, verification can be very difficult to do analytically or algorithmically. The only feasible analysis and verification method is often simulation. The generation of good test cases that can expose flaws in the controller design is therefore of great importance. In this paper we investigate the use of optimisation methods for finding such test cases automatically. For this purpose we give a language to express assertions in control systems, as well as a translation of the assertions to a form suitable for optimisation. We also discuss different ways to generate the input signals for the systems to maximise performance of the optimisation. To evaluate if optimisation is a feasible approach, we provide a case study demonstrating that optimisation methods are beneficial for investigating properties of control system designs control system synthesis, optimisation, design flaw detection, control system, analysis method, verification method, Control systems, Optimization methods, Airplanes, Algorithm design and analysis, Analytical models, Automatic generation control, Automatic testing, Automatic control, Signal generators, Design optimization",detecting design flaws in control systems using optimisation methods complicated control systems are used in many safety critical applications such as in cars and airplanes due to the nature of these systems verification can be very difficult to do analytically or algorithmically the only feasible analysis and verification method is often simulation the generation of good test cases that can expose flaws in the controller design is therefore of great importance in this paper we investigate the use of optimisation methods for finding such test cases automatically for this purpose we give a language to express assertions in control systems as well as a translation of the assertions to a form suitable for optimisation we also discuss different ways to generate the input signals for the systems to maximise performance of the optimisation to evaluate if optimisation is a feasible approach we provide a case study demonstrating that optimisation methods are beneficial for investigating properties of control system designs control system synthesis optimisation design flaw detection control system analysis method verification method control systems optimization methods airplanes algorithm design and analysis analytical models automatic generation control automatic testing automatic control signal generators design optimization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
647,0,"Olfactory stimulation curbs food cravings Based on the logic of mutual competition between cravings and odours for limited-capacity resources, this study investigated whether a simple olfactory task, involving a brief odour exposure, could reduce food cravings. In support, Experiment 1 showed that smelling a neutral unfamiliar odorant reduced cravings for highly desired food items, relative to a comparison auditory task and a no-task control condition. Experiment 2 replicated these findings specifically for chocolate cravings, which can be particularly problematic. Thus olfactory stimulation offers potential scope for curbing unwanted food cravings. Craving, Food, Odour, Craving reduction",olfactory stimulation curbs food cravings based on the logic of mutual competition between cravings and odours for limited capacity resources this study investigated whether a simple olfactory task involving a brief odour exposure could reduce food cravings in support experiment 1 showed that smelling a neutral unfamiliar odorant reduced cravings for highly desired food items relative to a comparison auditory task and a no task control condition experiment 2 replicated these findings specifically for chocolate cravings which can be particularly problematic thus olfactory stimulation offers potential scope for curbing unwanted food cravings craving food odour craving reduction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
648,0,"On the Analysis of Evolution of Software Artefacts and Programs The literature describes several approaches to identify the artefacts of programs that evolve together to reveal the (hidden) dependencies among these artefacts and to infer and describe their evolution trends. We propose the use of biological methods to group artefacts, to detect co-evolution among them, and to construct their phylogenic trees to express their evolution trends. First, we introduced the novel concepts of macro co-changes (MCCs), i.e., of artefacts that co-change within a large time interval and of dephase macro co-changes (DMCCs), i.e., macro co-changes that always happen with the same shifts in time. We developped an approach, Macocha, to identify these new patterns of artefacts co-evolution in large programs. Now, we are analysing the evolution of classes playing roles in design pattern and--or anti-patterns. In parallel to previous work, we are detecting what classes are in macro co-change or in dephase macro co-change with the design motifs. Results trend to show that classes plying roles in design motifs have specifics evolution trends. Finally, we are implementing an approach, Profilo, to achieve the analysis of the evolution of artefacts and versions of large object-oriented programs. Profilo create a phylogenic tree of different versions of program that describes versions evolution and the relation among versions and programs. We will also evaluate the usefulness of our tools using lab and field studies. []",on the analysis of evolution of software artefacts and programs the literature describes several approaches to identify the artefacts of programs that evolve together to reveal the hidden dependencies among these artefacts and to infer and describe their evolution trends we propose the use of biological methods to group artefacts to detect co evolution among them and to construct their phylogenic trees to express their evolution trends first we introduced the novel concepts of macro co changes mccs i e of artefacts that co change within a large time interval and of dephase macro co changes dmccs i e macro co changes that always happen with the same shifts in time we developped an approach macocha to identify these new patterns of artefacts co evolution in large programs now we are analysing the evolution of classes playing roles in design pattern and or anti patterns in parallel to previous work we are detecting what classes are in macro co change or in dephase macro co change with the design motifs results trend to show that classes plying roles in design motifs have specifics evolution trends finally we are implementing an approach profilo to achieve the analysis of the evolution of artefacts and versions of large object oriented programs profilo create a phylogenic tree of different versions of program that describes versions evolution and the relation among versions and programs we will also evaluate the usefulness of our tools using lab and field studies,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
649,0,"Satisfaction and Problems Experienced With Transfemoral Suspension Systems: A Comparison Between Common Suction Socket and Seal-In Liner Objective To compare a seal-in liner with the common suction socket with regards to patient satisfaction and problems experienced with the prosthesis. Design Retrospective survey. Setting A medical and engineering research center and a department of biomechanical engineering. Participants Men (N=90) with traumatic transfemoral amputation who used both suspension systems participated in the study. Intervention Two prosthetic suspension systems: a seal-in liner and common suction socket. Main Outcome Measures Two questionnaires were completed by each subject to evaluate their satisfaction and problems experienced with the 2 suspension systems. Satisfaction and problems with the prosthetic suspension systems were analyzed in terms of fitting, donning and doffing, sitting, walking, stair negotiation, appearance, sweating, wounds, pain, irritation, pistoning, edema, smell, sound, and durability. Results The study revealed that the respondents were more satisfied with a seal-in liner with regards to fitting, sitting, and donning and doffing. Overall satisfaction increased with the use of a seal-in liner compared with the suction socket (P<.05). However, satisfaction with the prosthesis showed no significant differences in terms of walking (flat and uneven surfaces), appearance, and stair negotiation. Furthermore, problems experienced differed significantly between the 2 suspension systems (P<.05). Sweating, wounds, pain, irritation, pistoning, edema, smell, and sound were less problematic with the use of a seal-in liner, whereas durability was significantly better with the suction socket. Conclusions The results of the survey suggest that satisfaction and problems with prosthetic suspension in persons with transfemoral amputation can be improved with a seal-in liner compared with the suction socket, provided that the durability of the liner is enhanced. Amputation, Patient satisfaction, Prostheses and implants, Rehabilitation",satisfaction and problems experienced with transfemoral suspension systems a comparison between common suction socket and seal in liner objective to compare a seal in liner with the common suction socket with regards to patient satisfaction and problems experienced with the prosthesis design retrospective survey setting a medical and engineering research center and a department of biomechanical engineering participants men n 90 with traumatic transfemoral amputation who used both suspension systems participated in the study intervention two prosthetic suspension systems a seal in liner and common suction socket main outcome measures two questionnaires were completed by each subject to evaluate their satisfaction and problems experienced with the 2 suspension systems satisfaction and problems with the prosthetic suspension systems were analyzed in terms of fitting donning and doffing sitting walking stair negotiation appearance sweating wounds pain irritation pistoning edema smell sound and durability results the study revealed that the respondents were more satisfied with a seal in liner with regards to fitting sitting and donning and doffing overall satisfaction increased with the use of a seal in liner compared with the suction socket p 05 however satisfaction with the prosthesis showed no significant differences in terms of walking flat and uneven surfaces appearance and stair negotiation furthermore problems experienced differed significantly between the 2 suspension systems p 05 sweating wounds pain irritation pistoning edema smell and sound were less problematic with the use of a seal in liner whereas durability was significantly better with the suction socket conclusions the results of the survey suggest that satisfaction and problems with prosthetic suspension in persons with transfemoral amputation can be improved with a seal in liner compared with the suction socket provided that the durability of the liner is enhanced amputation patient satisfaction prostheses and implants rehabilitation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0.0,0.0
650,0,"Threshold Analysis of Design Metrics to Detect Design Flaws: Student Research Abstract Detection of design flaws at different granularity levels of software can help the software engineer to reduce the testing efforts and maintenance cost. In the context of metric-based analysis, current state of art for the quality assurance tools is to extract the metrics from the source code and analyzed the design complexity. But in case of legacy systems, a software engineer needs to pass through the re-engineering process. In this study, I propose a methodology to investigate the threshold effect of software design metrics in order to detect design flaws and its effect over the granularity level of software. Moreover, I will use some statistical methods and machine learning techniques to derive and validate the effect of thresholds over the NASA and open source datasets retrieve from the PROMISE repository. []",threshold analysis of design metrics to detect design flaws student research abstract detection of design flaws at different granularity levels of software can help the software engineer to reduce the testing efforts and maintenance cost in the context of metric based analysis current state of art for the quality assurance tools is to extract the metrics from the source code and analyzed the design complexity but in case of legacy systems a software engineer needs to pass through the re engineering process in this study i propose a methodology to investigate the threshold effect of software design metrics in order to detect design flaws and its effect over the granularity level of software moreover i will use some statistical methods and machine learning techniques to derive and validate the effect of thresholds over the nasa and open source datasets retrieve from the promise repository,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
651,0,"Community-Empowered Air Quality Monitoring System Developing information technology to democratize scientific knowledge and support citizen empowerment is a challenging task. In our case, a local community suffered from air pollution caused by industrial activity. The residents lacked the technological fluency to gather and curate diverse scientific data to advocate for regulatory change. We collaborated with the community in developing an air quality monitoring system which integrated heterogeneous data over a large spatial and temporal scale. The system afforded strong scientific evidence by using animated smoke images, air quality data, crowdsourced smell reports, and wind data. In our evaluation, we report patterns of sharing smoke images among stakeholders. Our survey study shows that the scientific knowledge provided by the system encourages agonistic discussions with regulators, empowers the community to support policy making, and rebalances the power relationship between stakeholders. adversarial design, air quality, citizen science, community engagement, data visualization, participatory design, sustainable hci",community empowered air quality monitoring system developing information technology to democratize scientific knowledge and support citizen empowerment is a challenging task in our case a local community suffered from air pollution caused by industrial activity the residents lacked the technological fluency to gather and curate diverse scientific data to advocate for regulatory change we collaborated with the community in developing an air quality monitoring system which integrated heterogeneous data over a large spatial and temporal scale the system afforded strong scientific evidence by using animated smoke images air quality data crowdsourced smell reports and wind data in our evaluation we report patterns of sharing smoke images among stakeholders our survey study shows that the scientific knowledge provided by the system encourages agonistic discussions with regulators empowers the community to support policy making and rebalances the power relationship between stakeholders adversarial design air quality citizen science community engagement data visualization participatory design sustainable hci,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0.0,1.0
652,0,"AutoRefactoring: A platform to build refactoring agents Software maintenance may degrade the software quality. One of the primary ways to reduce undesired effects of maintenance is refactoring, which is a technique to improve software code quality without changing its observable behavior. To safely apply a refactoring, several issues must be considered: (i) identify the code parts that should be improved; (ii) determine the changes that must be applied to the code in order to improve its; (iii) evaluate the corrections impacts on code quality; and (iv) check that the observable behavior of the software will be preserved after applying the corrections. Given the amount of issues to consider, refactoring by hand has been assumed to be an expensive and error-prone task. Therefore, in this paper, we propose an agent-based platform that enables to implement an agent able to autonomously deal with the above mentioned refactoring issues. To evaluate our approach, we performed an empirical study on code smells detection and correction, code quality improvement and preservation of the software observable behavior. To answer our research questions, we analyze 5 releases of Java open source projects, ranging from 166 to 711 classes. Autonomous agents, Software refactoring, Smells detection, Smells correction, Code quality",autorefactoring a platform to build refactoring agents software maintenance may degrade the software quality one of the primary ways to reduce undesired effects of maintenance is refactoring which is a technique to improve software code quality without changing its observable behavior to safely apply a refactoring several issues must be considered i identify the code parts that should be improved ii determine the changes that must be applied to the code in order to improve its iii evaluate the corrections impacts on code quality and iv check that the observable behavior of the software will be preserved after applying the corrections given the amount of issues to consider refactoring by hand has been assumed to be an expensive and error prone task therefore in this paper we propose an agent based platform that enables to implement an agent able to autonomously deal with the above mentioned refactoring issues to evaluate our approach we performed an empirical study on code smells detection and correction code quality improvement and preservation of the software observable behavior to answer our research questions we analyze 5 releases of java open source projects ranging from 166 to 711 classes autonomous agents software refactoring smells detection smells correction code quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
653,0,"Identification, Impact, and Refactoring of Smells in Pipe-Like Web Mashups With the emergence of tools to support visual mashup creation, tens of thousands of users have started to access, manipulate, and compose data from web sources. We have observed, however, that mashups created by these users tend to suffer from deficiencies that propagate as mashups are reused, which happens frequently. To address these deficiencies, we would like to bring some of the benefits of software engineering techniques to the end users creating these programs. In this work, we focus on identifying code smells indicative of the deficiencies we observed in web mashups programmed in the popular Yahoo! Pipes environment. Through an empirical study, we explore the impact of those smells on the preferences of 61 users, and observe that a significant majority of users prefer mashups without smells. We then introduce refactorings targeting those smells. These refactorings reduce the complexity of the mashup programs, increase their abstraction, update broken data sources and dated components, and standardize their structures to fit the community development patterns. Our assessment of a sample of over 8,000 mashups shows that smells are present in 81 percent of them and that the proposed refactorings can reduce the number of smelly mashups to 16 percent, illustrating the potential of refactoring to support the thousands of end-users programming mashups. Further, we explore how the smells and refactorings can apply to other end-user programming domains to show the generalizability of our approach. Internet, software maintenance, smell identification, smell impact, smell refactoring, pipe-like Web mashups, visual mashup creation, Web sources, software engineering techniques, Yahoo! Pipes environment, end-users programming mashups, Mashups, Visualization, Factoring, Generators, Programming, End-user software engineering, end-user programming, web mashups, refactoring, code smells, empirical studies",identification impact and refactoring of smells in pipe like web mashups with the emergence of tools to support visual mashup creation tens of thousands of users have started to access manipulate and compose data from web sources we have observed however that mashups created by these users tend to suffer from deficiencies that propagate as mashups are reused which happens frequently to address these deficiencies we would like to bring some of the benefits of software engineering techniques to the end users creating these programs in this work we focus on identifying code smells indicative of the deficiencies we observed in web mashups programmed in the popular yahoo pipes environment through an empirical study we explore the impact of those smells on the preferences of 61 users and observe that a significant majority of users prefer mashups without smells we then introduce refactorings targeting those smells these refactorings reduce the complexity of the mashup programs increase their abstraction update broken data sources and dated components and standardize their structures to fit the community development patterns our assessment of a sample of over 8 000 mashups shows that smells are present in 81 percent of them and that the proposed refactorings can reduce the number of smelly mashups to 16 percent illustrating the potential of refactoring to support the thousands of end users programming mashups further we explore how the smells and refactorings can apply to other end user programming domains to show the generalizability of our approach internet software maintenance smell identification smell impact smell refactoring pipe like web mashups visual mashup creation web sources software engineering techniques yahoo pipes environment end users programming mashups mashups visualization factoring generators programming end user software engineering end user programming web mashups refactoring code smells empirical studies,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
654,0,"Using Developers' Feedback to Improve Code Smell Detection Several studies are focused on the study of code smells and many detection techniques have been proposed. In this scenario, the use of rules involving software-metrics has been widely used in refactoring tools as a mechanism to detect code smells automatically. However, actual approaches present two unsatisfactory aspects: they present a low agreement in its results and, they do not consider the developers' feedback. In this way, these approaches detect smells that are not relevant to the developers. In order to solve the above mentioned unsatisfactory aspects in the state-of the-art of code smells detection, we propose the Smell Platform able to recognize code smells more relevant to developers by using its feedback. In this paper we present how such platform is able to detect four well known code smells. Finally, we evaluate the Smell Platform comparing its results with traditional detection techniques. code smell detection, developer's feedback, refactoring",using developers feedback to improve code smell detection several studies are focused on the study of code smells and many detection techniques have been proposed in this scenario the use of rules involving software metrics has been widely used in refactoring tools as a mechanism to detect code smells automatically however actual approaches present two unsatisfactory aspects they present a low agreement in its results and they do not consider the developers feedback in this way these approaches detect smells that are not relevant to the developers in order to solve the above mentioned unsatisfactory aspects in the state of the art of code smells detection we propose the smell platform able to recognize code smells more relevant to developers by using its feedback in this paper we present how such platform is able to detect four well known code smells finally we evaluate the smell platform comparing its results with traditional detection techniques code smell detection developer s feedback refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
655,0,"Cognitive consequences of drug abuser: comparison with abuse of stimulants and opioid with regard to attention and working memory Existence of disharmony in sustaining attention and working memory in stimulants abusers and opioids abusers in Iran is observable. The performance of tree group of people included 30 normal person, 27 opioids addict, and 26 stimulant addicts in Paced visual Serial Addition Test (PVSAT) as a measure of sustaining attention and working memory was assessed in this research. Significant difference were observed in sustaining attention, and working memory between tree groups of control (whom never use drugs) and experiments (those are addicted to opioids or stimulants); but there were no significant between two groups of addicted subjects which use opioids or stimulants. stimulants, opioids, sustaining attention, working memory, PVSAT",cognitive consequences of drug abuser comparison with abuse of stimulants and opioid with regard to attention and working memory existence of disharmony in sustaining attention and working memory in stimulants abusers and opioids abusers in iran is observable the performance of tree group of people included 30 normal person 27 opioids addict and 26 stimulant addicts in paced visual serial addition test pvsat as a measure of sustaining attention and working memory was assessed in this research significant difference were observed in sustaining attention and working memory between tree groups of control whom never use drugs and experiments those are addicted to opioids or stimulants but there were no significant between two groups of addicted subjects which use opioids or stimulants stimulants opioids sustaining attention working memory pvsat,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
656,0,"Hajukone: Developing an Open Source Olfactory Device In comparison to our other senses, there has been relatively little work on how our sense of smell can be effectively utilised in a Human-Computer Interface. We argue that the lack of easy access to 'off-the-shelf' computer controlled scent delivery devices restricts research in this area, and that without understanding what smell can be used for, there is little commercial case to make such devices available. In considering these issues, we have developed Hajukone: a smell delivery device that is both open source and can be built with low technical skills, yet provides high quality olfactory capabilities. We outline the design of Hajukone, showing how it overcomes critical design requirements that have restricted prior research, before outlining our future plans for its development and use. making, olfaction, open-source, scent-delivery",hajukone developing an open source olfactory device in comparison to our other senses there has been relatively little work on how our sense of smell can be effectively utilised in a human computer interface we argue that the lack of easy access to off the shelf computer controlled scent delivery devices restricts research in this area and that without understanding what smell can be used for there is little commercial case to make such devices available in considering these issues we have developed hajukone a smell delivery device that is both open source and can be built with low technical skills yet provides high quality olfactory capabilities we outline the design of hajukone showing how it overcomes critical design requirements that have restricted prior research before outlining our future plans for its development and use making olfaction open source scent delivery,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
657,0,"A Fuzzy Assessment of Sustainable Urban Development Based on Analytic Hierarchy Process This paper describes an assessment of urban sustainability based on a fuzzy analytic hierarchy process approach. An empirical research is explored in the city of Shijiazhuang, northeast of China. The assessment results show that sustainable city development in Shijiazhuang in recent years evolves to a much higher level as a whole, and it has reached the medium-level sustainable development in 2003. From 1999 to 2003, except the sustainability of city institution is declining, the sustainability of economy, society and environment all are being improved continuously. However, compared with other capital cities in China, there still remain some gaps in the sustainable urban development aspects. As far as the coordination of sustainable city development is concerned, it is a downward trend in next few years. The coordination between environment and institution is the worst, and it is also very disharmony between economy development and the environment development in Shijiazhuang decision making, decision theory, fuzzy set theory, sustainable development, town and country planning, fuzzy assessment, sustainable urban development, fuzzy analytic hierarchy process, Shijiazhuang city, AHP decision model, Cities and towns, Environmental economics, Chemical technology, Educational technology, Environmental management, Technology management, Engineering management, Sustainable development, Chemistry, Urban areas, Sustainable urban development, fuzzy assessment, analytic hierarchy process (AHP), Shijiazhuang",a fuzzy assessment of sustainable urban development based on analytic hierarchy process this paper describes an assessment of urban sustainability based on a fuzzy analytic hierarchy process approach an empirical research is explored in the city of shijiazhuang northeast of china the assessment results show that sustainable city development in shijiazhuang in recent years evolves to a much higher level as a whole and it has reached the medium level sustainable development in 2003 from 1999 to 2003 except the sustainability of city institution is declining the sustainability of economy society and environment all are being improved continuously however compared with other capital cities in china there still remain some gaps in the sustainable urban development aspects as far as the coordination of sustainable city development is concerned it is a downward trend in next few years the coordination between environment and institution is the worst and it is also very disharmony between economy development and the environment development in shijiazhuang decision making decision theory fuzzy set theory sustainable development town and country planning fuzzy assessment sustainable urban development fuzzy analytic hierarchy process shijiazhuang city ahp decision model cities and towns environmental economics chemical technology educational technology environmental management technology management engineering management sustainable development chemistry urban areas sustainable urban development fuzzy assessment analytic hierarchy process ahp shijiazhuang,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
658,0,"The extent of management contribution in economic growth The disharmony between rapid development of science and technology and lower lag of management has been highlighted. The Chinese Government has officially announced that management should be considered as an important factor into distribution system. This paper concentrates on that the extent of management contributes in economic growth through the quantitative measuring method. Management has been regarded as organizational behavior which could increase economic benefits. This paper represents what the concept of equal efficiency curved surface production function is; and to establish an equation for speed of growth. Based on the above and according to the dynamic changes of efficiency, the quantitative measuring method in management that affecting economic growth is presented and empirical tests are carried out. The quantitative measuring of extent of management element contributes in economic growth has provided theoretical basis for participation of management factor in distribution system. macroeconomics, management science, organisational aspects, management contribution, economic growth, science and technology, Chinese government, organizational behavior, economic benefits, quantitative measuring method, distribution system, Production, Technology management, Innovation management, Microeconomics, Government, Equations, Technological innovation, Testing, Particle measurements, Research and development management, Equal Efficiency Curved Surface Production Function, Equation For Speed of Growth, Extent of Management Contribution",the extent of management contribution in economic growth the disharmony between rapid development of science and technology and lower lag of management has been highlighted the chinese government has officially announced that management should be considered as an important factor into distribution system this paper concentrates on that the extent of management contributes in economic growth through the quantitative measuring method management has been regarded as organizational behavior which could increase economic benefits this paper represents what the concept of equal efficiency curved surface production function is and to establish an equation for speed of growth based on the above and according to the dynamic changes of efficiency the quantitative measuring method in management that affecting economic growth is presented and empirical tests are carried out the quantitative measuring of extent of management element contributes in economic growth has provided theoretical basis for participation of management factor in distribution system macroeconomics management science organisational aspects management contribution economic growth science and technology chinese government organizational behavior economic benefits quantitative measuring method distribution system production technology management innovation management microeconomics government equations technological innovation testing particle measurements research and development management equal efficiency curved surface production function equation for speed of growth extent of management contribution,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
659,0,"On the Criteria for Prioritizing Code Anomalies to Identify Architectural Problems Architectural problems constantly affect evolving software projects. When not properly addressed, those problems can hinder the longevity of a software system. Some studies revealed that a wide range of architectural problems are reflected in source code through code anomalies. However, a software project often contains thousands of code anomalies and many of them have no relation to architectural problems. As a consequence, developers struggle to effectively determine which (groups of) anomalies are architecturally relevant. This work proposes criteria for prioritizing groups of code anomalies as indicators of architectural problems in evolving systems. architectural problems, code anomalies, software maintenance",on the criteria for prioritizing code anomalies to identify architectural problems architectural problems constantly affect evolving software projects when not properly addressed those problems can hinder the longevity of a software system some studies revealed that a wide range of architectural problems are reflected in source code through code anomalies however a software project often contains thousands of code anomalies and many of them have no relation to architectural problems as a consequence developers struggle to effectively determine which groups of anomalies are architecturally relevant this work proposes criteria for prioritizing groups of code anomalies as indicators of architectural problems in evolving systems architectural problems code anomalies software maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
660,0,"InAir: Sharing Indoor Air Quality Measurements and Visualizations This paper describes inAir, a tool for sharing measurements and visualizations of indoor air quality within one's social network. Poor indoor air quality is difficult for humans to detect through sight and smell alone and can contribute to the development of chronic diseases. Through a four-week long study of fourteen households as six groups, we found that inAir (1) increased awareness of, and reflection on air quality, (2) promoted behavioral changes that resulted in improved indoor air quality, and (3) demonstrated the persuasive power of sharing for furthering improvements to indoor air quality in terms of fostering new social awareness and behavior changes as well as strengthening social bonds and prompting collaborative efforts across social networks to improve human health and well being. air quality, domestic technology, environment, health, iphone, persuasive technology, sensors, sustainability",inair sharing indoor air quality measurements and visualizations this paper describes inair a tool for sharing measurements and visualizations of indoor air quality within one s social network poor indoor air quality is difficult for humans to detect through sight and smell alone and can contribute to the development of chronic diseases through a four week long study of fourteen households as six groups we found that inair 1 increased awareness of and reflection on air quality 2 promoted behavioral changes that resulted in improved indoor air quality and 3 demonstrated the persuasive power of sharing for furthering improvements to indoor air quality in terms of fostering new social awareness and behavior changes as well as strengthening social bonds and prompting collaborative efforts across social networks to improve human health and well being air quality domestic technology environment health iphone persuasive technology sensors sustainability,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
661,0,"Study of highly sensitive smell sensing system using gas detector tube combined with optical scanner We describe rapid and low-cost system for monitoring bad smells in the living environment. This system consists of a conventional gas detector tube and an optical scanner. It was found that methyl mercaptan, hydrogen sulfide and propionaldehyde with the concentrations down to 29 ppb, 19 ppb and 46 ppb respectively were detectable. The sensitivity increased about 10 times larger than that of the conventional detector tube utilizing the accumulation effect. Moreover, we are currently developing a portable system using a one-dimensional CCD image sensor. The distribution of bad smell will be monitored using multiple portable sensors in the near future. gas sensors, CCD image sensors, chemical variables measurement, optical scanners, portable instruments, smell sensing system, gas detector tube, optical scanner, bad smell monitoring, living environment, methyl mercaptan, hydrogen sulfide, propionaldehyde, portable system, CCD image sensor, portable sensors, Gas detectors, Optical sensors, Monitoring, Optical signal processing, Hydrogen, Charge-coupled image sensors, Gases, Chemical analysis, Optical pumping, Interference",study of highly sensitive smell sensing system using gas detector tube combined with optical scanner we describe rapid and low cost system for monitoring bad smells in the living environment this system consists of a conventional gas detector tube and an optical scanner it was found that methyl mercaptan hydrogen sulfide and propionaldehyde with the concentrations down to 29 ppb 19 ppb and 46 ppb respectively were detectable the sensitivity increased about 10 times larger than that of the conventional detector tube utilizing the accumulation effect moreover we are currently developing a portable system using a one dimensional ccd image sensor the distribution of bad smell will be monitored using multiple portable sensors in the near future gas sensors ccd image sensors chemical variables measurement optical scanners portable instruments smell sensing system gas detector tube optical scanner bad smell monitoring living environment methyl mercaptan hydrogen sulfide propionaldehyde portable system ccd image sensor portable sensors gas detectors optical sensors monitoring optical signal processing hydrogen charge coupled image sensors gases chemical analysis optical pumping interference,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
662,0,"First Principles Predictions of the Structure and Function of G-Protein-Coupled Receptors: Validation for Bovine Rhodopsin G-protein-coupled receptors (GPCRs) are involved in cell communication processes and with mediating such senses as vision, smell, taste, and pain. They constitute a prominent superfamily of drug targets, but an atomic-level structure is available for only one GPCR, bovine rhodopsin, making it difficult to use structure-based methods to design receptor-specific drugs. We have developed the MembStruk first principles computational method for predicting the three-dimensional structure of GPCRs. In this article we validate the MembStruk procedure by comparing its predictions with the high-resolution crystal structure of bovine rhodopsin. The crystal structure of bovine rhodopsin has the second extracellular (EC-II) loop closed over the transmembrane regions by making a disulfide linkage between Cys-110 and Cys-187, but we speculate that opening this loop may play a role in the activation process of the receptor through the cysteine linkage with helix 3. Consequently we predicted two structures for bovine rhodopsin from the primary sequence (with no input from the crystal structure)---one with the EC-II loop closed as in the crystal structure, and the other with the EC-II loop open. The MembStruk-predicted structure of bovine rhodopsin with the closed EC-II loop deviates from the crystal by 2.84Å coordinate root mean-square (CRMS) in the transmembrane region main-chain atoms. The predicted three-dimensional structures for other GPCRs can be validated only by predicting binding sites and energies for various ligands. For such predictions we developed the HierDock first principles computational method. We validate HierDock by predicting the binding site of 11-cis-retinal in the crystal structure of bovine rhodopsin. Scanning the whole protein without using any prior knowledge of the binding site, we find that the best scoring conformation in rhodopsin is 1.1Å CRMS from the crystal structure for the ligand atoms. This predicted conformation has the carbonyl O only 2.82Å from the N of Lys-296. Making this Schiff base bond and minimizing leads to a final conformation only 0.62Å CRMS from the crystal structure. We also used HierDock to predict the binding site of 11-cis-retinal in the MembStruk-predicted structure of bovine rhodopsin (closed loop). Scanning the whole protein structure leads to a structure in which the carbonyl O is only 2.85Å from the N of Lys-296. Making this Schiff base bond and minimizing leads to a final conformation only 2.92Å CRMS from the crystal structure. The good agreement of the ab initio-predicted protein structures and ligand binding site with experiment validates the use of the MembStruk and HierDock first principles' methods. Since these methods are generic and applicable to any GPCR, they should be useful in predicting the structures of other GPCRs and the binding site of ligands to these proteins. []",first principles predictions of the structure and function of g protein coupled receptors validation for bovine rhodopsin g protein coupled receptors gpcrs are involved in cell communication processes and with mediating such senses as vision smell taste and pain they constitute a prominent superfamily of drug targets but an atomic level structure is available for only one gpcr bovine rhodopsin making it difficult to use structure based methods to design receptor specific drugs we have developed the membstruk first principles computational method for predicting the three dimensional structure of gpcrs in this article we validate the membstruk procedure by comparing its predictions with the high resolution crystal structure of bovine rhodopsin the crystal structure of bovine rhodopsin has the second extracellular ec ii loop closed over the transmembrane regions by making a disulfide linkage between cys 110 and cys 187 but we speculate that opening this loop may play a role in the activation process of the receptor through the cysteine linkage with helix 3 consequently we predicted two structures for bovine rhodopsin from the primary sequence with no input from the crystal structure one with the ec ii loop closed as in the crystal structure and the other with the ec ii loop open the membstruk predicted structure of bovine rhodopsin with the closed ec ii loop deviates from the crystal by 2 84 coordinate root mean square crms in the transmembrane region main chain atoms the predicted three dimensional structures for other gpcrs can be validated only by predicting binding sites and energies for various ligands for such predictions we developed the hierdock first principles computational method we validate hierdock by predicting the binding site of 11 cis retinal in the crystal structure of bovine rhodopsin scanning the whole protein without using any prior knowledge of the binding site we find that the best scoring conformation in rhodopsin is 1 1 crms from the crystal structure for the ligand atoms this predicted conformation has the carbonyl o only 2 82 from the n of lys 296 making this schiff base bond and minimizing leads to a final conformation only 0 62 crms from the crystal structure we also used hierdock to predict the binding site of 11 cis retinal in the membstruk predicted structure of bovine rhodopsin closed loop scanning the whole protein structure leads to a structure in which the carbonyl o is only 2 85 from the n of lys 296 making this schiff base bond and minimizing leads to a final conformation only 2 92 crms from the crystal structure the good agreement of the ab initio predicted protein structures and ligand binding site with experiment validates the use of the membstruk and hierdock first principles methods since these methods are generic and applicable to any gpcr they should be useful in predicting the structures of other gpcrs and the binding site of ligands to these proteins,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0.0,0.0
663,0,"Search-based Determination of Refactorings for Improving the Class Structure of Object-oriented Systems A software system's structure degrades over time, a phenomenon that is known as software decay or design drift. Since the quality of the structure has major impact on the maintainability of a system, the structure has to be reconditioned from time to time. Even if recent advances in the fields of automated detection of bad smells and refactorings have made life easier for software engineers, this is still a very complex and resource consuming task.Search-based approaches have turned out to be helpful in aiding a software engineer to improve the subsystem structure of a software system. In this paper we show that such techniques are also applicable when reconditioning the class structure of a system. We describe a novel search-based approach that assists a software engineer who has to perform this task by suggesting a list of refactorings. Our approach uses an evolutionary algorithm and simulated refactorings that do not change the system's externally visible behavior. The approach is evaluated using the open-source case study JHotDraw. design heuristics, evolutionary algorithms, refactoring, software metrics",search based determination of refactorings for improving the class structure of object oriented systems a software system s structure degrades over time a phenomenon that is known as software decay or design drift since the quality of the structure has major impact on the maintainability of a system the structure has to be reconditioned from time to time even if recent advances in the fields of automated detection of bad smells and refactorings have made life easier for software engineers this is still a very complex and resource consuming task search based approaches have turned out to be helpful in aiding a software engineer to improve the subsystem structure of a software system in this paper we show that such techniques are also applicable when reconditioning the class structure of a system we describe a novel search based approach that assists a software engineer who has to perform this task by suggesting a list of refactorings our approach uses an evolutionary algorithm and simulated refactorings that do not change the system s externally visible behavior the approach is evaluated using the open source case study jhotdraw design heuristics evolutionary algorithms refactoring software metrics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
664,0,"Design of mice maze based on PLC control unit In recent years, there are a number of mouse maze devices developed. In this paper, we introduce the Y-maze which is based on the traditional programmable logic controller as a control center to the new Y-maze. In the subject, the maze of automatic control system will be in addition to the sensor controller sub- section also part and actuator part. This paper mainly discusses the new Maze automatic control system, describes the software design process and priorities, hardware selection and layout. Among them, the interface circuit of the programmable controller, I/O port assignments, infrared sensor module and the maze rotation module are described in detail The maze of automatic control system to achieve the experimental data in mice can reduce errors, improve test efficiency and reduce human labor, side by side, in addition to the traditional Y-maze caused by the interference of some unavoidable factors, such as mice, leaving the smell of mice in the experimental results, the reliability of the experiment can be further improved. biocontrol, control engineering computing, programmable controllers, software engineering, mice maze design, PLC control unit, mouse maze devices, Y-maze, programmable logic controller, maze automatic control system, software design process, hardware selection, hardware layout, I-O port assignments, infrared sensor module, maze rotation module, Mice, Noise, Educational institutions, Presses, Switches, Y-maze, PLC, infrared sensors, automatic control",design of mice maze based on plc control unit in recent years there are a number of mouse maze devices developed in this paper we introduce the y maze which is based on the traditional programmable logic controller as a control center to the new y maze in the subject the maze of automatic control system will be in addition to the sensor controller sub section also part and actuator part this paper mainly discusses the new maze automatic control system describes the software design process and priorities hardware selection and layout among them the interface circuit of the programmable controller i o port assignments infrared sensor module and the maze rotation module are described in detail the maze of automatic control system to achieve the experimental data in mice can reduce errors improve test efficiency and reduce human labor side by side in addition to the traditional y maze caused by the interference of some unavoidable factors such as mice leaving the smell of mice in the experimental results the reliability of the experiment can be further improved biocontrol control engineering computing programmable controllers software engineering mice maze design plc control unit mouse maze devices y maze programmable logic controller maze automatic control system software design process hardware selection hardware layout i o port assignments infrared sensor module maze rotation module mice noise educational institutions presses switches y maze plc infrared sensors automatic control,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
665,0,"Understanding and overcoming cyber security anti-patterns This article presents an empirical and practice-based analysis of the question, why despite substantial investments, there are still major security weaknesses in today's information systems. Acknowledging that cyber security is not a purely technical discipline, the article takes a holistic approach and identifies four anti-patterns that are frequent in practice and detrimental to the goal of achieving strong cyber security. The first anti-pattern is that decisions about security are frequently based on intuition rather than data and rigor; this introduces cognitive biases and undermines decision quality. Second, many organizations fail to implement foundational security controls and consequently, are easy targets for opportunistic and novice attackers. Third, there is an overreliance on the relatively static threat knowledge in products such as virus scanners, while an inability to learn and adapt dynamically opens the door for advanced threats. Fourth, weaknesses in security governance create systemic control gaps and vulnerabilities. The article describes each anti-pattern and presents specific steps that organizations can take to overcome them. Cyber security, Cognitive biases, Advanced Persistent Threats, Cyber intelligence, Security controls, Security governance",understanding and overcoming cyber security anti patterns this article presents an empirical and practice based analysis of the question why despite substantial investments there are still major security weaknesses in today s information systems acknowledging that cyber security is not a purely technical discipline the article takes a holistic approach and identifies four anti patterns that are frequent in practice and detrimental to the goal of achieving strong cyber security the first anti pattern is that decisions about security are frequently based on intuition rather than data and rigor this introduces cognitive biases and undermines decision quality second many organizations fail to implement foundational security controls and consequently are easy targets for opportunistic and novice attackers third there is an overreliance on the relatively static threat knowledge in products such as virus scanners while an inability to learn and adapt dynamically opens the door for advanced threats fourth weaknesses in security governance create systemic control gaps and vulnerabilities the article describes each anti pattern and presents specific steps that organizations can take to overcome them cyber security cognitive biases advanced persistent threats cyber intelligence security controls security governance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
666,0,"Identification of the odour-active cyclic diketone cis-2,6-dimethyl-1,4-cyclohexanedione in roasted Arabica coffee brew We investigated odour-active trace compounds in roasted Brazilian Arabica coffee. Aroma dilution extract analysis (AEDA) applied to the volatile oil extracted from roasted coffee brew revealed 34 odour-active compounds. Among these, a pungent-smelling unknown odour-active compound was determined. The volatile oil was fractioned by silica gel column chromatography. Gas chromatography--olfactometry (GC--O) and multidimensional gas chromatography--mass spectrometry (MDGC--MS) of the fraction which contained a significant amount of the target unknown compound revealed the cyclic 1,4-diketone, cis-2,6-dimethyl-1,4-cyclohexanedione, which had a pungent odour, and was thus first identified in roasted coffee. Model experiments revealed that cis-2,6-dimethyl-1,4-cyclohexanedione was formed via thermal degradation of sugars, especially monosaccharides, under alkaline conditions. Further, we demonstrated that 2-hydroxy-3-pentanone and 1-hydroxy-2-propanone, thermal degradation products of monosaccharides, were closely related to the formation of cis-2,6-dimethyl-1,4-cyclohexanedione. Roasted coffee brew, Odorants, Aroma extract dilution analysis (AEDA), Multidimensional gas chromatography--mass spectrometry (MDGC--MS), Organic synthesis, Odour quality",identification of the odour active cyclic diketone cis 2 6 dimethyl 1 4 cyclohexanedione in roasted arabica coffee brew we investigated odour active trace compounds in roasted brazilian arabica coffee aroma dilution extract analysis aeda applied to the volatile oil extracted from roasted coffee brew revealed 34 odour active compounds among these a pungent smelling unknown odour active compound was determined the volatile oil was fractioned by silica gel column chromatography gas chromatography olfactometry gc o and multidimensional gas chromatography mass spectrometry mdgc ms of the fraction which contained a significant amount of the target unknown compound revealed the cyclic 1 4 diketone cis 2 6 dimethyl 1 4 cyclohexanedione which had a pungent odour and was thus first identified in roasted coffee model experiments revealed that cis 2 6 dimethyl 1 4 cyclohexanedione was formed via thermal degradation of sugars especially monosaccharides under alkaline conditions further we demonstrated that 2 hydroxy 3 pentanone and 1 hydroxy 2 propanone thermal degradation products of monosaccharides were closely related to the formation of cis 2 6 dimethyl 1 4 cyclohexanedione roasted coffee brew odorants aroma extract dilution analysis aeda multidimensional gas chromatography mass spectrometry mdgc ms organic synthesis odour quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
667,0,"Classifying smokes using an electronic nose and neural networks We have created an electronic nose using the metal oxide sensors from two commercial brands, FIS and FIGARO. In this paper, we use this electronic nose to classify the smell from 3 types of burning materials and then we apply the standard back propagation and recurrent back propagation neural networks to train and classify those burning smells. In the experiment, we test 3 kinds of joss stick, 2 brands of cigarette, and a mosquito coil. Moreover, we also measure the difference between concentration of smoke by varying the number of burning joss sticks. The results show that it is able to classify the smoke correctly. The idea of this research can be used for making a smart smoke detector in order to detect a harmful burning material before it is too late to stop the fire. chemioception, gas sensors, recurrent neural nets, backpropagation, pattern classification, smoke detectors, smoke, smoke classification, electronic nose, neural networks, metal oxide sensors, FIS, FIGARO, burning materials, recurrent back propagation neural networks, standard back propagation neural networks, burning smells, joss stick, cigarette, mosquito coil, smart smoke detector, harmful burning material, Electronic noses, Neural networks, Gas detectors, Olfactory, Sensor arrays, Sensor phenomena and characterization, Humans, Sensor systems, Grain boundaries, Back",classifying smokes using an electronic nose and neural networks we have created an electronic nose using the metal oxide sensors from two commercial brands fis and figaro in this paper we use this electronic nose to classify the smell from 3 types of burning materials and then we apply the standard back propagation and recurrent back propagation neural networks to train and classify those burning smells in the experiment we test 3 kinds of joss stick 2 brands of cigarette and a mosquito coil moreover we also measure the difference between concentration of smoke by varying the number of burning joss sticks the results show that it is able to classify the smoke correctly the idea of this research can be used for making a smart smoke detector in order to detect a harmful burning material before it is too late to stop the fire chemioception gas sensors recurrent neural nets backpropagation pattern classification smoke detectors smoke smoke classification electronic nose neural networks metal oxide sensors fis figaro burning materials recurrent back propagation neural networks standard back propagation neural networks burning smells joss stick cigarette mosquito coil smart smoke detector harmful burning material electronic noses neural networks gas detectors olfactory sensor arrays sensor phenomena and characterization humans sensor systems grain boundaries back,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0.0,0.0
668,0,"A discrete fruit fly optimization algorithm for the capacitated vehicle routing problem In this paper, a discrete fruit fly optimization algorithm (DFOA) is proposed for solving the capacitated vehicle routing problem (CVRP). Firstly, a two-part discrete array is presented to represent the solution. Secondly, the initialization based on K-means is proposed to take full use of the location information of the customers. The customers in each cluster are allocated to one vehicle. Meanwhile, the repair operation is designed for not taking the capacity constraint into account in the initialization. Due to the characteristics of the CVRP, it may be effective to exchange or reallocate the customers between the neighbor routes in the graph. Thus, the smell-based search and vision-based search with the specific problem feature are designed. Moreover, the elimination mechanism and the simulated annealing based search are used to balance the exploration and the exploitation capabilities. In addition, the effect of parameter setting is investigated by using the Taguchi method of design-of-experiment to obtain the suitable values. Finally, numerical tests with the benchmark instances are carried out, which demonstrate the effectiveness of the proposed algorithm. design of experiments, search problems, simulated annealing, Taguchi methods, vehicle routing, discrete fruit fly optimization algorithm, capacitated vehicle routing problem, CVRP, two-part discrete array, specific problem feature, simulated annealing based search, DFOA, repair operation, vision-based search, elimination mechanism, smell-based search, Taguchi method, design-of-experiment, numerical tests, Algorithm design and analysis, Maintenance engineering, Search problems, Partitioning algorithms, Optimization, Clustering algorithms, Sociology, capacitated vehicle routing problem, fruit fly optimization algorithm, specific feature, elimination mechanism",a discrete fruit fly optimization algorithm for the capacitated vehicle routing problem in this paper a discrete fruit fly optimization algorithm dfoa is proposed for solving the capacitated vehicle routing problem cvrp firstly a two part discrete array is presented to represent the solution secondly the initialization based on k means is proposed to take full use of the location information of the customers the customers in each cluster are allocated to one vehicle meanwhile the repair operation is designed for not taking the capacity constraint into account in the initialization due to the characteristics of the cvrp it may be effective to exchange or reallocate the customers between the neighbor routes in the graph thus the smell based search and vision based search with the specific problem feature are designed moreover the elimination mechanism and the simulated annealing based search are used to balance the exploration and the exploitation capabilities in addition the effect of parameter setting is investigated by using the taguchi method of design of experiment to obtain the suitable values finally numerical tests with the benchmark instances are carried out which demonstrate the effectiveness of the proposed algorithm design of experiments search problems simulated annealing taguchi methods vehicle routing discrete fruit fly optimization algorithm capacitated vehicle routing problem cvrp two part discrete array specific problem feature simulated annealing based search dfoa repair operation vision based search elimination mechanism smell based search taguchi method design of experiment numerical tests algorithm design and analysis maintenance engineering search problems partitioning algorithms optimization clustering algorithms sociology capacitated vehicle routing problem fruit fly optimization algorithm specific feature elimination mechanism,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
669,0,"Opportunities for Odor: Experiences with Smell and Implications for Technology Technologies for capturing and generating smell are emerging, and our ability to engineer such technologies and use them in HCI is rapidly developing. Our understanding of how these technologies match the experiences with smell that people have or want to have is surprisingly limited. We therefore investigated the experience of smell and the emotions that accompany it. We collected stories from 439 participants who described personally memorable smell experiences in an online questionnaire. Based on the stories we developed 10 categories of smell experience. We explored the implications of the categories for smell-enhanced technology design by (a) probing participants to envision technologies that match their smell story and (b) having HCI researchers brainstorm technologies using the categories as design stimuli. We discuss how our findings can benefit research on personal memories, momentary and first time experiences, and wellbeing. crowdsourcing, design brainstorming, designing for smell., narratives, odor, olfaction, smell, smell experiences, smell stories, smell-enhanced technology, user experience",opportunities for odor experiences with smell and implications for technology technologies for capturing and generating smell are emerging and our ability to engineer such technologies and use them in hci is rapidly developing our understanding of how these technologies match the experiences with smell that people have or want to have is surprisingly limited we therefore investigated the experience of smell and the emotions that accompany it we collected stories from 439 participants who described personally memorable smell experiences in an online questionnaire based on the stories we developed 10 categories of smell experience we explored the implications of the categories for smell enhanced technology design by a probing participants to envision technologies that match their smell story and b having hci researchers brainstorm technologies using the categories as design stimuli we discuss how our findings can benefit research on personal memories momentary and first time experiences and wellbeing crowdsourcing design brainstorming designing for smell narratives odor olfaction smell smell experiences smell stories smell enhanced technology user experience,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
670,0,"Study on property management innovation in China of harmonious society In the process of building a socialist harmonious society, building the harmonious community as an important component relates to the overall situation of building a harmonious society as a whole. This paper introduced property management innovation in residence community. In the context of building a harmonious society, the concept of property management should be updated and we make great efforts to exclude the existence of many ``disharmony'' in the development process to build a ``harmonious property management''. How to enhance overall level of property management industry and strive to avoid the community property management disputes, and encourage property management company in the daily management services and actively to explore ways to participate in the construction of a harmonious community, is a relatively urgent and important practical significance subject. Communities, Mechanical factors, Companies, Law, Buildings, roperty management, community building, hamonious society",study on property management innovation in china of harmonious society in the process of building a socialist harmonious society building the harmonious community as an important component relates to the overall situation of building a harmonious society as a whole this paper introduced property management innovation in residence community in the context of building a harmonious society the concept of property management should be updated and we make great efforts to exclude the existence of many disharmony in the development process to build a harmonious property management how to enhance overall level of property management industry and strive to avoid the community property management disputes and encourage property management company in the daily management services and actively to explore ways to participate in the construction of a harmonious community is a relatively urgent and important practical significance subject communities mechanical factors companies law buildings roperty management community building hamonious society,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
671,0,"Touch, Taste, & Smell User Interfaces: The Future of Multisensory HCI The senses we call upon when interacting with technology are very restricted. We mostly rely on vision and audition, increasingly harnessing touch, whilst taste and smell remain largely underexploited. In spite of our current knowledge about sensory systems and sensory devices, the biggest stumbling block for progress concerns the need for a deeper understanding of people's multisensory experiences in HCI. It is essential to determine what tactile, gustatory, and olfactory experiences we can design for, and how we can meaningfully stimulate such experiences when interacting with technology. Importantly, we need to determine the contribution of the different senses along with their interactions in order to design more effective and engaging digital multisensory experiences. Finally, it is vital to understand what the limitations are that come into play when users need to monitor more than one sense at a time. The aim of this workshop is to deepen and expand the discussion on touch, taste, and smell within the CHI community and promote the relevance of multisensory experience design and research in HCI. interaction modalities, multi-sensory, multi-sensory interaction, smell, taste, touch, user experiences",touch taste smell user interfaces the future of multisensory hci the senses we call upon when interacting with technology are very restricted we mostly rely on vision and audition increasingly harnessing touch whilst taste and smell remain largely underexploited in spite of our current knowledge about sensory systems and sensory devices the biggest stumbling block for progress concerns the need for a deeper understanding of people s multisensory experiences in hci it is essential to determine what tactile gustatory and olfactory experiences we can design for and how we can meaningfully stimulate such experiences when interacting with technology importantly we need to determine the contribution of the different senses along with their interactions in order to design more effective and engaging digital multisensory experiences finally it is vital to understand what the limitations are that come into play when users need to monitor more than one sense at a time the aim of this workshop is to deepen and expand the discussion on touch taste and smell within the chi community and promote the relevance of multisensory experience design and research in hci interaction modalities multi sensory multi sensory interaction smell taste touch user experiences,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
672,0,"Olfactory classification using electronic nose system via artificial neural network Olfaction, according to modern research, has not yet been classified based on its known properties. Unlike the sense of taste and sight, the sense of smell does not have any known dimensions of category. Modern technologies of Electronic nose (E-nose) systems were used in analyzing smells. This study aimed to categorize different clusters of smell and differentiate their levels of reaction to an E-nose system comprising of different sensors. MQ - Metal-Oxide semiconductor gas sensors were used coupled with artificial neural network (ANN) using MATLAB to evaluate the systems capability of discrimination. Interfacing was done using Arduino Microcontroller for communication. MQ5 Gas sensor gave the most variance. This result confirmed that the system's ability to be used in future applications was suggested. electronic noses, microcontrollers, neural nets, olfactory classification, electronic nose system, artificial neural network, olfaction, e-nose systems, MQ-metal-oxide semiconductor gas sensors, ANN, MATLAB, Arduino microcontroller, MQ5 gas sensor, MATLAB, Neurons, Pattern recognition, Pipelines, Sulfur, Sugar, Electronic Nose, MATLAB, Artificial Neural Network, Arduino Microcontroller",olfactory classification using electronic nose system via artificial neural network olfaction according to modern research has not yet been classified based on its known properties unlike the sense of taste and sight the sense of smell does not have any known dimensions of category modern technologies of electronic nose e nose systems were used in analyzing smells this study aimed to categorize different clusters of smell and differentiate their levels of reaction to an e nose system comprising of different sensors mq metal oxide semiconductor gas sensors were used coupled with artificial neural network ann using matlab to evaluate the systems capability of discrimination interfacing was done using arduino microcontroller for communication mq5 gas sensor gave the most variance this result confirmed that the system s ability to be used in future applications was suggested electronic noses microcontrollers neural nets olfactory classification electronic nose system artificial neural network olfaction e nose systems mq metal oxide semiconductor gas sensors ann matlab arduino microcontroller mq5 gas sensor matlab neurons pattern recognition pipelines sulfur sugar electronic nose matlab artificial neural network arduino microcontroller,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
673,0,"The dynamic simulation experimental research on treatment of acid coal mine drainage by loess-microorganism system Taking Lishi loess as the media and domestic sewage as the carbon source for treating agent of acid mine drainage, this paper discussed the feasibility of acid mine drainage dynamic processing by loess-microbial system in the soil column. The results achieved are as follows: (1) the domestic sewage whose value of COD is less than 120mg/L, can activate sulfate reducing bacteria (SRB), but it is difficult to maintain its continuous reproductive; (2) After High organic sewage with an extra 4.5mg/L molasses infiltrated into the upper layer of the soil column, Eh values are all negative at each depth of soil column in the 6th test day and reduce to below -400mv in the 10th day, where become a beneficial reductive environment to the growth of SRB; (3)After a 5-day experiment, a smell of H2S appears at the bottom of the soil column. At 20cm depth, the maximum removal rate of SO42- can reach 95.5% after 82 days, however, the maximum removal rates at the depth of 40cm, 60cm, 80cm, and 100cm (the bottom outlet) in the 94th day are 91.6%, 89.1%, 84.9%, 77.8%, respectively; (4) The maximum removal rate of SO42- decreases along with the increase of depth in the same period. biotechnology, coal, microorganisms, mining industry, sewage treatment, soil, dynamic simulation experimental research, acid coal mine drainage treatment, loess-microorganism system, Lishi loess, domestic sewage, carbon source, treating agent, acid mine drainage dynamic processing, loess-microbial system, soil column, COD, sulfate reducing bacteria, SRB, organic sewage, molasses, beneficial reductive environment, Microorganisms, Lakes, Soil, Coal mining, Sediments, Carbon, Presses, loess-microorganism system, acid coal mine drainage (ACMD) treatment, Dynamic Simulation Experimental",the dynamic simulation experimental research on treatment of acid coal mine drainage by loess microorganism system taking lishi loess as the media and domestic sewage as the carbon source for treating agent of acid mine drainage this paper discussed the feasibility of acid mine drainage dynamic processing by loess microbial system in the soil column the results achieved are as follows 1 the domestic sewage whose value of cod is less than 120mg l can activate sulfate reducing bacteria srb but it is difficult to maintain its continuous reproductive 2 after high organic sewage with an extra 4 5mg l molasses infiltrated into the upper layer of the soil column eh values are all negative at each depth of soil column in the 6th test day and reduce to below 400mv in the 10th day where become a beneficial reductive environment to the growth of srb 3 after a 5 day experiment a smell of h2s appears at the bottom of the soil column at 20cm depth the maximum removal rate of so42 can reach 95 5 after 82 days however the maximum removal rates at the depth of 40cm 60cm 80cm and 100cm the bottom outlet in the 94th day are 91 6 89 1 84 9 77 8 respectively 4 the maximum removal rate of so42 decreases along with the increase of depth in the same period biotechnology coal microorganisms mining industry sewage treatment soil dynamic simulation experimental research acid coal mine drainage treatment loess microorganism system lishi loess domestic sewage carbon source treating agent acid mine drainage dynamic processing loess microbial system soil column cod sulfate reducing bacteria srb organic sewage molasses beneficial reductive environment microorganisms lakes soil coal mining sediments carbon presses loess microorganism system acid coal mine drainage acmd treatment dynamic simulation experimental,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
674,0,"Smart clothes for the monitoring in real time and conditions of physiological, emotional and sensorial reactions of human The world is becoming more and more ""health conscious"" and there is an important need for the improvement of the quality of health in medicine. Home care, ambulatory measurements, permanent monitoring are well convenient for this purpose. For a citizen use, these devices have to be user-friendly. Smart clothes and gloves fit well for a citizen use due to their main characteristics: They avoid and/or they simplify the setting of sensors and they enable normal and daily activities. Marsian is composed of four elements: a ""smart tee shirt"" (EKG, Rib cage and abdominal respiration measurement, core temperature, body heat flow), a ""smart glove"" (skin potential and conductance, skin temperature), a wrist device (amplification, wireless data transmission), a data logger (continuous recording). All the sensors are noninvasive. Marsian can be used for the measurement of the autonomous nervous system activity, which provides information upon the emotional, sensorial,, intellectual and task reactions. The methodology has been already used for the study of the driver's reactions in real conditions, for the study of smell, taste, touch and thermal comfort (heat and air velocity) reaction, for sport activities, for the optimization for movement's programming and mental imaging. clothing, patient monitoring, health care, skin, neurophysiology, biomedical measurement, data loggers, cognition, smart clothes, real time monitoring, physiological reactions, emotional reactions, sensorial reactions, health quality, home care, ambulatory measurements, permanent monitoring, Marsian, smart tee shirt, EKG, rib cage, abdominal respiration measurement, core temperature, body heat flow, smart glove, skin potential, skin conductance, skin temperature, wrist device, amplification, wireless data transmission, data logger, continuous recording, autonomous nervous system activity, sport activities, Condition monitoring, Biomedical monitoring, Humans, Intelligent sensors, Temperature measurement, Temperature sensors, Skin, Biomedical imaging, Sensor phenomena and characterization, Abdomen",smart clothes for the monitoring in real time and conditions of physiological emotional and sensorial reactions of human the world is becoming more and more health conscious and there is an important need for the improvement of the quality of health in medicine home care ambulatory measurements permanent monitoring are well convenient for this purpose for a citizen use these devices have to be user friendly smart clothes and gloves fit well for a citizen use due to their main characteristics they avoid and or they simplify the setting of sensors and they enable normal and daily activities marsian is composed of four elements a smart tee shirt ekg rib cage and abdominal respiration measurement core temperature body heat flow a smart glove skin potential and conductance skin temperature a wrist device amplification wireless data transmission a data logger continuous recording all the sensors are noninvasive marsian can be used for the measurement of the autonomous nervous system activity which provides information upon the emotional sensorial intellectual and task reactions the methodology has been already used for the study of the driver s reactions in real conditions for the study of smell taste touch and thermal comfort heat and air velocity reaction for sport activities for the optimization for movement s programming and mental imaging clothing patient monitoring health care skin neurophysiology biomedical measurement data loggers cognition smart clothes real time monitoring physiological reactions emotional reactions sensorial reactions health quality home care ambulatory measurements permanent monitoring marsian smart tee shirt ekg rib cage abdominal respiration measurement core temperature body heat flow smart glove skin potential skin conductance skin temperature wrist device amplification wireless data transmission data logger continuous recording autonomous nervous system activity sport activities condition monitoring biomedical monitoring humans intelligent sensors temperature measurement temperature sensors skin biomedical imaging sensor phenomena and characterization abdomen,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
675,0,"Experimental research of microwave pyrolysis about paper mill sludge A new method, microwave pyrolysis, has been investigated to dispose the paper mill sludge. Microwave pyrolysis is a new fast pyrolysis technology for biomass. The effects of various different factors on paper mill sludge's microwave pyrolysis were mainly discussed. The results showed that the mass of the paper mill sludge reduced very rapidly within the first 6 min and then flattened out with the microwave reaction time increasing; The greater the microwave power was, the faster the sludge's pyrolysis and the more the smell and concentration of diesel smoke was; The pyrolysis performance was better when the dosage of the paper mill sludge was increased and of 5% NaOH was added as microwave absorbers; Under CO2 atmosphere, the pyrolysis performance was the best when of 5% NaOH was added, while under N2 atmosphere, the pyrolysis performance was the best when of 5% ZnCl2 was added. Paper mill sludge, Microwave, Pyrolysis, Microwave absorbers",experimental research of microwave pyrolysis about paper mill sludge a new method microwave pyrolysis has been investigated to dispose the paper mill sludge microwave pyrolysis is a new fast pyrolysis technology for biomass the effects of various different factors on paper mill sludge s microwave pyrolysis were mainly discussed the results showed that the mass of the paper mill sludge reduced very rapidly within the first 6 min and then flattened out with the microwave reaction time increasing the greater the microwave power was the faster the sludge s pyrolysis and the more the smell and concentration of diesel smoke was the pyrolysis performance was better when the dosage of the paper mill sludge was increased and of 5 naoh was added as microwave absorbers under co2 atmosphere the pyrolysis performance was the best when of 5 naoh was added while under n2 atmosphere the pyrolysis performance was the best when of 5 zncl2 was added paper mill sludge microwave pyrolysis microwave absorbers,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
676,0,"The right direction to smell: Efficient sensor planning strategies for robot assisted gas tomography Creating an accurate model of gas emissions is an important task in monitoring and surveillance applications. A promising solution for a range of real-world applications are gas-sensitive mobile robots with spectroscopy-based remote sensors that are used to create a tomographic reconstruction of the gas distribution. The quality of these reconstructions depends crucially on the chosen sensing geometry. In this paper we address the problem of sensor planning by investigating sensing geometries that minimize reconstruction errors, and then formulate an optimization algorithm that chooses sensing configurations accordingly. The algorithm decouples sensor planning for single high concentration regions (hotspots) and subsequently fuses the individual solutions to a global solution consisting of sensing poses and the shortest path between them. The proposed algorithm compares favorably to a template matching technique in a simple simulation and in a real-world experiment. In the latter, we also compare the proposed sensor planning strategy to the sensing strategy of a human expert and find indications that the quality of the reconstructed map is higher with the proposed algorithm. chemioception, gas sensors, robots, human expert, template matching technique, optimization algorithm, reconstruction errors, sensing geometries, smell, robot assisted gas tomography, efficient sensor planning strategies, Robot sensing systems, Geometry, Tomography, Planning, Mobile robots",the right direction to smell efficient sensor planning strategies for robot assisted gas tomography creating an accurate model of gas emissions is an important task in monitoring and surveillance applications a promising solution for a range of real world applications are gas sensitive mobile robots with spectroscopy based remote sensors that are used to create a tomographic reconstruction of the gas distribution the quality of these reconstructions depends crucially on the chosen sensing geometry in this paper we address the problem of sensor planning by investigating sensing geometries that minimize reconstruction errors and then formulate an optimization algorithm that chooses sensing configurations accordingly the algorithm decouples sensor planning for single high concentration regions hotspots and subsequently fuses the individual solutions to a global solution consisting of sensing poses and the shortest path between them the proposed algorithm compares favorably to a template matching technique in a simple simulation and in a real world experiment in the latter we also compare the proposed sensor planning strategy to the sensing strategy of a human expert and find indications that the quality of the reconstructed map is higher with the proposed algorithm chemioception gas sensors robots human expert template matching technique optimization algorithm reconstruction errors sensing geometries smell robot assisted gas tomography efficient sensor planning strategies robot sensing systems geometry tomography planning mobile robots,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
677,0,"A Survey of Vision Aids for the Blind The development of effective user interfaces, appropriate sensors, and information processing techniques make it possible to enable the blind to achieve additional perception of the environment. Since the beginning of the 1970's, the research of vision aids for the visually impaired people has been broadly extended. After introducing the traditional methods for guiding blind, two typical modes of mobility aid are presented in this paper. One called as ETA (short for electronic travel aids), bases on the other natural senses of the blind, such as hearing, touch, smell, feeling and etc, focusing on Meijer's voice system which is based on the blind's sensitive auditory senses and ENVS which is by means of haptic feedback. The other technique is artificial vision, using surgical methods of implanting visual prosthesis in the blind's healthy retina, cortex, or optic nerve. The prosthesis generates electrical impulse and evokes the perception of points of light in the patients' visual cortex. The first type is non-wounded for the blind while the second type is wounded for the blind. Besides these, comparisons between the above two techniques and the related researches have also been indicated in this paper handicapped aids, haptic interfaces, medical computing, prosthetics, sensory aids, vision aid, visually impaired people, mobility aid, electronic travel aid, Meijer voice system, blind sensitive auditory sense, haptic feedback, artificial vision, surgical method, visual prosthesis, visual cortex, auditory compensation, phosphene, Optical feedback, User interfaces, Information processing, Time of arrival estimation, Auditory system, Haptic interfaces, Surgery, Visual prosthesis, Retina, Optical sensors, Auditory compensation, Haptic compensation, Artificial vision, Phosphene",a survey of vision aids for the blind the development of effective user interfaces appropriate sensors and information processing techniques make it possible to enable the blind to achieve additional perception of the environment since the beginning of the 1970 s the research of vision aids for the visually impaired people has been broadly extended after introducing the traditional methods for guiding blind two typical modes of mobility aid are presented in this paper one called as eta short for electronic travel aids bases on the other natural senses of the blind such as hearing touch smell feeling and etc focusing on meijer s voice system which is based on the blind s sensitive auditory senses and envs which is by means of haptic feedback the other technique is artificial vision using surgical methods of implanting visual prosthesis in the blind s healthy retina cortex or optic nerve the prosthesis generates electrical impulse and evokes the perception of points of light in the patients visual cortex the first type is non wounded for the blind while the second type is wounded for the blind besides these comparisons between the above two techniques and the related researches have also been indicated in this paper handicapped aids haptic interfaces medical computing prosthetics sensory aids vision aid visually impaired people mobility aid electronic travel aid meijer voice system blind sensitive auditory sense haptic feedback artificial vision surgical method visual prosthesis visual cortex auditory compensation phosphene optical feedback user interfaces information processing time of arrival estimation auditory system haptic interfaces surgery visual prosthesis retina optical sensors auditory compensation haptic compensation artificial vision phosphene,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
678,0,"Tracking of a Gas Plume With the Aid of Olfactory Assist Mask Here, we report the results of experiments conducted to see if human subjects can track a faint airborne odor plume with the help of an olfactory assist system that presents the amplified olfactory stimuli to the subjects. The system consists of a gas sensor and an odor generator. The sensor measures the concentration variations of a gaseous chemical compound wafting in the air. The odor generator presents the user with an odor with amplified concentration variations. Thus, the user of the olfactory assist system can virtually have an enhanced sense of smell. The odor with four different intensities is generated by the current olfactory assist mask system. We first describe the experiments conducted to confirm that the subjects can surely discriminate the different intensities of the presented odor. The results of gas-plume tracking experiments show that the olfactory assist system can make tracking of an aerial odor plume much easier, because it allows the user to check the spatial concentration variations of a faint odor. chemical variables measurement, electronic noses, respiratory protection, airborne odor plume, amplified olfactory stimuli, gas sensor, odor generator, concentration measurement, gaseous chemical compound, olfactory assist mask system, gas plume tracking experiment, aerial odor plume, Gas detectors, Olfactory, Generators, Chemical sensors, Ethanol, Sensitivity, Gas sensor, olfactory display, user interface, gas source localization",tracking of a gas plume with the aid of olfactory assist mask here we report the results of experiments conducted to see if human subjects can track a faint airborne odor plume with the help of an olfactory assist system that presents the amplified olfactory stimuli to the subjects the system consists of a gas sensor and an odor generator the sensor measures the concentration variations of a gaseous chemical compound wafting in the air the odor generator presents the user with an odor with amplified concentration variations thus the user of the olfactory assist system can virtually have an enhanced sense of smell the odor with four different intensities is generated by the current olfactory assist mask system we first describe the experiments conducted to confirm that the subjects can surely discriminate the different intensities of the presented odor the results of gas plume tracking experiments show that the olfactory assist system can make tracking of an aerial odor plume much easier because it allows the user to check the spatial concentration variations of a faint odor chemical variables measurement electronic noses respiratory protection airborne odor plume amplified olfactory stimuli gas sensor odor generator concentration measurement gaseous chemical compound olfactory assist mask system gas plume tracking experiment aerial odor plume gas detectors olfactory generators chemical sensors ethanol sensitivity gas sensor olfactory display user interface gas source localization,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
679,0,"Detection of sulfur-containing gases by MODIS Gases are one of quite difficult environmental factor to treat. They are obstruction in humans life because they have amorphous shape and the are invisible. Additionally, some gases have no smell. Especially, generation of toxic gas near volcano and industrial waste processing facilities, is closely related to our life. These gases are hitherto detected on site survey by gas detection tube and spectrum sensor. However, there are some risks of investigator's health on the work of survey in these method. In this research, we suggested analysis of these gases by calculating the absorption of gases in infrared bands using satellite remote sensing with MODIS sensor and investigated detection state in applying actual cases. As a result, we confirmed generation of hydrogen sulfide and sulfur dioxide gases in several places such as hot springs, volcano and industrial waste illegal dumping site. These results suggest possibility of continuous observation of toxic gases by satellites and this may be useful tool on saving our safety. gas sensors, toxicology, sulfur-containing gases, MODIS, toxic gas, gas detection tube, spectrum sensor, satellite remote sensing, absorption wavelength, Gases, MODIS, Volcanoes, Industrial waste, Infrared sensors, Infrared detectors, Satellites, Environmental factors, Humans, Amorphous materials, Satellite, Remote Sensing, MODIS, Spectrum, SO2, H2S, Gas Detection, Infrared, Absorption Wavelength",detection of sulfur containing gases by modis gases are one of quite difficult environmental factor to treat they are obstruction in humans life because they have amorphous shape and the are invisible additionally some gases have no smell especially generation of toxic gas near volcano and industrial waste processing facilities is closely related to our life these gases are hitherto detected on site survey by gas detection tube and spectrum sensor however there are some risks of investigator s health on the work of survey in these method in this research we suggested analysis of these gases by calculating the absorption of gases in infrared bands using satellite remote sensing with modis sensor and investigated detection state in applying actual cases as a result we confirmed generation of hydrogen sulfide and sulfur dioxide gases in several places such as hot springs volcano and industrial waste illegal dumping site these results suggest possibility of continuous observation of toxic gases by satellites and this may be useful tool on saving our safety gas sensors toxicology sulfur containing gases modis toxic gas gas detection tube spectrum sensor satellite remote sensing absorption wavelength gases modis volcanoes industrial waste infrared sensors infrared detectors satellites environmental factors humans amorphous materials satellite remote sensing modis spectrum so2 h2s gas detection infrared absorption wavelength,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
680,0,"Improving odorant chemical class prediction with multi-layer perceptrons using temporal odorant spike responses from drosophila melanogaster olfactory receptor neurons In this work, we examine the possibility of improving the prediction performance of an olfactory biosensor through the use of temporal spiking data. We present an Artificial Neural Network (ANN), in the form of an optimal hybrid Multi-Layer Perceptron (MLP) system for the classification of chemical odorants from olfactory receptor neuron spike responses of the Drosophila melanogaster fruit fly (DmOrs). The data used in this study contains the responses to 34 odorants from 6 individual DmOrs, of which we exploit the temporal spiking responses of a 500ms odorant stimulus window. We report, for the first time, the difference between the classification performance of the temporal spiking data to an equivalent spontaneous scalar dataset that we have reported previously. We demonstrate that a higher prediction (%) was obtained when using the temporal data, in which a greater number of validation odorants are identified to their correct chemical class. This work presents a novel technique to improve the classification performance of an olfactory biosensor, whilst maintaining a limited sensory array of 6 DmOr receptors. biosensors, chemioception, electronic noses, multilayer perceptrons, neural nets, odorant chemical class prediction, multilayer perceptrons, temporal odorant spike responses, olfactory receptor neurons, olfactory biosensor, Artificial Neural Network, Drosophila melanogaster fruit fly, temporal spiking response, Chemicals, Olfactory, Neurons, Artificial neural networks, Biosensors, Training, Arrays, Action Potentials, Animals, Drosophila melanogaster, Neural Networks (Computer), Odorants, Olfactory Receptor Neurons, Receptors, Odorant, Smell, Time Factors",improving odorant chemical class prediction with multi layer perceptrons using temporal odorant spike responses from drosophila melanogaster olfactory receptor neurons in this work we examine the possibility of improving the prediction performance of an olfactory biosensor through the use of temporal spiking data we present an artificial neural network ann in the form of an optimal hybrid multi layer perceptron mlp system for the classification of chemical odorants from olfactory receptor neuron spike responses of the drosophila melanogaster fruit fly dmors the data used in this study contains the responses to 34 odorants from 6 individual dmors of which we exploit the temporal spiking responses of a 500ms odorant stimulus window we report for the first time the difference between the classification performance of the temporal spiking data to an equivalent spontaneous scalar dataset that we have reported previously we demonstrate that a higher prediction was obtained when using the temporal data in which a greater number of validation odorants are identified to their correct chemical class this work presents a novel technique to improve the classification performance of an olfactory biosensor whilst maintaining a limited sensory array of 6 dmor receptors biosensors chemioception electronic noses multilayer perceptrons neural nets odorant chemical class prediction multilayer perceptrons temporal odorant spike responses olfactory receptor neurons olfactory biosensor artificial neural network drosophila melanogaster fruit fly temporal spiking response chemicals olfactory neurons artificial neural networks biosensors training arrays action potentials animals drosophila melanogaster neural networks computer odorants olfactory receptor neurons receptors odorant smell time factors,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
681,0,"Differential electronic nose and support vector machine for fast recognition of tobacco The paper presents the application of differential electronic nose and support vector machine for recognition of the cigarette brands. Differential nose combines two identical gas sensor arrays mounted into two chambers. One array measures the gas of interest and the second the environmental air. Only differential signals of these two arrays are registered and subjected to further processing. Such organization of measurement eliminates the need for determination of the baseline value of resistance, since the differential signal is free of it. This system combined with support vector machine used as the classifier is well suited for very quick and on-line dynamic mode measurements. We have applied this system to the recognition of 11 cigarette brands on the basis of smell of their leaves. The performed experiments have proved that the developed e-nose based on the differential signals is capable to recognize the cigarette smells very quickly and with high accuracy. Differential electronic nose, Support vector machine, Cigarette recognition",differential electronic nose and support vector machine for fast recognition of tobacco the paper presents the application of differential electronic nose and support vector machine for recognition of the cigarette brands differential nose combines two identical gas sensor arrays mounted into two chambers one array measures the gas of interest and the second the environmental air only differential signals of these two arrays are registered and subjected to further processing such organization of measurement eliminates the need for determination of the baseline value of resistance since the differential signal is free of it this system combined with support vector machine used as the classifier is well suited for very quick and on line dynamic mode measurements we have applied this system to the recognition of 11 cigarette brands on the basis of smell of their leaves the performed experiments have proved that the developed e nose based on the differential signals is capable to recognize the cigarette smells very quickly and with high accuracy differential electronic nose support vector machine cigarette recognition,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
682,0,"Enhanced Diameter Bounding via Structural Bounded model checking (BMC) has gained widespread industrial use due to its relative scalability. Its exhaustiveness over all valid input vectors allows it to expose arbitrarily complex design flaws. However, BMC is limited to analyzing only a specific time window, hence will only expose those flaws which manifest within that window and thus cannot readily prove correctness. The diameter of a design has thus become an important concept -- a bounded check of depth equal to the diameter constitutes a complete proof. While the diameter of a design may be exponential in the number of its state elements, in practice it often ranges from tens to a few hundred regardless of design size. Therefore, a powerful diameterover-approximation technique may enable automatic proofs that otherwise would be infeasible. Unfortunately, exact diameter calculation requires exponential resources, and over-approximation techniques may yield exponentially loose bounds. In this paper, we provide a general approach for enabling the use of structural transformations, such as redundancy removal, retiming, and target enlargement, to tighten the bounds obtained by arbitrary diameterapproximation techniques. Numerous experiments demonstrate that this approach may significantly increase the set of designs for which practically useful diameter bounds may be obtained. []",enhanced diameter bounding via structural bounded model checking bmc has gained widespread industrial use due to its relative scalability its exhaustiveness over all valid input vectors allows it to expose arbitrarily complex design flaws however bmc is limited to analyzing only a specific time window hence will only expose those flaws which manifest within that window and thus cannot readily prove correctness the diameter of a design has thus become an important concept a bounded check of depth equal to the diameter constitutes a complete proof while the diameter of a design may be exponential in the number of its state elements in practice it often ranges from tens to a few hundred regardless of design size therefore a powerful diameterover approximation technique may enable automatic proofs that otherwise would be infeasible unfortunately exact diameter calculation requires exponential resources and over approximation techniques may yield exponentially loose bounds in this paper we provide a general approach for enabling the use of structural transformations such as redundancy removal retiming and target enlargement to tighten the bounds obtained by arbitrary diameterapproximation techniques numerous experiments demonstrate that this approach may significantly increase the set of designs for which practically useful diameter bounds may be obtained,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
683,0,"JEETuningExpert: A software assistant for improving Java Enterprise Edition application performance Designing a JEE (Java Enterprise Edition)-based enterprise application capable of achieving its performance objectives is rather hard. Predicting the performance of this type of systems at the design level is difficult and sometimes not viable, because this requires having precise knowledge of the expected load conditions and the underlying software infrastructure. Besides, the requirement for rapid time-to-market leads to postpone performance tuning until systems are developed, packaged and running. In this paper we present a novel approach for automatically detecting performance problems in JEE-based applications and, in turn, suggesting courses of actions to correct them. The idea is to allow developers to smoothly identify and eradicate performance anti-patterns by automatically analyzing execution traces. The approach has been implemented as a tool called JEETuningExpert, and validated using three well-known JEE reference applications. Specifically, we evaluated the effectiveness of JEETuningExpert for detecting performance problems, measured the overhead imposed by online monitoring each application and the improvements were achieved after following the suggested corrective actions. These results empirically showed that the refactored applications are 40.08%, 76.94% and 61.13% faster, on average. Java enterprise applications, Performance tuning, Performance anti-patterns, Expert systems, Intelligent systems",jeetuningexpert a software assistant for improving java enterprise edition application performance designing a jee java enterprise edition based enterprise application capable of achieving its performance objectives is rather hard predicting the performance of this type of systems at the design level is difficult and sometimes not viable because this requires having precise knowledge of the expected load conditions and the underlying software infrastructure besides the requirement for rapid time to market leads to postpone performance tuning until systems are developed packaged and running in this paper we present a novel approach for automatically detecting performance problems in jee based applications and in turn suggesting courses of actions to correct them the idea is to allow developers to smoothly identify and eradicate performance anti patterns by automatically analyzing execution traces the approach has been implemented as a tool called jeetuningexpert and validated using three well known jee reference applications specifically we evaluated the effectiveness of jeetuningexpert for detecting performance problems measured the overhead imposed by online monitoring each application and the improvements were achieved after following the suggested corrective actions these results empirically showed that the refactored applications are 40 08 76 94 and 61 13 faster on average java enterprise applications performance tuning performance anti patterns expert systems intelligent systems,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
684,0,"Assuring software quality by code smell detection In this retrospective we will review the paper ""Java Quality Assurance by Detecting Code Smells"" that was published ten years ago at WCRE. The work presents an approach for the automatic detection and visualization of code smells and discusses how this approach could be used in the design of a software inspection tool. The feasibility of the proposed approach was illustrated with the development of jCOSMO, a prototype code smell browser that detects and visualizes code smells in JAVA source code. It was the first tool to automatically detect code smells in source code, and we demonstrated the application of this tool in an industrial quality assessment case study. In addition to reviewing the WCRE 2002 work, we will discuss subsequent developments in this area by looking at a selection of papers that were published in its wake. In particular, we will have a look at recent related work in which we empirically investigated the relation between code smells and software maintainability in a longitudinal study where professional developers were observed while maintaining four different software systems that exhibited known code smells. We conclude with a discussion of the lessons learned and opportunities for further research. data visualisation, Java, online front-ends, software maintenance, software quality, Java software quality assurance, WCRE, automatic code smell detection, automatic code smell visualization, software inspection tool design, jCOSMO, prototype code smell browser, JAVA source code, industrial quality assessment, software maintainability, longitudinal study, Inspection, Java, Visualization, Software systems, Software quality, Electronic mail, software inspection, quality assurance, Java, refactoring, code smells",assuring software quality by code smell detection in this retrospective we will review the paper java quality assurance by detecting code smells that was published ten years ago at wcre the work presents an approach for the automatic detection and visualization of code smells and discusses how this approach could be used in the design of a software inspection tool the feasibility of the proposed approach was illustrated with the development of jcosmo a prototype code smell browser that detects and visualizes code smells in java source code it was the first tool to automatically detect code smells in source code and we demonstrated the application of this tool in an industrial quality assessment case study in addition to reviewing the wcre 2002 work we will discuss subsequent developments in this area by looking at a selection of papers that were published in its wake in particular we will have a look at recent related work in which we empirically investigated the relation between code smells and software maintainability in a longitudinal study where professional developers were observed while maintaining four different software systems that exhibited known code smells we conclude with a discussion of the lessons learned and opportunities for further research data visualisation java online front ends software maintenance software quality java software quality assurance wcre automatic code smell detection automatic code smell visualization software inspection tool design jcosmo prototype code smell browser java source code industrial quality assessment software maintainability longitudinal study inspection java visualization software systems software quality electronic mail software inspection quality assurance java refactoring code smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
685,0,"Mamagoto: ""Playing"" with Food ""Mamagoto"" is an interactive and context-aware dining system which encourage small children to ""play"" with food. Even greatest scientists had times when their parents told them not to play with food. For small children, especially newly-born infants, everything they see, touch, hear, smell, taste, are new experiences. What they encounter at dining tables are no exceptions. For those curious little adventurers, tremendous varieties of colors, textures, tastes, shapes of food and of dishes and silverwares are full of amusement. Even when they seem to be messing up everything on the table, they are fully using their senses for new exploration, and this process of ""playing"" is important for development of their senses. This project encourages them to expand their sensory experience while eating, using ""Mamagoto"". []",mamagoto playing with food mamagoto is an interactive and context aware dining system which encourage small children to play with food even greatest scientists had times when their parents told them not to play with food for small children especially newly born infants everything they see touch hear smell taste are new experiences what they encounter at dining tables are no exceptions for those curious little adventurers tremendous varieties of colors textures tastes shapes of food and of dishes and silverwares are full of amusement even when they seem to be messing up everything on the table they are fully using their senses for new exploration and this process of playing is important for development of their senses this project encourages them to expand their sensory experience while eating using mamagoto,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
686,0,"Plenary talks The touch of a hand: Neural interfaces restore the sense of touch and position following limb loss One of the first biology lessons in grade school is of the five senses: sight, sound, smell, taste, and touch. They are the (only) connection to the world and people around us. Of the five senses, touch is the one we take most for granted and least understand the devastating impact of its loss. The sense of touch comes from the skin, the largest sensory organ in the human body. For nearly 2 million people in the US and 185,000 more each year, the loss of sensation is one of the most significant effects of limb loss resulting from trauma or vascular disease. Body-powered prostheses are often preferred over more functional powered devices because the user can ``feel'' the pressure of a grip through a requisite body harness. Providing representative sensory information on the residual limb is unnatural and does not directly match the sensory locations expected by the user's visual experience of the prosthesis. We have addressed these challenges with permanently implanted, multi-contact nerve cuff electrodes on the residual ulnar, radial, and median nerves of subjects with limb loss. These electrodes directly and selectively activate the peripheral neural pathways, and hence all upstream pathways, normally responsible for sensation. Ninety percent of the channels produce physically unique locations of sensation, distributed around the hand and wrist. The quality of the sensation is controlled by using a patterned stimulation intensity. The pattern pulses are critical to the brain's interpretation of the sensation. Varying the pattern can produce multiple different sensations at a common location. The addition of sensation to the user during tasks improves fine motor control with standard myoelectric prostheses. The system has been implanted and stable for three years. The user reports feeling their hand - the missing hand - in touching and manipulating objects. Restoring feeling has allowed the individuals to, ``feel [my] hand for the first time since the accident,'' and ``feel [my] wife touch my hand.'' With more than five subject-years of experience, this work is leading the evolution of a new era in prostheses and haptic interfaces. biocontrol, diseases, neurocontrollers, neural interfaces, trauma, vascular disease, body-powered prostheses, multi-contact nerve cuff electrodes, residual ulnar, peripheral neural pathways, upstream pathways, patterned stimulation intensity, myoelectric prostheses, haptic interfaces",plenary talks the touch of a hand neural interfaces restore the sense of touch and position following limb loss one of the first biology lessons in grade school is of the five senses sight sound smell taste and touch they are the only connection to the world and people around us of the five senses touch is the one we take most for granted and least understand the devastating impact of its loss the sense of touch comes from the skin the largest sensory organ in the human body for nearly 2 million people in the us and 185 000 more each year the loss of sensation is one of the most significant effects of limb loss resulting from trauma or vascular disease body powered prostheses are often preferred over more functional powered devices because the user can feel the pressure of a grip through a requisite body harness providing representative sensory information on the residual limb is unnatural and does not directly match the sensory locations expected by the user s visual experience of the prosthesis we have addressed these challenges with permanently implanted multi contact nerve cuff electrodes on the residual ulnar radial and median nerves of subjects with limb loss these electrodes directly and selectively activate the peripheral neural pathways and hence all upstream pathways normally responsible for sensation ninety percent of the channels produce physically unique locations of sensation distributed around the hand and wrist the quality of the sensation is controlled by using a patterned stimulation intensity the pattern pulses are critical to the brain s interpretation of the sensation varying the pattern can produce multiple different sensations at a common location the addition of sensation to the user during tasks improves fine motor control with standard myoelectric prostheses the system has been implanted and stable for three years the user reports feeling their hand the missing hand in touching and manipulating objects restoring feeling has allowed the individuals to feel my hand for the first time since the accident and feel my wife touch my hand with more than five subject years of experience this work is leading the evolution of a new era in prostheses and haptic interfaces biocontrol diseases neurocontrollers neural interfaces trauma vascular disease body powered prostheses multi contact nerve cuff electrodes residual ulnar peripheral neural pathways upstream pathways patterned stimulation intensity myoelectric prostheses haptic interfaces,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
687,1,"The Relationship between Traceable Code Patterns and Code Smells Context: It is important to maintain software quality as a software system evolves. Managing code smells in source code contributes towards quality software. While metrics have been used to pinpoint code smells in source code, we present an empirical study on the correlation of code smells with class-level (micro pattern) and method- level (nano-pattern) traceable patterns of code. Objective: This study explores the relationship between code smells and class-level and method-level structural code constructs. Method: We extracted micro patterns at the class level and nano-patterns at the method level from three versions of Apache Tomcat and PersonalBlog and Roller from Stand- ford SecuriBench and compared their distributions in code smell versus non-code smell classes and methods.Result: We found that DataManager, Record and Outline mi- cro patterns are more frequent in classes having code smell compared to non-code smell classes in the applications we analyzed. localReader, localW riter, Switcher, and ArrReader nano-patterns are more frequent in code smell methods compared to the non-code smell methods. Conclu- sion: We conclude that code smells are correlated with both micro and nano-patterns. []",the relationship between traceable code patterns and code smells context it is important to maintain software quality as a software system evolves managing code smells in source code contributes towards quality software while metrics have been used to pinpoint code smells in source code we present an empirical study on the correlation of code smells with class level micro pattern and method level nano pattern traceable patterns of code objective this study explores the relationship between code smells and class level and method level structural code constructs method we extracted micro patterns at the class level and nano patterns at the method level from three versions of apache tomcat and personalblog and roller from stand ford securibench and compared their distributions in code smell versus non code smell classes and methods result we found that datamanager record and outline mi cro patterns are more frequent in classes having code smell compared to non code smell classes in the applications we analyzed localreader localw riter switcher and arrreader nano patterns are more frequent in code smell methods compared to the non code smell methods conclu sion we conclude that code smells are correlated with both micro and nano patterns,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0.0,1.0
688,1,"When and Why Your Code Starts to Smell Bad (and Whether the Smells Go Away) Technical debt is a metaphor introduced by Cunningham to indicate ``not quite right code which we postpone making it right''. One noticeable symptom of technical debt is represented by code smells, defined as symptoms of poor design and implementation choices. Previous studies showed the negative impact of code smells on the comprehensibility and maintainability of code. While the repercussions of smells on code quality have been empirically assessed, there is still only anecdotal evidence on when and why bad smells are introduced, what is their survivability, and how they are removed by developers. To empirically corroborate such anecdotal evidence, we conducted a large empirical study over the change history of 200 open source projects. This study required the development of a strategy to identify smell-introducing commits, the mining of over half a million of commits, and the manual analysis and classification of over 10K of them. Our findings mostly contradict common wisdom, showing that most of the smell instances are introduced when an artifact is created and not as a result of its evolution. At the same time, 80 percent of smells survive in the system. Also, among the 20 percent of removed instances, only 9 percent are removed as a direct consequence of refactoring operations. data mining, public domain software, software maintenance, software quality, source code (software), open source projects, code smells, code comprehensibility, code maintainability, commits mining, smell instances, smell-introducing commits, code quality, technical debt, Ecosystems, History, Androids, Humanoid robots, Software systems, Maintenance engineering, Code smells, empirical study, mining software repositories",when and why your code starts to smell bad and whether the smells go away technical debt is a metaphor introduced by cunningham to indicate not quite right code which we postpone making it right one noticeable symptom of technical debt is represented by code smells defined as symptoms of poor design and implementation choices previous studies showed the negative impact of code smells on the comprehensibility and maintainability of code while the repercussions of smells on code quality have been empirically assessed there is still only anecdotal evidence on when and why bad smells are introduced what is their survivability and how they are removed by developers to empirically corroborate such anecdotal evidence we conducted a large empirical study over the change history of 200 open source projects this study required the development of a strategy to identify smell introducing commits the mining of over half a million of commits and the manual analysis and classification of over 10k of them our findings mostly contradict common wisdom showing that most of the smell instances are introduced when an artifact is created and not as a result of its evolution at the same time 80 percent of smells survive in the system also among the 20 percent of removed instances only 9 percent are removed as a direct consequence of refactoring operations data mining public domain software software maintenance software quality source code software open source projects code smells code comprehensibility code maintainability commits mining smell instances smell introducing commits code quality technical debt ecosystems history androids humanoid robots software systems maintenance engineering code smells empirical study mining software repositories,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
689,1,"An Empirical Examination of the Relationship between Code Smells and Merge Conflicts Background: Merge conflicts are a common occurrence in software development. Researchers have shown the negative impact of conflicts on the resulting code quality and the development workflow. Thus far, no one has investigated the effect of bad design (code smells) on merge conflicts. Aims: We posit that entities that exhibit certain types of code smells are more likely to be involved in a merge conflict. We also postulate that code elements that are both ""smelly"" and involved in a merge conflict are associated with other undesirable effects (more likely to be buggy). Method: We mined 143 repositories from GitHub and recreated 6,979 merge conflicts to obtain metrics about code changes and conflicts. We categorized conflicts into semantic or non-semantic, based on whether changes affected the Abstract Syntax Tree. For each conflicting change, we calculate the number of code smells and the number of future bug-fixes associated with the affected lines of code. Results: We found that entities that are smelly are three times more likely to be involved in merge conflicts. Method-level code smells (Blob Operation and Internal Duplication) are highly correlated with semantic conflicts. We also found that code that is smelly and experiences merge conflicts is more likely to be buggy. Conclusion: Bad code design not only impacts maintainability, it also impacts the day to day operations of a project, such as merging contributions, and negatively impacts the quality of the resulting code. Our findings indicate that research is needed to identify better ways to support merge conflict resolution to minimize its effect on code quality. data mining, program debugging, public domain software, software maintenance, software metrics, conflicting change, method-level code, semantic conflicts, code changes, code elements, resulting code quality, merge conflicts Background, code smells, conflict resolution, Bad code design, Software, Merging, Computer bugs, Tools, Software measurement, Semantics, Code Smell, Merge Conflict, Empirical Analysis, Machine Learning",an empirical examination of the relationship between code smells and merge conflicts background merge conflicts are a common occurrence in software development researchers have shown the negative impact of conflicts on the resulting code quality and the development workflow thus far no one has investigated the effect of bad design code smells on merge conflicts aims we posit that entities that exhibit certain types of code smells are more likely to be involved in a merge conflict we also postulate that code elements that are both smelly and involved in a merge conflict are associated with other undesirable effects more likely to be buggy method we mined 143 repositories from github and recreated 6 979 merge conflicts to obtain metrics about code changes and conflicts we categorized conflicts into semantic or non semantic based on whether changes affected the abstract syntax tree for each conflicting change we calculate the number of code smells and the number of future bug fixes associated with the affected lines of code results we found that entities that are smelly are three times more likely to be involved in merge conflicts method level code smells blob operation and internal duplication are highly correlated with semantic conflicts we also found that code that is smelly and experiences merge conflicts is more likely to be buggy conclusion bad code design not only impacts maintainability it also impacts the day to day operations of a project such as merging contributions and negatively impacts the quality of the resulting code our findings indicate that research is needed to identify better ways to support merge conflict resolution to minimize its effect on code quality data mining program debugging public domain software software maintenance software metrics conflicting change method level code semantic conflicts code changes code elements resulting code quality merge conflicts background code smells conflict resolution bad code design software merging computer bugs tools software measurement semantics code smell merge conflict empirical analysis machine learning,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
690,1,"On the Influence of Human Factors for Identifying Code Smells: A Multi-Trial Empirical Study Context: Code smells are symptoms in the source code that represent poor design choices. Professional developers often perceive several types of code smells as indicators of actual design problems. However, the identification of code smells involves multiple steps that are subjective in nature, requiring the engagement of humans. Human factors are likely to play a key role in the precise identification of code smells in industrial settings. Unfortunately, there is limited knowledge about the influence of human factors on smell identification. Goal: We aim at investigating whether the precision of smell identification is influenced by three key human factors, namely reviewer's professional background, reviewer's module knowledge and collaboration of reviewers during the task. We also aim at deriving recommendations for allocating human resources to smell identification tasks. Method: We performed 19 comparisons among different subsamples from two trials of a controlled experiment conducted in the context of an empirical study on code smell identification. One trial was conducted in industrial settings while the other had involved graduate students. The diversity of the samples allowed us to analyze the influence of the three factors in isolation and in conjunction. Results: We found that (i) reviewers' collaboration significantly increases the precision of smell identification, but (ii) some professional background is required from the reviewers to reach high precision. Surprisingly, we also found that: (iii) having previous knowledge of the reviewed module does not affect the precision of reviewers with higher professional background. However, this factor was influential on successful identification of more complex smells. Conclusion: We expect that our findings are helpful to support researchers in conducting proper experimental procedures in the future. Besides, they may also be useful for supporting project managers in allocating resources for smell identification tasks. human factors, software maintenance, software quality, code smells, multitrial empirical study, human factors, complex smells, code smell identification, smell identification tasks, human resources, Human factors, Collaboration, Tools, Software systems, Software measurement, code smell identification, human factors, context, collaboration, code review, replication",on the influence of human factors for identifying code smells a multi trial empirical study context code smells are symptoms in the source code that represent poor design choices professional developers often perceive several types of code smells as indicators of actual design problems however the identification of code smells involves multiple steps that are subjective in nature requiring the engagement of humans human factors are likely to play a key role in the precise identification of code smells in industrial settings unfortunately there is limited knowledge about the influence of human factors on smell identification goal we aim at investigating whether the precision of smell identification is influenced by three key human factors namely reviewer s professional background reviewer s module knowledge and collaboration of reviewers during the task we also aim at deriving recommendations for allocating human resources to smell identification tasks method we performed 19 comparisons among different subsamples from two trials of a controlled experiment conducted in the context of an empirical study on code smell identification one trial was conducted in industrial settings while the other had involved graduate students the diversity of the samples allowed us to analyze the influence of the three factors in isolation and in conjunction results we found that i reviewers collaboration significantly increases the precision of smell identification but ii some professional background is required from the reviewers to reach high precision surprisingly we also found that iii having previous knowledge of the reviewed module does not affect the precision of reviewers with higher professional background however this factor was influential on successful identification of more complex smells conclusion we expect that our findings are helpful to support researchers in conducting proper experimental procedures in the future besides they may also be useful for supporting project managers in allocating resources for smell identification tasks human factors software maintenance software quality code smells multitrial empirical study human factors complex smells code smell identification smell identification tasks human resources human factors collaboration tools software systems software measurement code smell identification human factors context collaboration code review replication,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
691,1,"Evolution of code smells over multiple versions of softwares: An empirical investigation The symptoms which reflect the poor design quality of code are known as code smells. Refactoring is one of the possible ways to remove code smells, but refactoring does not come for free to developer. So there is a need to have efficient refactoring strategies. For this purpose an empirical study on distribution of different code smells over different versions of projects is provided in this paper, so that refactoring strategies can be built keeping in a view that which smell is more effective and at which time during evolution of software. For experiment, different versions of Junit, GCviewer and Gitblit have been taken. To detect the smells and violations in code JDeodorant and PMD tools are used. Study shows that a) Latest version of software has more design issues than that of oldest ones; b) God smell and urgent violations have more contribution than other smells whereas instances having Type Checking smell are very less in all the versions. Study shows that initial version of project can be used as reference architecture for purpose of reverse Engineering. We also found that Gitblit has better code design than that of other two softwares. Java, program testing, reverse engineering, software maintenance, software quality, Gitblit, code JDeodorant, Type Checking smell, refactoring strategies, reverse engineering, empirical study, code design, code smells, design quality, Software, Tools, Feature extraction, Software measurement, History, System analysis and design, code smell, empirical study, refactoring, object oriented maintainence",evolution of code smells over multiple versions of softwares an empirical investigation the symptoms which reflect the poor design quality of code are known as code smells refactoring is one of the possible ways to remove code smells but refactoring does not come for free to developer so there is a need to have efficient refactoring strategies for this purpose an empirical study on distribution of different code smells over different versions of projects is provided in this paper so that refactoring strategies can be built keeping in a view that which smell is more effective and at which time during evolution of software for experiment different versions of junit gcviewer and gitblit have been taken to detect the smells and violations in code jdeodorant and pmd tools are used study shows that a latest version of software has more design issues than that of oldest ones b god smell and urgent violations have more contribution than other smells whereas instances having type checking smell are very less in all the versions study shows that initial version of project can be used as reference architecture for purpose of reverse engineering we also found that gitblit has better code design than that of other two softwares java program testing reverse engineering software maintenance software quality gitblit code jdeodorant type checking smell refactoring strategies reverse engineering empirical study code design code smells design quality software tools feature extraction software measurement history system analysis and design code smell empirical study refactoring object oriented maintainence,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
692,1,"An exploratory study of the impact of antipatterns on class change- and fault-proneness Antipatterns are poor design choices that are conjectured to make object-oriented systems harder to maintain. We investigate the impact of antipatterns on classes in object-oriented systems by studying the relation between the presence of antipatterns and the change- and fault-proneness of the classes. We detect 13 antipatterns in 54 releases of ArgoUML, Eclipse, Mylyn, and Rhino, and analyse (1) to what extent classes participating in antipatterns have higher odds to change or to be subject to fault-fixing than other classes, (2) to what extent these odds (if higher) are due to the sizes of the classes or to the presence of antipatterns, and (3) what kinds of changes affect classes participating in antipatterns. We show that, in almost all releases of the four systems, classes participating in antipatterns are more change-and fault-prone than others. We also show that size alone cannot explain the higher odds of classes with antipatterns to underwent a (fault-fixing) change than other classes. Finally, we show that structural changes affect more classes with antipatterns than others. We provide qualitative explanations of the increase of change- and fault-proneness in classes participating in antipatterns using release notes and bug reports. The obtained results justify a posteriori previous work on the specification and detection of antipatterns and could help to better focus quality assurance and testing activities. Antipatterns,  Mining software repositories,  Empirical software engineering",an exploratory study of the impact of antipatterns on class change and fault proneness antipatterns are poor design choices that are conjectured to make object oriented systems harder to maintain we investigate the impact of antipatterns on classes in object oriented systems by studying the relation between the presence of antipatterns and the change and fault proneness of the classes we detect 13 antipatterns in 54 releases of argouml eclipse mylyn and rhino and analyse 1 to what extent classes participating in antipatterns have higher odds to change or to be subject to fault fixing than other classes 2 to what extent these odds if higher are due to the sizes of the classes or to the presence of antipatterns and 3 what kinds of changes affect classes participating in antipatterns we show that in almost all releases of the four systems classes participating in antipatterns are more change and fault prone than others we also show that size alone cannot explain the higher odds of classes with antipatterns to underwent a fault fixing change than other classes finally we show that structural changes affect more classes with antipatterns than others we provide qualitative explanations of the increase of change and fault proneness in classes participating in antipatterns using release notes and bug reports the obtained results justify a posteriori previous work on the specification and detection of antipatterns and could help to better focus quality assurance and testing activities antipatterns mining software repositories empirical software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
693,1,"Analyzing the Impact of Antipatterns on Change-Proneness Using Fine-Grained Source Code Changes Antipatterns are poor solutions to design and implementation problems which are claimed to make object oriented systems hard to maintain. Our recent studies showed that classes with antipatterns change more frequently than classes without antipatterns. In this paper, we detail these analyses by taking into account fine-grained source code changes (SCC) extracted from 16 Java open source systems. In particular we investigate: whether classes with antipatterns are more change-prone (in terms of SCC) than classes without, (2) whether the type of antipattern impacts the change-proneness of Java classes, and (3) whether certain types of changes are performed more frequently in classes affected by a certain antipattern. Our results show that: 1) the number of SCC performed in classes affected by antipatterns is statistically greater than the number of SCC performed in classes with no antipattern, 2) classes participating in the three antipatterns Complex Class, Spaghetti Code, and SwissArmyKnife are more change-prone than classes affected by other antipatterns, and 3) certain types of changes are more likely to be performed in classes affected by certain antipatterns, such as API changes are likely to be performed in classes affected by the Complex Class, Spaghetti Code, and SwissArmyKnife antipatterns. Antipatterns,  change-proneness,  fine-grained source code changes,  empirical software engineering",analyzing the impact of antipatterns on change proneness using fine grained source code changes antipatterns are poor solutions to design and implementation problems which are claimed to make object oriented systems hard to maintain our recent studies showed that classes with antipatterns change more frequently than classes without antipatterns in this paper we detail these analyses by taking into account fine grained source code changes scc extracted from 16 java open source systems in particular we investigate whether classes with antipatterns are more change prone in terms of scc than classes without 2 whether the type of antipattern impacts the change proneness of java classes and 3 whether certain types of changes are performed more frequently in classes affected by a certain antipattern our results show that 1 the number of scc performed in classes affected by antipatterns is statistically greater than the number of scc performed in classes with no antipattern 2 classes participating in the three antipatterns complex class spaghetti code and swissarmyknife are more change prone than classes affected by other antipatterns and 3 certain types of changes are more likely to be performed in classes affected by certain antipatterns such as api changes are likely to be performed in classes affected by the complex class spaghetti code and swissarmyknife antipatterns antipatterns change proneness fine grained source code changes empirical software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
694,1,"A Study on the Relation between Antipatterns and the Cost of Class Unit Testing Antipatterns are known as recurring, poor design choices, recent and past studies indicated that they negatively affect software systems in terms of understand ability and maintainability, also increasing change-and defect-proneness. For this reason, refactoring actions are often suggested. In this paper, we investigate a different side-effect of antipatterns, which is their effect on testability and on testing cost in particular. We consider as (upper bound) indicator of testing cost the number of test cases that satisfy the minimal data member usage matrix (MaDUM) criterion proposed by Bashir and Goel. A study-carried out on four Java programs, Ant 1.8.3, ArgoUML 0.20, Check Style 4.0, and JFreeChart 1.0.13-supports the evidence that, on the one hand, antipatterns unit testing requires, on average, a number of test cases substantially higher than unit testing for non-antipattern classes. On the other hand, antipattern classes must be carefully tested because they are more defect-prone than other classes. Finally, we illustrate how specific refactoring actions-applied to classes participating in antipatterns-could reduce testing cost. Antipatterns,  Object oriented testing,  Testing cost,  Refactoring",a study on the relation between antipatterns and the cost of class unit testing antipatterns are known as recurring poor design choices recent and past studies indicated that they negatively affect software systems in terms of understand ability and maintainability also increasing change and defect proneness for this reason refactoring actions are often suggested in this paper we investigate a different side effect of antipatterns which is their effect on testability and on testing cost in particular we consider as upper bound indicator of testing cost the number of test cases that satisfy the minimal data member usage matrix madum criterion proposed by bashir and goel a study carried out on four java programs ant 1 8 3 argouml 0 20 check style 4 0 and jfreechart 1 0 13 supports the evidence that on the one hand antipatterns unit testing requires on average a number of test cases substantially higher than unit testing for non antipattern classes on the other hand antipattern classes must be carefully tested because they are more defect prone than other classes finally we illustrate how specific refactoring actions applied to classes participating in antipatterns could reduce testing cost antipatterns object oriented testing testing cost refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
695,1,"How developers perceive smells in source code: A replicated study Context. In recent years, smells, also referred to as bad smells, have gained popularity among developers. However, it is still not clear how harmful they are perceived from the developers' point of view. Many developers talk about them, but only few know what they really are, and even fewer really take care of them in their source code. Objective. The goal of this work is to understand the perceived criticality of code smells both in theory, when reading their description, and in practice. Method. We executed an empirical study as a differentiated external replication of two previous studies. The studies were conducted as surveys involving only highly experienced developers (63 in the first study and 41 in the second one). First the perceived criticality was analyzed by proposing the description of the smells, then different pieces of code infected by the smells were proposed, and finally their ability to identify the smells in the analyzed code was tested. Results. According to our knowledge, this is the largest study so far investigating the perception of code smells with professional software developers. The results show that developers are very concerned about code smells in theory, nearly always considering them as harmful or very harmful (17 out of 23 smells). However, when they were asked to analyze an infected piece of code, only few infected classes were considered harmful and even fewer were considered harmful because of the smell. Conclusions. The results confirm our initial hypotheses that code smells are perceived as more critical in theory but not as critical in practice. Software maintenance, Code smells, Bad smells, Antipatterns, Refactoring",how developers perceive smells in source code a replicated study context in recent years smells also referred to as bad smells have gained popularity among developers however it is still not clear how harmful they are perceived from the developers point of view many developers talk about them but only few know what they really are and even fewer really take care of them in their source code objective the goal of this work is to understand the perceived criticality of code smells both in theory when reading their description and in practice method we executed an empirical study as a differentiated external replication of two previous studies the studies were conducted as surveys involving only highly experienced developers 63 in the first study and 41 in the second one first the perceived criticality was analyzed by proposing the description of the smells then different pieces of code infected by the smells were proposed and finally their ability to identify the smells in the analyzed code was tested results according to our knowledge this is the largest study so far investigating the perception of code smells with professional software developers the results show that developers are very concerned about code smells in theory nearly always considering them as harmful or very harmful 17 out of 23 smells however when they were asked to analyze an infected piece of code only few infected classes were considered harmful and even fewer were considered harmful because of the smell conclusions the results confirm our initial hypotheses that code smells are perceived as more critical in theory but not as critical in practice software maintenance code smells bad smells antipatterns refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
696,1,"Anti-pattern Mutations and Fault-proneness Software evolution and development are continuous activities that have a never-ending cycle. While developers commit changes on a software system to fix bugs or to implement new requirements, they sometimes introduce anti-patterns, which are bad solutions to recurring design problems in the system. Many previous studies have shown that these anti-patterns have negative effects on code quality, in particular fault-proneness. However, it is not clear if and how anti-patterns evolve and which evolutionary behaviours are more fault-prone. This paper presents results from an empirical study aimed at understanding the evolution of anti-patterns in 27 releases of three open-source software systems: ArgoUML, Mylyn, and Rhino. Specifically, the study analyzes the mutations of anti-patterns, the changes that they undergo, and the relation between anti-pattern evolution behaviours and fault-proneness. Results show that (1) anti-patterns mutate from one type of anti-patterns to another, (2) structural changes are behind these mutations, and (3) some mutations are more risky in terms of fault-proneness. Anti-patterns,  Fault proneness,  Markov Chain",anti pattern mutations and fault proneness software evolution and development are continuous activities that have a never ending cycle while developers commit changes on a software system to fix bugs or to implement new requirements they sometimes introduce anti patterns which are bad solutions to recurring design problems in the system many previous studies have shown that these anti patterns have negative effects on code quality in particular fault proneness however it is not clear if and how anti patterns evolve and which evolutionary behaviours are more fault prone this paper presents results from an empirical study aimed at understanding the evolution of anti patterns in 27 releases of three open source software systems argouml mylyn and rhino specifically the study analyzes the mutations of anti patterns the changes that they undergo and the relation between anti pattern evolution behaviours and fault proneness results show that 1 anti patterns mutate from one type of anti patterns to another 2 structural changes are behind these mutations and 3 some mutations are more risky in terms of fault proneness anti patterns fault proneness markov chain,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0
697,1,"On the Analysis of Co-Occurrence of Anti-Patterns and Clones In software engineering, a smell is a part of a software system's source code with a poor quality and that may indicate a deeper problem. Although many kinds of smells have been studied to analyze their causes, their behavior, and their impact on software quality, those smells typically are studied independently from each other. However, if two smells coincide inside a class, this could increases their negative effect (e.g., spaghetti code that is being cloned across the system). In this paper we report results from an empirical study conducted to examine the relationship between two specific kinds of smells: code clones and antipatterns. We conducted our study on three open-source software systems: Azureus, Eclipse, and JHotDraw. Results show that between 32% and 63% of classes in the analysed systems present co-occurrence of smells, and that such classes are more risky in term of fault-proneness. public domain software, software engineering, open-source software systems, software engineering, Azureus, Eclipse, JHotDraw, clones, anti patterns, Cloning, Software systems, Maintenance engineering, Software quality, Measurement, Complexity theory, Code smells, Anti-patterns, Clones, Faults proneness, Software Quality",on the analysis of co occurrence of anti patterns and clones in software engineering a smell is a part of a software system s source code with a poor quality and that may indicate a deeper problem although many kinds of smells have been studied to analyze their causes their behavior and their impact on software quality those smells typically are studied independently from each other however if two smells coincide inside a class this could increases their negative effect e g spaghetti code that is being cloned across the system in this paper we report results from an empirical study conducted to examine the relationship between two specific kinds of smells code clones and antipatterns we conducted our study on three open source software systems azureus eclipse and jhotdraw results show that between 32 and 63 of classes in the analysed systems present co occurrence of smells and that such classes are more risky in term of fault proneness public domain software software engineering open source software systems software engineering azureus eclipse jhotdraw clones anti patterns cloning software systems maintenance engineering software quality measurement complexity theory code smells anti patterns clones faults proneness software quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
698,1,"Mining the relationship between anti-patterns dependencies and fault-proneness Anti-patterns describe poor solutions to design and implementation problems which are claimed to make object oriented systems hard to maintain. Anti-patterns indicate weaknesses in design that may slow down development or increase the risk of faults or failures in the future. Classes in anti-patterns have some dependencies, such as static relationships, that may propagate potential problems to other classes. To the best of our knowledge, the relationship between anti-patterns dependencies (with non anti-patterns classes) and faults has yet to be studied in details. This paper presents the results of an empirical study aimed at analysing anti-patterns dependencies in three open source software systems, namely ArgoUML, JFreeChart, and XerecesJ. We show that, in almost all releases of the three systems, classes having dependencies with anti-patterns are more fault-prone than others. We also report other observations about these dependencies such as their impact on fault prediction. Software organizations could make use of these knowledge about anti-patterns dependencies to better focus their testing and reviews activities toward the most risky classes, e.g., classes with fault-prone dependencies with anti-patterns. Anti-patterns,  co-change,  static relationships,  mining software repositories,  fault-proneness,  empirical software engineering",mining the relationship between anti patterns dependencies and fault proneness anti patterns describe poor solutions to design and implementation problems which are claimed to make object oriented systems hard to maintain anti patterns indicate weaknesses in design that may slow down development or increase the risk of faults or failures in the future classes in anti patterns have some dependencies such as static relationships that may propagate potential problems to other classes to the best of our knowledge the relationship between anti patterns dependencies with non anti patterns classes and faults has yet to be studied in details this paper presents the results of an empirical study aimed at analysing anti patterns dependencies in three open source software systems namely argouml jfreechart and xerecesj we show that in almost all releases of the three systems classes having dependencies with anti patterns are more fault prone than others we also report other observations about these dependencies such as their impact on fault prediction software organizations could make use of these knowledge about anti patterns dependencies to better focus their testing and reviews activities toward the most risky classes e g classes with fault prone dependencies with anti patterns anti patterns co change static relationships mining software repositories fault proneness empirical software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0
699,1,"An Empirical Study of the Impact of Bad Designs on Defect Proneness To reduce loss from software defects, in the past decades, a number of software engineering researchers have proposed many software defect prediction techniques, which mainly focus on predicting the defect prone software modules, source code files, or code changes. Prior research have identified software design has significant impacts on software quality, especially the bad designs, e.g., anti-patterns, high dependency design, and large source code files, have made various software engineering tasks more difficult. Given these prior works, various bad designs indicators have been widely considered as the fundamental defect prediction metrics in various defect prediction models. Even though the performance of these techniques have been investigated empirically, researchers have not yet gained a clear understanding of correlation between these design metrics and defects proneness. To bridge this gap, in this paper, we investigate the impact of the three kinds of bad design indicators on software defect proneness by conducting a comprehensive empirical study on 18 release versions of the Apache Commons series. In details, we discuss the defect proneness on the file level of three kinds of bad designs, corresponding to seven defect proneness metrics, including various types of well defined code smells, high method dependency, and the files of large size. Furthermore, we investigate the performance of each defect proneness metrics and the overlap between the file sets involved in the bad designs. The experiment results indicate that the three types of bad designs do have impact on defect proneness, the files participating in some special code smell, the large number of code calls to other modules and the large number of lines of code are significantly more likely to be faulty. Moreover, the overlaps of three types of bad designs are relatively small, which means that each group of defect proneness metrics is independent of each other. public domain software, software engineering, software fault tolerance, software maintenance, software metrics, software quality, software reliability, software engineering researchers, software defect prediction techniques, defect prone software modules, source code files, software design, software quality, high dependency design, software engineering tasks, bad designs indicators, fundamental defect prediction metrics, defect prediction models, design metrics, defects proneness, Measurement, Predictive models, Correlation, Software design, Software quality, Software engineering",an empirical study of the impact of bad designs on defect proneness to reduce loss from software defects in the past decades a number of software engineering researchers have proposed many software defect prediction techniques which mainly focus on predicting the defect prone software modules source code files or code changes prior research have identified software design has significant impacts on software quality especially the bad designs e g anti patterns high dependency design and large source code files have made various software engineering tasks more difficult given these prior works various bad designs indicators have been widely considered as the fundamental defect prediction metrics in various defect prediction models even though the performance of these techniques have been investigated empirically researchers have not yet gained a clear understanding of correlation between these design metrics and defects proneness to bridge this gap in this paper we investigate the impact of the three kinds of bad design indicators on software defect proneness by conducting a comprehensive empirical study on 18 release versions of the apache commons series in details we discuss the defect proneness on the file level of three kinds of bad designs corresponding to seven defect proneness metrics including various types of well defined code smells high method dependency and the files of large size furthermore we investigate the performance of each defect proneness metrics and the overlap between the file sets involved in the bad designs the experiment results indicate that the three types of bad designs do have impact on defect proneness the files participating in some special code smell the large number of code calls to other modules and the large number of lines of code are significantly more likely to be faulty moreover the overlaps of three types of bad designs are relatively small which means that each group of defect proneness metrics is independent of each other public domain software software engineering software fault tolerance software maintenance software metrics software quality software reliability software engineering researchers software defect prediction techniques defect prone software modules source code files software design software quality high dependency design software engineering tasks bad designs indicators fundamental defect prediction metrics defect prediction models design metrics defects proneness measurement predictive models correlation software design software quality software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
700,1,"Studying the Relation between Anti-Patterns in Design Models and in Source Code There exists a large body of work on the specification and detection of anti-patterns in the source code of software systems. However, there are very few studies on the origins of the occurrences of anti-patterns in the source code: do the very design of the systems lead to the occurrences of anti-patterns or are anti-patterns introduced during implementation? Knowing when anti-patterns are introduced could help software designers and developers improve the quality of the source code, for example by eliminating fault-prone anti-patterns early during the design of the systems, even before their implementation. Therefore, we detect occurrences of anti-patterns in design models and in the source code of some systems, trace these occurrences between design and implementation, and study their relation and impact on the source code. First, we analyze both the UML design models and the source code of 10 open-source systems and show that antipatterns exist in design models. We observe that, on average, 37% of the classes in the design models that belong to anti-patterns also exist in the source code and also play roles in the same anti-patterns. Second, we investigate two open-source systems to assess the impact of the anti-patterns in their design models on the source code in terms of changes and faults. We show that classes that have anti-patterns in the design models have more changes and faults in the source code. Our results suggest that the design of the systems lead to anti-patterns and that the antipatterns impact negatively the change-and fault-proneness of the classes in the source code. Thus, designers should be wary of anti-patterns in their design models and could benefit from tools that detect and trace these anti-patterns into the source code. formal specification, public domain software, software fault tolerance, software quality, source code (software), Unified Modeling Language, design models, anti-pattern detection, software systems, source code quality, fault-prone anti-pattern elimination, UML design models, open-source systems, Anti-patterns, design models, source code",studying the relation between anti patterns in design models and in source code there exists a large body of work on the specification and detection of anti patterns in the source code of software systems however there are very few studies on the origins of the occurrences of anti patterns in the source code do the very design of the systems lead to the occurrences of anti patterns or are anti patterns introduced during implementation knowing when anti patterns are introduced could help software designers and developers improve the quality of the source code for example by eliminating fault prone anti patterns early during the design of the systems even before their implementation therefore we detect occurrences of anti patterns in design models and in the source code of some systems trace these occurrences between design and implementation and study their relation and impact on the source code first we analyze both the uml design models and the source code of 10 open source systems and show that antipatterns exist in design models we observe that on average 37 of the classes in the design models that belong to anti patterns also exist in the source code and also play roles in the same anti patterns second we investigate two open source systems to assess the impact of the anti patterns in their design models on the source code in terms of changes and faults we show that classes that have anti patterns in the design models have more changes and faults in the source code our results suggest that the design of the systems lead to anti patterns and that the antipatterns impact negatively the change and fault proneness of the classes in the source code thus designers should be wary of anti patterns in their design models and could benefit from tools that detect and trace these anti patterns into the source code formal specification public domain software software fault tolerance software quality source code software unified modeling language design models anti pattern detection software systems source code quality fault prone anti pattern elimination uml design models open source systems anti patterns design models source code,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
701,1,"Predicting Bugs Using Antipatterns Bug prediction models are often used to help allocate software quality assurance efforts. Software metrics (e.g., process metrics and product metrics) are at the heart of bug prediction models. However, some of these metrics like churn are not actionable, on the contrary, antipatterns which refer to specific design and implementation styles can tell the developers whether a design choice is ""poor"" or not. Poor designs can be fixed by refactoring. Therefore in this paper, we explore the use of antipatterns for bug prediction, and strive to improve the accuracy of bug prediction models by proposing various metrics based on antipatterns. An additional feature to our proposed metrics is that they take into account the history of antipatterns in files from their inception into the system. Through a case study on multiple versions of Eclipse and ArgoUML, we observe that (i) files participating in antipatterns have higher bug density than other files, (ii) our proposed antipattern based metrics can provide additional explanatory power over traditional metrics, and (iii) improve the F-measure of cross-system bug prediction models by 12.5% in average. Managers and quality assurance personnel can use our proposed metrics to better improve their bug prediction models and better focus testing activities and the allocation of support resources. bug prediction,  antipattern,  software quality",predicting bugs using antipatterns bug prediction models are often used to help allocate software quality assurance efforts software metrics e g process metrics and product metrics are at the heart of bug prediction models however some of these metrics like churn are not actionable on the contrary antipatterns which refer to specific design and implementation styles can tell the developers whether a design choice is poor or not poor designs can be fixed by refactoring therefore in this paper we explore the use of antipatterns for bug prediction and strive to improve the accuracy of bug prediction models by proposing various metrics based on antipatterns an additional feature to our proposed metrics is that they take into account the history of antipatterns in files from their inception into the system through a case study on multiple versions of eclipse and argouml we observe that i files participating in antipatterns have higher bug density than other files ii our proposed antipattern based metrics can provide additional explanatory power over traditional metrics and iii improve the f measure of cross system bug prediction models by 12 5 in average managers and quality assurance personnel can use our proposed metrics to better improve their bug prediction models and better focus testing activities and the allocation of support resources bug prediction antipattern software quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
702,1,"Are Anti-patterns Coupled? An Empirical Study The interactions between anti-patterns are claimed to affect maintenance. However, little work has been conducted to examine how anti-patterns interact. In this paper, we aim to investigate which pairs of anti-patterns tend to be coupled, i.e., interact with each other. We employ Fisher's exact test and Wilcoxon rank-sum test to identify coupled anti-patterns in the same class and coupled classes. Analyzing the relationships amongst 10 kinds of anti-patterns in five open-source projects, our results show that 1) several kinds of anti-patterns tend to be coupled, but some are conflicting, 2) the effect of anti-patterns on their dependent or co-changed ones are significant but small, 3) in ArgoUML, Xalan and Xerces-J, the classes infected with dependent anti-patterns are mostly (69.9% 100%) modified in maintenance activities. Our findings offer empirical evidences for the existence of anti-pattern interactions, which provides valuable implications for practitioners and researchers. anti-pattern,  interaction,  coupled,  inter-pattern,  maintenance",are anti patterns coupled an empirical study the interactions between anti patterns are claimed to affect maintenance however little work has been conducted to examine how anti patterns interact in this paper we aim to investigate which pairs of anti patterns tend to be coupled i e interact with each other we employ fisher s exact test and wilcoxon rank sum test to identify coupled anti patterns in the same class and coupled classes analyzing the relationships amongst 10 kinds of anti patterns in five open source projects our results show that 1 several kinds of anti patterns tend to be coupled but some are conflicting 2 the effect of anti patterns on their dependent or co changed ones are significant but small 3 in argouml xalan and xerces j the classes infected with dependent anti patterns are mostly 69 9 100 modified in maintenance activities our findings offer empirical evidences for the existence of anti pattern interactions which provides valuable implications for practitioners and researchers anti pattern interaction coupled inter pattern maintenance,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
703,1,"An Empirical Study of the Impact of Two Antipatterns, Blob and Spaghetti Code, on Program Comprehension Antipatterns are ""poor"" solutions to recurring design problems which are conjectured in the literature to make object-oriented systems harder to maintain. However, little quantitative evidence exists to support this conjecture. We performed an empirical study to investigate whether the occurrence of antipatterns does indeed affect the understandability of systems by developers during comprehension and maintenance tasks. We designed and conducted three experiments, with 24 subjects each, to collect data on the performance of developers on basic tasks related to program comprehension and assessed the impact of two antipatterns and of their combinations: Blob and Spaghetti Code. We measured the developers' performance with: (1) the NASA task load index for their effort, (2) the time that they spent performing their tasks, and, (3) their percentages of correct answers. Collected data show that the occurrence of one antipattern does not significantly decrease developers' performance while the combination of two antipatterns impedes significantly developers. We conclude that developers can cope with one antipattern but that combinations of antipatterns should be avoided possibly through detection and refactorings. Antipatterns,  Blob,  Spaghetti Code,  Program Comprehension,  Program Maintenance,  Empirical Software Engineering",an empirical study of the impact of two antipatterns blob and spaghetti code on program comprehension antipatterns are poor solutions to recurring design problems which are conjectured in the literature to make object oriented systems harder to maintain however little quantitative evidence exists to support this conjecture we performed an empirical study to investigate whether the occurrence of antipatterns does indeed affect the understandability of systems by developers during comprehension and maintenance tasks we designed and conducted three experiments with 24 subjects each to collect data on the performance of developers on basic tasks related to program comprehension and assessed the impact of two antipatterns and of their combinations blob and spaghetti code we measured the developers performance with 1 the nasa task load index for their effort 2 the time that they spent performing their tasks and 3 their percentages of correct answers collected data show that the occurrence of one antipattern does not significantly decrease developers performance while the combination of two antipatterns impedes significantly developers we conclude that developers can cope with one antipattern but that combinations of antipatterns should be avoided possibly through detection and refactorings antipatterns blob spaghetti code program comprehension program maintenance empirical software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0
704,1,"Assessing Code Smell Interest Probability: A Case Study An important parameter in deciding to eliminate technical debt (TD) is the probability of a module to generate interest along software evolution. In this study, we explore code smells, which according to practitioners are the most commonly occurring type of TD in industry, by assessing the associated interest probability. As a proxy of smell interest probability we use the frequency of smell occurrences and the change proneness of the modules in which they are identified. To achieve this goal we present a case study on 47,751 methods extracted from two well-known open source projects. The results of the case study suggest that: (a) modules in which ""code smells"" are concentrated are more change-prone than smell-free modules, (b) there are specific types of ""code smells"" that are concentrated in the most change-prone modules, and (c) interest probability of code clones seems to be higher than the other two examined code smells. These results can be useful for both researchers and practitioners, in the sense that the former can focus their research on resolving ""code smells"" that produce more interest, and the latter can improve accordingly the prioritization of their repayment strategy and their training. case study,  technical debt,  interest probability,  change proneness",assessing code smell interest probability a case study an important parameter in deciding to eliminate technical debt td is the probability of a module to generate interest along software evolution in this study we explore code smells which according to practitioners are the most commonly occurring type of td in industry by assessing the associated interest probability as a proxy of smell interest probability we use the frequency of smell occurrences and the change proneness of the modules in which they are identified to achieve this goal we present a case study on 47 751 methods extracted from two well known open source projects the results of the case study suggest that a modules in which code smells are concentrated are more change prone than smell free modules b there are specific types of code smells that are concentrated in the most change prone modules and c interest probability of code clones seems to be higher than the other two examined code smells these results can be useful for both researchers and practitioners in the sense that the former can focus their research on resolving code smells that produce more interest and the latter can improve accordingly the prioritization of their repayment strategy and their training case study technical debt interest probability change proneness,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
705,1,"Do Code Smells Impact the Effort of Different Maintenance Programming Activities? Empirical studies have shown so far that code smells have relatively low impact over maintenance effort at file level. We surmise that previous studies have found low effects of code smells because the effort considered is a ""sheer-effort"" that does not distinguish between the kinds of developers' activities. In our study, we investigate the effects of code smells at the activity level. Examples of activities are: reading, editing, searching, and navigating, which are performed independently over different files during maintenance. We conjecture that structural attributes represented in the form of different code smells do indeed have an effect on the effort for performing certain kinds of activities. To verify this conjecture, we revisit a previous study about the impact of code smell on maintenance effort, using the same dataset, but considering activity effort. Six professional developers were hired to perform three maintenance tasks on four functionally equivalent Java Systems. Each developer performs two maintenance tasks. During maintenance task, we monitor developers' logs. Then, we define an annotation schema to identify developers' activities and assess whether code smells affect different maintenance activities. Results show that different code smells affect differently activity effort. Yet, the size of the changes performed to solve the task impacts the effort of all activities more than code smells and file size. While code smells impact the editing and navigating effort more than file size, the file size impacts the reading and searching activities more than code smells. One major implication of these results is that if code smells indeed affect the effort of certain kinds of activities, it means that their effects are contingent on the type of maintenance task at hand, where some kinds of activities will become more predominant than others. file organisation, Java, software maintenance, software quality, maintenance programming activities, code smells, file level, structural attributes, maintenance effort, functionally equivalent Java systems, developer log monitoring, annotation schema, file size, Maintenance engineering, Navigation, Java, Programming, Software, Companies, Software engineering, code smells, programming activity, maintenance effort, program comprehension, software quality",do code smells impact the effort of different maintenance programming activities empirical studies have shown so far that code smells have relatively low impact over maintenance effort at file level we surmise that previous studies have found low effects of code smells because the effort considered is a sheer effort that does not distinguish between the kinds of developers activities in our study we investigate the effects of code smells at the activity level examples of activities are reading editing searching and navigating which are performed independently over different files during maintenance we conjecture that structural attributes represented in the form of different code smells do indeed have an effect on the effort for performing certain kinds of activities to verify this conjecture we revisit a previous study about the impact of code smell on maintenance effort using the same dataset but considering activity effort six professional developers were hired to perform three maintenance tasks on four functionally equivalent java systems each developer performs two maintenance tasks during maintenance task we monitor developers logs then we define an annotation schema to identify developers activities and assess whether code smells affect different maintenance activities results show that different code smells affect differently activity effort yet the size of the changes performed to solve the task impacts the effort of all activities more than code smells and file size while code smells impact the editing and navigating effort more than file size the file size impacts the reading and searching activities more than code smells one major implication of these results is that if code smells indeed affect the effort of certain kinds of activities it means that their effects are contingent on the type of maintenance task at hand where some kinds of activities will become more predominant than others file organisation java software maintenance software quality maintenance programming activities code smells file level structural attributes maintenance effort functionally equivalent java systems developer log monitoring annotation schema file size maintenance engineering navigation java programming software companies software engineering code smells programming activity maintenance effort program comprehension software quality,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
706,1,"Investigating code smell co-occurrences using association rule learning: A replicated study Previous research demonstrated how code smells (i.e., symptoms of the presence of poor design or implementation choices) threat software maintainability. Moreover, some studies showed that their interaction has a stronger negative impact on the ability of developers to comprehend and enhance the source code when compared to cases when a single code smell instance affects a code element (i.e., a class or a method). While such studies analyzed the effect of the co-presence of more smells from the developers' perspective, a little knowledge regarding which code smell types tend to co-occur in the source code is currently available. Indeed, previous papers on smell co-occurrence have been conducted on a small number of code smell types or on small datasets, thus possibly missing important relationships. To corroborate and possibly enlarge the knowledge on the phenomenon, in this paper we provide a large-scale replication of previous studies, taking into account 13 code smell types on a dataset composed of 395 releases of 30 software systems. Code smell co-occurrences have been captured by using association rule mining, an unsupervised learning technique able to discover frequent relationships in a dataset. The results highlighted some expected relationships, but also shed light on co-occurrences missed by previous research in the field. data mining, software maintenance, code smell co-occurrences, association rule learning, software maintainability, source code, smell co-presence, software system releases, unsupervised learning technique, frequent relationship discovery, Context, Software systems, Data mining, Manuals, Software maintenance, Computer bugs, Code Smells, Empirical Studies, Association Rule Mining",investigating code smell co occurrences using association rule learning a replicated study previous research demonstrated how code smells i e symptoms of the presence of poor design or implementation choices threat software maintainability moreover some studies showed that their interaction has a stronger negative impact on the ability of developers to comprehend and enhance the source code when compared to cases when a single code smell instance affects a code element i e a class or a method while such studies analyzed the effect of the co presence of more smells from the developers perspective a little knowledge regarding which code smell types tend to co occur in the source code is currently available indeed previous papers on smell co occurrence have been conducted on a small number of code smell types or on small datasets thus possibly missing important relationships to corroborate and possibly enlarge the knowledge on the phenomenon in this paper we provide a large scale replication of previous studies taking into account 13 code smell types on a dataset composed of 395 releases of 30 software systems code smell co occurrences have been captured by using association rule mining an unsupervised learning technique able to discover frequent relationships in a dataset the results highlighted some expected relationships but also shed light on co occurrences missed by previous research in the field data mining software maintenance code smell co occurrences association rule learning software maintainability source code smell co presence software system releases unsupervised learning technique frequent relationship discovery context software systems data mining manuals software maintenance computer bugs code smells empirical studies association rule mining,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,1.0
707,1,"Predicting software change-proneness with code smells and class imbalance learning The objective of this paper is to study the relationship between different types of object-oriented software metrics, code smells and actual changes in software code that occur during maintenance period. It is hypothesized that code smells are indicators of maintenance problems. To understand the relationship between code smells and maintenance problems, we extract code smells in a Java based mobile application called MOBAC. Four versions of MOBAC are studied. Machine learning techniques are applied to predict software change-proneness with code smells as predictor variables. The results of this paper indicate that codes smells are more accurate predictors of change-proneness than static code metrics for all machine learning methods. However, class imbalance techniques did not outperform class balance machine learning techniques in change-proneness prediction. The results of this paper are based on accuracy measures such as F-measure and area under ROC curve Java, learning (artificial intelligence), object-oriented methods, software maintenance, software metrics, software change-proneness, code smells, class imbalance learning, object-oriented software metrics, maintenance problems, Java based mobile application, MOBAC, machine learning techniques, Software, Maintenance engineering, Couplings, Software metrics, Informatics, Data collection, Code smells, Exception handling smells, Software change-proneness, Machine learning techniques, Class imbalance learning",predicting software change proneness with code smells and class imbalance learning the objective of this paper is to study the relationship between different types of object oriented software metrics code smells and actual changes in software code that occur during maintenance period it is hypothesized that code smells are indicators of maintenance problems to understand the relationship between code smells and maintenance problems we extract code smells in a java based mobile application called mobac four versions of mobac are studied machine learning techniques are applied to predict software change proneness with code smells as predictor variables the results of this paper indicate that codes smells are more accurate predictors of change proneness than static code metrics for all machine learning methods however class imbalance techniques did not outperform class balance machine learning techniques in change proneness prediction the results of this paper are based on accuracy measures such as f measure and area under roc curve java learning artificial intelligence object oriented methods software maintenance software metrics software change proneness code smells class imbalance learning object oriented software metrics maintenance problems java based mobile application mobac machine learning techniques software maintenance engineering couplings software metrics informatics data collection code smells exception handling smells software change proneness machine learning techniques class imbalance learning,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
708,1,"An Empirical Study of Long Method and God Method in Industrial Projects Code smell is any symptom in the source code of a program that possibly indicates a deeper problem. Though code smells are usually not proper bugs which are defined as technically incorrect and functionality block, they indicate poor programming practices in code level which increases risk of bugs in the future. Long method smell is identified as a kind of methods which are have large number of executable statements, at the same time God method smell is identified as a kind of methods which is doing too much. On the previous research and practice, people treat these 2 concepts equivalently. However, the definition of ""large number of executable statements"" shows us the size of the method, and at the same time definition of ""doing too much"" shows us the complexity of the logic which is implemented and nested in this method. Though intuitively the two definitions are equivalent -- methods with large number of statement means it nests much business logic so that the complexity of these methods is high, a dearth of studies suggest the research of difference between these two definitions. In this paper, present 2 research questions to study these 2 definitions. We choose one release of 11 java based web application projects which is in maintenance period respectively. In these releases, we ask the developers to analysis the bug reports and related code, then collect all 125 bugs which is caused by code smell and the related code for fixing these bugs. We get 45 bugs caused by the Long method smell and the related 31 methods, and we analyzed the data compared with the longest methods in these projects. The study highlights the need for a clearer definition of this kind of code smell, and there are many factors not only length which is affecting the code quality. So the real thing which is affecting the code quality is beyond the definition of ""large number of executable statement"", and at the same time the definition of ""doing too much"" should be modeling to illuminate this kind of code smell. Java, software engineering, source code (software), Java based Web application projects, God method smell, Long method smell, God method, program source code, Complexity theory, Computer bugs, Java, Maintenance engineering, Size measurement, Business, Time measurement",an empirical study of long method and god method in industrial projects code smell is any symptom in the source code of a program that possibly indicates a deeper problem though code smells are usually not proper bugs which are defined as technically incorrect and functionality block they indicate poor programming practices in code level which increases risk of bugs in the future long method smell is identified as a kind of methods which are have large number of executable statements at the same time god method smell is identified as a kind of methods which is doing too much on the previous research and practice people treat these 2 concepts equivalently however the definition of large number of executable statements shows us the size of the method and at the same time definition of doing too much shows us the complexity of the logic which is implemented and nested in this method though intuitively the two definitions are equivalent methods with large number of statement means it nests much business logic so that the complexity of these methods is high a dearth of studies suggest the research of difference between these two definitions in this paper present 2 research questions to study these 2 definitions we choose one release of 11 java based web application projects which is in maintenance period respectively in these releases we ask the developers to analysis the bug reports and related code then collect all 125 bugs which is caused by code smell and the related code for fixing these bugs we get 45 bugs caused by the long method smell and the related 31 methods and we analyzed the data compared with the longest methods in these projects the study highlights the need for a clearer definition of this kind of code smell and there are many factors not only length which is affecting the code quality so the real thing which is affecting the code quality is beyond the definition of large number of executable statement and at the same time the definition of doing too much should be modeling to illuminate this kind of code smell java software engineering source code software java based web application projects god method smell long method smell god method program source code complexity theory computer bugs java maintenance engineering size measurement business time measurement,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
709,1,"A Comparative Study on Vulnerabilities in Categories of Clones and Non-cloned Code Code clones are serious code smells. To investigate bug-proneness of clones as opposed to clone-free source code, earlier attempts have studied the stability of code clones and their contributions to program faults. This paper presents a comparative study on different types of clones and non-cloned code on the basis of their vulnerabilities, which may lead to software defects and issues in future. The empirical study along this new dimension examines source code of 97 software systems and derives results based on quantitative analysis with statistical significance. The findings from this work add to our under-standing of the characteristics and impacts of clones, which can be useful in clone-aware software development and in devising techniques for minimizing the negative impacts of code clones. software engineering, source code (software), noncloned code, code clones, code smells, bug-proneness, clone-free source code, program faults, software systems, clone-aware software development, Cloning, Software systems, Measurement, Maintenance engineering, Encoding, History",a comparative study on vulnerabilities in categories of clones and non cloned code code clones are serious code smells to investigate bug proneness of clones as opposed to clone free source code earlier attempts have studied the stability of code clones and their contributions to program faults this paper presents a comparative study on different types of clones and non cloned code on the basis of their vulnerabilities which may lead to software defects and issues in future the empirical study along this new dimension examines source code of 97 software systems and derives results based on quantitative analysis with statistical significance the findings from this work add to our under standing of the characteristics and impacts of clones which can be useful in clone aware software development and in devising techniques for minimizing the negative impacts of code clones software engineering source code software noncloned code code clones code smells bug proneness clone free source code program faults software systems clone aware software development cloning software systems measurement maintenance engineering encoding history,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
710,1,"The relationship between design patterns and code smells: An exploratory study Context---Design patterns represent recommended generic solutions to various design problems, whereas code smells are symptoms of design issues that could hinder further maintenance of a software system. We can intuitively expect that both concepts are mutually exclusive, and the presence of patterns is correlated with the absence of code smells. However, the existing experimental evidence supporting this claim is still insufficient, and studies separately analyzing the impact of smells and patterns on code quality deliver diverse results. Objective---The aim of the paper is threefold: (1) to determine if and how the presence of the design patterns is linked to the presence of code smells, (2) to investigate if and how these relationships change throughout evolution of code, and (3) to identify the relationships between individual patterns and code smells. Method---We analyze nine design patterns and seven code smells in two medium-size, long-evolving, open source Java systems. In particular, we explore how the presence of design patterns impacts the presence of code smells, analyze if this link evolves over time, and extract association rules that describe their individual relationships. Results---Classes participating in design patterns appear to display code smells less frequently than other classes. The observed effect is stronger for some patterns (e.g., Singleton, State-Strategy) and weaker for others (e.g., Composite). The ratio between the relative number of smells in the classes participating in patterns and the relative number of smells in other classes, is approximately stable or slightly decreasing in time. Conclusion---This observation could be used to anticipate the smell-proneness of individual classes, and improve code smell detectors. Overall, our findings indicate that the presence of design patterns is linked with a lower number of code smell instances. This could support programmers in a context-sensitive analysis of smells in code. Design patterns, Code smells, Software evolution, Empirical study",the relationship between design patterns and code smells an exploratory study context design patterns represent recommended generic solutions to various design problems whereas code smells are symptoms of design issues that could hinder further maintenance of a software system we can intuitively expect that both concepts are mutually exclusive and the presence of patterns is correlated with the absence of code smells however the existing experimental evidence supporting this claim is still insufficient and studies separately analyzing the impact of smells and patterns on code quality deliver diverse results objective the aim of the paper is threefold 1 to determine if and how the presence of the design patterns is linked to the presence of code smells 2 to investigate if and how these relationships change throughout evolution of code and 3 to identify the relationships between individual patterns and code smells method we analyze nine design patterns and seven code smells in two medium size long evolving open source java systems in particular we explore how the presence of design patterns impacts the presence of code smells analyze if this link evolves over time and extract association rules that describe their individual relationships results classes participating in design patterns appear to display code smells less frequently than other classes the observed effect is stronger for some patterns e g singleton state strategy and weaker for others e g composite the ratio between the relative number of smells in the classes participating in patterns and the relative number of smells in other classes is approximately stable or slightly decreasing in time conclusion this observation could be used to anticipate the smell proneness of individual classes and improve code smell detectors overall our findings indicate that the presence of design patterns is linked with a lower number of code smell instances this could support programmers in a context sensitive analysis of smells in code design patterns code smells software evolution empirical study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
711,1,"Do We Have a Chance to Fix Bugs When Refactoring Code Smells? Code smells are used to describe code structures that may cause detrimental effects on software and should be refactored. Previous studies show that some code smells have significant effect on faults. However, how to refactor code smells to reduce bugs still needs more concern. We investigate the possibility of prioritizing code smell refactoring with the help of fault prediction results. We also investigate the possibility of improving the performance of fault prediction by using code smell detection results. We use Cohen's Kappa statistic to report agreements between results of code smell detections and fault predictions. We use fault prediction result as an indicator to guide code smell refactoring. Our results show that refactoring Blob, Long Parameter List, and Refused Parent Be Request may have a good chance to detect and fix bugs, and some code smells are particularly useful for improving the recall of fault prediction. program debugging, software fault tolerance, software maintenance, software performance evaluation, bugs, code structures, code smell detection, Kappa statistic, code smell refactoring, Refused Parent Be Request, Long Parameter List, Blob, fault prediction performance improvement, Computer bugs, Measurement, Software, Object oriented modeling, Predictive models, Complexity theory, Logistics, Code smell, refactoring, refactoring prioritization, fault prediction",do we have a chance to fix bugs when refactoring code smells code smells are used to describe code structures that may cause detrimental effects on software and should be refactored previous studies show that some code smells have significant effect on faults however how to refactor code smells to reduce bugs still needs more concern we investigate the possibility of prioritizing code smell refactoring with the help of fault prediction results we also investigate the possibility of improving the performance of fault prediction by using code smell detection results we use cohen s kappa statistic to report agreements between results of code smell detections and fault predictions we use fault prediction result as an indicator to guide code smell refactoring our results show that refactoring blob long parameter list and refused parent be request may have a good chance to detect and fix bugs and some code smells are particularly useful for improving the recall of fault prediction program debugging software fault tolerance software maintenance software performance evaluation bugs code structures code smell detection kappa statistic code smell refactoring refused parent be request long parameter list blob fault prediction performance improvement computer bugs measurement software object oriented modeling predictive models complexity theory logistics code smell refactoring refactoring prioritization fault prediction,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
712,1,"Code Smells Incidence: Does It Depend on the Application Domain? Background: Code smells are considered detrimental to maintainability. To plan QA preventive initiatives (e.g. refactoring actions) it is important to know if the application domain is likely to affect the incidence of those problems. Objective: The main goal of this paper is to check if the application domain has a statistically significant impact on the incidence of code smells. Methods: We conducted a quasi-experiment using 118 Java applications, classified into 6 application domains, and including 7 types of code smells. To test the formulated hypotheses, we used the Kruskal-Wallis and ANOVA tests. Results: Our results show that the incidence of most code smells does not depend on the application domain, with the exception of Duplicated Code smell, where it was found that its incidence in the domain Home & Education is superior to the others. Limitations: This study was based on medium sized open source applications written in Java. Therefore, its external validity will be questionable outside this scope. Conclusions: For 6 out of 7 code smell types, our results corroborate previous studies where no difference could be found on code smells incidence across applications. However, statistically significant differences were found for the Duplicated Code (aka Clone) smell. This result confirmed the claim produced by Martin Fowler almost 20 years ago that software clones may be induced by the application domain. software maintenance, software metrics, software quality, statistical analysis, statistical testing, software maintainability, QA preventive initiatives, software refactoring, application domain, Java applications, Kruskal-Wallis test, ANOVA test, open source applications, statistical analysis, duplicated code smell, software clones, Software, Complexity theory, Measurement, Education, Java, Business, Games, software quality, code smells, application domain, complexity metrics.",code smells incidence does it depend on the application domain background code smells are considered detrimental to maintainability to plan qa preventive initiatives e g refactoring actions it is important to know if the application domain is likely to affect the incidence of those problems objective the main goal of this paper is to check if the application domain has a statistically significant impact on the incidence of code smells methods we conducted a quasi experiment using 118 java applications classified into 6 application domains and including 7 types of code smells to test the formulated hypotheses we used the kruskal wallis and anova tests results our results show that the incidence of most code smells does not depend on the application domain with the exception of duplicated code smell where it was found that its incidence in the domain home education is superior to the others limitations this study was based on medium sized open source applications written in java therefore its external validity will be questionable outside this scope conclusions for 6 out of 7 code smell types our results corroborate previous studies where no difference could be found on code smells incidence across applications however statistically significant differences were found for the duplicated code aka clone smell this result confirmed the claim produced by martin fowler almost 20 years ago that software clones may be induced by the application domain software maintenance software metrics software quality statistical analysis statistical testing software maintainability qa preventive initiatives software refactoring application domain java applications kruskal wallis test anova test open source applications statistical analysis duplicated code smell software clones software complexity theory measurement education java business games software quality code smells application domain complexity metrics,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
713,1,"Smells Like Teen Spirit: Improving Bug Prediction Performance Using the Intensity of Code Smells Code smells are symptoms of poor design and implementation choices. Previous studies empirically assessed the impact of smells on code quality and clearly indicate their negative impact on maintainability, including a higher bug-proneness of components affected by code smells. In this paper we capture previous findings on bug-proneness to build a specialized bug prediction model for smelly classes. Specifically, we evaluate the contribution of a measure of the severity of code smells (i.e., code smell intensity) by adding it to existing bug prediction models and comparing the results of the new model against the baseline model. Results indicate that the accuracy of a bug prediction model increases by adding the code smell intensity as predictor. We also evaluate the actual gain provided by the intensity index with respect to the other metrics in the model, including the ones used to compute the code smell intensity. We observe that the intensity index is much more important as compared to other metrics used for predicting the buggyness of smelly classes. program debugging, software performance evaluation, source code (software), bug prediction performance improvement, code smell intensity index, bug-proneness, Measurement, Computer bugs, Predictive models, Indexes, Context, Object oriented modeling, Computational modeling, Code Smells, Bug Prediction",smells like teen spirit improving bug prediction performance using the intensity of code smells code smells are symptoms of poor design and implementation choices previous studies empirically assessed the impact of smells on code quality and clearly indicate their negative impact on maintainability including a higher bug proneness of components affected by code smells in this paper we capture previous findings on bug proneness to build a specialized bug prediction model for smelly classes specifically we evaluate the contribution of a measure of the severity of code smells i e code smell intensity by adding it to existing bug prediction models and comparing the results of the new model against the baseline model results indicate that the accuracy of a bug prediction model increases by adding the code smell intensity as predictor we also evaluate the actual gain provided by the intensity index with respect to the other metrics in the model including the ones used to compute the code smell intensity we observe that the intensity index is much more important as compared to other metrics used for predicting the buggyness of smelly classes program debugging software performance evaluation source code software bug prediction performance improvement code smell intensity index bug proneness measurement computer bugs predictive models indexes context object oriented modeling computational modeling code smells bug prediction,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
714,1,"Assessing the capability of code smells to explain maintenance problems: an empirical study combining quantitative and qualitative data Code smells are indicators of deeper design problems that may cause difficulties in the evolution of a software system. This paper investigates the capability of twelve code smells to reflect actual maintenance problems. Four medium-sized systems with equivalent functionality but dissimilar design were examined for code smells. Three change requests were implemented on the systems by six software developers, each of them working for up to four weeks. During that period, we recorded problems faced by developers and the associated Java files on a daily basis. We developed a binary logistic regression model, with ``problematic file'' as the dependent variable. Twelve code smells, file size, and churn constituted the independent variables. We found that violation of the Interface Segregation Principle (a.k.a. ISP violation) displayed the strongest connection with maintenance problems. Analysis of the nature of the problems, as reported by the developers in daily interviews and think-aloud sessions, strengthened our view about the relevance of this code smell. We observed, for example, that severe instances of problems relating to change propagation were associated with ISP violation. Based on our results, we recommend that code with ISP violation should be considered potentially problematic and be prioritized for refactoring. Software maintenance,  Code smells,  Refactoring,  Maintenance problems",assessing the capability of code smells to explain maintenance problems an empirical study combining quantitative and qualitative data code smells are indicators of deeper design problems that may cause difficulties in the evolution of a software system this paper investigates the capability of twelve code smells to reflect actual maintenance problems four medium sized systems with equivalent functionality but dissimilar design were examined for code smells three change requests were implemented on the systems by six software developers each of them working for up to four weeks during that period we recorded problems faced by developers and the associated java files on a daily basis we developed a binary logistic regression model with problematic file as the dependent variable twelve code smells file size and churn constituted the independent variables we found that violation of the interface segregation principle a k a isp violation displayed the strongest connection with maintenance problems analysis of the nature of the problems as reported by the developers in daily interviews and think aloud sessions strengthened our view about the relevance of this code smell we observed for example that severe instances of problems relating to change propagation were associated with isp violation based on our results we recommend that code with isp violation should be considered potentially problematic and be prioritized for refactoring software maintenance code smells refactoring maintenance problems,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
715,1,"Co-Occurrence of Design Patterns and Bad Smells in Software Systems: An Exploratory Study A design pattern is a general reusable solution to a recurring problem in software design. Bad smells are symptoms that may indicate something wrong in the system design or code. Therefore, design patterns and bad smells represent antagonistic structures. They are subject of recurring research and typically appear in software systems. Although design patterns represent good design, their use is often inadequate because their implementation is not always trivial or they may be unnecessarily employed. The inadequate use of design patterns may lead to a bad smell. Therefore, this paper performs an exploratory study in order to identify instances of co-occurrences of design patterns and bad smells. This study is performed over five systems and discovers some co-occurrences between design patterns and bad smells. For instance, we observed the co-occurrences of Command with God Class and Template Method with Duplicated Code. The results of this study make it possible to understand in which situations design patterns are misused or overused and establish guidelines for their better use. Design Patterns,  Bad Smells",co occurrence of design patterns and bad smells in software systems an exploratory study a design pattern is a general reusable solution to a recurring problem in software design bad smells are symptoms that may indicate something wrong in the system design or code therefore design patterns and bad smells represent antagonistic structures they are subject of recurring research and typically appear in software systems although design patterns represent good design their use is often inadequate because their implementation is not always trivial or they may be unnecessarily employed the inadequate use of design patterns may lead to a bad smell therefore this paper performs an exploratory study in order to identify instances of co occurrences of design patterns and bad smells this study is performed over five systems and discovers some co occurrences between design patterns and bad smells for instance we observed the co occurrences of command with god class and template method with duplicated code the results of this study make it possible to understand in which situations design patterns are misused or overused and establish guidelines for their better use design patterns bad smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
716,1,"Exploring decision drivers on god class detection in three controlled experiments Context: Code smells define potential problems in design of software. However, some empirical studies on the topic have shown findings in opposite direction. The misunderstanding is mainly caused by lack of works focusing on human role on code smell detection. Objective: Our aim is to build empirical support to exploration of the human role on code smell detection. specifically, we investigated what issues in code make a human identify a class as a code smell. We called these issues decision drivers. Method: We performed a controlled experiment and replicated it twice. We asked participants to detect god class (one of the most known smell) on different software, indicating what decision drivers they adopted. Results: The stronger drivers were ""class is high complex"" and ""method is misplaced"". We also found the agreement on drivers' choice is low. Another finding is: some important drivers are dependent of alternative support. In our case, ""dependency"" was an important driver only when visual resources were permitted. Conclusion: This study contributes with the comprehension of the human role on smell detection through the exploration of decision drivers. This perception contributes to characterize what we called the ""code smell conceptualization problem"". controlled experiment,  god class,  code smell,  empirical study,  decision drivers",exploring decision drivers on god class detection in three controlled experiments context code smells define potential problems in design of software however some empirical studies on the topic have shown findings in opposite direction the misunderstanding is mainly caused by lack of works focusing on human role on code smell detection objective our aim is to build empirical support to exploration of the human role on code smell detection specifically we investigated what issues in code make a human identify a class as a code smell we called these issues decision drivers method we performed a controlled experiment and replicated it twice we asked participants to detect god class one of the most known smell on different software indicating what decision drivers they adopted results the stronger drivers were class is high complex and method is misplaced we also found the agreement on drivers choice is low another finding is some important drivers are dependent of alternative support in our case dependency was an important driver only when visual resources were permitted conclusion this study contributes with the comprehension of the human role on smell detection through the exploration of decision drivers this perception contributes to characterize what we called the code smell conceptualization problem controlled experiment god class code smell empirical study decision drivers,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
717,1,"Domain matters: bringing further evidence of the relationships among anti-patterns, application domains, and quality-related metrics in Java mobile apps Some previous work began studying the relationship between application domains and quality, in particular through the prevalence of code and design smells (e.g., anti-patterns). Indeed, it is generally believed that the presence of these smells degrades quality but also that their prevalence varies across domains. Though anecdotal experiences and empirical evidence gathered from developers and researchers support this belief, there is still a need to further deepen our understanding of the relationship between application domains and quality. Consequently, we present a large-scale study that investigated the systematic relationships between the presence of smells and quality-related metrics computed over the bytecode of 1,343 Java Mobile Edition applications in 13 different application domains. Although, we did not find evidence of a correlation between smells and quality- related metrics, we found (1) that larger differences exist between metric values of classes exhibiting smells and classes without smells and (2) that some smells are commonly present in all the domains while others are most prevalent in certain domains Domain categories,  Internal metrics,  Anti-patterns,  Software quality,  Java Mobile Edition",domain matters bringing further evidence of the relationships among anti patterns application domains and quality related metrics in java mobile apps some previous work began studying the relationship between application domains and quality in particular through the prevalence of code and design smells e g anti patterns indeed it is generally believed that the presence of these smells degrades quality but also that their prevalence varies across domains though anecdotal experiences and empirical evidence gathered from developers and researchers support this belief there is still a need to further deepen our understanding of the relationship between application domains and quality consequently we present a large scale study that investigated the systematic relationships between the presence of smells and quality related metrics computed over the bytecode of 1 343 java mobile edition applications in 13 different application domains although we did not find evidence of a correlation between smells and quality related metrics we found 1 that larger differences exist between metric values of classes exhibiting smells and classes without smells and 2 that some smells are commonly present in all the domains while others are most prevalent in certain domains domain categories internal metrics anti patterns software quality java mobile edition,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
718,1,"Inter-smell relations in industrial and open source systems: A replication and comparative analysis The presence of anti-patterns and code smells can affect adversely software evolution and quality. Recent work has shown that code smells that appear together in the same file (i.e., collocated smells) can interact with each other, leading to various types of maintenance issues and/or to the intensification of negative effects. It has also been found that code smell interactions can occur across coupled files (i.e., coupled smells), with comparable negative effects as the interaction of same-file (collocated) smells. Different inter-smell relations have been described in previous work, yet only few studies have evaluated them empirically. This study attempts to replicate the findings from previous work on inter-smell relations by analyzing larger systems, and by including both industrial and open source ones. We also include the analysis of coupled smells in addition to collocated smells, to achieve a more complete picture of inter-smell relations. Our results suggest that if coupled smells are not considered, one may risk increasing the number of false negatives when analysing inter-smells. A major finding is that patterns of inter-smell relations vary between open source and industrial systems, suggesting that contextual variables should be considered in further studies on code smells. code smells,  bad smells,  inter-smell relations",inter smell relations in industrial and open source systems a replication and comparative analysis the presence of anti patterns and code smells can affect adversely software evolution and quality recent work has shown that code smells that appear together in the same file i e collocated smells can interact with each other leading to various types of maintenance issues and or to the intensification of negative effects it has also been found that code smell interactions can occur across coupled files i e coupled smells with comparable negative effects as the interaction of same file collocated smells different inter smell relations have been described in previous work yet only few studies have evaluated them empirically this study attempts to replicate the findings from previous work on inter smell relations by analyzing larger systems and by including both industrial and open source ones we also include the analysis of coupled smells in addition to collocated smells to achieve a more complete picture of inter smell relations our results suggest that if coupled smells are not considered one may risk increasing the number of false negatives when analysing inter smells a major finding is that patterns of inter smell relations vary between open source and industrial systems suggesting that contextual variables should be considered in further studies on code smells code smells bad smells inter smell relations,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
719,1,"When and Why Your Code Starts to Smell Bad In past and recent years, the issues related to managing technical debt received significant attention by researchers from both industry and academia. There are several factors that contribute to technical debt. One of these is represented by code bad smells, i.e., Symptoms of poor design and implementation choices. While the repercussions of smells on code quality have been empirically assessed, there is still only anecdotal evidence on when and why bad smells are introduced. To fill this gap, we conducted a large empirical study over the change history of 200 open source projects from different software ecosystems and investigated when bad smells are introduced by developers, and the circumstances and reasons behind their introduction. Our study required the development of a strategy to identify smell-introducing commits, the mining of over 0.5M commits, and the manual analysis of 9,164 of them (i.e., Those identified as smell-introducing). Our findings mostly contradict common wisdom stating that smells are being introduced during evolutionary tasks. In the light of our results, we also call for the need to develop a new generation of recommendation systems aimed at properly planning smell refactoring activities. bad code smells,  mining software repositories,  empirical study",when and why your code starts to smell bad in past and recent years the issues related to managing technical debt received significant attention by researchers from both industry and academia there are several factors that contribute to technical debt one of these is represented by code bad smells i e symptoms of poor design and implementation choices while the repercussions of smells on code quality have been empirically assessed there is still only anecdotal evidence on when and why bad smells are introduced to fill this gap we conducted a large empirical study over the change history of 200 open source projects from different software ecosystems and investigated when bad smells are introduced by developers and the circumstances and reasons behind their introduction our study required the development of a strategy to identify smell introducing commits the mining of over 0 5m commits and the manual analysis of 9 164 of them i e those identified as smell introducing our findings mostly contradict common wisdom stating that smells are being introduced during evolutionary tasks in the light of our results we also call for the need to develop a new generation of recommendation systems aimed at properly planning smell refactoring activities bad code smells mining software repositories empirical study,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
720,1,"An Empirical Study of Design Degradation: How Software Projects Get Worse over Time Context: Software decay is a key concern for large, long-lived software projects. Systems degrade over time as design and implementation compromises and exceptions pile up. Goal: Quantify design decay and understand how software projects deal with this issue. Method: We conducted an empirical study on the presence and evolution of code smells, used as an indicator of design degradation in 220 open source projects. Results: The best approach to maintain the quality of a project is to spend time reducing both software defects (bugs) and design issues (refactoring). We found that design issues are frequently ignored in favor of fixing defects. We also found that design issues have a higher chance of being fixed in the early stages of a project, and that efforts to correct these stall as projects mature and the code base grows, leading to a build-up of problems. Conclusions: From studying a large set of open source projects, our research suggests that while core contributors tend to fix design issues more often than non-core contributors, there is no difference once the relative quantity of commits is accounted for. We also show that design issues tend to build up over time. Software Decay,  Design Problems,  Project History",an empirical study of design degradation how software projects get worse over time context software decay is a key concern for large long lived software projects systems degrade over time as design and implementation compromises and exceptions pile up goal quantify design decay and understand how software projects deal with this issue method we conducted an empirical study on the presence and evolution of code smells used as an indicator of design degradation in 220 open source projects results the best approach to maintain the quality of a project is to spend time reducing both software defects bugs and design issues refactoring we found that design issues are frequently ignored in favor of fixing defects we also found that design issues have a higher chance of being fixed in the early stages of a project and that efforts to correct these stall as projects mature and the code base grows leading to a build up of problems conclusions from studying a large set of open source projects our research suggests that while core contributors tend to fix design issues more often than non core contributors there is no difference once the relative quantity of commits is accounted for we also show that design issues tend to build up over time software decay design problems project history,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0.0,0.0
721,1,"When Code-Anomaly Agglomerations Represent Architectural Problems? An Exploratory Study Several projects have been discontinued in the history of the software industry due to the presence of software architecture problems. The identification of such problems in source code is often required in real project settings, but it is a time-consuming and challenging task. Some authors assume that architectural problems are reflected in source code through individual code anomalies. However, each architectural problem may be realized by multiple code anomalies, which are intertwined in several program elements. The relationships of these various code anomalies and their architecture problems' counterparts are hard to reveal and characterize. In fact, there is little knowledge about the manifestation of code-anomaly agglomerations in software projects and when they adversely impact (or not) the software architecture. To overcome this limitation, we propose studying the architecture impact of a wide range of code-anomaly agglomerations. An agglomeration is a group of code anomalies that are related to each other for some reason - e.g. all of them affect syntactically-related code elements in the program. In our study, we analyzed a total of 5418 code anomalies and 2229 agglomerations within 7 systems. We observed that architectural problems are much more often reflected as anomaly agglomerations rather than individual anomalies in the source code. More importantly, we also revealed when code-anomaly agglomerations were (or not) good indicators of architectural problems. For instance, the result of our study suggests that certain topologies of code-anomaly agglomerations are better indicators than others. code anomaly,  architectural problem,  source code analysis",when code anomaly agglomerations represent architectural problems an exploratory study several projects have been discontinued in the history of the software industry due to the presence of software architecture problems the identification of such problems in source code is often required in real project settings but it is a time consuming and challenging task some authors assume that architectural problems are reflected in source code through individual code anomalies however each architectural problem may be realized by multiple code anomalies which are intertwined in several program elements the relationships of these various code anomalies and their architecture problems counterparts are hard to reveal and characterize in fact there is little knowledge about the manifestation of code anomaly agglomerations in software projects and when they adversely impact or not the software architecture to overcome this limitation we propose studying the architecture impact of a wide range of code anomaly agglomerations an agglomeration is a group of code anomalies that are related to each other for some reason e g all of them affect syntactically related code elements in the program in our study we analyzed a total of 5418 code anomalies and 2229 agglomerations within 7 systems we observed that architectural problems are much more often reflected as anomaly agglomerations rather than individual anomalies in the source code more importantly we also revealed when code anomaly agglomerations were or not good indicators of architectural problems for instance the result of our study suggests that certain topologies of code anomaly agglomerations are better indicators than others code anomaly architectural problem source code analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0.0,0.0
722,1,"Do They Really Smell Bad? A Study on Developers' Perception of Bad Code Smells In the last decade several catalogues have been defined to characterize bad code smells, i.e., symptoms of poor design and implementation choices. On top of such catalogues, researchers have defined methods and tools to automatically detect and/or remove bad smells. Nevertheless, there is an ongoing debate regarding the extent to which developers perceive bad smells as serious design problems. Indeed, there seems to be a gap between theory and practice, i.e., what is believed to be a problem (theory) and what is actually a problem (practice). This paper presents a study aimed at providing empirical evidence on how developers perceive bad smells. In this study, we showed to developers code entities -- belonging to three systems -- affected and not by bad smells, and we asked them to indicate whether the code contains a potential design problem, and if any, the nature and severity of the problem. The study involved both original developers from the three projects and outsiders, namely industrial developers and Master's students. The results provide insights on characteristics of bad smells not yet explored sufficiently. Also, our findings could guide future research on approaches for the detection and removal of bad smells. Code Smells,  Empirical Study",do they really smell bad a study on developers perception of bad code smells in the last decade several catalogues have been defined to characterize bad code smells i e symptoms of poor design and implementation choices on top of such catalogues researchers have defined methods and tools to automatically detect and or remove bad smells nevertheless there is an ongoing debate regarding the extent to which developers perceive bad smells as serious design problems indeed there seems to be a gap between theory and practice i e what is believed to be a problem theory and what is actually a problem practice this paper presents a study aimed at providing empirical evidence on how developers perceive bad smells in this study we showed to developers code entities belonging to three systems affected and not by bad smells and we asked them to indicate whether the code contains a potential design problem and if any the nature and severity of the problem the study involved both original developers from the three projects and outsiders namely industrial developers and master s students the results provide insights on characteristics of bad smells not yet explored sufficiently also our findings could guide future research on approaches for the detection and removal of bad smells code smells empirical study,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
723,1,"Recognizing Antipatterns and Analyzing Their Effects on Software Maintainability Similarly to design patterns and their inherent extra information about the structure and design of a system, antipatterns -- or bad code smells -- can also greatly influence the quality of software. Although the belief that they negatively impact maintainability is widely accepted, there are still relatively few objective results that would support this theory. In this paper we show our approach of detecting antipatterns in source code by structural analysis and use the results to reveal connections among antipatterns, number of bugs, and maintainability. We studied 228 open-source Java based systems and extracted bug-related information for 34 of them from the PROMISE database. For estimating the maintainability, we used the ColumbusQM probabilistic quality model. We found that there is a statistically significant, 0.55 Spearman correlation between the number of bugs and the number of antipatterns. Moreover, there is an even stronger, -0.62 reverse Spearman correlation between the number of antipatterns and code maintainability. We also found that even these few implemented antipatterns could nearly match the machine learning based bug-predicting power of 50 class level source code metrics. Although the presented analysis is not conclusive by far, these first results suggest that antipatterns really do decrease code quality and can highlight spots that require closer attention. Antipatterns,  Software maintainability,  Empirical validation,  OO design,  ISO IEC 25010,  SQuaRE",recognizing antipatterns and analyzing their effects on software maintainability similarly to design patterns and their inherent extra information about the structure and design of a system antipatterns or bad code smells can also greatly influence the quality of software although the belief that they negatively impact maintainability is widely accepted there are still relatively few objective results that would support this theory in this paper we show our approach of detecting antipatterns in source code by structural analysis and use the results to reveal connections among antipatterns number of bugs and maintainability we studied 228 open source java based systems and extracted bug related information for 34 of them from the promise database for estimating the maintainability we used the columbusqm probabilistic quality model we found that there is a statistically significant 0 55 spearman correlation between the number of bugs and the number of antipatterns moreover there is an even stronger 0 62 reverse spearman correlation between the number of antipatterns and code maintainability we also found that even these few implemented antipatterns could nearly match the machine learning based bug predicting power of 50 class level source code metrics although the presented analysis is not conclusive by far these first results suggest that antipatterns really do decrease code quality and can highlight spots that require closer attention antipatterns software maintainability empirical validation oo design iso iec 25010 square,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
724,1,"Identifying strategies on god class detection in two controlled experiments Context: ""Code smell"" is commonly presented as indicative of problems in design of object-oriented systems. However, some empirical studies have presented findings refuting this idea. One of the reasons of the misunderstanding is the low number of studies focused on the role of human on code smell detection. Objective: Our aim is to build empirical support to exploration of the human role on code smell detection. Specifically, we investigated strategies adopted by developers on god class detection. God class is one of the most known code smell. Method: We performed a controlled experiment and replicated it. We explored the strategies from the participant's actions logged during the detection of god classes. Result: One of our findings was that the observation of coupling is more relevant than the observation of attributes like LOC or complexity and the hierarchical relation among these. We also noted that reading source code is important, even with visual resources enha ncing the general comprehension of the software. Conclusion: This study contributes to expand the comprehension of the human role on code smell detection through the use of automatic logging. We suggest that this approach brings a complementary perspective of analysis in discussions about the topic. Code smell,  god class,  controlled experiment",identifying strategies on god class detection in two controlled experiments context code smell is commonly presented as indicative of problems in design of object oriented systems however some empirical studies have presented findings refuting this idea one of the reasons of the misunderstanding is the low number of studies focused on the role of human on code smell detection objective our aim is to build empirical support to exploration of the human role on code smell detection specifically we investigated strategies adopted by developers on god class detection god class is one of the most known code smell method we performed a controlled experiment and replicated it we explored the strategies from the participant s actions logged during the detection of god classes result one of our findings was that the observation of coupling is more relevant than the observation of attributes like loc or complexity and the hierarchical relation among these we also noted that reading source code is important even with visual resources enha ncing the general comprehension of the software conclusion this study contributes to expand the comprehension of the human role on code smell detection through the use of automatic logging we suggest that this approach brings a complementary perspective of analysis in discussions about the topic code smell god class controlled experiment,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
725,1,"Investigating the Impact of Code Smells on System's Quality: An Empirical Study on Systems of Different Application Domains There are various activities that support software maintenance. Program comprehension and detection of design anomalies and their symptoms, like code smells and anti patterns, are particularly relevant for improving the quality and facilitating evolution of a system. In this paper we describe an empirical study on the detection of code smells, aiming at identifying the most frequent smells in systems of different domains and hence the domains characterized by more smells. Moreover, we study possible correlations existing among smells and the values of a set of software quality metrics using Spearman's rank correlation and Principal Component Analysis. software maintenance,  software evolution,  code smell detection,  metric and smell correlations,  domain-dependent analysis",investigating the impact of code smells on system s quality an empirical study on systems of different application domains there are various activities that support software maintenance program comprehension and detection of design anomalies and their symptoms like code smells and anti patterns are particularly relevant for improving the quality and facilitating evolution of a system in this paper we describe an empirical study on the detection of code smells aiming at identifying the most frequent smells in systems of different domains and hence the domains characterized by more smells moreover we study possible correlations existing among smells and the values of a set of software quality metrics using spearman s rank correlation and principal component analysis software maintenance software evolution code smell detection metric and smell correlations domain dependent analysis,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
726,1,"Do developers care about code smells? An exploratory survey Code smells are a well-known metaphor to describe symptoms of code decay or other issues with code quality which can lead to a variety of maintenance problems. Even though code smell detection and removal has been well-researched over the last decade, it remains open to debate whether or not code smells should be considered meaningful conceptualizations of code quality issues from the developer's perspective. To some extent, this question applies as well to the results provided by current code smell detection tools. Are code smells really important for developers? If they are not, is this due to the lack of relevance of the underlying concepts, due to the lack of awareness about code smells on the developers' side, or due to the lack of appropriate tools for code smell analysis or removal? In order to align and direct research efforts to address actual needs and problems of professional developers, we need to better understand the knowledge about, and interest in code smells, together with their perceived criticality. This paper reports on the results obtained from an exploratory survey involving 85 professional software developers. maintainability,  code smells,  survey,  code smell detection,  code analysis tools,  usability,  refactoring",do developers care about code smells an exploratory survey code smells are a well known metaphor to describe symptoms of code decay or other issues with code quality which can lead to a variety of maintenance problems even though code smell detection and removal has been well researched over the last decade it remains open to debate whether or not code smells should be considered meaningful conceptualizations of code quality issues from the developer s perspective to some extent this question applies as well to the results provided by current code smell detection tools are code smells really important for developers if they are not is this due to the lack of relevance of the underlying concepts due to the lack of awareness about code smells on the developers side or due to the lack of appropriate tools for code smell analysis or removal in order to align and direct research efforts to address actual needs and problems of professional developers we need to better understand the knowledge about and interest in code smells together with their perceived criticality this paper reports on the results obtained from an exploratory survey involving 85 professional software developers maintainability code smells survey code smell detection code analysis tools usability refactoring,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
727,1,"An experiment on subjective evolvability evaluation of object-oriented software: explaining factors and interrater agreement Recent trends in software development have emphasized the importance of refactoring in preserving software evolvability. We performed two experiments on software evolvability evaluation, i.e. evaluating the existence of certain code problems called code smells and the refactoring decision. We studied the agreement of the evaluators. Interrater agreement was high for simple code smells and low for the refactoring decision. Furthermore, we analyzed evaluators' demographics and source code metrics as factors explaining the evaluations. The code metrics explained over 70% of the variation regarding the simple code smell evaluations, but only about 30% of the refactoring decision. Surprisingly, the demographics were not useful predictors neither for evaluating code smells nor the refactoring decision. The low agreement for the refactoring decisions may indicate difficulty in building tool support simulating real-life subjective refactoring decisions. However, code metrics tools should be effective in highlighting straightforward problems, e.g. simple code smells. object-oriented programming, software metrics, object-oriented software, interrater agreement, software development, software evolvability evaluation, refactoring decision, evaluator demographics analysis, source code metrics, code smell evaluation, Software quality, Software performance, Demography, Humans, Programming profession, Performance evaluation, Object oriented modeling, Software systems",an experiment on subjective evolvability evaluation of object oriented software explaining factors and interrater agreement recent trends in software development have emphasized the importance of refactoring in preserving software evolvability we performed two experiments on software evolvability evaluation i e evaluating the existence of certain code problems called code smells and the refactoring decision we studied the agreement of the evaluators interrater agreement was high for simple code smells and low for the refactoring decision furthermore we analyzed evaluators demographics and source code metrics as factors explaining the evaluations the code metrics explained over 70 of the variation regarding the simple code smell evaluations but only about 30 of the refactoring decision surprisingly the demographics were not useful predictors neither for evaluating code smells nor the refactoring decision the low agreement for the refactoring decisions may indicate difficulty in building tool support simulating real life subjective refactoring decisions however code metrics tools should be effective in highlighting straightforward problems e g simple code smells object oriented programming software metrics object oriented software interrater agreement software development software evolvability evaluation refactoring decision evaluator demographics analysis source code metrics code smell evaluation software quality software performance demography humans programming profession performance evaluation object oriented modeling software systems,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.0,0.0
728,1,"Bad smells - humans as code critics This work presents the results of an initial empirical study on the subjective evaluation of bad code smells, which identify poor structures in software. Based on a case study in a Finnish software product company, we make two contributions. First, we studied the evaluator effect when subjectively evaluating the existence of smells in code modules. We found that the use of smells for code evaluation purposes is hard due to conflicting perceptions of different evaluators. Second, we applied source code metrics for identifying three smells and compared these results to the subjective evaluations. Surprisingly, the metrics and smell evaluations did not correlate. program diagnostics, software houses, software metrics, software performance evaluation, subjective evaluation, bad code smell, poor software structures, Finnish software product company, code modules, code evaluation, source code metrics, Software quality, Software design, Companies, Software maintenance, Software tools, Software measurement, Current measurement, Quality assessment, Programming, Internet",bad smells humans as code critics this work presents the results of an initial empirical study on the subjective evaluation of bad code smells which identify poor structures in software based on a case study in a finnish software product company we make two contributions first we studied the evaluator effect when subjectively evaluating the existence of smells in code modules we found that the use of smells for code evaluation purposes is hard due to conflicting perceptions of different evaluators second we applied source code metrics for identifying three smells and compared these results to the subjective evaluations surprisingly the metrics and smell evaluations did not correlate program diagnostics software houses software metrics software performance evaluation subjective evaluation bad code smell poor software structures finnish software product company code modules code evaluation source code metrics software quality software design companies software maintenance software tools software measurement current measurement quality assessment programming internet,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
729,1,"Subjective evaluation of software evolvability using code smells: An empirical study This paper presents the results of an empirical study on the subjective evaluation of code smells that identify poorly evolvable structures in software. We propose use of the term software evolvability to describe the ease of further developing a piece of software and outline the research area based on four different viewpoints. Furthermore, we describe the differences between human evaluations and automatic program analysis based on software evolvability metrics. The empirical component is based on a case study in a Finnish software product company, in which we studied two topics. First, we looked at the effect of the evaluator when subjectively evaluating the existence of smells in code modules. We found that the use of smells for code evaluation purposes can be difficult due to conflicting perceptions of different evaluators. However, the demographics of the evaluators partly explain the variation. Second, we applied selected source code metrics for identifying four smells and compared these results to the subjective evaluations. The metrics based on automatic program analysis and the human-based smell evaluations did not fully correlate. Based upon our results, we suggest that organizations should make decisions regarding software evolvability improvement based on a combination of subjective evaluations and code metrics. Due to the limitations of the study we also recognize the need for conducting more refined studies and experiments in the area of software evolvability. Code smells,  Subjective evaluation,  Perceived evaluation,  Maintainability,  Evolvability,  Code metrics,  Software metrics,  Human factors",subjective evaluation of software evolvability using code smells an empirical study this paper presents the results of an empirical study on the subjective evaluation of code smells that identify poorly evolvable structures in software we propose use of the term software evolvability to describe the ease of further developing a piece of software and outline the research area based on four different viewpoints furthermore we describe the differences between human evaluations and automatic program analysis based on software evolvability metrics the empirical component is based on a case study in a finnish software product company in which we studied two topics first we looked at the effect of the evaluator when subjectively evaluating the existence of smells in code modules we found that the use of smells for code evaluation purposes can be difficult due to conflicting perceptions of different evaluators however the demographics of the evaluators partly explain the variation second we applied selected source code metrics for identifying four smells and compared these results to the subjective evaluations the metrics based on automatic program analysis and the human based smell evaluations did not fully correlate based upon our results we suggest that organizations should make decisions regarding software evolvability improvement based on a combination of subjective evaluations and code metrics due to the limitations of the study we also recognize the need for conducting more refined studies and experiments in the area of software evolvability code smells subjective evaluation perceived evaluation maintainability evolvability code metrics software metrics human factors,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
730,1,"An empirical study of the bad smells and class error probability in the post-release object-oriented system evolution Bad smells are used as a means to identify problematic classes in object-oriented systems for refactoring. The belief that the bad smells are linked with problematic classes is largely based on previous metric research results. Although there is a plethora of empirical studies linking software metrics to errors and error proneness of classes in object-oriented systems, the link between the bad smells and class error probability in the evolution of object-oriented systems after the systems are released has not been explored. There has been no empirical evidence linking the bad smells with class error probability so far. This paper presents the results from an empirical study that investigated the relationship between the bad smells and class error probability in three error-severity levels in an industrial-strength open source system. Our research, which was conducted in the context of the post-release system evolution process, showed that some bad smells were positively associated with the class error probability in the three error-severity levels. This finding supports the use of bad smells as a systematic method to identify and refactor problematic classes in this specific context. Object-oriented design, Bad smells, Software metrics, Design evolution, Open source software, Empirical study",an empirical study of the bad smells and class error probability in the post release object oriented system evolution bad smells are used as a means to identify problematic classes in object oriented systems for refactoring the belief that the bad smells are linked with problematic classes is largely based on previous metric research results although there is a plethora of empirical studies linking software metrics to errors and error proneness of classes in object oriented systems the link between the bad smells and class error probability in the evolution of object oriented systems after the systems are released has not been explored there has been no empirical evidence linking the bad smells with class error probability so far this paper presents the results from an empirical study that investigated the relationship between the bad smells and class error probability in three error severity levels in an industrial strength open source system our research which was conducted in the context of the post release system evolution process showed that some bad smells were positively associated with the class error probability in the three error severity levels this finding supports the use of bad smells as a systematic method to identify and refactor problematic classes in this specific context object oriented design bad smells software metrics design evolution open source software empirical study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
731,1,"Tracking Design Smells: Lessons from a Study of God Classes ""God class"" is a term used to describe a certain type of large classes which ""know too much or do too much"". Often a God class (GC) is created by accident as functionalities are incrementally added to a central class over the course of its evolution. GCs are generally thought to be examples of bad code that should be detected and removed to ensure software quality. However, in some cases, a GC is created by design as the best solution to a particular problem because, for example, the problem is not easily decomposable or strong requirements on efficiency exist. In this paper, we study in two open-source systems the ""life cycle"" of GCs: how they arise, how prevalent they are, and whether they remain or they are removed as the systems evolve over time, through a number of versions. We show how to detect the degree of ""godliness"" of classes automatically. Then, we show that by identifying the evolution of ""godliness"", we can distinguish between those classes that are so by design (good code) from those that occurred by accident (bad code). This methodology can guide software quality teams in their efforts to implement prevention and correction mechanisms. Design smells,  antipatterns,  software evolution,  empirical study",tracking design smells lessons from a study of god classes god class is a term used to describe a certain type of large classes which know too much or do too much often a god class gc is created by accident as functionalities are incrementally added to a central class over the course of its evolution gcs are generally thought to be examples of bad code that should be detected and removed to ensure software quality however in some cases a gc is created by design as the best solution to a particular problem because for example the problem is not easily decomposable or strong requirements on efficiency exist in this paper we study in two open source systems the life cycle of gcs how they arise how prevalent they are and whether they remain or they are removed as the systems evolve over time through a number of versions we show how to detect the degree of godliness of classes automatically then we show that by identifying the evolution of godliness we can distinguish between those classes that are so by design good code from those that occurred by accident bad code this methodology can guide software quality teams in their efforts to implement prevention and correction mechanisms design smells antipatterns software evolution empirical study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0
732,1,"An Exploratory Study of the Impact of Code Smells on Software Change-proneness Code smells are poor implementation choices, thought to make object-oriented systems hard to maintain. In this study, we investigate if classes with code smells are more change-prone than classes without smells. Specifically, we test the general hypothesis: classes with code smells are not more change prone than other classes. We detect 29 code smells in 9 releases of Azureus and in 13 releases of Eclipse, and study the relation between classes with these code smells and class change-proneness. We show that, in almost all releases of Azureus and Eclipse, classes with code smells are more change-prone than others, and that specific smells are more correlated than others to change-proneness. These results justify a posteriori previous work on the specification and detection of code smells and could help focusing quality assurance and testing activities. Code Smells,  Mining Software Repositories,  Empirical Software Engineering",an exploratory study of the impact of code smells on software change proneness code smells are poor implementation choices thought to make object oriented systems hard to maintain in this study we investigate if classes with code smells are more change prone than classes without smells specifically we test the general hypothesis classes with code smells are not more change prone than other classes we detect 29 code smells in 9 releases of azureus and in 13 releases of eclipse and study the relation between classes with these code smells and class change proneness we show that in almost all releases of azureus and eclipse classes with code smells are more change prone than others and that specific smells are more correlated than others to change proneness these results justify a posteriori previous work on the specification and detection of code smells and could help focusing quality assurance and testing activities code smells mining software repositories empirical software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0.0,0.0
733,1,"On the Impact of Design Flaws on Software Defects The presence of design flaws in a software system has a negative impact on the quality of the software, as they indicate violations of design practices and principles, which make a software system harder to understand, maintain, and evolve. Software defects are tangible effects of poor software quality. In this paper we study the relationship between software defects and a number of design flaws. We found that, while some design flaws are more frequent, none of them can be considered more harmful with respect to software defects. We also analyzed the correlation between the introduction of new flaws and the generation of defects. Software quality and design,  Software defects",on the impact of design flaws on software defects the presence of design flaws in a software system has a negative impact on the quality of the software as they indicate violations of design practices and principles which make a software system harder to understand maintain and evolve software defects are tangible effects of poor software quality in this paper we study the relationship between software defects and a number of design flaws we found that while some design flaws are more frequent none of them can be considered more harmful with respect to software defects we also analyzed the correlation between the introduction of new flaws and the generation of defects software quality and design software defects,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
734,1,"Investigating the Evolution of Bad Smells in Object-Oriented Code Software design problems are known and perceived under many different terms such as bad smells, flaws, non-compliance to design principles, violation of heuristics, excessive metric values and antipatterns, signifying the importance of handling them in the construction and maintenance of software. Once a design problem is identified, it can be removed by applying an appropriate refactoring, improving in most cases several aspects of quality such as maintainability, comprehensibility and reusability. This paper, taking advantage of recent advances and tools in the identification of non-trivial bad smells, explores the presence and evolution of such problems by analyzing past versions of code. Several interesting questions can be investigated such as whether the number of problems increases with the passage of software generations, whether problems vanish by time or only by targeted human intervention, whether bad smells occur in the course of evolution of a module or exist right from the beginning and whether refactorings targeting at smell removal are frequent. In contrast to previous studies that investigate the application of refactorings in the history of a software project, we attempt to study the subject from the point of view of the problems themselves distinguishing deliberate maintenance activities from the removal of design problems as a side effect of software evolution. Results are discussed for two open-source systems and three bad smells. bad smell,  refactoring,  software repositories,  software history,  evolution",investigating the evolution of bad smells in object oriented code software design problems are known and perceived under many different terms such as bad smells flaws non compliance to design principles violation of heuristics excessive metric values and antipatterns signifying the importance of handling them in the construction and maintenance of software once a design problem is identified it can be removed by applying an appropriate refactoring improving in most cases several aspects of quality such as maintainability comprehensibility and reusability this paper taking advantage of recent advances and tools in the identification of non trivial bad smells explores the presence and evolution of such problems by analyzing past versions of code several interesting questions can be investigated such as whether the number of problems increases with the passage of software generations whether problems vanish by time or only by targeted human intervention whether bad smells occur in the course of evolution of a module or exist right from the beginning and whether refactorings targeting at smell removal are frequent in contrast to previous studies that investigate the application of refactorings in the history of a software project we attempt to study the subject from the point of view of the problems themselves distinguishing deliberate maintenance activities from the removal of design problems as a side effect of software evolution results are discussed for two open source systems and three bad smells bad smell refactoring software repositories software history evolution,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
735,1,"Identifying Code Smells with Multiple Concern Views Code smells are anomalies often caused by the way concerns are realized in the source code. Their identification might depend on properties governing the structure of individual concerns and their inter-dependencies in the system implementation. Although code visualization tools are increasingly applied to support anomaly detection, they are mostly limited to represent modular structures, such as methods, classes and packages. This paper presents a multiple views approach that enriches four categories of code views with concern properties, namely: (i) concern's package-class method structure, (ii) concern's inheritance-wise structure, (iii)concern dependency, and (iv) concern dependency weight. An exploratory study was conducted to assess the extent to which visual views support code smell detection. Developers identified a set of well-known code smells on five versions of an open source system. Two important results came out of this study. First, the concern-driven views provided useful support to identify God Class and Divergent Change smells. Second, strategies for smell detection supported by the multiple concern views were uncovered. software visualization,  code smells,  concerns,  program comprehension",identifying code smells with multiple concern views code smells are anomalies often caused by the way concerns are realized in the source code their identification might depend on properties governing the structure of individual concerns and their inter dependencies in the system implementation although code visualization tools are increasingly applied to support anomaly detection they are mostly limited to represent modular structures such as methods classes and packages this paper presents a multiple views approach that enriches four categories of code views with concern properties namely i concern s package class method structure ii concern s inheritance wise structure iii concern dependency and iv concern dependency weight an exploratory study was conducted to assess the extent to which visual views support code smell detection developers identified a set of well known code smells on five versions of an open source system two important results came out of this study first the concern driven views provided useful support to identify god class and divergent change smells second strategies for smell detection supported by the multiple concern views were uncovered software visualization code smells concerns program comprehension,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
736,1,"Are all code smells harmful? A study of God Classes and Brain Classes in the evolution of three open source systems Code smells are particular patterns in object-oriented systems that are perceived to lead to difficulties in the maintenance of such systems. It is held that to improve maintainability, code smells should be eliminated by refactoring. It is claimed that classes that are involved in certain code smells are liable to be changed more frequently and have more defects than other classes in the code. We investigated the extent to which this claim is true for God Classes and Brain Classes, with and without normalizing the effects with respect to the class size. We analyzed historical data from 7 to 10 years of the development of three open-source software systems. The results show that God and Brain Classes were changed more frequently and contained more defects than other kinds of class. However, when we normalized the measured effects with respect to size, then God and Brain Classes were less subject to change and had fewer defects than other classes. Hence, under the assumption that God and Brain Classes contain on average as much functionality per line of code as other classes, the presence of God and Brain Classes is not necessarily harmful; in fact, such classes may be an efficient way of organizing code. Code smells,  detection strategies,  change frequency,  defects,  software evolution,  open source",are all code smells harmful a study of god classes and brain classes in the evolution of three open source systems code smells are particular patterns in object oriented systems that are perceived to lead to difficulties in the maintenance of such systems it is held that to improve maintainability code smells should be eliminated by refactoring it is claimed that classes that are involved in certain code smells are liable to be changed more frequently and have more defects than other classes in the code we investigated the extent to which this claim is true for god classes and brain classes with and without normalizing the effects with respect to the class size we analyzed historical data from 7 to 10 years of the development of three open source software systems the results show that god and brain classes were changed more frequently and contained more defects than other kinds of class however when we normalized the measured effects with respect to size then god and brain classes were less subject to change and had fewer defects than other classes hence under the assumption that god and brain classes contain on average as much functionality per line of code as other classes the presence of god and brain classes is not necessarily harmful in fact such classes may be an efficient way of organizing code code smells detection strategies change frequency defects software evolution open source,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
737,1,"Are the Clients of Flawed Classes (Also) Defect Prone? Design flaws are those characteristics of design entities (e.g., methods, classes) which make them harder to maintain. Existing studies show that classes revealing particular design flaws are more change and defect prone than the other classes. Since various collaborations are found among the instances of classes, classes are not isolated within the source code of object-oriented systems. In this paper we investigate if classes using classes revealing design flaws are more defect prone than classes which do not use classes revealing design flaws. We detect four design flaws in three releases of Eclipse and investigate the relation between classes that use/do not use flawed classes and defects. The results show that classes that use flawed classes are defect prone and this does not depend on the number of the used flawed classes. This findings show a new type of correlation between design flaws and defects, bringing evidence related to an increased likelihood of exhibiting defects for classes that use classes revealing design flaws. Based on the provided evidence, practitioners are advised once again about the negative impact design flaws have at a source code level. source code,  defects,  design flaws,  detection strategies,  software repositories,  empirical software engineering",are the clients of flawed classes also defect prone design flaws are those characteristics of design entities e g methods classes which make them harder to maintain existing studies show that classes revealing particular design flaws are more change and defect prone than the other classes since various collaborations are found among the instances of classes classes are not isolated within the source code of object oriented systems in this paper we investigate if classes using classes revealing design flaws are more defect prone than classes which do not use classes revealing design flaws we detect four design flaws in three releases of eclipse and investigate the relation between classes that use do not use flawed classes and defects the results show that classes that use flawed classes are defect prone and this does not depend on the number of the used flawed classes this findings show a new type of correlation between design flaws and defects bringing evidence related to an increased likelihood of exhibiting defects for classes that use classes revealing design flaws based on the provided evidence practitioners are advised once again about the negative impact design flaws have at a source code level source code defects design flaws detection strategies software repositories empirical software engineering,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
738,1,"Are Automatically-detected Code Anomalies Relevant to Architectural Modularity?: An Exploratory Analysis of Evolving Systems As software systems are maintained, their architecture modularity often degrades through architectural erosion and drift. More directly, however, the modularity of software implementations degrades through the introduction of code anomalies, informally known as code smells. A number of strategies have been developed for supporting the automatic identification of implementation anomalies when only the source code is available. However, it is still unknown how reliable these strategies are when revealing code anomalies related to erosion and drift processes. In this paper, we present an exploratory analysis that investigates to what extent the automatically-detected code anomalies are related to problems that occur with an evolving system's architecture. We analyzed code anomaly occurrences in 38 versions of 5 applications using existing detection strategies. The outcome of our evaluation suggests that many of the code anomalies detected by the employed strategies were not related to architectural problems. Even worse, over 50% of the anomalies not observed by the employed techniques (false negatives) were found to be correlated with architectural problems. code anomalies,  architectural anomalies,  architectural degradation symptoms,  architectural violations",are automatically detected code anomalies relevant to architectural modularity an exploratory analysis of evolving systems as software systems are maintained their architecture modularity often degrades through architectural erosion and drift more directly however the modularity of software implementations degrades through the introduction of code anomalies informally known as code smells a number of strategies have been developed for supporting the automatic identification of implementation anomalies when only the source code is available however it is still unknown how reliable these strategies are when revealing code anomalies related to erosion and drift processes in this paper we present an exploratory analysis that investigates to what extent the automatically detected code anomalies are related to problems that occur with an evolving system s architecture we analyzed code anomaly occurrences in 38 versions of 5 applications using existing detection strategies the outcome of our evaluation suggests that many of the code anomalies detected by the employed strategies were not related to architectural problems even worse over 50 of the anomalies not observed by the employed techniques false negatives were found to be correlated with architectural problems code anomalies architectural anomalies architectural degradation symptoms architectural violations,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
739,1,"Evaluating the Lifespan of Code Smells using Software Repository Mining An anti-pattern is a commonly occurring solution to a recurring problem that will typically negatively impact code quality. Code smells are considered to be symptoms of anti-patterns and occur at source code level. The lifespan of code smells in a software system can be determined by mining the software repository on which the system is stored. This provides insight into the behaviour of software developers with regard to resolving code smells and anti-patterns. In a case study, we investigate the lifespan of code smells and the refactoring behaviour of developers in seven open source systems. The results of this study indicate that engineers are aware of code smells, but are not very concerned with their impact, given the low refactoring activity. []",evaluating the lifespan of code smells using software repository mining an anti pattern is a commonly occurring solution to a recurring problem that will typically negatively impact code quality code smells are considered to be symptoms of anti patterns and occur at source code level the lifespan of code smells in a software system can be determined by mining the software repository on which the system is stored this provides insight into the behaviour of software developers with regard to resolving code smells and anti patterns in a case study we investigate the lifespan of code smells and the refactoring behaviour of developers in seven open source systems the results of this study indicate that engineers are aware of code smells but are not very concerned with their impact given the low refactoring activity,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
740,1,"On the Relevance of Code Anomalies for Identifying Architecture Degradation Symptoms The longevity of evolving software systems largely depends on their resilience to architectural design degradation. It is often assumed that code anomalies are always key indicators of architecture degradation symptoms. The problem is that there is still limited knowledge about the circumstances under which code anomalies represent architectural problems. Without this knowledge, developers are not able to implement architecturally-relevant strategies for code refactoring. This paper presents an empirical study about the influence of code anomalies on architecture degradation symptoms. To this end, we studied the relationship between code anomalies and architecture problems in 6 software systems, which were intended to adhere different architectural decompositions. A total of 40 versions and 2056 code anomalies were analyzed. Our study revealed that 78% of all architecture problems in the programs were related to code anomalies. In particular, more than 33% of all architecture problems were unexpectedly induced by anomalous code elements in the systems' first version. We also found that the refactoring strategies, even when frequently applied in those systems, did not significantly contribute to remove architecturally-relevant code anomalies. code anomaly,  refactoring,  architectural violation,  architectural anomaly",on the relevance of code anomalies for identifying architecture degradation symptoms the longevity of evolving software systems largely depends on their resilience to architectural design degradation it is often assumed that code anomalies are always key indicators of architecture degradation symptoms the problem is that there is still limited knowledge about the circumstances under which code anomalies represent architectural problems without this knowledge developers are not able to implement architecturally relevant strategies for code refactoring this paper presents an empirical study about the influence of code anomalies on architecture degradation symptoms to this end we studied the relationship between code anomalies and architecture problems in 6 software systems which were intended to adhere different architectural decompositions a total of 40 versions and 2056 code anomalies were analyzed our study revealed that 78 of all architecture problems in the programs were related to code anomalies in particular more than 33 of all architecture problems were unexpectedly induced by anomalous code elements in the systems first version we also found that the refactoring strategies even when frequently applied in those systems did not significantly contribute to remove architecturally relevant code anomalies code anomaly refactoring architectural violation architectural anomaly,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
741,1,"Clones: what is that smell? Clones are generally considered bad programming practice in software engineering folklore. They are identified as a bad smell (Fowler et al. 1999) and a major contributor to project maintenance difficulties. Clones inherently cause code bloat, thus increasing project size and maintenance costs. In this work, we try to validate the conventional wisdom empirically to see whether cloning makes code more defect prone. This paper analyses the relationship between cloning and defect proneness. For the four medium to large open source projects that we studied, we find that, first, the great majority of bugs are not significantly associated with clones. Second, we find that clones may be less defect prone than non-cloned code. Third, we find little evidence that clones with more copies are actually more error prone. Fourth, we find little evidence to support the claim that clone groups that span more than one file or directory are more defect prone than collocated clones. Finally, we find that developers do not need to put a disproportionately higher effort to fix clone dense bugs. Our findings do not support the claim that clones are really a ``bad smell'' (Fowler et al. 1999). Perhaps we can clone, and breathe easily, at the same time. Empirical software engineering,  Software maintenance,  Software clone,  Software quality,  Software evolution",clones what is that smell clones are generally considered bad programming practice in software engineering folklore they are identified as a bad smell fowler et al 1999 and a major contributor to project maintenance difficulties clones inherently cause code bloat thus increasing project size and maintenance costs in this work we try to validate the conventional wisdom empirically to see whether cloning makes code more defect prone this paper analyses the relationship between cloning and defect proneness for the four medium to large open source projects that we studied we find that first the great majority of bugs are not significantly associated with clones second we find that clones may be less defect prone than non cloned code third we find little evidence that clones with more copies are actually more error prone fourth we find little evidence to support the claim that clone groups that span more than one file or directory are more defect prone than collocated clones finally we find that developers do not need to put a disproportionately higher effort to fix clone dense bugs our findings do not support the claim that clones are really a bad smell fowler et al 1999 perhaps we can clone and breathe easily at the same time empirical software engineering software maintenance software clone software quality software evolution,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0.0,0.0
742,1,"Do code smells reflect important maintainability aspects? Code smells are manifestations of design flaws that can degrade code maintainability. As such, the existence of code smells seems an ideal indicator for maintainability assessments. However, to achieve comprehensive and accurate evaluations based on code smells, we need to know how well they reflect factors affecting maintainability. After identifying which maintainability factors are reflected by code smells and which not, we can use complementary means to assess the factors that are not addressed by smells. This paper reports on an empirical study that investigates the extent to which code smells reflect factors affecting maintainability that have been identified as important by programmers. We consider two sources for our analysis: (1) expert-based maintainability assessments of four Java systems before they entered a maintenance project, and (2) observations and interviews with professional developers who maintained these systems during 14 working days and implemented a number of change requests. maintainability evaluation,  code smells",do code smells reflect important maintainability aspects code smells are manifestations of design flaws that can degrade code maintainability as such the existence of code smells seems an ideal indicator for maintainability assessments however to achieve comprehensive and accurate evaluations based on code smells we need to know how well they reflect factors affecting maintainability after identifying which maintainability factors are reflected by code smells and which not we can use complementary means to assess the factors that are not addressed by smells this paper reports on an empirical study that investigates the extent to which code smells reflect factors affecting maintainability that have been identified as important by programmers we consider two sources for our analysis 1 expert based maintainability assessments of four java systems before they entered a maintenance project and 2 observations and interviews with professional developers who maintained these systems during 14 working days and implemented a number of change requests maintainability evaluation code smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
743,1,"Quantifying the Effect of Code Smells on Maintenance Effort Context: Code smells are assumed to indicate bad design that leads to less maintainable code. However, this assumption has not been investigated in controlled studies with professional software developers. Aim: This paper investigates the relationship between code smells and maintenance effort. Method: Six developers were hired to perform three maintenance tasks each on four functionally equivalent Java systems originally implemented by different companies. Each developer spent three to four weeks. In total, they modified 298 Java files in the four systems. An Eclipse IDE plug-in measured the exact amount of time a developer spent maintaining each file. Regression analysis was used to explain the effort using file properties, including the number of smells. Result: None of the 12 investigated smells was significantly associated with increased effort after we adjusted for file size and the number of changes; Refused Bequest was significantly associated with decreased effort. File size and the number of changes explained almost all of the modeled variation in effort. Conclusion: The effects of the 12 smells on maintenance effort were limited. To reduce maintenance effort, a focus on reducing code size and the work practices that limit the number of changes may be more beneficial than refactoring code smells. Maintainability,  object-oriented design,  product metrics,  code churn",quantifying the effect of code smells on maintenance effort context code smells are assumed to indicate bad design that leads to less maintainable code however this assumption has not been investigated in controlled studies with professional software developers aim this paper investigates the relationship between code smells and maintenance effort method six developers were hired to perform three maintenance tasks each on four functionally equivalent java systems originally implemented by different companies each developer spent three to four weeks in total they modified 298 java files in the four systems an eclipse ide plug in measured the exact amount of time a developer spent maintaining each file regression analysis was used to explain the effort using file properties including the number of smells result none of the 12 investigated smells was significantly associated with increased effort after we adjusted for file size and the number of changes refused bequest was significantly associated with decreased effort file size and the number of changes explained almost all of the modeled variation in effort conclusion the effects of the 12 smells on maintenance effort were limited to reduce maintenance effort a focus on reducing code size and the work practices that limit the number of changes may be more beneficial than refactoring code smells maintainability object oriented design product metrics code churn,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
744,1,"To what extent can maintenance problems be predicted by code smell detection? - An empirical study Context Code smells are indicators of poor coding and design choices that can cause problems during software maintenance and evolution. Objective This study is aimed at a detailed investigation to which extent problems in maintenance projects can be predicted by the detection of currently known code smells. Method A multiple case study was conducted, in which the problems faced by six developers working on four different Java systems were registered on a daily basis, for a period up to four weeks. Where applicable, the files associated to the problems were registered. Code smells were detected in the pre-maintenance version of the systems, using the tools Borland Together and InCode. In-depth examination of quantitative and qualitative data was conducted to determine if the observed problems could be explained by the detected smells. Results From the total set of problems, roughly 30% percent were related to files containing code smells. In addition, interaction effects were observed amongst code smells, and between code smells and other code characteristics, and these effects led to severe problems during maintenance. Code smell interactions were observed between collocated smells (i.e., in the same file), and between coupled smells (i.e., spread over multiple files that were coupled). Conclusions The role of code smells on the overall system maintainability is relatively minor, thus complementary approaches are needed to achieve more comprehensive assessments of maintainability. Moreover, to improve the explanatory power of code smells, interaction effects amongst collocated smells and coupled smells should be taken into account during analysis. Code smells, Maintainability, Empirical study",to what extent can maintenance problems be predicted by code smell detection an empirical study context code smells are indicators of poor coding and design choices that can cause problems during software maintenance and evolution objective this study is aimed at a detailed investigation to which extent problems in maintenance projects can be predicted by the detection of currently known code smells method a multiple case study was conducted in which the problems faced by six developers working on four different java systems were registered on a daily basis for a period up to four weeks where applicable the files associated to the problems were registered code smells were detected in the pre maintenance version of the systems using the tools borland together and incode in depth examination of quantitative and qualitative data was conducted to determine if the observed problems could be explained by the detected smells results from the total set of problems roughly 30 percent were related to files containing code smells in addition interaction effects were observed amongst code smells and between code smells and other code characteristics and these effects led to severe problems during maintenance code smell interactions were observed between collocated smells i e in the same file and between coupled smells i e spread over multiple files that were coupled conclusions the role of code smells on the overall system maintainability is relatively minor thus complementary approaches are needed to achieve more comprehensive assessments of maintainability moreover to improve the explanatory power of code smells interaction effects amongst collocated smells and coupled smells should be taken into account during analysis code smells maintainability empirical study,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
745,1,"Code smells as system-level indicators of maintainability: An empirical study Context Code smells are manifestations of design flaws that can degrade code maintainability. So far, no research has investigated if these indicators are useful for conducting system-level maintainability evaluations. Aim The research in this paper investigates the potential of code smells to reflect system-level indicators of maintainability. Method We evaluated four medium-sized Java systems using code smells and compared the results against previous evaluations on the same systems based on expert judgment and the Chidamber and Kemerer suite of metrics. The systems were maintained over a period of up to 4 weeks. During maintenance, effort (person-hours) and number of defects were measured to validate the different evaluation approaches. Results Most code smells are strongly influenced by size; consequently code smells are not good indicators for comparing the maintainability of systems differing greatly in size. Also, from the comparison of the different evaluation approaches, expert judgment was found as the most accurate and flexible since it considered effects due to the system's size and complexity and could adapt to different maintenance scenarios. Conclusion Code smell approaches show promise as indicators of the need for maintenance in a way that other purely metric-based approaches lack. Code smells, Maintainability, Empirical study, System evaluation",code smells as system level indicators of maintainability an empirical study context code smells are manifestations of design flaws that can degrade code maintainability so far no research has investigated if these indicators are useful for conducting system level maintainability evaluations aim the research in this paper investigates the potential of code smells to reflect system level indicators of maintainability method we evaluated four medium sized java systems using code smells and compared the results against previous evaluations on the same systems based on expert judgment and the chidamber and kemerer suite of metrics the systems were maintained over a period of up to 4 weeks during maintenance effort person hours and number of defects were measured to validate the different evaluation approaches results most code smells are strongly influenced by size consequently code smells are not good indicators for comparing the maintainability of systems differing greatly in size also from the comparison of the different evaluation approaches expert judgment was found as the most accurate and flexible since it considered effects due to the system s size and complexity and could adapt to different maintenance scenarios conclusion code smell approaches show promise as indicators of the need for maintenance in a way that other purely metric based approaches lack code smells maintainability empirical study system evaluation,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
746,1,"Investigating the impact of design debt on software quality Technical debt is a metaphor describing situations where developers accept sacrifices in one dimension of development (e.g. software quality) in order to optimize another dimension (e.g. implementing necessary features before a deadline). Approaches, such as code smell detection, have been developed to identify particular kinds of debt, e.g. design debt. What has not yet been understood is the impact design debt has on the quality of a software product. Answering this question is important for understanding how growing debt affects a software product and how it slows down development, e.g. though introducing rework such as fixing bugs. In this case study we investigate how design debt, in the form of god classes, affects the maintainability and correctness of software products by studying two sample applications of a small-size software development company. The results show that god classes are changed more often and contain more defects than non-god classes. This result complements findings of earlier research and suggests that technical debt has a negative impact on software quality, and should therefore be identified and managed closely in the development process. god class,  technical debt,  design debt,  refactoring,  maintainability,  code smells",investigating the impact of design debt on software quality technical debt is a metaphor describing situations where developers accept sacrifices in one dimension of development e g software quality in order to optimize another dimension e g implementing necessary features before a deadline approaches such as code smell detection have been developed to identify particular kinds of debt e g design debt what has not yet been understood is the impact design debt has on the quality of a software product answering this question is important for understanding how growing debt affects a software product and how it slows down development e g though introducing rework such as fixing bugs in this case study we investigate how design debt in the form of god classes affects the maintainability and correctness of software products by studying two sample applications of a small size software development company the results show that god classes are changed more often and contain more defects than non god classes this result complements findings of earlier research and suggests that technical debt has a negative impact on software quality and should therefore be identified and managed closely in the development process god class technical debt design debt refactoring maintainability code smells,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
747,1,"Exploring the impact of inter-smell relations on software maintainability: An empirical study Code smells are indicators of issues with source code quality that may hinder evolution. While previous studies mainly focused on the effects of individual code smells on maintainability, we conjecture that not only the individual code smells but also the interactions between code smells affect maintenance. We empirically investigate the interactions amongst 12 code smells and analyze how those interactions relate to maintenance problems. Professional developers were hired for a period of four weeks to implement change requests on four medium-sized Java systems with known smells. On a daily basis, we recorded what specific problems they faced and which artifacts were associated with them. Code smells were automatically detected in the pre- maintenance versions of the systems and analyzed using Principal Component Analysis (PCA) to identify patterns of co-located code smells. Analysis of these factors with the observed maintenance problems revealed how smells that were co-located in the same artifact interacted with each other, and affected maintainability. Moreover, we found that code smell interactions occurred across coupled artifacts, with comparable negative effects as same- artifact co-location. We argue that future studies into the effects of code smells on maintainability should integrate dependency analysis in their process so that they can obtain a more complete understanding by including such coupled interactions. code smells,  bad smells,  inter-smell relations,  smell interaction,  software maintenance,  software qualit",exploring the impact of inter smell relations on software maintainability an empirical study code smells are indicators of issues with source code quality that may hinder evolution while previous studies mainly focused on the effects of individual code smells on maintainability we conjecture that not only the individual code smells but also the interactions between code smells affect maintenance we empirically investigate the interactions amongst 12 code smells and analyze how those interactions relate to maintenance problems professional developers were hired for a period of four weeks to implement change requests on four medium sized java systems with known smells on a daily basis we recorded what specific problems they faced and which artifacts were associated with them code smells were automatically detected in the pre maintenance versions of the systems and analyzed using principal component analysis pca to identify patterns of co located code smells analysis of these factors with the observed maintenance problems revealed how smells that were co located in the same artifact interacted with each other and affected maintainability moreover we found that code smell interactions occurred across coupled artifacts with comparable negative effects as same artifact co location we argue that future studies into the effects of code smells on maintainability should integrate dependency analysis in their process so that they can obtain a more complete understanding by including such coupled interactions code smells bad smells inter smell relations smell interaction software maintenance software qualit,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
748,1,"Building empirical support for automated code smell detection Identifying refactoring opportunities in software systems is an important activity in today's agile development environments. The concept of code smells has been proposed to characterize different types of design shortcomings in code. Additionally, metric-based detection algorithms claim to identify the ""smelly"" components automatically. This paper presents results for an empirical study performed in a commercial environment. The study investigates the way professional software developers detect god class code smells, then compares these results to automatic classification. The results show that, even though the subjects perceive detecting god classes as an easy task, the agreement for the classification is low. Misplaced methods are a strong driver for letting subjects identify god classes as such. Earlier proposed metric-based detection approaches performed well compared to the human classification. These results lead to the conclusion that an automated metric-based pre-selection decreases the effort spent on manual code inspections. Automatic detection accompanied by a manual review increases the overall confidence in the results of metric-based classifiers. code inspection,  empirical study,  maintainability,  code smells,  god class",building empirical support for automated code smell detection identifying refactoring opportunities in software systems is an important activity in today s agile development environments the concept of code smells has been proposed to characterize different types of design shortcomings in code additionally metric based detection algorithms claim to identify the smelly components automatically this paper presents results for an empirical study performed in a commercial environment the study investigates the way professional software developers detect god class code smells then compares these results to automatic classification the results show that even though the subjects perceive detecting god classes as an easy task the agreement for the classification is low misplaced methods are a strong driver for letting subjects identify god classes as such earlier proposed metric based detection approaches performed well compared to the human classification these results lead to the conclusion that an automated metric based pre selection decreases the effort spent on manual code inspections automatic detection accompanied by a manual review increases the overall confidence in the results of metric based classifiers code inspection empirical study maintainability code smells god class,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
749,1,"An exploratory study to investigate the impact of conceptualization in god class detection Context: The concept of code smells is widespread in Software Engineering. However, in spite of the many discussions and claims about them, there are few empirical studies to support or contest these ideas. In particular, the study of the human perception of what is a code smell and how to deal with it has been mostly neglected. Objective: To build empirical support to understand the effect of god classes, one of the most known code smells. In particular, this paper focuses on how conceptualization affects identification of god classes, i.e., how different people perceive the god class concept. Method: A controlled experiment that extends and builds upon another empirical study about how humans detect god classes [19]. Our study: i) deepens and details some of the research questions of the previous study, ii) introduces a new research question and, iii) when possible, compares the results of both studies. Result: Our findings show that participants have different personal criteria and preferences in choosing drivers to identify god classes. The agreement between participants is not high, which is in accordance with previous studies. Conclusion: This study contributes to expand the empirical data about the human perception of code smells. It also presents a new way to evaluate effort and distraction in experiments through the use of automatic logging of participant actions. controlled experiment,  code smell,  god class",an exploratory study to investigate the impact of conceptualization in god class detection context the concept of code smells is widespread in software engineering however in spite of the many discussions and claims about them there are few empirical studies to support or contest these ideas in particular the study of the human perception of what is a code smell and how to deal with it has been mostly neglected objective to build empirical support to understand the effect of god classes one of the most known code smells in particular this paper focuses on how conceptualization affects identification of god classes i e how different people perceive the god class concept method a controlled experiment that extends and builds upon another empirical study about how humans detect god classes 19 our study i deepens and details some of the research questions of the previous study ii introduces a new research question and iii when possible compares the results of both studies result our findings show that participants have different personal criteria and preferences in choosing drivers to identify god classes the agreement between participants is not high which is in accordance with previous studies conclusion this study contributes to expand the empirical data about the human perception of code smells it also presents a new way to evaluate effort and distraction in experiments through the use of automatic logging of participant actions controlled experiment code smell god class,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
750,1,"The evolution and impact of code smells: A case study of two open source systems Code smells are design flaws in object-oriented designs that may lead to maintainability issues in the further evolution of the software system. This study focuses on the evolution of code smells within a system and their impact on the change behavior (change frequency and size). The study investigates two code smells, God Class and Shotgun Surgery, by analyzing the historical data over several years of development of two large scale open source systems. The detection of code smells in the evolution of those systems was performed by the application of an automated approach using detection strategies. The results show that we can identify different phases in the evolution of code smells during the system development and that code smell infected components exhibit a different change behavior. This information is useful for the identification of risk areas within a software system that need refactoring to assure a future positive evolution. []",the evolution and impact of code smells a case study of two open source systems code smells are design flaws in object oriented designs that may lead to maintainability issues in the further evolution of the software system this study focuses on the evolution of code smells within a system and their impact on the change behavior change frequency and size the study investigates two code smells god class and shotgun surgery by analyzing the historical data over several years of development of two large scale open source systems the detection of code smells in the evolution of those systems was performed by the application of an automated approach using detection strategies the results show that we can identify different phases in the evolution of code smells during the system development and that code smell infected components exhibit a different change behavior this information is useful for the identification of risk areas within a software system that need refactoring to assure a future positive evolution,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0,0.0
